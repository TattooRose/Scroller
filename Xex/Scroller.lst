mads 2.0.7
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Scroller.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	1 page 				= 256 bytes
    14 				;	1 K	   				= 004 pages - 1024 bytes	 
    15 				;	2 K	   				= 008 pages - 2048 bytes	 
    16 				;	3 K	   				= 012 pages - 3072 bytes	 
    17 				;	4 K	   				= 016 pages - 4096 bytes	 
    18 				;
    19 				;***** Memory Map - Atari 64K
    20 				;
    21 				;	$0000-$007F			zeropage for OS
    22 				;	$0080-$00FF 		zeropage for you
    23 				;	$0100-$01FF 		CPU stack
    24 				;	$0200-$02FF 		OS vector, registers
    25 				;	$0300-$03FF 		OS vector, registers
    26 				;	$0400-$05FF 		OS buffers
    27 				;	$0600-$06FF 		Page 6, object code in BASIC
    28 				;	$0700-$1FFF 		Disk Operating System
    29 				;	$2000-$7FFF 		User Code Area 
    30 				;	$8000-$BFFF 		Cartrige A and B slots
    31 				;	$C000-$CBFF 		OS part 1
    32 				;	$CC00-$CFFF 		OS character set, international
    33 				;	$D000-$D7FF			Hardware registers
    34 				;	$D800-$DFFF			FP Routines
    35 				;	$E000-$E3FF 		OS character set, standard
    36 				;	$E000-$FFFF 		OS part 2
    37 				;
    38 				;***** Include Library Files
    39 				;
    40 						icl "/Lib/AtariEquates.Asm"				; Atari hardware DOS,OS,ANTIC,GITA,POKEY,PIA equates
Source: E:\_8BitProjects\Series\Scroller\\Lib\AtariEquates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AtariEquates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************
    14 				; OS memory and vectors
    15 				;
    16 = 0012			RTCLOK 						= $12 				; and $13, and $14.  
    17 = 0014			RTCLOK60 					= $14 				; incremented every jiffy/frame.
    18
    19 = 004D			ATRACT 						= $4D
    20 = 0200			VDSLST 						= $0200 			; Display List interrupt.
    21
    22 				;
    23 				;**************************************************
    24 				; DOS - Misc values related to DOS and file loading
    25 				;
    26 = 2000			LOMEM_DOS 					= $2000 			; First usable memory after DOS
    27 = 3308			LOMEM_DOS_DUP 				= $3308 			; First usable memory after DOS and DUP 
    28
    29 				;**************************************************	
    30 				; Atari RUN ADDRESS.  
    31 				;
    32 				; 	The binary load file has a segmented structure 
    33 				; 	specifying starting address, and ending address, 
    34 				; 	followed by the bytes to load in that memory range.  
    35 				;
    36 				; 	DOS observes two special addresses when loading data.
    37 				; 	If the contents of the INIT address changes ater loading
    38 				; 	a segment DOS calls that address immediately. If the routine
    39 				; 	returns to DOS cleanly then file loading continues.
    40 				;
    41 				; 	If the contents of the RUN address changes DOS waits until
    42 				; 	all segments from the file are loaded and then calls the RUN
    43 				; 	address target.
    44 				;
    45 = 02E0			DOS_RUN_ADDR 				= $02e0				; Execute here when file loading completes.
    46 = 02E2			DOS_INIT_ADDR 				= $02e2				; Execute here immediately then resume loading.
    47
    48 				;**************************************************	
    49 				; ANTIC - Register List
    50 				;
    51 = D400			DMACTL 						= $D400				; DMA control for display and Player/Missile graphics
    52 = D401			CHACTL 						= $D401				; Character display control
    53 = D402			DLISTL 						= $D402				; Display List Pointer (low)
    54 = D403			DLISTH 						= $D403				; Display List Pointer (high)
    55 = D404			HSCROL 						= $D404				; Horizontal Fine Scroll 0 to 16 color clocks.
    56 = D405			VSCROL 						= $D405				; Vertical Fine Scroll 0 to 16 scanlines.
    57 = D407			PMBASE 						= $D407				; Player/Missile Base Address (high) 
    58 = D409			CHBASE 						= $D409				; Character Set Base Address (high)
    59 = D40A			WSYNC 						= $D40A				; Wait for Horizontal Sync
    60 = D40B			VCOUNT 						= $D40B				; (Read) Vertical Scan Line Counter
    61 = D40C			PENH 						= $D40C				; (Read) Light Pen Horizontal Position
    62 = D40D			PENV 						= $D40D				; (Read) Light Pen Vertical Position
    63 = D40E			NMIEN 						= $D40E				; Non-Maskable Interupt (NMI) Enable
    64 = D40F			NMIRES 						= $D40F				; (Write) Non-Maskable Interrupt (NMI) Reset
    65 = D40F			NMIST 						= $D40F				; (Read)  Non-Maskable Interrupt Status                   	
    66 				                   	;
    67 				;**************************************************
    68 				; Handler vectors:
    69 				;
    70 = FFFA			NMIH_VECTOR					= $FFFA
    71 = FFFC			RESH_VECTOR					= $FFFC
    72 = FFFE			IRQH_VECTOR					= $FFFE
    73
    74 				;**************************************************	
    75 				; Shadow Registers for Hardware Registers
    76 				;
    77 = 022F			SDMCTL 						= $022F 			; DMACTL
    78 = 0230			SDLSTL 						= $0230 			; DLISTL
    79 = 0231			SDLSTH 						= $0231 			; DLISTH
    80 = 02F4			CHBAS 						= $02F4 			; CHBASE
    81 = 02F3			CHART 						= $02F3 			; CHACTL
    82 = 0234			LPENH 						= $0234 			; (Read) PENH
    83 = 0235			LPENV 						= $0235 			; (Read) PENV
    84
    85 				;**************************************************	
    86 				; Important Bit Positions
    87 				;
    88 				;**************************************************
    89 				; DMACTL and SDMCTL - DMA control for display and Player/Missile graphics
    90 				;
    91 = 00DF			MASK_DL_DMA 				= %11011111			; Enable/Disable DMA to read the Display List
    92 = 00EF			MASK_PM_RESOLUTION 			= %11101111			; Set P/M graphics DMA to 1 or 2 scan line per update  
    93 = 00F3			MASK_PM_DMA 				= %11110011			; Enable/Disable DMA for Players/Missiles
    94 = 00FC			MASK_PLAYFIELD_WIDTH 		= %11111100			; Enable playfield display/set playfield width
    95
    96 				;**************************************************	
    97 				; DMACTL and SDMCTL - Enable/Disable DMA to read the Display List
    98 				;
    99 = 0020			ENABLE_DL_DMA 				= %00100000
   100 = 0000			DISABLE_DL_DMA 				= %00000000			; defining this is overkill
   101
   102 				;**************************************************	
   103 				; DMACTL and SDMCTL - Set P/M graphics DMA to 1 or 2 scan line per update  
   104 				;
   105 = 0010			PM_1LINE_RESOLUTION 		= %00010000
   106 = 0000			PM_2LINE_RESOLUTION 		= %00000000
   107
   108 				;**************************************************	
   109 				; DMACTL and SDMCTL - Enable DMA for Players/Missiles
   110 				;
   111 = 0008			ENABLE_PLAYER_DMA 			= %00001000
   112 = 0004			ENABLE_MISSILE_DMA 			= %00000100
   113 = 000C			ENABLE_PM_DMA 				= %00001100
   114
   115 				;**************************************************	
   116 				; DMACTL and SDMCTL - Enable playfield display/set playfield width
   117 				;
   118 = 0000			PLAYFIELD_DISABLE 			= %00000000			; No width is the same as no display
   119 = 0001			PLAYFIELD_WIDTH_NARROW_MASK	= %00000001			; 32 characters/128 color clocks
   120 = 0002			PLAYFIELD_WIDTH_NORMAL_MASK	= %00000010			; 40 characters/160 color clocks
   121 = 0003			PLAYFIELD_WIDTH_WIDE_MASK	= %00000011			; 48 characters/192 color clocks (176 visible)
   122
   123 				;**************************************************	
   124 				; CHACTL - Character display control
   125 				;
   126 = 00FB			MASK_CHACTL_REFLECT 		= %11111011			; Enable/Disable vertical reflect
   127 = 00FD			MASK_CHACTL_INVERSE 		= %11111101			; Enable/Disable characters with high bit set displayed as inverse 
   128 = 00FE			MASK_CHACTL_BLANK 			= %11111110			; Enable/Disable characters with high bit set displayed as blank space
   129
   130 				;**************************************************	
   131 				; CHACTL - Enable character display options
   132 				; 
   133 = 0004			CHACTL_REFLECT 				= %00000100 		; Enable vertical reflect
   134 = 0002			CHACTL_INVERSE 				= %00000010 		; Enable inverse display for characters with high bit set
   135 = 0001			CHACTL_BLANK 				= %00000001 		; Enable blank display for characters with high bit set
   136
   137 				;**************************************************	
   138 				; NMIEN (NMIRES and NMIST) - Non-Maskable Interupt (NMI) Reset and Status
   139 				;
   140 = 007F			MASK_NMI_DLI 				= %01111111 		; Enable/Disable Display List Interrupts
   141 = 00BF			MASK_NMI_VBI 				= %10111111 		; Enable/Disable Vertical Blank Interrupt
   142 = 00DF			MASK_NMI_RESET 				= %11011111 		; Enable/Disable Reset Key Interrupt
   143
   144 				;**************************************************	
   145 				; NMIEN (NMIRES and NMIST) - Enable Non-Maskable Interupts
   146 				;
   147 = 0080			NMI_DLI 					= %10000000 		; Enable Display List Interrupts
   148 = 0040			NMI_VBI 					= %01000000 		; Enable Vertical Blank Interrupt
   149 = 0020			NMI_RESET 					= %00100000 		; Enable Reset Key Interrupt
   150
   151 				;**************************************************	
   152 				; Display List Instructions/Options Mask
   153 				;
   154 = 007F			MASK_DL_DLI 				= %01111111 		; Display List Interrupt on last scan line of graphics line
   155 = 00BF			MASK_DL_LMS 				= %10111111 		; Reload Memory Scan address for this graphics line
   156 = 00DF			MASK_DL_VSCROLL 			= %11011111 		; Vertical scrolling for this graphics line
   157 = 00EF			MASK_DL_HSCROLL 			= %11101111 		; Horizontal scrolling for this graphics line
   158 = 00F0			MASK_DL_MODE 				= %11110000 		; Text/Graphics Modes
   159
   160 				;**************************************************	
   161 				; Display List Instruction Options
   162 				;
   163 = 0080			DL_DLI 						= %10000000 		; Enable Display List Interrupt on last scan line of graphics line
   164 = 0040			DL_LMS 						= %01000000 		; Enable Reload Memory Scan address for this graphics line
   165 = 0020			DL_VSCROLL 					= %00100000 		; Enable Vertical scrolling for this graphics line
   166 = 0010			DL_HSCROLL 					= %00010000 		; Enable Horizontal scrolling for this graphics line
   167 = 000F			DL_MODE 					= %00001111 		; Collection of Text/Graphics Modes
   168
   169 				;**************************************************	
   170 				; Display List Instructions, Jump 
   171 				;
   172 = 0001			DL_JUMP 					= $01				; Display List jump to new address
   173 = 0041			DL_JUMP_VB 					= $41				; Display List jump to address and start Vertical Blank
   174 				                        	
   175 				;**************************************************	
   176 				; Display List Instructions, blank scan lines
   177 				;
   178 				; 	Note: Bit $80 is not part of this, so the
   179 				; 	DL_DLI Instruction Option is available for 
   180 				; 	the blank line instructions.
   181 				;
   182 = 0000			DL_BLANK_1 					= $00 				; 1 Blank Scan line
   183 = 0010			DL_BLANK_2 					= $10 				; 2 Blank Scan lines
   184 = 0020			DL_BLANK_3 					= $20 				; 3 Blank Scan lines
   185 = 0030			DL_BLANK_4 					= $30 				; 4 Blank Scan lines
   186 = 0040			DL_BLANK_5 					= $40 				; 5 Blank Scan lines
   187 = 0050			DL_BLANK_6 					= $50 				; 6 Blank Scan lines
   188 = 0060			DL_BLANK_7 					= $60 				; 7 Blank Scan lines
   189 = 0070			DL_BLANK_8 					= $70 				; 8 Blank Scan lines
   190
   191 				;**************************************************	
   192 				; Display List Instructions, Text Modes
   193 				;
   194 = 0002			DL_TEXT_2 					= $02 				; 1.5 Color, 40 Columns X  8 Scan lines
   195 = 0003			DL_TEXT_3 					= $03 				; 1.5 Color, 40 Columns X 10 Scan lines
   196 = 0004			DL_TEXT_4 					= $04 				; 4/5 Color, 40 Columns X  8 Scan lines
   197 = 0005			DL_TEXT_5 					= $05 				; 4/5 Color, 40 Columns X 16 Scan lines
   198 = 0006			DL_TEXT_6 					= $06 				;   5 Color, 20 Columns X  8 Scan lines
   199 = 0007			DL_TEXT_7 					= $07 				;   5 Color, 20 Columns X 16 Scan lines
   200
   201 				;**************************************************	
   202 				; Display List Instructions, Map Modes
   203 				;
   204 = 0008			DL_MAP_8 					= $08 				;   4 Color,  40 Pixels X   8 Scan Lines
   205 = 0009			DL_MAP_9 					= $09 				;   2 Color,  80 Pixels X   4 Scan Lines
   206 = 000A			DL_MAP_A 					= $0A 				;   4 Color,  80 Pixels X   4 Scan Lines
   207 = 000B			DL_MAP_B 					= $0B 				;   2 Color, 160 Pixels X   2 Scan Lines
   208 = 000C			DL_MAP_C 					= $0C 				;   2 Color, 160 Pixels X   1 Scan Lines
   209 = 000D			DL_MAP_D 					= $0D 				;   4 Color, 160 Pixels X   2 Scan Lines
   210 = 000E			DL_MAP_E 					= $0E 				;   4 Color, 160 Pixels X   1 Scan Lines
   211 = 000F			DL_MAP_F 					= $0F 				; 1.5 Color, 320 Pixels X   1 Scan Lines (and GTIA modes)
   212
   213 				;**************************************************	
   214 				; GTIA - Register List
   215 				;
   216 				;**************************************************	
   217 				; Hardware Registers
   218 				;
   219 = D000			HPOSP0 						= $D000 			; Player 0 Horizontal Position
   220 = D001			HPOSP1 						= $D001 			; Player 1 Horizontal Position
   221 = D002			HPOSP2 						= $D002 			; Player 2 Horizontal Position
   222 = D003			HPOSP3 						= $D003 			; Player 3 Horizontal Position
   223 				                        	
   224 = D004			HPOSM0 						= $D004 			; Missile 0 Horizontal Position
   225 = D005			HPOSM1 						= $D005 			; Missile 1 Horizontal Position
   226 = D006			HPOSM2 						= $D006 			; Missile 2 Horizontal Position
   227 = D007			HPOSM3 						= $D007 			; Missile 3 Horizontal Position
   228 				;;     						        			
   229 = D008			SIZEP0 						= $D008 			; Player 0 Size
   230 = D009			SIZEP1 						= $D009 			; Player 1 Size
   231 = D00A			SIZEP2 						= $D00A 			; Player 2 Size
   232 = D00B			SIZEP3 						= $D00B 			; Player 3 Size
   233 = D00C			SIZEM 						= $D00C 			; Missiles Sizes (2 bits per missile)
   234 				                        	
   235 = D00D			GRAFP0 						= $D00D 			; Player 0 Graphics Pattern
   236 = D00E			GRAFP1 						= $D00E 			; Player 1 Graphics Pattern
   237 = D00F			GRAFP2 						= $D00F 			; Player 2 Graphics Pattern
   238 = D010			GRAFP3 						= $D010 			; Player 3 Graphics Pattern
   239 = D011			GRAFM 						= $D011 			; Missile Graphics Pattern (2 bits per missile)
   240 				                        	
   241 = D000			M0PF 						= $D000 			; (Read) Missile 0 to Playfield collisions
   242 = D001			M1PF 						= $D001 			; (Read) Missile 1 to Playfield collisions
   243 = D002			M2PF 						= $D002 			; (Read) Missile 2 to Playfield collisions
   244 = D003			M3PF 						= $D003 			; (Read) Missile 3 to Playfield collisions
   245 				   					    	    			
   246 = D004			P0PF 						= $D004 			; (Read) Player 0 to Playfield collisions
   247 = D005			P1PF 						= $D005 			; (Read) Player 1 to Playfield collisions
   248 = D006			P2PF 						= $D006 			; (Read) Player 2 to Playfield collisions
   249 = D007			P3PF 						= $D007 			; (Read) Player 3 to Playfield collisions
   250 				   					    	    			
   251 = D008			M0PL 						= $D008 			; (Read) Missile 0 to Player collisions
   252 = D009			M1PL 						= $D009 			; (Read) Missile 1 to Player collisions
   253 = D00A			M2PL 						= $D00A 			; (Read) Missile 2 to Player collisions
   254 = D00B			M3PL 						= $D00B 			; (Read) Missile 3 to Player collisions
   255 				   					    	    			
   256 = D00C			P0PL 						= $D00C 			; (Read) Player 0 to Player collisions
   257 = D00D			P1PL 						= $D00D 			; (Read) Player 1 to Player collisions
   258 = D00E			P2PL 						= $D00E 			; (Read) Player 2 to Player collisions
   259 = D00F			P3PL 						= $D00F 			; (Read) Player 3 to Player collisions
   260 				                        	
   261 = D012			COLPM0 						= $D012 			; Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   262 = D013			COLPM1 						= $D013 			; Player/Missile 1 color, GTIA 9-color playfield color 1
   263 = D014			COLPM2 						= $D014 			; Player/Missile 2 color, GTIA 9-color playfield color 2
   264 = D015			COLPM3 						= $D015 			; Player/Missile 3 color, GTIA 9-color playfield color 3
   265 				       						        			
   266 = D016			COLPF0 						= $D016 			; Playfield 0 color
   267 = D017			COLPF1 						= $D017 			; Playfield 1 color
   268 = D018			COLPF2 						= $D018 			; Playfield 2 color
   269 = D019			COLPF3 						= $D019 			; Playfield 3 color (and fifth Player color)
   270 = D01A			COLBK 						= $D01A 			; Playfield Background color
   271 				                        	
   272 = D010			TRIG0 						= $D010 			; (Read) Joystick 0 trigger
   273 = D011			TRIG1 						= $D011 			; (Read) Joystick 1 trigger
   274 = D012			TRIG2 						= $D012 			; (Read) Joystick 2 trigger
   275 = D013			TRIG3 						= $D013 			; (Read) Joystick 3 trigger
   276 				    						        				
   277 = D014			PAL    						= $D014 			; (Read) PAL Flag
   278 = D01B			PRIOR  						= $D01B 			; Control Priority, Fifth Player and GTIA modes
   279 = D01C			VDELAY 						= $D01C 			; Player Missile Vertical Delay
   280 = D01D			GRACTL 						= $D01D 			; Graphics Control, P/M DMA and joystick trigger latches
   281 = D01E			HITCLR 						= $D01E 			; Clear Player/Missile Collisions
   282 				     						        			
   283 = D01F			CONSOL 						= $D01F 			; (Read) Start, Select, Option console keys.
   284 = D01F			CONSPK 						= $D01F 			; Console speaker.
   285
   286 				;**************************************************	
   287 				; Shadow Registers for Hardware Registers
   288 				;
   289 = 0284			STRIG0 						= $0284				; (Read) TRIG0 - Joystick 0 trigger
   290 = 0285			STRIG1 						= $0285				; (Read) TRIG1 - Joystick 1 trigger
   291 = 0286			STRIG2 						= $0286				; (Read) TRIG2 - Joystick 2 trigger
   292 = 0287			STRIG3 						= $0287				; (Read) TRIG3 - Joystick 3 trigger
   293 				                        	
   294 = 02C0			PCOLOR0 					= $02C0				; COLPM0 - Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   295 = 02C1			PCOLOR1 					= $02C1				; COLPM1 - Player/Missile 1 color, GTIA 9-color playfield color 1
   296 = 02C2			PCOLOR2 					= $02C2				; COLPM2 - Player/Missile 2 color, GTIA 9-color playfield color 2
   297 = 02C3			PCOLOR3 					= $02C3				; COLPM3 - Player/Missile 3 color, GTIA 9-color playfield color 3
   298 				                      	
   299 = 02C4			COLOR0 						= $02C4				; COLPF0 - Playfield 0 color
   300 = 02C5			COLOR1 						= $02C5				; COLPF1 - Playfield 1 color
   301 = 02C6			COLOR2 						= $02C6				; COLPF2 - Playfield 2 color
   302 = 02C7			COLOR3 						= $02C7				; COLPF3 - Playfield 3 color (and fifth Player color)
   303 = 02C8			COLOR4 						= $02C8				; COLBK  - Playfield Background color
   304 				     						        				
   305 = 026F			GPRIOR 						= $026F				; PRIOR - Control Priority, Fifth Player and GTIA modes
   306
   307 				;**************************************************	
   308 				; Important Bit Positions
   309 				;		
   310 				;	SIZEP0 - SIZEP3
   311 				;
   312 = 0003			PLAYER_SIZE_BITS 			= %00000011
   313 = 0000			PM_SIZE_NORMAL 				= %00000000 		; One color clock per Player/Missile pixel
   314 = 0001			PM_SIZE_DOUBLE 				= %00000001 		; Two color clocks per Player/Missile pixel
   315 = 0003			PM_SIZE_QUAD 				= %00000011 		; Fopur color clocks per Player/Missile pixel
   316
   317 				;**************************************************	
   318 				; SIZEM and GRAFM (and missile memory)
   319 				;
   320 = 00FC			MASK_MISSILE0_BITS 			= %11111100
   321 = 00F3			MASK_MISSILE1_BITS 			= %11110011
   322 = 00CF			MASK_MISSILE2_BITS 			= %11001111
   323 = 003F			MASK_MISSILE3_BITS 			= %00111111
   324 				                        	
   325 = 0003			MISSILE0_BITS 				= %00000011
   326 = 000C			MISSILE1_BITS 				= %00001100
   327 = 0030			MISSILE2_BITS 				= %00110000
   328 = 00C0			MISSILE3_BITS 				= %11000000
   329 = 0055			MISSILES_BITS				= %01010101
   330 				 
   331 				;**************************************************	
   332 				; Collisions MxPF, MxPL, PxPF, PxPL
   333 				;
   334 				; 	COLPMx or COLPFx where X is bits 0 through 3
   335 				;
   336 = 00FE			MASK_COLPMF0_BIT 			= %11111110 		; Player or Missile v Player or Playfield color 0
   337 = 00FD			MASK_COLPMF1_BIT 			= %11111101 		; Player or Missile v Player or Playfield color 1
   338 = 00FB			MASK_COLPMF2_BIT 			= %11111011 		; Player or Missile v Player or Playfield color 2
   339 = 00F7			MASK_COLPMF3_BIT 			= %11110111 		; Player or Missile v Player or Playfield color 3
   340 				                      	
   341 = 0001			COLPMF0_BIT 				= %00000001 		; Player or Missile v Player or Playfield color 0
   342 = 0002			COLPMF1_BIT 				= %00000010 		; Player or Missile v Player or Playfield color 1
   343 = 0004			COLPMF2_BIT 				= %00000100 		; Player or Missile v Player or Playfield color 2
   344 = 0008			COLPMF3_BIT 				= %00001000 		; Player or Missile v Player or Playfield color 3
   345
   346 				;**************************************************	
   347 				; Colors Registers
   348 				;
   349 = 00F0			COLOR_BITS 					= %11110000
   350 = 000F			LUMA_BITS 					= %00001111
   351
   352 				;**************************************************	
   353 				; PRIOR and GPRIOR - Control Priority, Fifth Player and GTIA modes
   354 				;
   355 = 00F0			MASK_PRIORITY 				= %11110000 		; Player/Missile, Playfield priority
   356 = 00EF			MASK_F.ifH_PLAYER 			= %11101111 		; Enable/Disable Fifth Player
   357 = 00DF			MASK_MULTICOLOR_PM 			= %11011111 		; Enable/Disable Player color mixing
   358 = 003F			MASK_GTIA_MODE 				= %00111111 		; Enable/Disable GTIA playfield modes
   359 				                        	           
   360 = 0001			PM_PRIORITY_1				= %00000001
   361 = 0002			PM_PRIORITY_2				= %00000010
   362 = 0004			PM_PRIORITY_3				= %00000100
   363 = 0008			PM_PRIORITY_4				= %00001000       
   364 				                 	            		
   365 = 000F			PRIORITY_BITS 				= %00001111 		; Player/Missile, Playfield priority
   366 = 0010			F.ifH_PLAYER 				= %00010000 		; Enable Fifth Player
   367 = 0020			MULTICOLOR_PM 				= %00100000 		; Enable Player color mixing
   368 				                        	            		
   369 = 0000			GTIA_MODE_DEFAULT 			= %00000000 		; Normal CTIA color interpretation
   370 = 0040			GTIA_MODE_16_SHADE 			= %01000000 		; 16 shades of background color (COLBK)
   371 = 0080			GTIA_MODE_9_COLOR 			= %10000000 		; 9 colors from registers, COLPM0 is background
   372 = 00C0			GTIA_MODE_16_COLOR 			= %11000000 		; 16 hues of brigntess of background color (COLBK)
   373
   374 				;**************************************************	
   375 				; VDELAY - Delay PM DMA to render 2 scan line Player data one scan line lower 
   376 				;
   377 = 00FE			MASK_VD_MISSILE0 			= %11111110
   378 = 00FD			MASK_VD_MISSILE1 			= %11111101
   379 = 00FB			MASK_VD_MISSILE2 			= %11111011
   380 = 00F7			MASK_VD_MISSILE3 			= %11110111
   381 = 00EF			MASK_VD_PLAYER0 			= %11101111
   382 = 00DF			MASK_VD_PLAYER1 			= %11011111
   383 = 00BF			MASK_VD_PLAYER2 			= %10111111
   384 = 007F			MASK_VD_PLAYER3 			= %01111111
   385 				                        	
   386 = 0001			VD_MISSILE0 				= %00000001
   387 = 0002			VD_MISSILE1 				= %00000010
   388 = 0004			VD_MISSILE2 				= %00000100
   389 = 0008			VD_MISSILE3 				= %00001000
   390 = 0010			VD_PLAYER0 					= %00010000
   391 = 0020			VD_PLAYER1 					= %00100000
   392 = 0040			VD_PLAYER2 					= %01000000
   393 = 0080			VD_PLAYER3 					= %10000000
   394
   395 				;**************************************************	
   396 				; GRACTL - Enable/Disable Player/Missile DMA to GRAFxx registers. And latch triggers.
   397 				;
   398 = 00FE			MASK_ENABLE_MISSILES 		= %11111110 		; Enable/Disable Missile DMA to GRAFM register
   399 = 00FD			MASK_ENABLE_PLAYERS 		= %11111101 		; Enable/Disable Player DMA to GRAFPx registers
   400 = 00FB			MASK_TRIGGER_LATCH 			= %11111011 		; Enable/Disable jostick trigger latching
   401 				                        	          		
   402 = 0001			ENABLE_MISSILES 			= %00000001 		; Enable Missile DMA to GRAFM register
   403 = 0002			ENABLE_PLAYERS 				= %00000010 		; Enable Player DMA to GRAFPx registers
   404 = 0004			TRIGGER_LATCH 				= %00000100 		; Enable joystick trigger latching
   405
   406 				;**************************************************	                                  			
   407 				; CONSOL and CONSPK - 0 is key pressed
   408 				;
   409 = 00F8			MASK_CONSOLE_KEYS 			= %11111000
   410 = 00FE			MASK_CONSOLE_START 			= %11111110 		; Start button
   411 = 00FD			MASK_CONSOLE_SELECT 		= %11111101 		; Select button
   412 = 00FB			MASK_CONSOLE_OPTION 		= %11111011 		; Option button
   413 = 00F7			MASK_CONSOLE_SPEAKER 		= %11110111 		; (Write) Keyboard speaker
   414 				                        	
   415 = 0001			CONSOLE_START 				= %00000001 		; Start button
   416 = 0002			CONSOLE_SELECT 				= %00000010 		; Select button
   417 = 0004			CONSOLE_OPTION 				= %00000100 		; Option button
   418 = 0008			CONSOLE_SPEAKER 			= %00001000 		; (Wrie) Keyboard speaker
   419
   420 				;**************************************************
   421 				; Other Value Lists 
   422 				;
   423 				; 	Sizes in horizontal color clocks and vertical scan lines
   424 				;
   425 = 0080			PLAYFIELD_WIDTH_NARROW 		= %10000000			; Color Clocks Normal Width = 128
   426 = 00A0			PLAYFIELD_WIDTH_NORMAL 		= %10100000			; Color Clocks Normal Width = 160
   427 = 00B0			PLAYFIELD_WIDTH_WIDE 		= %10110000			; Color Clocks Normal Width = 176
   428
   429 = 0040			PLAYFIELD_LEFT_EDGE_NARROW 	= %01000000 		; First/left-most color clock horizontal position
   430 = 0030			PLAYFIELD_LEFT_EDGE_NORMAL 	= %00110000
   431 = 0028			PLAYFIELD_LEFT_EDGE_WIDE 	= %00101000
   432
   433 = 00BF			PLAYFIELD_RIGHT_EDGE_NARROW = %10111111 		; Last/right-most color clock horizontal position
   434 = 00CF			PLAYFIELD_RIGHT_EDGE_NORMAL = %11001111
   435 = 00D7			PLAYFIELD_RIGHT_EDGE_WIDE 	= %11010111
   436
   437 				;**************************************************	
   438 				; PMBASE offsets to Player or Missile addresses
   439 				;
   440 = 0180			PMADR_2LINE_MISSILES 		= $180 
   441 = 0200			PMADR_2LINE_PLAYER0 		= $200
   442 = 0280			PMADR_2LINE_PLAYER1 		= $280
   443 = 0300			PMADR_2LINE_PLAYER2 		= $300
   444 = 0380			PMADR_2LINE_PLAYER3 		= $380
   445
   446 = 0300			PMADR_1LINE_MISSILES 		= $300
   447 = 0400			PMADR_1LINE_PLAYER0 		= $400
   448 = 0500			PMADR_1LINE_PLAYER1 		= $500
   449 = 0600			PMADR_1LINE_PLAYER2 		= $600
   450 = 0700			PMADR_1LINE_PLAYER3 		= $700
   451
   452 				;**************************************************	
   453 				; Vertical Alignments - screen scanlines are offsets into PMADR memory locations
   454 				;
   455 = 0004			PM_2LINE_OVERSCAN_TOP 		= $04
   456 = 0010			PM_2LINE_NORMAL_TOP 		= $10 				; For default OS 192 scan line display
   457 = 006F			PM_2LINE_NORMAL_BOTTOM 		= $6F 				; For default OS 192 scan line display
   458 = 007B			PM_2LINE_OVERSCAN_BOTTOM 	= $7B
   459
   460 = 0008			PM_1LINE_OVERSCAN_TOP 		= $08
   461 = 0020			PM_1LINE_NORMAL_TOP 		= $20 				; For default OS 192 scan line display
   462 = 00DF			PM_1LINE_NORMAL_BOTTOM 		= $DF 				; For default OS 192 scan line display
   463 = 00F7			PM_1LINE_OVERSCAN_BOTTOM 	= $F7
   464
   465 				;**************************************************	
   466 				; Helpful Colors.  (Many match C64)
   467 				;
   468 = 0000			COLOR_GREY 					= $00
   469 = 0010			COLOR_ORANGE1 				= $10
   470 = 0020			COLOR_ORANGE2 				= $20
   471 = 0030			COLOR_RED_ORANGE 			= $30
   472 = 0040			COLOR_PINK 					= $40
   473 = 0050			COLOR_PURPLE 				= $50
   474 = 0060			COLOR_PURPLE_BLUE 			= $60
   475 = 0070			COLOR_BLUE1 				= $70
   476 = 0080			COLOR_BLUE2 				= $80
   477 = 0090			COLOR_LITE_BLUE 			= $90
   478 = 00A0			COLOR_AQUA 					= $A0
   479 = 00B0			COLOR_BLUE_GREEN 			= $B0
   480 = 00C0			COLOR_GREEN 				= $C0
   481 = 00D0			COLOR_YELLOW_GREEN 			= $D0
   482 = 00E0			COLOR_ORANGE_GREEN 			= $E0
   483 = 00F0			COLOR_LITE_ORANGE 			= $F0
   484 = 0000			COLOR_BLACK 				= $00				; Some like to think of first color value as black.
   485
   486 				;**************************************************
   487 				; PIA  - Register List
   488 				;
   489 				;**************************************************
   490 				; Hardware Registers                                                                                                                                                   
   491 				;                                                                                                                                                                      
   492 = D300			PORTA 						= $D300				; Joystick ports 1 and 2, STICK0 and STICK1                                                                                                               
   493 = D301			PORTB 						= $D301				; Joystick ports 3 and 4, STICK2 and STICK3                                                                                                               
   494 = D302			PACTL 						= $D302				; Port A Control                                                                                                                                          
   495 = D303			PBCTL 						= $D303				; Port B Control                                                                                                                                          
   496
   497 				;**************************************************
   498 				; Shadow Registers for Hardware Registers                                                                                                                              
   499 				;                                                                                                                                                                      
   500 = 0278			STICK0 						= $0278                                                                                                                                                          
   501 = 0279			STICK1 						= $0279                                                                                                                                                          
   502 = 027A			STICK2 						= $027A                                                                                                                                                          
   503 = 027B			STICK3 						= $027B                                                                                                                                                          
   504 				       						                                                                                                                                                               
   505 = 027C			PTRIG0 						= $027C                                                                                                                                                          
   506 = 027D			PTRIG1 						= $027D                                                                                                                                                          
   507 = 027E			PTRIG2 						= $027E                                                                                                                                                          
   508 = 027F			PTRIG3 						= $027F                                                                                                                                                          
   509 = 0280			PTRIG4 						= $0280                                                                                                                                                          
   510 = 0281			PTRIG5 						= $0281                                                                                                                                                          
   511 = 0282			PTRIG6 						= $0282                                                                                                                                                          
   512 = 0283			PTRIG7 						= $0283                                                                                                                                                          
   513
   514 				;**************************************************
   515 				; Important Bit Positions                                                                                                                                              
   516 				;                                                                                                                                                                      
   517 = 000F			MASK_JACK_1_3 				= %00001111 		; Actually the anti-mask.  Keeps bits from first controller in pair.                                                                          
   518 = 00F0			MASK_JACK_2_4 				= %11110000 		; The inverse of mask.  Keeps bits from second controller in pair.                                                                            
   519
   520 				;**************************************************
   521 				; 	Stick's bits in the high nybble should be right shifted into a low nybble for testing.                                                                               
   522 				;  	Or just use the STICKx shadow register as that is its purpose.                                                                                                      
   523 				; 	Bits for STICKx shadow regs below:                                                                                                                                   
   524 				;
   525 = 00F7			MASK_STICK_RIGHT 			= %11110111                                                                                                                                            
   526 = 00FB			MASK_STICK_LEFT 			= %11111011                                                                                                                                            
   527 = 00FD			MASK_STICK_DOWN 			= %11111101                                                                                                                                            
   528 = 00FE			MASK_STICK_UP 				= %11111110                                                                                                                                            
   529 				                                                                                                                                                                      
   530 = 0008			STICK_RIGHT 				= %00001000                                                                                                                                                 
   531 = 0004			STICK_LEFT 					= %00000100                                                                                                                                                 
   532 = 0002			STICK_DOWN 					= %00000010                                                                                                                                                 
   533 = 0001			STICK_UP 					= %00000001                                                                                                                                                 
   534
   535 				;**************************************************                                                                                                                                                                      
   536 				; PACTL and PBCTL                                                                                                                                                      
   537 				;
   538 = 007F			MASK_PORT_SERIAL_IRQ 		= %01111111 		; (Read)                                                                                                                             
   539 = 00F7			MASK_MOTOR_CONTROL 			= %11110111 		; PACTL Peripheral motor control (cassette)                                                                                          
   540 = 00F7			MASK_COMMAND_IDENT 			= %11110111 		; PBCTL Peripheral command identification                                                                                            
   541 = 00FB			MASK_PORT_ADDRESSING 		= %11111011 		; PACTL 0 = Port direction control. 1 = Read port.                                                                                   
   542 = 00FE			MASK_SERIAL_IRQ_ENABLE 		= %11111110                                                                                                                                      
   543 				                                                                                                                                                                      
   544 = 0080			PORT_SERIAL_IRQ 			= %10000000 		; (Read)                                                                                                                                  
   545 = 0008			MOTOR_CONTROL 				= %00001000 		; PACTL                                                                                                                                   
   546 = 0008			COMMAND_IDENT 				= %00001000 		; PBCTL                                                                                                                                   
   547 = 0004			PORT_ADDRESSING 			= %00000100                                                                                                                                           
   548 = 0001			SERIAL_IRQ_ENABLE 			= %00000001                                                                                                                                           
   549 				                                                                                                                                                                      
   550
   551 				;**************************************************                                                                                                                                                                      
   552 				; PBCTL for the XL                                                                                                                                                     
   553 				;
   554 = 00FE			MASK_SELECT_OS_ROM 			= %11111110 		; Turn OS ROM on and off                                                                                                            
   555 = 00FD			MASK_SELECT_BASIC_ROM 		= %11111101 		; Turn BASIC ROM on and off                                                                                                         
   556 = 00FB			MASK_LED_1_KEYBOARD 		= %11111011 		; 1200XL LED 1, enable/disable keyboard                                                                                             
   557 = 00F7			MASK_LED_2_INTL_CHARSET 	= %11110111 		; 1200XL LED 2, enable international character set                                                                                  
   558 = 007F			MASK_SELF_TEST_ROM 			= %01111111 		; Expose Self Test at $5000                                                                                                         
   559 				                                                                                                                                                                      
   560 = 0001			SELECT_OS_ROM 				= %00000001                                                                                                                                          
   561 = 0002			SELECT_BASIC_ROM 			= %00000010                                                                                                                                          
   562 = 0004			LED_1_KEYBOARD 				= %00000100                                                                                                                                          
   563 = 0008			LED_2_INTL_CHARSET 			= %00001000                                                                                                                                          
   564 = 0080			SELF_TEST_ROM 				= %10000000                                                                                                                                          
   565 				                                                
   566 				;**************************************************
   567 				; POKEY  - Register List                             
   568 				;      
   569 				;**************************************************
   570 				; Hardware Registers
   571 				;
   572 = D200			AUDF1 						= $D200 			; Audio channel 1 Frequency
   573 = D202			AUDF2 						= $D202 			; Audio channel 2 Frequency
   574 = D204			AUDF3 						= $D204 			; Audio channel 3 Frequency
   575 = D206			AUDF4 						= $D206 			; Audio channel 4 Frequency
   576 				    						        			
   577 = D201			AUDC1 						= $D201 			; Audio channel 1 Control
   578 = D203			AUDC2 						= $D203 			; Audio channel 2 Control
   579 = D205			AUDC3 						= $D205 			; Audio channel 3 Control
   580 = D207			AUDC4 						= $D207 			; Audio channel 4 Control
   581
   582 = D208			AUDCTL 						= $D208 			; Audio Control
   583
   584 = D200			POT0 						= $D200 			; (Read) Potentiometer (paddle) 0 
   585 = D201			POT1 						= $D201 			; (Read) Potentiometer (paddle) 1 
   586 = D202			POT2 						= $D202 			; (Read) Potentiometer (paddle) 2 
   587 = D203			POT3 						= $D203 			; (Read) Potentiometer (paddle) 3 
   588 = D204			POT4 						= $D204 			; (Read) Potentiometer (paddle) 4 
   589 = D205			POT5 						= $D205 			; (Read) Potentiometer (paddle) 5 
   590 = D206			POT6 						= $D206 			; (Read) Potentiometer (paddle) 6 
   591 = D207			POT7 						= $D207 			; (Read) Potentiometer (paddle) 7 
   592
   593 = D208			ALLPOT 						= $D208 			; (Read) Read 8 line POT port state
   594 = D20B			POTGO  						= $D20B 			; Start the POT scan sequence
   595 				       						        			
   596 = D209			STIMER 						= $D209 			; Start timers
   597 = D209			KBCODE 						= $D209 			; (Read) Keyboard code
   598 = D208			RANDOM 						= $D208 			; (Read) Random number
   599 				       						        			
   600 = D20A			SKREST 						= $D20A 			; Reset Serial Status (SKSTAT)
   601 = D20D			SEROUT 						= $D20D 			; Serial port data output
   602 = D20D			SERIN  						= $D20D 			; (Read) Serial port data input
   603 = D20F			SKCTL  						= $D20F 			; Serial Port Control
   604 = D20F			SKSTAT 						= $D20F 			; (Read) Serial port status
   605 				       						        			
   606 = D20E			IRQEN  						= $D20E 			; Interrupt Request Enable
   607 = D20E			IRQST  						= $D20E 			; (Read) IRQ Status
   608
   609 				;**************************************************
   610 				; Shadow Registers for Hardware Registers
   611 				;
   612 = 0270			PADDL0 						= $0270 			; POT0
   613 = 0270			PADDL1 						= $0270 			; POT1
   614 = 0270			PADDL2 						= $0270 			; POT2
   615 = 0270			PADDL3 						= $0270 			; POT3
   616 = 0270			PADDL4 						= $0270 			; POT4
   617 = 0270			PADDL5 						= $0270 			; POT5
   618 = 0270			PADDL6 						= $0270 			; POT6
   619 = 0270			PADDL7 						= $0270 			; POT7
   620 				       						        			
   621 = 02FC			CH 	   						= $02FC 			; KBCODE       						
   622 = 0010			POKMSK 						= $10 				; IRQEN       						
   623 = 0232			SSKCTL 						= $0232 			; SKCTL
   624
   625 				;**************************************************
   626 				; Important Bit Positions
   627
   628 				;**************************************************
   629 				; AUDC 
   630 				;
   631 = 001F			MASK_AUD_NOISE  			= %00011111
   632 = 00EF			MASK_AUD_FORCE  			= %11101111
   633 = 00F0			MASK_AUD_VOLUME 			= %11110000
   634
   635 = 00E0			AUD_NOISE  					= %11100000
   636 = 0010			AUD_FORCE  					= %00010000
   637 = 000F			AUD_VOLUME 					= %00001111
   638
   639 = 0000			NOISE_5_BIT_17_BIT_POLY 	= %00000000
   640 = 0020			NOISE_5_BIT_POLY 			= %00100000
   641 = 0040			NOISE_5_BIT_4_BIT_POLY 		= %01000000
   642 = 0060			NOISE_5_BIT_POLY_2 			= %01100000 		; Duplicate of "5 bit poly"
   643 = 0080			NOISE_17_BIT_POLY 			= %10000000
   644 = 00A0			NOISE_NO_POLY_PURE 			= %10100000
   645 = 00C0			NOISE_4_BIT_POLY 			= %11000000
   646 = 00E0			NOISE_NO_POLY_PURE_2 		= %11100000 		; Duplicate of "No poly pure"
   647
   648 				;**************************************************
   649 				; AUDCTL
   650 				;
   651 = 007F			MASK_AUDCTL_POLY        	= %01111111 		; 17 or 9 bit poly
   652 = 00BF			MASK_AUDCTL_CH1_SYS     	= %10111111 		; Channel 1, 64KHz or system CPU clock (1.79Mhz NTSC)
   653 = 00DF			MASK_AUDCTL_CH3_SYS     	= %11011111 		; Channel 3, 64KHz or system CPU clock (1.79Mhz NTSC)
   654 = 00EF			MASK_AUDCTL_16_BIT_2_1  	= %11101111 		; Tie channels 2 and 1 for 16-bit resolution
   655 = 00F7			MASK_AUDCTL_16_BIT_4_3  	= %11110111 		; Tie channels 4 and 3 for 16-bit resolution
   656 = 00FB			MASK_AUDCTL_HIPASS_1_3  	= %11111011 		; High pass filter channel 1 by channel 3
   657 = 00FD			MASK_AUDCTL_HIPASS_2_4  	= %11111101 		; High pass filter channel 2 by channel 4
   658 = 00FE			MASK_AUDCTL_64_OR_15KHZ 	= %11111110 		; Use Clock 64Khz or 15Khz
   659
   660 = 0000			AUDCTL_POLY_17 				= %00000000
   661 = 0080			AUDCTL_POLY_9  				= %10000000
   662 = 0000			AUDCTL_CH1_64  				= %00000000
   663 = 0040			AUDCTL_CH1_SYS 				= %01000000
   664 = 0000			AUDCTL_CH3_64  				= %00000000
   665 = 0020			AUDCTL_CH3_SYS 				= %00100000
   666 = 0000			AUDCTL_16_BIT_2_1_OFF 		= %00000000
   667 = 0010			AUDCTL_16_BIT_2_1_ON 		= %00010000
   668 = 0000			AUDCTL_16_BIT_4_3_OFF 		= %00000000
   669 = 0008			AUDCTL_16_BIT_4_3_ON 		= %00001000
   670 = 0000			AUDCTL_HIPASS_1_3_OFF 		= %00000000
   671 = 0004			AUDCTL_HIPASS_1_3_ON 		= %00000100
   672 = 0000			AUDCTL_HIPASS_2_4_OFF 		= %00000000
   673 = 0002			AUDCTL_HIPASS_2_4_ON 		= %00000010
   674 = 0000			AUDCTL_CLOCK_64KHZ 			= %00000000
   675 = 0001			AUDCTL_CLOCK_15KHZ 			= %00000001
   676
   677 				;**************************************************
   678 				; ALLPOT
   679 				;
   680 = 007F			MASK_ALLPOT_PADDLE7 		= %01111111
   681 = 00BF			MASK_ALLPOT_PADDLE6 		= %10111111
   682 = 00DF			MASK_ALLPOT_PADDLE5 		= %11011111
   683 = 00EF			MASK_ALLPOT_PADDLE4 		= %11101111
   684 = 00F7			MASK_ALLPOT_PADDLE3 		= %11110111
   685 = 00FB			MASK_ALLPOT_PADDLE2 		= %11111011
   686 = 00FD			MASK_ALLPOT_PADDLE1 		= %11111101
   687 = 00FE			MASK_ALLPOT_PADDLE0 		= %11111110
   688
   689 = 0080			ALLPOT_PADDLE7 				= %10000000
   690 = 0040			ALLPOT_PADDLE6 				= %01000000
   691 = 0020			ALLPOT_PADDLE5 				= %00100000
   692 = 0010			ALLPOT_PADDLE4 				= %00010000
   693 = 0008			ALLPOT_PADDLE3 				= %00001000
   694 = 0004			ALLPOT_PADDLE2 				= %00000100
   695 = 0002			ALLPOT_PADDLE1 				= %00000010
   696 = 0001			ALLPOT_PADDLE0 				= %00000001
   697
   698 				;**************************************************
   699 				; SKCTL
   700 				;
   701 = 007F			MASK_SERIAL_BREAK 			= %01111111
   702 = 008F			MASK_SERIAL_MODE 			= %10001111
   703 = 00F7			MASK_SERIAL_2TONE 			= %11110111
   704 = 00FB			MASK_FAST_POT_SCAN 			= %11111011
   705 = 00FD			MASK_ENABLE_KB_SCAN 		= %11111101
   706 = 00FE			MASK_KB_DEBOUNCE 			= %11111110
   707
   708 = 0080			SERIAL_BREAK 				= %10000000 		
   709 = 0000			SERIAL_MODE0 				= %00000000 		; Input Clock External.            Output Clock External.          Bidirectional Clock Input.
   710 = 0010			SERIAL_MODE1 				= %00010000 		; Input Clock Channel 3+4 (async). Output Clock External.          Bidirectional Clock Input.
   711 = 0020			SERIAL_MODE2 				= %00100000 		; Input Clock Channel 4.           Output Clock Channel 4.         Bidirectional Clock Output Channel 4.
   712 = 0030			SERIAL_MODE3 				= %00110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   713 = 0040			SERIAL_MODE4 				= %01000000 		; Input Clock External.            Output Clock Channel 4.         Bidirectional Clock Input.
   714 = 0050			SERIAL_MODE5 				= %01010000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   715 = 0060			SERIAL_MODE6 				= %01100000 		; Input Clock Channel 4.           Output Clock Channel 2.         Bidirectional Clock Output Channel 4.
   716 = 0070			SERIAL_MODE7 				= %01110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 2.         Bidirectional Clock Input.
   717
   718 = 0008			SERIAL_2TONE 				= %00001000 		; 1 and 0 bits are audio set by timers 1 and 2
   719
   720 = 0000			FAST_POT_SCAN_OFF 			= %00000000
   721 = 0004			FAST_POT_SCAN_ON  			= %00000100
   722 = 0000			DISABLE_KB_SCAN   			= %00000000
   723 = 0002			ENABLE_KB_SCAN    			= %00000010
   724 = 0000			KB_DEBOUNCE_OFF   			= %00000000
   725 = 0001			KB_DEBOUNCE_ON    			= %00000001
   726
   727 				;**************************************************
   728 				; SKSTAT
   729 				;
   730 = 007F			MASK_SERIAL_FRAME_ERROR 	= %01111111
   731 = 00BF			MASK_SERIAL_INPUT_OVERRUN 	= %10111111
   732 = 00DF			MASK_KEYBOARD_OVERRUN 		= %11011111
   733 = 00EF			MASK_SERIAL_DATA_READY 		= %11101111
   734 = 00F7			MASK_SH.if_KEY_PRESSED 		= %11110111
   735 = 00FB			MASK_LAST_KEY_HELD 			= %11111011
   736 = 00FD			MASK_SERIAL_INPUT_BUSY 		= %11111101
   737
   738 = 0000			SERIAL_FRAME_NO_ERROR 		= %00000000
   739 = 0080			SERIAL_FRAME_ERROR 			= %10000000
   740 = 0000			SERIAL_NO_INPUT_OVERRUN 	= %00000000
   741 = 0040			SERIAL_INPUT_OVERRUN 		= %01000000
   742 = 0000			KEYBOARD_NO_OVERRUN 		= %00000000
   743 = 0020			KEYBOARD_OVERRUN 			= %00100000
   744 = 0000			SERIAL_DATA_NOT_READY 		= %00000000
   745 = 0010			SERIAL_DATA_READY 			= %00010000
   746 = 0000			SH.if_KEY_NOT_PRESSED 		= %00000000
   747 = 0008			SH.if_KEY_PRESSED 			= %00001000
   748 = 0000			LAST_KEY_NOT_HELD 			= %00000000
   749 = 0004			LAST_KEY_HELD 				= %00000100
   750 = 0000			SERIAL_INPUT_NOT_BUSY 		= %00000000
   751 = 0002			SERIAL_INPUT_BUSY 			= %00000010
   752
   753 				;**************************************************
   754 				; IRQEN and IRQST
   755 				;
   756 = 00FE			MASK_IRQ_TIMER1 			= %11111110
   757 = 00FD			MASK_IRQ_TIMER2 			= %11111101
   758 = 00FB			MASK_IRQ_TIMER4 			= %11111011
   759 = 00F7			MASK_IRQ_SERIAL_OUT_DONE 	= %11110111
   760 = 00EF			MASK_IRQ_SERIAL_OUT_READY 	= %11101111
   761 = 00DF			MASK_IRQ_SERIAL_IN_READY 	= %11011111
   762 = 00BF			MASK_IRQ_NORMAL_KEY_PRESS 	= %10111111
   763 = 007F			MASK_IRQ_BREAK_PRESSED 		= %01111111
   764
   765 = 0000			IRQ_TIMER1_OFF 				= %00000000
   766 = 0001			IRQ_TIMER1_ON 				= %00000001
   767 = 0000			IRQ_TIMER2_OFF 				= %00000000
   768 = 0002			IRQ_TIMER2_ON 				= %00000010
   769 = 0000			IRQ_TIMER4_OFF 				= %00000000
   770 = 0004			IRQ_TIMER4_ON 				= %00000100
   771 = 0000			IRQ_SERIAL_OUT_NOT_DONE 	= %00000000
   772 = 0008			IRQ_SERIAL_OUT_DONE 		= %00001000
   773 = 0000			IRQ_SERIAL_OUT_NOT_READY 	= %00000000
   774 = 0010			IRQ_SERIAL_OUT_READY 		= %00010000
   775 = 0000			IRQ_SERIAL_IN_NOT_READY 	= %00000000
   776 = 0020			IRQ_SERIAL_IN_READY 		= %00100000
   777 = 0000			IRQ_NO_KEY_PRESS 			= %00000000
   778 = 0040			IRQ_NORMAL_KEY_PRESS 		= %01000000
   779 = 0000			IRQ_BREAK_NOT_PRESSED 		= %00000000
   780 = 0080			IRQ_BREAK_PRESSED 			= %10000000
   781
   782 				;**************************************************
   783 				; Additional Registers
   784 				;
   785 = 006A			RAMTOP						= $6A
   786 = E45F			SYSVBV 						= $E45F  			; interrupt enabled vector
   787 = E45C			SETVBI 						= $E45C  			; set vertical blank interrupt vector
   788 = E462			XITVBL 						= $E462  			; exit VBI vector
   789
   790 = E45F			XITVB_I						= $e45f
   791 = 0006			VBI_I						= $06
   792 = 0007			VBI_D						= $07
   793 = C0E2			NORMAL_VBI_I				= $c0e2
   794 = C28A			NORMAL_VBI_D				= $c28a
   795 = E45C			SETVBV						= $e45c
   796 = 0222			VVBLKI						= $0222
   797 = 0224			VVBLKD						= $0224
   798 = E462			XITVB						= XITVBL
    41 						icl "/Lib/SysMacros.Asm"				; General purpose macros used by system
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysMacros.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;
    15 				;**************************************************************************************************
    16 				; SaveAXY
    17 				;**************************************************************************************************
    18 				;
    19 				.macro SaveAXY
    20 					pha
    21 					txa
    22 					pha
    23 					tya
    24 					pha
    25 				.endm
    26
    27 				;
    28 				;**************************************************************************************************
    29 				; RestoreRTS
    30 				;**************************************************************************************************
    31 				;
    32 				.macro RestoreRTS
    33 					pla
    34 					tay
    35 					pla
    36 					tax
    37 					pla
    38 					rts
    39 				.endm
    40
    41 				;
    42 				;**************************************************************************************************
    43 				; RestoreRTS
    44 				;**************************************************************************************************
    45 				;
    46 				.macro RestoreRTI
    47 					pla
    48 					tay
    49 					pla
    50 					tax
    51 					pla
    52 					rti
    53 				.endm
    54
    55 				;
    56 				;**************************************************************************************************
    57 				; SetRamTop [pages]
    58 				;**************************************************************************************************
    59 				;
    60 				.macro SetRamTop
    61 					.if :0 <> 1
    62 						.error "SetRamTop error"
    63 				   .else
    64 				   		lda RAMTOP
    65 						sec
    66 						sbc :1
    67 						sta RAMTOP
    68 					.endif
    69 				.endm
    70
    71 				;
    72 				;**************************************************************************************************
    73 				; SetVector [address] [word]
    74 				;**************************************************************************************************
    75 				;
    76 				.macro SetVector
    77 					.if :0 <> 2
    78 						.error "SetVector error"
    79 				   .else
    80 				      	lda #<:2
    81 					    sta :1
    82 					    lda #>:2
    83 					    sta :1+1
    84 					.endif
    85 				.endm
    86
    87 				;
    88 				;**************************************************************************************************
    89 				; SetColor [0..4] [0..255]
    90 				; SetColor [0..4] [0..15] [0..15]
    91 				;**************************************************************************************************
    92 				;
    93 				.macro SetColor
    94 					.if :0 < 2 .or :0 > 3
    95 						.error "SetColor error"
    96 				   	.else
    97 						.if :0 = 2
    98 					    	lda #:2
    99 					        sta COLPF0+:1
   100 						.else
   101 							lda #[:2 * 16 + :3]
   102 							sta COLPF0+:1
   103 						.endif
   104 					.endif
   105 				.endm
   106
   107 				;
   108 				;**************************************************************************************************
   109 				; SetBKColor [0..15] [0..15]
   110 				;**************************************************************************************************
   111 				;
   112 				.macro SetBKColor
   113 					.if :0 < 1 .or :0 > 2
   114 						.error "SetBKColor error"
   115 				   	.else
   116 						.if :0 = 1
   117 					    	lda #:1
   118 					        sta COLBK
   119 						.else
   120 							lda #[:1 * 16 + :2]
   121 					        sta COLBK
   122 						.endif
   123 					.endif
   124 				.endm
   125
   126 				;
   127 				;**************************************************************************************************
   128 				; SetPMColor [0..3] [0..255]
   129 				; SetPMColor [0..3] [0..15] [0..15]
   130 				;**************************************************************************************************
   131 				;
   132 				.macro SetPMColor
   133 					.if :0 < 2 .or :0 > 3
   134 						.error "SetPMColor error"
   135 					.else
   136 						.if :0 = 2
   137 							lda #:2
   138 							sta COLPM0+:1
   139 						.else
   140 							lda #[:2 * 16 + :3]
   141 							sta COLPM0+:1
   142 						.endif
   143 					.endif
   144 				.endm
   145
   146 				;
   147 				;**************************************************************************************************
   148 				; VcountSync [0..130]
   149 				; (maximum limit is different on PAL: 155)
   150 				; (could wait forever if there are interrupts activated!)
   151 				; (or if some other "thread" uses "wsync")
   152 				;**************************************************************************************************
   153 				;
   154 				.macro VcountSync
   155 					.if :0 <> 1
   156 						.error "VcountSync error"
   157 				   	.else
   158 						sta WSYNC
   159 				      	lda #:1
   160 				VSync1	cmp VCOUNT
   161 					    bne VSync1
   162 						lda #:1+1
   163 				VSync2	cmp VCOUNT
   164 					    bne VSync2
   165 				      	sta WSYNC
   166 					.endif
   167 				.endm
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; VcountWait [0..130]
   172 				; (maximum limit is different on PAL: 155)
   173 				;**************************************************************************************************
   174 				;
   175 				.macro VcountWait
   176 					.if :0 <> 1
   177 						.error "VcountWait error"
   178 				   	.else
   179 						lda #:1
   180 				VWait1	cmp VCOUNT
   181 					    bne VWait1
   182 					.endif
   183 				.endm
   184
   185 				;
   186 				;**************************************************************************************************
   187 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   188 				; (maximum limit is different on PAL: 155)
   189 				;**************************************************************************************************
   190 				;
   191 				.macro VcountWaitUntilEnter
   192 					.if :0 <> 2 .or :1 >= :2
   193 						.error "VcountWaitUntilEnter error"
   194 					.else
   195 				VWait1	lda VCOUNT
   196 						cmp #:1
   197 						beq VExit
   198 					    bcc VWait1								; VCOUNT < :1
   199 						cmp #:2
   200 						beq VExit
   201 					    bcs VWait1								; VCOUNT >= :2
   202 				VExit
   203 					.endif
   204 				.endm
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   209 				; (maximum limit is different on PAL: 155)
   210 				;**************************************************************************************************
   211 				;
   212 				.macro VcountWaitUntilExit
   213 					.if :0 <> 2 .or :1 >= :2
   214 						.error "VcountWaitUntilExit error"
   215 					.else
   216 				VWait1	lda VCOUNT
   217 						cmp #:1
   218 						beq VWait1
   219 					    bcc VExit								; VCOUNT < :1
   220 						cmp #:2
   221 					    bcc VWait1								; VCOUNT < :2
   222 						beq VWait1
   223 				VExit
   224 					.endif
   225 				.endm
   226
   227 				;
   228 				;**************************************************************************************************
   229 				; MarkScanLine [0..255] [0..255]
   230 				; (mark the current scan line with a color)
   231 				;**************************************************************************************************
   232 				;
   233 				.macro MarkScanLine
   234 					.if :0 <> 0 .and :0 <> 2
   235 						.error "MarkScanLine error"
   236 					.else
   237 						.if :0 = 0
   238 							sta WSYNC
   239 				  	     	lda #255							; mark color
   240 					  	    sta COLBK
   241 							sta WSYNC
   242 				  	     	lda #0								; restore color
   243 					  	    sta COLBK
   244 						.else
   245 							sta WSYNC
   246 						    lda #:1								; mark color
   247 						    sta COLBK
   248 							sta WSYNC
   249 							lda #:2								; restore color
   250 							sta COLBK
   251 						.endif
   252 					.endif
   253 				.endm
   254
   255 				;
   256 				;**************************************************************************************************
   257 				; MarkScanLineIfConsol [0..255] [0..255]
   258 				; (mark the current scan line with a color, if a consol key is pressed)
   259 				;**************************************************************************************************
   260 				;
   261 				.macro MarkScanLineIfConsol
   262 					.if :0 <> 0 .and :0 <> 2
   263 						.error "MarkScanLineIfConsol error"
   264 					.else
   265 						.if :0 = 0
   266 							lda CONSOL
   267 							and #%111
   268 					     	cmp #%111
   269 						    beq ExitMarkScanLineIfConsol
   270 							sta WSYNC
   271 						    lda #255							; mark color
   272 						    sta COLBK
   273 						    sta WSYNC
   274 						    lda #0								; restore color
   275 					     	sta COLBK
   276 						.else
   277 							lda CONSOL
   278 						    and #%111
   279 					     	cmp #%111
   280 						    beq ExitMarkScanLineIfConsol
   281 							sta WSYNC
   282 					     	lda #:1								; mark color
   283 						    sta COLBK
   284 					      	sta WSYNC
   285 					     	lda #:2								; restore color
   286 						    sta COLBK
   287 						.endif
   288 					.endif
   289 				
   290 				ExitMarkScanLineIfConsol
   291 				.endm
   292
   293 				;
   294 				;**************************************************************************************************
   295 				; MarkCyclesIfConsol [0..255] [0..255]
   296 				; (mark the current scan position with a color, for some cycles)
   297 				;**************************************************************************************************
   298 				;
   299 				.macro MarkCyclesIfConsol
   300 					.if :0 = 0
   301 						lda CONSOL
   302 						and #%111
   303 						cmp #%111
   304 						beq ExitMarkCyclesIfConsol
   305 				
   306 						lda #255								; mark color
   307 						sta COLBK
   308 				
   309 						lda ($00),y								; dummy 5 cycles
   310 						lda ($00),y								; dummy 5 cycles
   311 					    lda ($00),y								; dummy 5 cycles
   312 					    lda ($00),y								; dummy 5 cycles
   313 					    lda ($00),y								; dummy 5 cycles
   314 					    lda ($00),y								; dummy 5 cycles
   315 						lda #0									; restore color
   316 					    sta COLBK
   317 					.elseif :0 = 2
   318 						lda CONSOL
   319 						and #%111
   320 						cmp #%111
   321 						beq ExitMarkCyclesIfConsol
   322 				
   323 						lda #:1									; mark color
   324 						sta COLBK
   325 				
   326 						lda ($00),y								; dummy 5 cycles
   327 					    lda ($00),y								; dummy 5 cycles
   328 					    lda ($00),y								; dummy 5 cycles
   329 					    lda ($00),y								; dummy 5 cycles
   330 					    lda ($00),y								; dummy 5 cycles
   331 					    lda ($00),y								; dummy 5 cycles
   332 				
   333 					    lda #:2									; restore color
   334 					    sta COLBK
   335 					.else
   336 						.error "MarkCyclesIfConsol error"
   337 					.endif
   338 				
   339 				ExitMarkCyclesIfConsol
   340 				.endm
   341
   342 				;
   343 				;**************************************************************************************************
   344 				; SetBasic [0,1]
   345 				;**************************************************************************************************
   346 				;
   347 				.macro SetBasic
   348 					.if :0 <> 1
   349 						.error "SetBasic error"
   350 					.else
   351 						.if :1 = 0
   352 							lda PORTB							; deactivate Basic
   353 					        ora #%00000010
   354 					        sta PORTB
   355 						.else
   356 							lda PORTB							; activate Basic
   357 							and #%11111101
   358 							sta PORTB
   359 						.endif
   360 					.endif
   361 				.endm
   362
   363 				;
   364 				;**************************************************************************************************
   365 				; SetOperatingSystem [0,1]
   366 				;**************************************************************************************************
   367 				;
   368 				.macro SetOperatingSystem
   369 					.if :0 <> 1
   370 						.error "SetOperatingSystem error"
   371 					.else
   372 						.if :1 = 0
   373 							lda PORTB							; deactivate Operative System
   374 							and #%11111110
   375 							sta PORTB
   376 						.else
   377 							lda PORTB							; activate Operative System
   378 							ora #%00000001
   379 							sta PORTB
   380 						.endif
   381 					.endif
   382 				.endm
   383
   384 				;
   385 				;**************************************************************************************************
   386 				; EnableBasic
   387 				;**************************************************************************************************
   388 				;
   389 				.macro EnableBasic
   390 					.if :0 <> 0
   391 						.error "EnableBasic error"
   392 					.else
   393 						SetBasic 1
   394 					.endif
   395 				.endm
   396
   397 				;
   398 				;**************************************************************************************************
   399 				; DisableBasic
   400 				;**************************************************************************************************
   401 				;
   402 				.macro DisableBasic
   403 					.if :0 <> 0
   404 						.error "DisableBasic error"
   405 					.else
   406 						SetBasic 0
   407 					.endif
   408 				.endm
   409
   410 				;
   411 				;**************************************************************************************************
   412 				; EnableOperatingSystem
   413 				;**************************************************************************************************
   414 				;
   415 				.macro EnableOperatingSystem
   416 					.if :0 <> 0
   417 						.error "EnableOperatingSystem error"
   418 					.else
   419 						SetOperatingSystem 1
   420 					.endif
   421 				.endm
   422
   423 				;
   424 				;**************************************************************************************************
   425 				; DisableOperatingSystem
   426 				;**************************************************************************************************
   427 				;
   428 				.macro DisableOperatingSystem
   429 					.if :0 <> 0
   430 						.error "DisableOperatingSystem error"
   431 					.else
   432 						SetOperatingSystem 0
   433 					.endif
   434 				.endm
   435
   436 				;
   437 				;**************************************************************************************************
   438 				; EnableNormalInterrupts
   439 				;**************************************************************************************************
   440 				;
   441 				.macro EnableNormalInterrupts
   442 					.if :0 <> 0
   443 						.error "EnableNormalInterrupts error"
   444 					.else
   445 						cli
   446 						lda #$40								; VBI interrupt
   447 						sta NMIEN
   448 					.endif
   449 				.endm
   450
   451 				;
   452 				;**************************************************************************************************
   453 				; DisableNormalInterrupts
   454 				;**************************************************************************************************
   455 				;
   456 				.macro DisableNormalInterrupts
   457 					.if :0 <> 0
   458 						.error "DisableNormalInterrupts error"
   459 					.else
   460 						sei
   461 						lda #0
   462 						sta IRQEN
   463 						sta NMIEN
   464 					.endif
   465 				.endm
   466
   467 				;
   468 				;**************************************************************************************************
   469 				; ClearSystem
   470 				;**************************************************************************************************
   471 				;
   472 				.macro ClearSystem
   473 					.if :0 <> 0
   474 						.error "ClearSystem error"
   475 					.else
   476 						
   477 						clc
   478 					    cld
   479 						sei
   480 				
   481 					    lda #0									; clear interrupts and screen
   482 					    sta IRQEN	
   483 					    sta NMIEN
   484 					    sta DMACTL
   485 					    sta COLBK
   486 				      	sta GRACTL								; clear P/M
   487 						sta GRAFP0
   488 						sta GRAFP1
   489 						sta GRAFP2
   490 						sta GRAFP3
   491 						sta GRAFM
   492 				
   493 						sta HPOSP0
   494 					    sta HPOSP1
   495 					    sta HPOSP2
   496 					    sta HPOSP3
   497 					    sta HPOSM0
   498 					    sta HPOSM1
   499 					    sta HPOSM2
   500 					    sta HPOSM3
   501 				
   502 					    sta PRIOR								; clear GTIA also
   503 				
   504 					    sta AUDCTL								; clear sound
   505 						sta AUDC1
   506 					    sta AUDC2
   507 					    sta AUDC3
   508 					    sta AUDC4
   509 				
   510 					    lda #3
   511 					    sta SKCTL
   512 					    
   513 					.endif
   514 				.endm
   515
   516 				;
   517 				;**************************************************************************************************
   518 				; SetDisplayListAddress [word]
   519 				; (use when the screen is not being displayed!)
   520 				; (remember to not cross the 1K limit..)
   521 				;**************************************************************************************************
   522 				;
   523 				.macro SetDisplayListAddress
   524 					.if :0 <> 1
   525 						.error "SetDisplayListAddress error"
   526 					.else
   527 						SetVector DLISTL, :1
   528 					.endif
   529 				.endm
   530
   531 				;
   532 				;**************************************************************************************************
   533 				; SetDisplayListInterrupt
   534 				;**************************************************************************************************
   535 				;
   536 				.macro SetDisplayListInterrupt
   537 					.if :0 <> 1
   538 						.error "SetDisplayListInterrupt error"
   539 					.else
   540 						SetVector NMIH_VECTOR, :1
   541 					.endif
   542 				.endm
   543
   544 				;
   545 				;**************************************************************************************************
   546 				; SetFontAddress [word]
   547 				; (remember that this transform to a page a number)
   548 				;**************************************************************************************************
   549 				;
   550 				.macro SetFontAddress
   551 					.if :0 <> 1
   552 						.error "SetFontAddress error"
   553 					.else
   554 						lda #>:1
   555 					    sta CHBASE
   556 					.endif
   557 				.endm
   558
   559 				;
   560 				;**************************************************************************************************
   561 				; SetPMBaseAddress [word]
   562 				; (remember that this transform to a page a number)
   563 				;**************************************************************************************************
   564 				;
   565 				.macro SetPMBaseAddress
   566 				   .if :0 <> 1
   567 				      .error "SetPMBaseAddress error"
   568 				   .else
   569 				      lda #>:1
   570 				      sta PMBASE
   571 				   .endif
   572 				.endm
   573
   574 				;
   575 				;**************************************************************************************************
   576 				; NullZeroPage [zeroPageAddress] [size]
   577 				;**************************************************************************************************
   578 				;
   579 				.macro NullZeroPage
   580 				zpage = $FE
   581 					.if :0 <> 2
   582 						.error "NullZeroPage error"
   583 					.else
   584 						lda #<:1
   585 						sta zpage
   586 						
   587 						ldy :2
   588 						lda #$00
   589 				loop
   590 						sta (zpage),y
   591 						dey
   592 						bne loop		
   593 					.endif	
   594 				.endm
   595
   596 				;
   597 				;**************************************************************************************************
   598 				; SetMemory [address] [bytes] [value]
   599 				;**************************************************************************************************
   600 				;
   601 				.macro SetMemory
   602 				
   603 				; warning, using some page zero memory
   604 				setMemPtr		= $FE
   605 				setMemCounter	= $FC
   606 				
   607 					.if :0 <> 3
   608 						.error "SetMemory error"
   609 					.else
   610 						ldy #0
   611 						lda #<:1
   612 						sta setMemPtr
   613 						lda #>:1
   614 						sta setMemPtr+1
   615 				
   616 						.if :2 < $0100
   617 							lda #:3
   618 				
   619 				setMemLoop1
   620 							sta (setMemPtr),y
   621 							iny
   622 					        cpy #:2
   623 					        bne setMemLoop1
   624 				
   625 						.else
   626 							lda #<:2
   627 							sta setMemCounter
   628 							lda #>:2
   629 							sta setMemCounter+1
   630 				
   631 				setMemLoop2
   632 							lda #:3
   633 							sta (setMemPtr),y
   634 							iny
   635 							bne setMemB1
   636 							inc setMemPtr+1
   637 				
   638 				setMemB1
   639 							lda setMemCounter
   640 							bne setMemB2
   641 							dec setMemCounter+1
   642 				
   643 				setMemB2
   644 							dec setMemCounter
   645 							lda setMemCounter
   646 							ora setMemCounter+1
   647 							bne setMemLoop2
   648 						.endif
   649 					.endif
   650 				.endm
   651
   652 				;
   653 				;**************************************************************************************************
   654 				; SetMemoryRandom [address] [bytes]
   655 				;**************************************************************************************************
   656 				;
   657 				.macro SetMemoryRandom
   658 				
   659 				; warning, using some page zero memory
   660 				setMemRPtr		= $FE
   661 				setMemRCounter	= $FC
   662 				
   663 				   .if :0 <> 2
   664 				      .error "SetMemoryRandom error"
   665 				   .else
   666 				      ldy #0
   667 				      lda #<:1
   668 				      sta setMemRPtr
   669 				      lda #>:1
   670 				      sta setMemRPtr+1
   671 						
   672 						.if :2 < $0100
   673 				
   674 				setMemRLoop1
   675 				         	lda RANDOM
   676 				         	sta (setMemRPtr),y
   677 				         	iny
   678 				         	cpy #:2
   679 				         	bne setMemRLoop1
   680 						.else
   681 				        	lda #<:2
   682 				         	sta setMemRCounter
   683 				         	lda #>:2
   684 				         	sta setMemRCounter+1
   685 				
   686 				setMemRLoop2
   687 				         	lda RANDOM
   688 				         	sta (setMemRPtr),y
   689 				         	iny
   690 				         	bne setMemRB1
   691 				         	inc setMemRPtr+1
   692 				
   693 				setMemRB1
   694 				         	lda setMemRCounter
   695 				         	bne setMemRB2
   696 				         	dec setMemRCounter+1
   697 				
   698 				setMemRB2
   699 				         	dec setMemRCounter
   700 				         	lda setMemRCounter
   701 				         	ora setMemRCounter+1
   702 				         	bne setMemRLoop2
   703 					
   704 						.endif
   705 					.endif
   706 				.endm
   707
   708 				;
   709 				;**************************************************************************************************
   710 				; ClampMemory [address] [bytes] [min value] [max value]
   711 				;**************************************************************************************************
   712 				;
   713 				.macro ClampMemory
   714 				
   715 				; warning, using some page zero memory
   716 				clampMemPtr		= $FE
   717 				clampMemCounter	= $FC
   718 				
   719 					.if :0 <> 4
   720 						.error "ClampMemory error"
   721 					.else
   722 						ldy #0
   723 						lda #<:1
   724 						sta clampMemPtr
   725 						lda #>:1
   726 						sta clampMemPtr+1
   727 				
   728 						.if :2 < $0100
   729 				
   730 				clampMemLoop1
   731 							lda (clampMemPtr),y
   732 					        cmp #:3
   733 					        bcs clampMemB3		; if >= min then continue
   734 					        lda #:3
   735 					        jmp clampMemB4
   736 				
   737 				clampMemB3
   738 					        cmp #:4
   739 					        bcc clampMemB4		; if < max then continue
   740 					        lda #:4
   741 				
   742 				clampMemB4
   743 					        sta (clampMemPtr),y
   744 							iny
   745 					        cpy #:2
   746 					        bne clampMemLoop1
   747 				
   748 						.else
   749 					    
   750 					    	lda #<:2
   751 					        sta clampMemCounter
   752 					        lda #>:2
   753 					        sta clampMemCounter+1
   754 				
   755 				clampMemLoop2
   756 					        lda (clampMemPtr),y
   757 					        cmp #:3
   758 					        bcs clampMemB5		; if >= min then continue
   759 					        lda #:3
   760 					        jmp clampMemB6
   761 				
   762 				clampMemB5
   763 					        cmp #:4
   764 					        bcc clampMemB6		; if < max then continue
   765 					        lda #:4
   766 				
   767 				clampMemB6
   768 					        sta (clampMemPtr),y
   769 					        iny
   770 					        bne clampMemB1
   771 					        inc clampMemPtr+1
   772 				
   773 				clampMemB1
   774 					        lda clampMemCounter
   775 					        bne clampMemB2
   776 					        dec clampMemCounter+1
   777 				
   778 				clampMemB2
   779 					        dec clampMemCounter
   780 				         	lda clampMemCounter
   781 					        ora clampMemCounter+1
   782 					        bne clampMemLoop2
   783 						.endif
   784 					.endif
   785 				.endm
   786
   787 				;
   788 				;**************************************************************************************************
   789 				; AndMemory [address] [bytes] [value]
   790 				;**************************************************************************************************
   791 				.macro AndMemory
   792 				
   793 				; warning, using some page zero memory
   794 				andMemPtr		= $FE
   795 				andMemCounter	= $FC
   796 				
   797 					.if :0 <> 3
   798 						.error "AndMemory error"
   799 				   .else
   800 				      	ldy #0
   801 					    lda #<:1
   802 					    sta andMemPtr
   803 					    lda #>:1
   804 					    sta andMemPtr+1
   805 				
   806 					    .if :2 < 256
   807 				andMemLoop1
   808 					    
   809 					    	lda (andMemPtr),y
   810 					        and #:3
   811 					        sta (andMemPtr),y
   812 					        iny
   813 					        cpy #:2
   814 					        bne andMemLoop1
   815 				
   816 					     .else
   817 					     
   818 					        lda #<:2
   819 					        sta andMemCounter
   820 					        lda #>:2
   821 					        sta andMemCounter+1
   822 				
   823 				andMemLoop2
   824 					        lda (andMemPtr),y
   825 					        and #:3
   826 					        sta (andMemPtr),y
   827 					        iny
   828 					        bne andMemB1
   829 					        inc andMemPtr+1
   830 				andMemB1
   831 					        lda andMemCounter
   832 					        bne andMemB2
   833 					        dec andMemCounter+1
   834 				
   835 				andMemB2
   836 							dec andMemCounter
   837 					        lda andMemCounter
   838 					        ora andMemCounter+1
   839 					        bne andMemLoop2
   840 					  	.endif
   841 					.endif
   842 				.endm
   843
   844 				;
   845 				;**************************************************************************************************
   846 				; CopyMemory [source address] [dest address] [bytes]
   847 				;**************************************************************************************************
   848 				;
   849 				.macro CopyMemory
   850 				
   851 				; warning, using some page zero memory
   852 				copyMemPtr1		= $FE
   853 				copyMemPtr2		= $FC
   854 				copyMemCounter	= $FA
   855 				
   856 				   .if :0 <> 3
   857 						.error "CopyMemory error"
   858 				   .else
   859 					    ldy #0
   860 					    lda #<:1
   861 					    sta copyMemPtr1
   862 					    lda #>:1
   863 					    sta copyMemPtr1+1
   864 				
   865 					    lda #<:2
   866 					    sta copyMemPtr2
   867 					    lda #>:2
   868 					    sta copyMemPtr2+1
   869 					
   870 						.if :3 < $0100
   871 				
   872 				copyMemLoop1
   873 					      	lda (copyMemPtr1),y
   874 					       	sta (copyMemPtr2),y
   875 					       	iny
   876 					       	cpy #:3
   877 					       	bne copyMemLoop1
   878 				
   879 					   	.else
   880 					      	
   881 					       	lda #<:3
   882 					       	sta copyMemCounter
   883 					       	lda #>:3
   884 					       	sta copyMemCounter+1
   885 				
   886 				copyMemLoop2
   887 				        	lda (copyMemPtr1),y
   888 				        	sta (copyMemPtr2),y
   889 				        	iny
   890 				        	bne copyMemB1
   891 				        	inc copyMemPtr1+1
   892 				        	inc copyMemPtr2+1
   893 				copyMemB1
   894 				         	lda copyMemCounter
   895 				         	bne copyMemB2
   896 				         	dec copyMemCounter+1
   897 				
   898 				copyMemB2
   899 				         	dec copyMemCounter
   900 				         	lda copyMemCounter
   901 				         	ora copyMemCounter+1
   902 				         	bne copyMemLoop2
   903 				
   904 				     	.endif
   905 					.endif
   906 				.endm
    42 					
    43 				;***** Include Variable Files
    44 				;
    45 						icl "ZeroPage.Asm"
Source: E:\_8BitProjects\Series\Scroller\ZeroPage.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ZeroPage.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;	
    13 				;**************************************************************************************************
    14 				; Zero Page Variables definitions
    15 				;**************************************************************************************************
    16 				;
    17 					org ZeroPageAddress
    18
    19 				p_tis						
    20 				p_instrstable				org *+2
    21 				p_trackslbstable			org *+2
    22 				p_trackshbstable			org *+2
    23 				p_song						org *+2
    24 				ns							org *+2
    25 				nr							org *+2
    26 				nt							org *+2
    27 				reg1						org *+1
    28 				reg2						org *+1
    29 				reg3						org *+1
    30 				tmp							org *+1
    31
    32 				m_param00					org *+$01
    33 				m_param01					org *+$01
    34 				m_param02					org *+$01
    35 				m_param03					org *+$01
    36
    37 				m_saveRegA					org *+$01
    38 				m_saveRegX					org *+$01
    39 				m_saveRegY					org *+$01
    40
    41 				m_sfxEffect					org *+$01
    42
    43 				m_animMiscWidth				org *+$01
    44 				m_animMiscHeight			org *+$01
    45
    46 				m_redrawPlayerCounter		org *+$01
    47
    48 				m_missleBaseColor0			org *+$01
    49 				m_playerBaseColor00			org *+$01
    50 				m_playerBaseColor1A			org *+$01
    51 				m_playerBaseColor1B			org *+$01
    52
    53 				m_playerLevelLeftX_H2		org *+$01			; left side coordinate
    54 				m_playerLevelLeftX_H1		org *+$01
    55 				m_playerLevelLeftX_L1		org *+$01
    56
    57 				m_playerLevelRightX_H2		org *+$01			; right side coordinate
    58 				m_playerLevelRightX_H1		org *+$01
    59 				m_playerLevelRightX_L1		org *+$01
    60
    61 				m_playerLevelTopY_H2		org *+$01			; top line coordinate
    62 				m_playerLevelTopY_H1		org *+$01
    63 				m_playerLevelTopY_L1		org *+$01
    64
    65 				m_playerLevelBottomY_H2		org *+$01			; bottom line coordinate
    66 				m_playerLevelBottomY_H1		org *+$01
    67 				m_playerLevelBottomY_L1		org *+$01
    68
    69 				m_playerScreenLeftX			org *+$01
    70 				m_playerScreenTopY			org *+$01
    71
    72 				m_oldPlayerScreenLeftX		org *+$01
    73 				m_oldPlayerScreenTopY		org *+$01
    74
    75 				m_playerSizeX				org *+$01
    76 				m_playerSizeY				org *+$01
    77
    78 				m_playerSizeXMinusOne		org *+$01
    79 				m_playerSizeYMinusOne		org *+$01
    80
    81 				m_playerSideSpeed_H1		org *+$01
    82 				m_playerSideSpeed_L1		org *+$01
    83
    84 				m_playerMaxSideSpeed_H1		org *+$01
    85 				m_playerMaxSideSpeed_L1		org *+$01
    86
    87 				m_playerSideAccel_H1		org *+$01
    88 				m_playerSideAccel_L1		org *+$01
    89
    90 				m_playerSideDeaccel_H1		org *+$01
    91 				m_playerSideDeaccel_L1		org *+$01
    92
    93 				m_playerSpeedY_H1			org *+$01
    94 				m_playerSpeedY_L1			org *+$01
    95
    96 				m_playerJumpSpeed_H1		org *+$01
    97 				m_playerJumpSpeed_L1		org *+$01
    98
    99 				m_playerMaxFallSpeed_H1		org *+$01
   100 				m_playerMaxFallSpeed_L1		org *+$01
   101
   102 				m_playerGravityAccel_H1		org *+$01
   103 				m_playerGravityAccel_L1		org *+$01
   104
   105 				m_playerWaterAccelY_H1		org *+$01
   106 				m_playerWaterAccelY_L1		org *+$01
   107
   108 				m_playerMaxWaterSpeedY_H1	org *+$01
   109 				m_playerMaxWaterSpeedY_L1	org *+$01
   110
   111 				m_playerMoveWaterSpeedY_H1	org *+$01
   112 				m_playerMoveWaterSpeedY_L1	org *+$01
   113
   114 				m_playerNoJumpTimer			org *+$01			; for now this is used to disable the jump for some frames, after entering the water
   115 				m_playerHoldJumpCounter		org *+$01
   116
   117 				m_lastPlayerSideDirection	org *+$01			; 0 - none, 1 - right, 2 - left
   118 				m_lastPlayerShootDirection	org *+$01
   119
   120 				m_playerOverPlatformFlag	org *+$01			; is player over platform
   121 				m_playerTopCollisionFlag	org *+$01			; did player hit top
   122 				m_playerSideCollisionFlag	org *+$01			; did player hit side
   123
   124 				m_playerState				org *+$01			; 0-static, 1-over platform, 2-jumping up, 3-falling, 4-climbing, 5-in water, 6-gravity test
   125
   126 				m_pageZeroTempValue			org *+$01
   127
   128 				m_levelCharSizeX			org *+$01			; char size X goes from 1 to 255 characters, 0 = 256 characters
   129 				m_levelCharSizeY			org *+$01			; char size Y goes from 1 to 255 characters, 0 = 256 characters
   130
   131 				m_levelSizeX_H2				org *+$01
   132 				m_levelSizeX_H1				org *+$01
   133
   134 				m_levelSizeY_H2				org *+$01
   135 				m_levelSizeY_H1				org *+$01
   136
   137 				m_levelWindowX_H2			org *+$01
   138 				m_levelWindowX_H1			org *+$01
   139
   140 				m_levelWindowY_H2			org *+$01
   141 				m_levelWindowY_H1			org *+$01
   142
   143 				m_stick0					org *+$01
   144 				m_oldStick0					org *+$01
   145 				m_oldTrigger0				org *+$01
   146 				m_triggerState				org *+$01			; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
   147 				m_currentTrigger0			org *+$01
   148
   149 				m_paramW01					org *+$02
   150 				m_paramW02					org *+$02
   151
   152 				m_ptrLevelAddr				org *+$02
   153 				m_ptrLevelLine				org *+$02
   154 				m_pageZeroTempPointer		org *+$02
   155 				m_playerMethodPointer		org *+$02
   156 				m_platformLevelPointer		org *+$02
   157
   158 				m_currChar					org *+$01
   159 				m_currLevelNum				org *+$01
   160
   161 				.PRINT "Zero Page Start : ", ZeroPageAddress, " Zero Page Length : ", * - ZeroPageAddress, " Total : ", *  
   161 				Zero Page Start : $0080 Zero Page Length : $0073 Total : $00F3
   162
   163 				.if * - ZeroPageAddress > $79
   164 					.error "Zero Page length address greater than $00FA!"
   165 				.endif
   166
    46 						icl "Constants.Asm"
Source: E:\_8BitProjects\Series\Scroller\Constants.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Constants.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;
    16 				; remember, when going from NTSC to PAL:
    17 				;
    18 				; 	colors - 1 (same lum) .. here only color 7 (water blue) was left equal times multiplied by (5/6)
    19 				; 	speeds and accelerations multiplied by (6/5) .. maybe accelerations requires another adjustment
    20 				; 	some animations speed maybe should not (cannot) be converted, if they are not related to gameplay
    21 				; 		(for example the timing for the laser enabled/disabled states was converted)
    22 				; 	also, one extra precison byte (_L2) could be useful to get a better conversion in some cases
    23 				;
    24 				;**************************************************************************************************
    25 				;
    26 = 0000			PAL_VERSION					= 0
    27 = 0001			DEBUG_ON					= 1
    28 = 0000			STEREOMODE					= 0
    29
    30 = B000			GAME_MEM					= GameMemoryAddress			; used in Camera.Asm. Must set this for camera to work			
    31 = 0E03			GAME_LMS1					= GameDspLstAddr+3			; used in Camera.Asm. Must set this for camera to work
    32
    33 = 0008			PLR_WIDTH					= 8							; must set this for player to work
    34 = 0015			PLR_HEIGHT					= 21						; must set this for player to work
    35
    36 = 0028			MAX_ROWS					= 40
    37
    38 = 0004			CHAR_PIX.else_X				= 4
    39 = 0008			CHAR_PIX.else_Y				= 8
    40
    41 = 0052			LEVEL_CHAR_SIZE_X			= 82				; max level size now should be 256 x 255 lines	
    42 = 0018			LEVEL_CHAR_SIZE_Y			= 24
    43
    44 = 0028			WINDOW_CHAR_SIZE_X			= 40
    45 = 0018			WINDOW_CHAR_SIZE_Y			= 24
    46
    47 = 0030			PM_BASE_SCREEN_X			= 48
    48 = 0020			PM_BASE_SCREEN_Y			= 32
    49
    50 = 0000			PSD_NONE					= 0					; player side direction
    51 = 0001			PSD_RIGHT					= 1
    52 = 0002			PSD_LEFT					= 2
    53
    54 = 0000			PS_STATIC					= 0					; player states
    55 = 0001			PS_OVER_PLATFORM			= 1
    56 = 0002			PS_JUMPING					= 2
    57 = 0003			PS_FALLING					= 3
    58 = 0004			PS_CLIMBING					= 4
    59 = 0005			PS_IN_WATER					= 5
    60 = 0006			PS_GRAVITY_TEST				= 6
    61 = 0007			PS_LOSE						= 7
    62
    63 = 0000			CT_BLANK					= 0					; character types
    64 = 0001			CT_BLOCK					= 1
    65 = 0002			CT_COLLECTABLE				= 2
    66 = 0003			CT_DANGER					= 3
    67 = 0004			CT_LADDER					= 4
    68 = 0005			CT_WATER					= 5
    69 = 0006			CT_HEALTH					= 6
    70 = 0007			CT_FLOATPLATFORMH			= 7
    71 = 0008			CT_VLASER					= 8
    72 = 0009			CT_FLOATPLATFORMV			= 9
    73 = 000A			CT_HLASER					= 10
    74
    75 = 0000			TS_NOT_PRESSED				= 0					; trigger states
    76 = 0000			TS_JUST_RELEASED			= 0
    77 = 0000			TS_PRESSED					= 0
    78 = 0000			TS_JUST_PRESSED				= 0
    79
    80 = 0020			ENEMY_SHOOT_DELTA_Y			= 32
    81
    82 				;*****	Set these constants depending on TV system
    83 				; 
    84 				.if PAL_VERSION = 0
    85
    86 = 0006				TENTH_OF_SECOND_FRAMES	= 6
    87 = 0001				MINIMUM_CAMERA_STEP		= 1
    88 = 0008				JUMP_HOLD_FRAMES		= 8
    89 = 0040				JUMP_HSPEED_SLOWDOWN	= 64
    90 = 001E				WATER_NO_JUMP_FRAMES	= 30
    91
    92 = 0001				SIDE_SPEED_LAND_H1		= 1					; 001.160 --> 97.5 pixels per second (at 60 fps only!)
    93 = 0001				SIDE_SPEED_LAND_L1		= 1 ;64
    94 					
    95 = 0000				SIDE_ACCEL_LAND_H1		= 0					; 6 frames (at 60 fps only!) or 0.x seconds, to reach max speed
    96 = 0020				SIDE_ACCEL_LAND_L1		= 32
    97 					
    98 = 0000				SIDE_DEACCEL_LAND_H1	= 0					; 3 frames (at 60 fps only!) or 0.x seconds, to reach zero speed
    99 = 0080				SIDE_DEACCEL_LAND_L1	= 128
   100
   101 = 0000				SIDE_SPEED_WATER_H1		= 0
   102 = 0080				SIDE_SPEED_WATER_L1		= 128
   103
   104 = 0000				SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 60 fps only!) or _ seconds, to reach max speed
   105 = 0004				SIDE_ACCEL_WATER_L1		= 4
   106
   107 = 0000				SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 60 fps only!) or _ seconds, to reach zero speed
   108 = 0004				SIDE_DEACCEL_WATER_L1	= 4
   109
   110 = 0001				SIDE_SPEED_AIR_H1		= 1					; 001.120 --> 88.125 pixels per second (at 60 fps only!)
   111 = 0020				SIDE_SPEED_AIR_L1		= 32
   112
   113 = 0000				SIDE_ACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach max speed
   114 = 0010				SIDE_ACCEL_AIR_L1		= 16
   115
   116 = 0000				SIDE_DEACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach zero speed
   117 = 0010				SIDE_DEACCEL_AIR_L1		= 16
   118
   119 = 0000				CLIMB_UP_SPEED_Y_H1		= 0
   120 = 00E0				CLIMB_UP_SPEED_Y_L1		= 224
   121
   122 = 0001				CLIMB_DOWN_SPEED_Y_H1	= 1
   123 = 0080				CLIMB_DOWN_SPEED_Y_L1	= 128
   124
   125 = 0280				PLAYER_MISSILE_SPEED_X	= 2*256+128
   126 = 0200				ENEMY_MISSILE_SPEED_X	= 2*256
   127 = 0078				ENEMY_INIT_TIMER		= 120
   128 = 003C				VLASER_DISABLED_INDEX	= 60
   129
   130 				.else
   131
   132 					TENTH_OF_SECOND_FRAMES	= 5
   133 					MINIMUM_CAMERA_STEP		= 1
   134 					JUMP_HOLD_FRAMES		= 6					; 6.67 for pal
   135 					JUMP_HSPEED_SLOWDOWN	= 77
   136 					WATER_NO_JUMP_FRAMES	= 25
   137
   138 					SIDE_SPEED_LAND_H1		= 1					;  pixels per second (at 50 fps only!)
   139 					SIDE_SPEED_LAND_L1		= 128
   140
   141 					SIDE_ACCEL_LAND_H1		= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach max speed
   142 					SIDE_ACCEL_LAND_L1		= 38
   143
   144 					SIDE_DEACCEL_LAND_H1	= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach zero speed
   145 					SIDE_DEACCEL_LAND_L1	= 154
   146
   147 					SIDE_SPEED_WATER_H1		= 0
   148 					SIDE_SPEED_WATER_L1		= 154
   149
   150 					SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 50 fps only!) or _ seconds, to reach max speed
   151 					SIDE_ACCEL_WATER_L1		= 5
   152
   153 					SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 50 fps only!) or _ seconds, to reach zero speed
   154 					SIDE_DEACCEL_WATER_L1	= 5
   155
   156 					SIDE_SPEED_AIR_H1		= 1					;  pixels per second (at 50 fps only!)
   157 					SIDE_SPEED_AIR_L1		= 90
   158 					
   159 					SIDE_ACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach max speed
   160 					SIDE_ACCEL_AIR_L1		= 19
   161
   162 					SIDE_DEACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach zero speed
   163 					SIDE_DEACCEL_AIR_L1		= 19
   164
   165 					CLIMB_UP_SPEED_Y_H1		= 1
   166 					CLIMB_UP_SPEED_Y_L1		= 13
   167
   168 					CLIMB_DOWN_SPEED_Y_H1	= 1
   169 					CLIMB_DOWN_SPEED_Y_L1	= 205
   170
   171 					PLAYER_MISSILE_SPEED_X	= 3*256
   172 					ENEMY_MISSILE_SPEED_X	= 2*256+104
   173 					ENEMY_INIT_TIMER		= 100
   174 					VLASER_DISABLED_INDEX	= 50
   175
   176 				.endif
   177
   178 				;*****	Register bit settings
   179 				;
   180 = 0003			GRACTL_OPTIONS				= [ENABLE_MISSILES 	| ENABLE_PLAYERS]
   181 = 0031			PRIOR_OPTIONS				= [PM_PRIORITY_1   	| F.ifH_PLAYER        			| MULTICOLOR_PM]	
   182 = 003E			DMACTL_OPTIONS				= [ENABLE_DL_DMA 	| PLAYFIELD_WIDTH_NORMAL_MASK 	| ENABLE_PM_DMA 	| PM_1LINE_RESOLUTION] 
   183
   184 				;*****	Player missle address definitions
   185 				;
   186 = A300			ms_area_1 					= PmgAddress + $0300
   187 = A400			p0_area_1 					= PmgAddress + $0400
   188 = A500			p1_area_1 					= PmgAddress + $0500
   189 = A600			p2_area_1 					= PmgAddress + $0600
   190 = A700			p3_area_1 					= PmgAddress + $0700
   191
    47
    48 				;*****	Memory map
    49 				;
    50 = 0080			ZeroPageAddress				= $80				; 122 bytes zero page ($80 to $F9) 
    51 = 0E00			GameDspLstAddr				= $0E00				; 176 bytes for display list
    52
    53 = 06B0			HudMemoryAddr				= $06B0				; Heads up display are (80 bytes)
    54
    55 = 2400			SoundPlayerAddress			= $2400
    56 = 3000			DataAddress					= $3000				;  4K (size for data)
    57 = 4000			SoundAddress				= $4000
    58 = 4800			CodeAddress					= $4800				; 20K (22K zone)
    59
    60 = A000			PmgAddress					= $A000				; 40K (2K size - 768 bytes)
    61 = A800			GameFontAddress				= $A800				; 42K (1K size)
    62 = AC00			TextFontAddress				= $AC00				; 39K (1K size)
    63
    64 = B000			GameMemoryAddress			= $B000				; 44K (4K size)
    65
    66 				;
    67 				;**************************************************************************************************
    68 				; InitSystem - Start of code
    69 				;**************************************************************************************************
    70 				;
    71 						org CodeAddress
    72
    73 				InitSystem
    74
    75 FFFF> 4800-6C4B> AD 14 + 		lda PAL									; only run in the correct system
    76 4803 29 0E				and #14
    77
    78 				.if PAL_VERSION = 1
    79
    80 				NO_PAL_loop
    81 						bne NO_PAL_loop
    82
    83 				.else
    84
    85 4805			NO_NTSC_loop
    86 4805 F0 FE				beq NO_NTSC_loop
    87
    88 				.endif
    89
    90 4807					ClearSystem								; begin machine setup
Macro: CLEARSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4807 18					clc
     6 4808 D8				    cld
     7 4809 78					sei
     9 480A A9 00			    lda #0									; clear interrupts and screen
    10 480C 8D 0E D2			    sta IRQEN	
    11 480F 8D 0E D4			    sta NMIEN
    12 4812 8D 00 D4			    sta DMACTL
    13 4815 8D 1A D0			    sta COLBK
    14 4818 8D 1D D0		      	sta GRACTL								; clear P/M
    15 481B 8D 0D D0				sta GRAFP0
    16 481E 8D 0E D0				sta GRAFP1
    17 4821 8D 0F D0				sta GRAFP2
    18 4824 8D 10 D0				sta GRAFP3
    19 4827 8D 11 D0				sta GRAFM
    21 482A 8D 00 D0				sta HPOSP0
    22 482D 8D 01 D0			    sta HPOSP1
    23 4830 8D 02 D0			    sta HPOSP2
    24 4833 8D 03 D0			    sta HPOSP3
    25 4836 8D 04 D0			    sta HPOSM0
    26 4839 8D 05 D0			    sta HPOSM1
    27 483C 8D 06 D0			    sta HPOSM2
    28 483F 8D 07 D0			    sta HPOSM3
    30 4842 8D 1B D0			    sta PRIOR								; clear GTIA also
    32 4845 8D 08 D2			    sta AUDCTL								; clear sound
    33 4848 8D 01 D2				sta AUDC1
    34 484B 8D 03 D2			    sta AUDC2
    35 484E 8D 05 D2			    sta AUDC3
    36 4851 8D 07 D2			    sta AUDC4
    38 4854 A9 03			    lda #3
    39 4856 8D 0F D2			    sta SKCTL
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    91 4859					DisableBasic							; disable to use memory
Macro: DISABLEBASIC [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4859 AD 01 D3					lda PORTB							; deactivate Basic
     6 485C 09 02			        ora #%00000010
     7 485E 8D 01 D3			        sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    92 4861					DisableOperatingSystem					; disable to use memory	
Macro: DISABLEOPERATINGSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4861 AD 01 D3					lda PORTB							; deactivate Operative System
     6 4864 29 FE					and #%11111110
     7 4866 8D 01 D3					sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    93 					
    94 4869					SetRamTop #32							; pull memtop down 32 pages
Macro: SETRAMTOP [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4869 A5 6A		   		lda RAMTOP
     5 486B 38					sec
     6 486C E9 20				sbc #32
     7 486E 85 6A				sta RAMTOP
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    95 								
    96 4870					SetDisplayListInterrupt GameDli_01		; set the display list interrupts
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4870 A9 7B		      	lda #<GAMEDLI_01
     5 4872 8D FA FF			    sta NMIH_VECTOR
     6 4875 A9 4D			    lda #>GAMEDLI_01
     7 4877 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    97
    98 487A					VcountWait 120							; make sure to wait so the setting take effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 487A A9 78				lda #120
     5 487C CD 0B D4		VWait1	cmp VCOUNT
     6 487F D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    99
   100 4881 A9 58				lda #GameDLEnd							; length of games display list data
   101 4883 85 92				sta m_param00 							; store it for the load routine									
   102 4885					SetVector m_paramW01, GameDL			; source of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4885 A9 3F		      	lda #<GAMEDL
     5 4887 85 E3			    sta M_PARAMW01
     6 4889 A9 35			    lda #>GAMEDL
     7 488B 85 E4			    sta M_PARAMW01+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   103 488D					SetVector m_paramW02, GameDspLstAddr	; destination of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 488D A9 00		      	lda #<GAMEDSPLSTADDR
     5 488F 85 E5			    sta M_PARAMW02
     6 4891 A9 0E			    lda #>GAMEDSPLSTADDR
     7 4893 85 E6			    sta M_PARAMW02+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   104 						
   105 4895 20 0A 6B				jsr LoadDisplayListData					; perform the DL data move
   106
   107 				;*****	InitHardware
   108 				;
   109 4898			InitHardware
   110
   111 4898 A9 00				lda #0									; set the player info
   112 489A 8D 08 D0				sta SIZEP0
   113
   114 489D A9 55				lda #%01010101							; double width for all missiles
   115 489F 8D 0C D0				sta SIZEM
   116
   117 48A2					SetPMBaseAddress PmgAddress				; set the player missile address
Macro: SETPMBASEADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48A2 A9 A0		      lda #>PMGADDRESS
     5 48A4 8D 07 D4		      sta PMBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   118
   119 48A7 A9 0C				lda #12
   120 48A9 8D 04 D4				sta HSCROL
   121 					
   122 48AC A9 00				lda #0
   123 48AE 8D 05 D4				sta VSCROL
   124
   125 48B1					SetFontAddress GameFontAddress			; set the starting font address
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48B1 A9 A8				lda #>GAMEFONTADDRESS
     5 48B3 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   126 48B6					SetDisplayListAddress GameDspLstAddr	; set the display list address	
Macro: SETDISPLAYLISTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48B6 A9 00		      	lda #<GAMEDSPLSTADDR
     5 48B8 8D 02 D4			    sta DLISTL
     6 48BB A9 0E			    lda #>GAMEDSPLSTADDR
     7 48BD 8D 03 D4			    sta DLISTL+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   127 48C0					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48C0 A9 78				lda #120
     5 48C2 CD 0B D4		VWait1	cmp VCOUNT
     6 48C5 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   128
   129 48C7 20 21 6C				jsr SfxOff
   130 48CA 20 15 4B				jsr InitVars							; begin initialization
   131 48CD 20 D1 4B				jsr InitLevelTable						; set up the level table		
   132 								
   133 48D0 A9 80				lda #[NMI_DLI]							; enable DLI's (but no VBI's)
   134 48D2 8D 0E D4				sta NMIEN
   135 						
   136 48D5 A9 03				lda #GRACTL_OPTIONS						; apply GRACTL options
   137 48D7 8D 1D D0				sta GRACTL
   138
   139 48DA A9 31				lda #PRIOR_OPTIONS						; apply PRIOR options
   140 48DC 8D 1B D0				sta PRIOR
   141
   142 48DF A9 3E				lda #DMACTL_OPTIONS						; apply DMACTL options
   143 48E1 8D 00 D4				sta DMACTL
   144
   145 48E4 A9 00				lda #0									; clear the hit register
   146 48E6 8D 1E D0				sta HITCLR
   147
   148 				;*****	Load level
   149 				;
   150 48E9 A9 00				lda #$00								; set the starting level
   151 48EB 85 F2				sta m_currLevelNum						; store it off
   152
   153 48ED 85 93				sta m_param01							; store it to the parameter
   154 48EF 20 17 6B				jsr LoadLevel							; load the level
   155
   156 48F2					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48F2 A9 78				lda #120
     5 48F4 CD 0B D4		VWait1	cmp VCOUNT
     6 48F7 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   157
   158 				;*****	Initialize Level
   159 				;
   160 48F9 20 21 6C				jsr SfxOff
   161 48FC 20 60 4C				jsr InitPlatforms						; initialize floating platforms if any
   162 48FF 20 0A 4C				jsr InitGoldCounter						; gold initialization
   163 4902 20 77 67				jsr InitEnemyManager					; enemy manager initialization
   164 4905 20 80 5C				jsr InitMissileSystem					; missile system initialization
   165 						
   166 				;*****	Set player position and draw
   167 				;		
   168 4908 A5 F2				lda m_currLevelNum						; grab the current level
   169 490A 85 92				sta m_param00							; store it in the parameter
   170 490C 20 AF 53				jsr SetSpawnPos							; set the spawn position for this level
   171 						
   172 490F 20 C9 54				jsr SetPlayerScreenPos 					; fill in the players position
   173 4912 20 E8 54				jsr DrawPlayer							; draw the player
   174
   175 4915					VcountWait 120	
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4915 A9 78				lda #120
     5 4917 CD 0B D4		VWait1	cmp VCOUNT
     6 491A D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   176 						
   177 				;*****	GameLoop
   178 				;
   179 491C			GameLoop
   180 						
   181 491C A5 DE				lda m_stick0
   182 491E 29 0F				and #$0F
   183 4920 C9 0F				cmp #$0F
   184 4922 D0 03				bne CheckState
   185 4924 4C 38 49				jmp CheckUserInput
   186
   187 4927			CheckState
   188 						
   189 4927 A5 D2				lda m_playerState
   190 4929 C9 02				cmp #$02		
   191 492B F0 07				beq JumpSound
   192
   193 492D C9 03				cmp #$03
   194 492F F0 03				beq JumpSound
   195 						
   196 4931 4C 38 49				jmp CheckUserInput
   197 						
   198 4934			JumpSound
   199 4934 A9 01				lda #1
   200 4936 85 99				sta m_sfxEffect
   201
   202 				;*****	Check User Input
   203 				;		
   204 4938			CheckUserInput
   205
   206 				.if DEBUG_ON = 1
   207
   208 4938 AE D7 31				ldx m_floatPlatformIdx
   209 493B CA					dex
   210 						
   211 493C A5 D2				lda m_playerState
   212 493E A0 28				ldy #40
   213 4940 20 BA 4A				jsr DisplayDebugInfoHexFF
   214 						
   215 4943 AD 31 32				lda m_leftBottomChar
   216 4946 A0 2B				ldy #43
   217 4948 20 BA 4A				jsr DisplayDebugInfoHexFF
   218 						
   219 494B AD 32 32				lda m_rightBottomChar
   220 494E A0 2E				ldy #46
   221 4950 20 BA 4A				jsr DisplayDebugInfoHexFF
   222 						
   223 4953 A5 A2				lda m_playerLevelLeftX_H1
   224 4955 A0 31				ldy #49
   225 4957 20 BA 4A				jsr DisplayDebugInfoHexFF	
   226 						
   227 495A A5 A1				lda m_playerLevelLeftX_H2
   228 495C A0 34				ldy #52
   229 495E 20 BA 4A				jsr DisplayDebugInfoHexFF	
   230 						
   231 4961 BD 05 6A				lda PlatformLSB,x
   232 4964 A0 37				ldy #55
   233 4966 20 BA 4A				jsr DisplayDebugInfoHexFF	
   234 						 		
   235 4969 BD 0D 6A				lda PlatformMSB,x
   236 496C A0 3A				ldy #58
   237 496E 20 BA 4A				jsr DisplayDebugInfoHexFF	
   238 						 		
   239 4971 BD 41 6A				lda PlatformBaseLSB,x
   240 4974 A0 3D				ldy #61
   241 4976 20 BA 4A				jsr DisplayDebugInfoHexFF	
   242
   243 4979 BD 49 6A				lda PlatformBaseMSB,x
   244 497C A0 40				ldy #64
   245 497E 20 BA 4A				jsr DisplayDebugInfoHexFF	
   246
   247 				.endif
   248 						
   249 4981 20 9B 6B				jsr CheckInput
   250 4984 20 74 4D				jsr UpdateTimers
   251 4987 6C ED 00				jmp (m_playerMethodPointer)
   252 					
   253 				;*****	PlayerMethodReturn
   254 				;
   255 498A			PlayerMethodReturn
   256 498A A5 D2				lda m_playerState
   257 498C C9 07				cmp #PS_LOSE
   258 498E F0 2B				beq PlayerEndStates
   259 					
   260 				;*****	PlayerNormalStates	
   261 				;
   262 4990			PlayerNormalStates
   263 4990 20 55 63				jsr UpdateCameraWindow
   264 4993 20 C9 54				jsr SetPlayerScreenPos
   265 4996 20 E8 54				jsr DrawPlayer
   266 							
   267 				;*****	EnemyUpdate
   268 				;
   269 4999			EnemyUpdate
   270 4999 20 2A 68				jsr UpdateEnemyManager
   271 					
   272 				;*****	MissilesStep
   273 				;
   274 499C			MissilesStep
   275 499C 20 DE 5C				jsr UpdateMissileSystem
   276 499F 20 7F 69				jsr DrawEnemyExplosion
   277 					
   278 				;*****	GameAnimations
   279 				;
   280 49A2			GameAnimations
   281 49A2 20 B1 61				jsr DoFontAnimations
   282 49A5 20 F1 61				jsr UpdateCoinAnimations
   283 49A8 20 F0 4C				jsr UpdateInfoLine
   284 49AB 20 37 6C				jsr SfxUpdate
   285 								
   286 49AE					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49AE A9 78				lda #120
     5 49B0 CD 0B D4		VWait1	cmp VCOUNT
     6 49B3 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   287 						
   288 49B5 20 D4 6B				jsr CheckPMCollisions
   289 49B8 4C 1C 49				jmp GameLoop
   290 					
   291 				;*****	PlayerEndStates
   292 				;
   293 49BB			PlayerEndStates
   294 49BB 20 4B 55				jsr DrawPlayerExplosion
   295 49BE 20 B1 61				jsr DoFontAnimations
   296 49C1 20 F1 61				jsr UpdateCoinAnimations
   297 49C4 20 DE 5C				jsr UpdateMissileSystem
   298 49C7 20 7F 69				jsr DrawEnemyExplosion
   299 49CA 20 F0 4C				jsr UpdateInfoLine
   300 49CD 20 AF 53				jsr SetSpawnPos
   301 49D0 20 37 6C				jsr SfxUpdate
   302 												
   303 49D3					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49D3 A9 78				lda #120
     5 49D5 CD 0B D4		VWait1	cmp VCOUNT
     6 49D8 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   304 						
   305 49DA A9 00				lda #0
   306 49DC 8D 1E D0				sta HITCLR	
   307 49DF 4C 1C 49				jmp GameLoop
   308
   309 				;*****	Includes base files
   310 				;
   311 49E2					icl "/Lib/SysProcs.Asm"
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysProcs.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysProcs.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;****	Storage
    15 				;
    16 49E2 00			_productLo		.byte $00 
    17 49E3 00			_productHi		.byte $00 
    18 49E4 00			_multiplier		.byte $00 
    19 49E5 00			_multiplicand	.byte $00 
    20
    21 49E6 00			_divisor		.byte $00						; DIVISOR
    22 49E7 00			_quitient		.byte $00 						; QUOTIENT
    23 49E8 00			_remainder		.byte $00						; REMAINDER 
    24 49E9 00			_dividenLo		.byte $00						; LOW PART OF DIVIDEND
    25 49EA 00			_dividendHi		.byte $00						; HIGH PART OF DIVIDEND 
    26
    27 49EB			TabHexNibbleToScreenDigit
    28 49EB 10 11 12 13 14 15 + 	.sb "0123456789ABCDEF"
    29
    30 49FB			TabBinaryToBCD
    31 49FB 00 01 02 03 04 05 + 	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
    32 4A05 10 11 12 13 14 15 + 	.byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
    33 4A0F 20 21 22 23 24 25 + 	.byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
    34 4A19 30 31 32 33 34 35 + 	.byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
    35 4A23 40 41 42 43 44 45 + 	.byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49
    36 4A2D 50 51 52 53 54 55 + 	.byte $50, $51, $52, $53, $54, $55, $56, $57, $58, $59
    37 4A37 60 61 62 63 64 65 + 	.byte $60, $61, $62, $63, $64, $65, $66, $67, $68, $69
    38 4A41 70 71 72 73 74 75 + 	.byte $70, $71, $72, $73, $74, $75, $76, $77, $78, $79
    39 4A4B 80 81 82 83 84 85 + 	.byte $80, $81, $82, $83, $84, $85, $86, $87, $88, $89
    40 4A55 90 91 92 93 94 95 + 	.byte $90, $91, $92, $93, $94, $95, $96, $97, $98, $99
    41
    42 				;
    43 				;***************************************************************************************************
    44 				; WaitFrame
    45 				;***************************************************************************************************
    46 				;
    47 4A5F			.proc WaitFrame
    48 						
    49 4A5F A5 14				lda RTCLOK60							; get frame/jiffy counter
    50
    51 4A61			WaitTick60
    52
    53 4A61 C5 14				cmp RTCLOK60							; Loop until the clock changes
    54 4A63 F0 FC				beq WaitTick60		
    55 4A65 60					rts
    56 				.endp			
    57
    58 				;
    59 				;***************************************************************************************************
    60 				; MultiplyAX
    61 				;***************************************************************************************************
    62 				;
    63 4A66			.proc MultiplyAX  
    64 4A66 8D E4 49				sta _multiplier
    65 4A69 8E E5 49				stx _multiplicand 
    66 4A6C A9 00				lda #0 
    67 4A6E 8D E2 49				sta _productLo 
    68 4A71 A2 08				ldx #8 
    69
    70 				;*************************************************
    71 				;		
    72 4A73			Loop
    73 4A73 4E E4 49			 	lsr _multiplier 
    74 4A76 90 04				bcc NoAdd 
    75 4A78 18					clc 
    76 4A79 6D E5 49				adc _multiplicand 
    77
    78 				;*************************************************
    79 				;
    80 4A7C			NoAdd
    81 4A7C 6A				 	ror 
    82 4A7D 6E E2 49				ror _productLo 
    83 4A80 CA					dex 
    84 4A81 D0 F0				bne Loop 
    85 4A83 8D E3 49				sta _productHi 
    86
    87 4A86 60					rts 
    88 				.endp
    89
    90 				;
    91 				;***************************************************************************************************
    92 				; DivideAXY
    93 				;***************************************************************************************************
    94 				;
    95 4A87			.proc DivideAXY
    96 						
    97 4A87 8E E6 49				stx _divisor							; THE DIVISOR
    98 4A8A 8C E9 49				sty _dividenLo								
    99 4A8D 8D EA 49				sta _dividendHi							; ACCUMULATOR WILL HOLD DVDH
   100 				 
   101 4A90 A2 08				ldx	#$08 								; FOR AN 8-BIT DIVISOR 
   102 4A92 38					sec 
   103 4A93 ED E6 49				sbc _divisor 
   104
   105 				;************************************************
   106 				;
   107 4A96 08			DLOOP 	php										; THE LOOP THAT DIVIDES 
   108 4A97 2E E7 49				rol _quitient 
   109 4A9A 0E E9 49				asl _dividenLo 
   110 4A9D 2A					rol  
   111 4A9E 28					plp 
   112 4A9F 90 06				bcc ADDIT 
   113 4AA1 ED E6 49				sbc _divisor 
   114 4AA4 4C AA 4A				jmp NEXT 
   115
   116 				;************************************************
   117 				;
   118 4AA7 6D E6 49		ADDIT 	adc _divisor 
   119
   120 				;************************************************
   121 				;
   122 4AAA CA			NEXT 	dex 
   123 4AAB D0 E9				bne	DLOOP 
   124 4AAD B0 04				bcs FINI 
   125 4AAF 6D E6 49				ADC _divisor 
   126 4AB2 18					clc 
   127
   128 				;************************************************
   129 				;		
   130 4AB3 2E E7 49		FINI 	rol _quitient 
   131 4AB6 8D E8 49				sta _remainder 
   132 4AB9 60					rts 									; ENDIT
   133
   134 				.endp		
   135
   136 				;
   137 				;**************************************************************************************************
   138 				; DisplayDebugInfoHexFF
   139 				;
   140 				; 	display 2 digits with values from 00 to FF
   141 				; 	passs the value in A and the line row in Y
   142 				;
   143 				;**************************************************************************************************
   144 				;
   145 4ABA			.proc DisplayDebugInfoHexFF
   146
   147 4ABA 86 97				stx m_saveRegX
   148 4ABC 8D CB 4A				sta Save_Value+1						; place the value in A 1 location pasted the lda.   
   149 					
   150 4ABF 4A					lsr										; display 2 digits (from 0 to F)
   151 4AC0 4A					lsr
   152 4AC1 4A					lsr
   153 4AC2 4A					lsr
   154 4AC3 AA					tax
   155 4AC4 BD EB 49				lda TabHexNibbleToScreenDigit,x
   156 4AC7 99 B0 06				sta HudMemoryAddr,y
   157
   158 4ACA			Save_Value
   159
   160 4ACA A9 FF				lda #$FF								; will hold the value in A on entry
   161 4ACC 29 0F				and #15
   162 4ACE AA					tax
   163 4ACF BD EB 49				lda TabHexNibbleToScreenDigit,x
   164 4AD2 99 B1 06				sta HudMemoryAddr+1,y
   165 4AD5 A6 97				ldx m_saveRegX
   166 4AD7 60					rts
   167 				.endp	
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; DisplayDebugInfoBinary99
   172 				;
   173 				;	display 2 digits with values from 00 to 99
   174 				; 	passs the value in A and the line row in Y
   175 				;
   176 				;**************************************************************************************************
   177 				;
   178 4AD8			.proc DisplayDebugInfoBinary99
   179
   180 4AD8 86 97				stx m_saveRegX
   181 4ADA AA					tax
   182 4ADB E0 64				cpx #100
   183 4ADD 90 02				bcc NoOverflow
   184 4ADF A2 63				ldx #99
   185
   186 4AE1			NoOverflow
   187 4AE1 BD FB 49				lda TabBinaryToBCD,x
   188 4AE4 AA					tax
   189
   190 4AE5 4A					lsr										; display 2 digits (from 0 to 9)
   191 4AE6 4A					lsr
   192 4AE7 4A					lsr
   193 4AE8 4A					lsr
   194 4AE9 09 10				ora #16									; add the "0" character value
   195 4AEB 99 B0 06				sta HudMemoryAddr,y
   196
   197 4AEE 8A					txa
   198 4AEF 29 0F				and #15
   199 4AF1 09 10				ora #16									; add the "0" character value
   200 4AF3 99 B1 06				sta HudMemoryAddr+1,y
   201
   202 4AF6 A6 97				ldx m_saveRegX
   203 4AF8 60					rts
   204 				.endp		
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; DisplayDebugInfoBinary9
   209 				;**************************************************************************************************
   210 				;
   211 4AF9			.proc DisplayDebugInfoBinary9
   212
   213 4AF9 C9 0A				cmp #10
   214 4AFB 90 02				bcc NoOverflow2
   215 4AFD A9 09				lda #9
   216
   217 				;*************************************************
   218 				;
   219 4AFF			NoOverflow2
   220 					
   221 4AFF 09 10				ora #16									; display 1 digit (from 0 to 9) add the "0" character value
   222 4B01 99 B0 06				sta HudMemoryAddr,y
   223
   224 4B04 60				rts
   225
   226 				.endp	
   227
   228 				;
   229 				;**************************************************************************************************
   230 				; ClearDebugLineInfo
   231 				;**************************************************************************************************
   232 				;
   233 4B05			.proc ClearDebugLineInfo
   234
   235 4B05 86 97				stx m_saveRegX
   236 4B07 A9 00				lda #0
   237 4B09 AA					tax
   238
   239 4B0A			CDI_loop
   240
   241 4B0A 9D B0 06				sta HudMemoryAddr,x
   242 4B0D E8					inx
   243 4B0E E0 28				cpx #40
   244 4B10 D0 F8				bne CDI_loop
   245 4B12 A6 97				ldx m_saveRegX
   246 						
   247 4B14 60					rts
   248
   249 				.endp
   312
   313 4B15					icl "Initialize.Asm"				
Source: E:\_8BitProjects\Series\Scroller\Initialize.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Initialize.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; InitVars
    15 				;**************************************************************************************************
    16 				;
    17 4B15			.proc InitVars
    18 					
    19 4B15 A9 01				lda #1									; input info
    20 4B17 85 E2				sta m_currentTrigger0
    21 4B19 85 E0				sta m_oldTrigger0
    22
    23 4B1B A9 00				lda #0
    24 4B1D 85 E1				sta m_triggerState
    25
    26 4B1F A9 0F				lda #15
    27 4B21 85 DE				sta m_stick0
    28 4B23 85 DF				sta m_oldStick0
    29 						
    30 4B25 A9 00				lda #>[CHAR_PIX.else_X]					; level info
    31 4B27 85 DA				sta m_levelWindowX_H2
    32 						
    33 4B29 A9 04				lda #<[CHAR_PIX.else_X]
    34 4B2B 85 DB				sta m_levelWindowX_H1
    35 						
    36 4B2D A9 00				lda #0
    37 4B2F 85 DC				sta m_levelWindowY_H2
    38 						
    39 4B31 A9 00				lda #0
    40 4B33 85 DD				sta m_levelWindowY_H1
    41
    42 4B35 A9 52				lda #LEVEL_CHAR_SIZE_X
    43 4B37 85 D4				sta m_levelCharSizeX
    44 						
    45 4B39 A9 18				lda #LEVEL_CHAR_SIZE_Y
    46 4B3B 85 D5				sta m_levelCharSizeY
    47
    48 4B3D A9 01				lda #>[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    49 4B3F 85 D6				sta m_levelSizeX_H2
    50 						
    51 4B41 A9 48				lda #<[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    52 4B43 85 D7				sta m_levelSizeX_H1
    53
    54 4B45 A9 00				lda #>[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    55 4B47 85 D8				sta m_levelSizeY_H2
    56 						
    57 4B49 A9 C0				lda #<[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    58 4B4B 85 D9				sta m_levelSizeY_H1
    59
    60 4B4D A9 00				lda #<GameMemoryAddress
    61 4B4F 8D 3D 32				sta m_currentLineAddress
    62 						
    63 4B52 A9 B0				lda #>GameMemoryAddress
    64 4B54 8D 3E 32				sta m_currentLineAddress+1
    65 							
    66 						;************************************************
    67 						;
    68 						; player info
    69 						;
    70 						; 	remember that we don't use any speed over 1 char per frame right now,
    71 						; 	because we don't want to lose collisions (in that case case we should
    72 						; 	use 2 or more steps per frame, or a "sweep" collision method)
    73 						;
    74 						;************************************************
    75 						;
    76
    77 				.if PAL_VERSION = 0
    78 					
    79 4B57 A9 03				lda #3									; air vertical movement 240 pixels per second (at 60 fps only!)
    80 4B59 85 BF				sta m_playerJumpSpeed_H1
    81 						
    82 4B5B A9 80				lda #128
    83 4B5D 85 C0				sta m_playerJumpSpeed_L1
    84
    85 4B5F A9 06				lda #6									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
    86 4B61 85 C1				sta m_playerMaxFallSpeed_H1
    87 					
    88 4B63 A9 AA				lda #170
    89 4B65 85 C2				sta m_playerMaxFallSpeed_L1
    90
    91 4B67 A9 00				lda #0									; 12.8 frames (at 60 fps only!) to reach max speed (from zero)
    92 4B69 85 C3				sta m_playerGravityAccel_H1
    93 					
    94 4B6B A9 70				lda #112
    95 4B6D 85 C4				sta m_playerGravityAccel_L1
    96 								
    97 4B6F A9 00				lda #0									; water vertical movement
    98 4B71 85 C5				sta m_playerWaterAccelY_H1
    99 						
   100 4B73 A9 20				lda #32
   101 4B75 85 C6				sta m_playerWaterAccelY_L1
   102
   103 4B77 A9 00				lda #0
   104 4B79 85 C7				sta m_playerMaxWaterSpeedY_H1
   105 					
   106 4B7B A9 80				lda #128
   107 4B7D 85 C8				sta m_playerMaxWaterSpeedY_L1
   108
   109 4B7F A9 01				lda #1
   110 4B81 85 C9				sta m_playerMoveWaterSpeedY_H1
   111 					
   112 4B83 A9 00				lda #0
   113 4B85 85 CA				sta m_playerMoveWaterSpeedY_L1
   114
   115 				.else
   116
   117 						lda #4									; air vertical movement pixels per second (at 50 fps only!)
   118 						sta m_playerJumpSpeed_H1
   119 					
   120 						lda #51
   121 						sta m_playerJumpSpeed_L1
   122
   123 						lda #7									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
   124 						sta m_playerMaxFallSpeed_H1
   125 					
   126 						lda #255
   127 						sta m_playerMaxFallSpeed_L1
   128
   129 						lda #0									;  frames (at 50 fps only!) to reach max speed (from zero)
   130 						sta m_playerGravityAccel_H1
   131 						
   132 						lda #134
   133 						sta m_playerGravityAccel_L1
   134
   135 						lda #0									; water vertical movement
   136 						sta m_playerWaterAccelY_H1
   137 						
   138 						lda #38
   139 						sta m_playerWaterAccelY_L1
   140
   141 						lda #0
   142 						sta m_playerMaxWaterSpeedY_H1
   143 					
   144 						lda #154
   145 						sta m_playerMaxWaterSpeedY_L1
   146
   147 						lda #1
   148 						sta m_playerMoveWaterSpeedY_H1
   149 					
   150 						lda #51
   151 						sta m_playerMoveWaterSpeedY_L1
   152
   153 				.endif
   154 					
   155 4B87 A2 08				ldx #PLR_WIDTH							; set size in pixels
   156 4B89 86 B1				stx m_playerSizeX
   157 4B8B CA					dex
   158 4B8C 86 B3				stx m_playerSizeXMinusOne
   159 					
   160 4B8E A2 15				ldx #PLR_HEIGHT
   161 4B90 86 B2				stx m_playerSizeY
   162 4B92 CA					dex
   163 4B93 86 B4				stx m_playerSizeYMinusOne
   164 					
   165 4B95 20 99 4B				jsr InitPlayerInfo
   166 						
   167 4B98 60					rts
   168 					
   169 				.endp	
   170
   171 				;
   172 				;**************************************************************************************************
   173 				; InitPlayerInfo
   174 				;**************************************************************************************************
   175 				;
   176 4B99			.proc InitPlayerInfo
   177
   178 4B99 A9 00				lda #0
   179 4B9B 85 CB				sta m_playerNoJumpTimer
   180 4B9D 85 CC				sta m_playerHoldJumpCounter
   181 4B9F 85 CF				sta m_playerOverPlatformFlag
   182 4BA1 85 D0				sta m_playerTopCollisionFlag
   183 4BA3 85 D1				sta m_playerSideCollisionFlag
   184
   185 4BA5 A2 01				ldx #PS_OVER_PLATFORM
   186 4BA7 20 FE 4D				jsr SetPlayerMethod
   187
   188
   189 4BAA A9 00				lda #0
   190 4BAC 85 B5				sta m_playerSideSpeed_H1
   191 4BAE 85 B6				sta m_playerSideSpeed_L1
   192 						
   193 						; set uo spawn position
   194 4BB0 20 AF 53				jsr SetSpawnPos
   195 4BB3 A9 02				lda #PSD_LEFT	
   196 4BB5 85 CD				sta m_lastPlayerSideDirection
   197 4BB7 85 CE				sta m_lastPlayerShootDirection
   198 4BB9 A9 01				lda #1
   199 4BBB 85 9C				sta m_redrawPlayerCounter
   200 4BBD 20 E8 54				jsr DrawPlayer
   201 						
   202 4BC0 A9 01				lda #PSD_RIGHT	
   203 4BC2 85 CD				sta m_lastPlayerSideDirection
   204 4BC4 85 CE				sta m_lastPlayerShootDirection
   205 4BC6 A9 01				lda #1
   206 4BC8 85 9C				sta m_redrawPlayerCounter
   207 4BCA 20 E8 54				jsr DrawPlayer	
   208
   209 4BCD 20 AE 54				jsr SetPlayerInfo	
   210 						
   211 4BD0 60					rts
   212
   213 				.endp		
   214
   215 				;
   216 				;**************************************************************************************************
   217 				; InitLevelTable
   218 				;**************************************************************************************************
   219 				;
   220 4BD1			.proc InitLevelTable
   221 						
   222 4BD1 A0 00				ldy #0
   223
   224 				;************************************************
   225 				;
   226 4BD3			ILTL_loop
   227
   228 4BD3 AD 3D 32				lda m_currentLineAddress
   229 4BD6 99 3F 32				sta TabLevelLineAddressLSB,y
   230 						
   231 4BD9 AD 3E 32				lda m_currentLineAddress+1
   232 4BDC 99 3F 33				sta TabLevelLineAddressMSB,y
   233
   234 4BDF A5 D4				lda m_levelCharSizeX
   235 4BE1 D0 06				bne ILTL_below_256
   236
   237 4BE3 EE 3E 32				inc m_currentLineAddress+1				; if m_levelCharSizeX = 0, then add 256 chars
   238 4BE6 4C F8 4B				jmp ILTL_check_loop
   239
   240 				;************************************************
   241 				;
   242 4BE9			ILTL_below_256
   243
   244 4BE9 18					clc
   245 4BEA 6D 3D 32				adc m_currentLineAddress				; from 1 to 255 chars
   246 4BED 8D 3D 32				sta m_currentLineAddress
   247
   248 4BF0 AD 3E 32				lda m_currentLineAddress+1
   249 4BF3 69 00				adc #0
   250 4BF5 8D 3E 32				sta m_currentLineAddress+1
   251
   252 				;************************************************
   253 				;
   254 4BF8			ILTL_check_loop
   255
   256 4BF8 C8					iny
   257 4BF9 C4 D5				cpy m_levelCharSizeY					; from 1 to 255 lines, 0 = 256 lines in this case
   258 4BFB D0 D6				bne ILTL_loop
   259 					
   260 4BFD AD 3D 32				lda m_currentLineAddress				; add one more line definition to fix problem of ladders in the last line, but this is not going to work if there are 256 lines!
   261 4C00 99 3F 32				sta TabLevelLineAddressLSB,y
   262 					
   263 4C03 AD 3E 32				lda m_currentLineAddress+1
   264 4C06 99 3F 33				sta TabLevelLineAddressMSB,y
   265 					
   266 4C09 60					rts
   267 						
   268 				.endp		
   269
   270 				;
   271 				;**************************************************************************************************
   272 				; InitGoldCounter
   273 				;**************************************************************************************************
   274 				;
   275 4C0A			.proc InitGoldCounter
   276
   277 4C0A A2 00				ldx #0									; line index
   278
   279 				;****	1st Loop
   280 				; 
   281 4C0C			IGC_loop1
   282 					
   283 4C0C A0 00				ldy #0									; column index
   284 					
   285 4C0E BD 3F 32				lda TabLevelLineAddressLSB,x
   286 4C11 85 E9				sta m_ptrLevelLine
   287 						
   288 4C13 BD 3F 33				lda TabLevelLineAddressMSB,x
   289 4C16 85 EA				sta m_ptrLevelLine+1
   290
   291 				;*****	2nd Loop
   292 				;
   293 4C18			IGC_loop2
   294
   295 4C18 B1 E9				lda (m_ptrLevelLine),y
   296 4C1A 85 F1				sta m_currChar	
   297 4C1C 86 D3				stx m_pageZeroTempValue
   298 4C1E AA					tax
   299 4C1F BD 3F 34				lda TabCharDefinition,x
   300 4C22 A6 D3				ldx m_pageZeroTempValue
   301 					
   302 4C24 29 0F				and #15
   303 4C26 C9 02				cmp #CT_COLLECTABLE
   304 4C28 D0 06				bne WaterCheck
   305 					
   306 4C2A EE DC 31				inc m_goldCounter
   307 4C2D 4C 55 4C				jmp IGC_no_gold
   308 						
   309 				;*****	Water Check
   310 				;		
   311 4C30			WaterCheck
   312
   313 4C30 C9 05				cmp #CT_WATER
   314 4C32 D0 06				bne HealthCheck
   315 						
   316 4C34 EE DE 31				inc m_waterAvailable
   317 4C37 4C 55 4C				jmp IGC_no_gold
   318 						
   319 				;*****	Health Check
   320 				;		
   321 4C3A			HealthCheck
   322
   323 4C3A C9 06				cmp #CT_HEALTH
   324 4C3C D0 06				bne VertLaserCheck
   325 						
   326 4C3E EE DD 31				inc m_healthCounter
   327 4C41 4C 55 4C				jmp IGC_no_gold		
   328 						
   329 				;*****	Vertical Check
   330 				;		
   331 4C44			VertLaserCheck
   332
   333 4C44 C9 08				cmp #CT_VLASER
   334 4C46 D0 06				bne HoriLaserCheck
   335 						
   336 4C48 EE DA 31				inc m_verticalLaserOn
   337 4C4B 4C 55 4C				jmp IGC_no_gold
   338
   339 				;*****	Horizontal Check
   340 				;		
   341 4C4E			HoriLaserCheck
   342
   343 4C4E C9 0A				cmp #CT_HLASER
   344 4C50 D0 03				bne IGC_no_gold
   345
   346 4C52 EE DB 31				inc m_horizontalLaserOn
   347 							
   348 				;*****	No Gold
   349 				;	
   350 4C55			IGC_no_gold
   351
   352 4C55 C8					iny
   353 4C56 C4 D4				cpy m_levelCharSizeX
   354 4C58 D0 BE				bne IGC_loop2
   355
   356 				;*****	Check Loop Y
   357 				;
   358 4C5A			IGC_check_loop_Y
   359
   360 4C5A E8					inx
   361 4C5B E4 D5				cpx m_levelCharSizeY
   362 4C5D D0 AD				bne IGC_loop1	
   363 4C5F 60					rts
   364
   365 				.endp	
   366
   367 				;
   368 				;**************************************************************************************************
   369 				; UpdateInfoLine
   370 				;**************************************************************************************************
   371 				;
   372 4C60			.proc InitPlatforms
   373
   374 4C60 A2 00				ldx #$00
   375 4C62 8E D5 31				stx m_floatPlatformV
   376 4C65 8E D6 31				stx m_floatPlatformH
   377 4C68 8E D7 31				stx m_floatPlatformIdx		
   378 						
   379 				;*****	Beging loop
   380 				;
   381 4C6B			loop
   382 4C6B A0 00				ldy #0									; column index
   383 					
   384 4C6D BD 3F 32				lda TabLevelLineAddressLSB,x		
   385 4C70 85 E9				sta m_ptrLevelLine
   386 						
   387 4C72 BD 3F 33				lda TabLevelLineAddressMSB,x
   388 4C75 85 EA				sta m_ptrLevelLine+1
   389
   390 				;*****	Middle loop
   391 				;
   392 4C77			loop1
   393
   394 4C77 B1 E9				lda (m_ptrLevelLine),y
   395 4C79 85 F1				sta m_currChar	
   396 4C7B 86 D3				stx m_pageZeroTempValue
   397 4C7D AA					tax
   398 4C7E BD 3F 34				lda TabCharDefinition,x
   399 4C81 A6 D3				ldx m_pageZeroTempValue
   400
   401 4C83 29 0F				and #15
   402 4C85 C9 07				cmp #CT_FLOATPLATFORMH
   403 4C87 F0 07				beq loopH
   404 						
   405 4C89 C9 09				cmp #CT_FLOATPLATFORMV
   406 4C8B F0 4F				beq loopV		
   407 4C8D 4C E2 4C				jmp loop2	
   408
   409 4C90			loopH
   410 4C90 AD 3D 6A				lda PlatformCharH
   411 4C93 C5 F1				cmp m_currChar
   412 4C95 F0 0A				beq StartH
   413
   414 4C97 AD 3E 6A				lda PlatformCharH+1
   415 4C9A C5 F1				cmp m_currChar
   416 4C9C F0 03				beq StartH
   417 4C9E 4C E2 4C				jmp loop2
   418 									
   419 4CA1			StartH	
   420 											 
   421 4CA1 8A					txa										; move x to a
   422 4CA2 48					pha										; store a
   423
   424 4CA3 98					tya										; move y to a
   425 4CA4 48					pha										; store a
   426 						
   427 4CA5 AC D7 31				ldy m_floatPlatformIdx					; put the current index in y
   428
   429 4CA8 48					pha
   430 4CA9 BD 3F 32				lda TabLevelLineAddressLSB,x
   431 4CAC 99 41 6A				sta PlatformBaseLSB,y
   432 4CAF BD 3F 33				lda TabLevelLineAddressMSB,x
   433 4CB2 99 49 6A				sta PlatformBaseMSB,y
   434 						
   435 4CB5 68					pla		
   436 4CB6 18					clc										; clear the carry
   437 4CB7 7D 3F 32				adc TabLevelLineAddressLSB,x			; add the lsb screen address		
   438 4CBA 99 05 6A				sta PlatformLSB,y						; store it by index		
   439 						
   440 4CBD BD 3F 33				lda TabLevelLineAddressMSB,x			; get the msb screen address
   441 4CC0 69 00				adc #00									; account for carry
   442 4CC2 99 0D 6A				sta PlatformMSB,y						; store it by index
   443 						
   444 4CC5 A9 01				lda #01									; type 01 is horizontal
   445 4CC7 99 1D 6A				sta PlatformType,y						; store it by index
   446 						
   447 4CCA A9 00				lda #$00								; initialize the step
   448 4CCC 99 2D 6A				sta PlatformStepX,y						; store it by index
   449 								
   450 4CCF EE D7 31				inc m_floatPlatformIdx					; increment the index
   451 4CD2 EE D6 31				inc m_floatPlatformH
   452 						
   453 4CD5 68					pla										; pull y
   454 4CD6 A8					tay										; restore y
   455
   456 4CD7 68					pla										; pull x
   457 4CD8 AA					tax										; restore x
   458
   459 4CD9 4C E2 4C				jmp loop2
   460 						
   461 4CDC			loopV	
   462 4CDC BD 3F 34				lda TabCharDefinition,x			
   463 4CDF EE D5 31				inc m_floatPlatformV
   464 						
   465 				;*****	Loop on X 
   466 				;		
   467 4CE2			loop2	
   468 4CE2 C8					iny
   469 4CE3 C4 D4				cpy m_levelCharSizeX
   470 4CE5 D0 90				bne loop1
   471 						
   472 4CE7 E8					inx
   473 4CE8 E4 D5				cpx m_levelCharSizeY
   474 4CEA F0 03				beq Exit
   475 4CEC 4C 6B 4C				jmp loop
   476 						
   477 4CEF			Exit		
   478 4CEF 60					rts
   479
   480 				.endp
   481
   482 				;
   483 				;**************************************************************************************************
   484 				; UpdateInfoLine
   485 				;**************************************************************************************************
   486 				;
   487 4CF0			.proc UpdateInfoLine
   488 					
   489 4CF0 AD DC 31				lda m_goldCounter						; assuming 99 or less
   490 4CF3 A0 04				ldy #4
   491 4CF5 20 D8 4A				jsr DisplayDebugInfoBinary99
   492
   493 4CF8 AD 06 32				lda m_activeEnemies
   494 4CFB A0 0C				ldy #12
   495 4CFD 20 D8 4A				jsr DisplayDebugInfoBinary99
   496
   497 4D00 AD DD 31				lda m_healthCounter						; assuming 99 or less
   498 4D03 A0 1F				ldy #31
   499 4D05 20 D8 4A				jsr DisplayDebugInfoBinary99
   500
   501 4D08 AD DF 31				lda m_disableGameTimer					; update the time here also
   502 4D0B D0 66				bne UIL_exit
   503 					
   504 4D0D AD DC 31				lda m_goldCounter
   505 4D10 D0 0A				bne UIL_update_timer
   506 						
   507 4D12 AD 06 32				lda m_activeEnemies
   508 4D15 D0 05				bne UIL_update_timer
   509 					
   510 4D17 A9 01				lda #1
   511 4D19 8D DF 31				sta m_disableGameTimer					; my record? 1:16.1 (NTSC, lost one life)
   512
   513 				;*****	allow the final update..
   514 				;
   515 4D1C			UIL_update_timer
   516 					
   517 4D1C EE E3 31				inc m_gameTSFrameCounter
   518 4D1F AD E3 31				lda m_gameTSFrameCounter
   519 4D22 C9 06				cmp #TENTH_OF_SECOND_FRAMES
   520 4D24 D0 35				bne UIL_draw_timer
   521 					
   522 4D26 A9 00				lda #0
   523 4D28 8D E3 31				sta m_gameTSFrameCounter
   524 4D2B EE E2 31				inc m_gameTimerTSeconds
   525 						
   526 4D2E AD E2 31				lda m_gameTimerTSeconds
   527 4D31 C9 0A				cmp #10
   528 4D33 D0 26				bne UIL_draw_timer
   529 					
   530 4D35 A9 00				lda #0
   531 4D37 8D E2 31				sta m_gameTimerTSeconds
   532 4D3A EE E0 31				inc m_gameTimerSeconds
   533 					
   534 4D3D AD E0 31				lda m_gameTimerSeconds
   535 4D40 C9 3C				cmp #60
   536 4D42 D0 17				bne UIL_draw_timer
   537 					
   538 4D44 A9 00				lda #0
   539 4D46 8D E0 31				sta m_gameTimerSeconds
   540 4D49 EE E1 31				inc m_gameTimerMinutes
   541
   542 4D4C AD E1 31				lda m_gameTimerMinutes
   543 4D4F C9 64				cmp #100
   544 4D51 D0 08				bne UIL_draw_timer
   545 					
   546 4D53 A9 01				lda #1
   547 4D55 8D DF 31				sta m_disableGameTimer
   548 4D58 4C 73 4D				jmp UIL_exit							; final timer would be 99:99.9 in this case
   549
   550 				;*****	Draw Timer
   551 				;
   552 4D5B			UIL_draw_timer
   553 					
   554 4D5B AD E1 31				lda m_gameTimerMinutes
   555 4D5E A0 14				ldy #20
   556 4D60 20 D8 4A				jsr DisplayDebugInfoBinary99
   557 					
   558 4D63 AD E0 31				lda m_gameTimerSeconds
   559 4D66 A0 17				ldy #23
   560 4D68 20 D8 4A				jsr DisplayDebugInfoBinary99
   561 					
   562 4D6B AD E2 31				lda m_gameTimerTSeconds
   563 4D6E A0 1A				ldy #26
   564 4D70 20 F9 4A				jsr DisplayDebugInfoBinary9
   565
   566 				;*****	Exit
   567 				;
   568 4D73			UIL_exit
   569 						
   570 				;		lda m_playerScreenLeftX
   571 				;		ldy #40
   572 				;		jsr DisplayDebugInfoHexFF
   573 				;
   574 				;		lda m_playerScreenTopY
   575 				;		ldy #43
   576 				;		jsr DisplayDebugInfoHexFF
   577 				;
   578 				;		lda m_playerState
   579 				;		ldy #46
   580 				;		jsr DisplayDebugInfoHexFF
   581 				;
   582 				;		lda m_lastPlayerSideDirection
   583 				;		ldy #49
   584 				;		jsr DisplayDebugInfoHexFF
   585 				;
   586 				;		lda m_animFrame
   587 				;		ldy #52
   588 				;		jsr DisplayDebugInfoHexFF
   589 				;
   590 				;		lda m_animIndex
   591 				;		ldy #55
   592 				;		jsr DisplayDebugInfoHexFF
   593 								
   594 4D73 60					rts
   595 					
   596 				.endp	
   597
   598 				;
   599 				;**************************************************************************************************
   600 				; UpdateTimers
   601 				;**************************************************************************************************
   602 				;
   603 4D74			.proc UpdateTimers
   604 						
   605 4D74 A5 CB				lda m_playerNoJumpTimer
   606 4D76 F0 02				beq UT_end_no_jump
   607 4D78 C6 CB				dec m_playerNoJumpTimer
   608 					
   609 				;************************************************
   610 				;	
   611 4D7A			UT_end_no_jump		
   612 						
   613 4D7A 60					rts
   614
   615 				.endp	
   616
   314 4D7B					icl "DisplayListInterrupts.asm"
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		DisplayListInterrupts.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	Color			Dec			HEX    	Color			Dec				HEX
    14 				;	-------------------------------		-----------------------------------
    15 				;	Black           00,			$00		Medium blue      08,    		$08
    16 				;	Rust            01,			$01		Dark blue        09,    		$09
    17 				;	Red-orange      02,			$02		Blue-grey      	 10,    		$0A
    18 				;	Dark orange     03,			$03		Olive green    	 11,    		$0B
    19 				;	Red             04,			$04		Medium green   	 12,    		$0C
    20 				;	Dk lavender     05,			$05		Dark green     	 13,    		$0D
    21 				;	Cobalt blue     06,			$06		Orange-green   	 14,    		$0E
    22 				;	Ultramarine     07,			$07		Orange         	 15,    		$0F
    23 				;
    24 				;**************************************************************************************************
    25 				; Display list 1 interruptions code
    26 				;**************************************************************************************************
    27 				;
    28 4D7B			GameDli_01
    29 						
    30 4D7B 48					pha
    31 4D7C 98					tya
    32 4D7D 48					pha
    33 						
    34 				.if PAL_VERSION = 0
    35
    36 4D7E					SetColor $00, $03, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4D7E A9 34					lda #[$03 * 16 + $04]
     9 4D80 8D 16 D0					sta COLPF0+$00
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    37 4D83					SetColor $01, $00, $0F
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4D83 A9 0F					lda #[$00 * 16 + $0F]
     9 4D85 8D 17 D0					sta COLPF0+$01
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    38 4D88					SetColor $02, $0D, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4D88 A9 D4					lda #[$0D * 16 + $04]
     9 4D8A 8D 18 D0					sta COLPF0+$02
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    39 4D8D					SetColor $03, $0F, $0C		
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4D8D A9 FC					lda #[$0F * 16 + $0C]
     9 4D8F 8D 19 D0					sta COLPF0+$03
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    40 						
    41 				.else
    42
    43 						SetColor 1, 15, 14		; yellow (collectables)
    44 						SetColor 2, 7, 2		; blue (water)
    45
    46 				.endif
    47 						
    48 4D92 A5 AD				lda m_playerScreenLeftX
    49 4D94 8D 00 D0				sta HPOSP0
    50 4D97 8D 01 D0				sta HPOSP1
    51 4D9A 8D 02 D0				sta HPOSP2
    52
    53 4D9D					SetFontAddress GameFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4D9D A9 A8				lda #>GAMEFONTADDRESS
     5 4D9F 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    54 4DA2 8D 0A D4		    	sta WSYNC   			; Wait off-screen
    55
    56 						
    57 4DA5					SetDisplayListInterrupt TextDli 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4DA5 A9 B3		      	lda #<TEXTDLI
     5 4DA7 8D FA FF			    sta NMIH_VECTOR
     6 4DAA A9 4D			    lda #>TEXTDLI
     7 4DAC 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    58
    59 4DAF 68					pla
    60 4DB0 A8					tay
    61 4DB1 68					pla
    62 						
    63 4DB2 40					rti
    64 				;
    65 				;**************************************************************************************************
    66 				; Display list 2 interruptions code
    67 				;**************************************************************************************************
    68 				;
    69 4DB3			TextDli
    70
    71 4DB3 48					pha
    72 4DB4 98					tya
    73 4DB5 48					pha
    74 							
    75 				.if PAL_VERSION = 0
    76
    77 4DB6					SetColor 1, $03, $0A
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4DB6 A9 3A					lda #[$03 * 16 + $0A]
     9 4DB8 8D 17 D0					sta COLPF0+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    78 4DBB					SetColor 2, $04, $01			
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4DBB A9 41					lda #[$04 * 16 + $01]
     9 4DBD 8D 18 D0					sta COLPF0+2
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    79 				.else
    80
    81 						SetColor 1, 15, 14		; yellow (collectables)
    82 						SetColor 2, 7, 2		; blue (water)
    83
    84 				.endif
    85 						
    86 4DC0					SetFontAddress TextFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4DC0 A9 AC				lda #>TEXTFONTADDRESS
     5 4DC2 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    87 4DC5 8D 0A D4				STA WSYNC 				;Wait off-screen
    88
    89 						
    90 4DC8					SetDisplayListInterrupt GameDli_01 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4DC8 A9 7B		      	lda #<GAMEDLI_01
     5 4DCA 8D FA FF			    sta NMIH_VECTOR
     6 4DCD A9 4D			    lda #>GAMEDLI_01
     7 4DCF 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    91
    92 4DD2 68					pla
    93 4DD3 A8					tay
    94 4DD4 68					pla
    95 						
    96 4DD5 40					rti
   315 4DD6					icl "PlayerStates.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerStates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerStates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 4DD6			TabPlayerMethodColor
    18 				.if PAL_VERSION = 0
    19 4DD6 0A BA 9A 9A 1C 78 + 	.byte 10, 11*16+10, 9*16+10, 9*16+10, 1*16+12, 7*16+8, 4, 2*16+6
    20 				.else
    21 					.byte 10, 10*16+10, 8*16+10, 8*16+10, 15*16+12, 7*16+8, 4, 1*16+6
    22 				.endif
    23
    24 4DDE			TabPlayerMethodLSB
    25 4DDE CC CA			.byte <PlayerMethodStatic, <PlayerMethodOverPlatform
    26 4DE0 04 7A			.byte <PlayerMethodJumping, <PlayerMethodFalling
    27 4DE2 F3 AF			.byte <PlayerMethodClimbing, <PlayerMethodInWater
    28 4DE4 A9 AC			.byte <PlayerMethodGravityTest, <PlayerMethodLose
    29
    30 4DE6			TabPlayerMethodMSB
    31 4DE6 4E 4F			.byte >PlayerMethodStatic, >PlayerMethodOverPlatform
    32 4DE8 51 51			.byte >PlayerMethodJumping, >PlayerMethodFalling
    33 4DEA 51 52			.byte >PlayerMethodClimbing, >PlayerMethodInWater
    34 4DEC 53 53			.byte >PlayerMethodGravityTest, >PlayerMethodLose
    35
    36 4DEE			TabPlayerMethodInitLSB
    37 4DEE 23 24			.byte <PlayerMethodInitStatic, <PlayerMethodInitOverPlatform
    38 4DF0 43 68			.byte <PlayerMethodInitJumping, <PlayerMethodInitFalling
    39 4DF2 81 8C			.byte <PlayerMethodInitClimbing, <PlayerMethodInitInWater
    40 4DF4 BB BC			.byte <PlayerMethodInitGravityTest, <PlayerMethodInitLose
    41
    42 4DF6			TabPlayerMethodInitMSB
    43 4DF6 4E 4E			.byte >PlayerMethodInitStatic, >PlayerMethodInitOverPlatform
    44 4DF8 4E 4E			.byte >PlayerMethodInitJumping, >PlayerMethodInitFalling
    45 4DFA 4E 4E			.byte >PlayerMethodInitClimbing, >PlayerMethodInitInWater
    46 4DFC 4E 4E			.byte >PlayerMethodInitGravityTest, >PlayerMethodInitLose
    47 				;
    48 				;**************************************************************************************************
    49 				; SetPlayerMethod
    50 				;**************************************************************************************************
    51 				;
    52 4DFE			SetPlayerMethod
    53 4DFE 86 D2			stx m_playerState
    54 					
    55 4E00 BD DE 4D			lda TabPlayerMethodLSB,x
    56 4E03 85 ED			sta m_playerMethodPointer
    57 					
    58 4E05 BD E6 4D			lda TabPlayerMethodMSB,x
    59 4E08 85 EE			sta m_playerMethodPointer+1
    60
    61 4E0A A9 8A			lda #$8A
    62 4E0C 85 9E			sta m_playerBaseColor00	
    63 					
    64 4E0E A9 3A			lda #$3A
    65 4E10 85 9F			sta m_playerBaseColor1A
    66 						
    67 4E12 A9 0F			lda #$0F
    68 4E14 85 A0			sta m_playerBaseColor1B
    69 						
    70 4E16 BD EE 4D			lda TabPlayerMethodInitLSB,x
    71 4E19 85 EB			sta m_pageZeroTempPointer
    72 					
    73 4E1B BD F6 4D			lda TabPlayerMethodInitMSB,x
    74 4E1E 85 EC			sta m_pageZeroTempPointer+1
    75 					
    76 4E20 6C EB 00			jmp (m_pageZeroTempPointer)
    77 				;
    78 				;**************************************************************************************************
    79 				; PlayerMethodInitStatic
    80 				;**************************************************************************************************
    81 				;
    82 4E23			PlayerMethodInitStatic
    83 4E23 60				rts
    84 				;
    85 				;**************************************************************************************************
    86 				; PlayerMethodInitOverPlatform
    87 				;**************************************************************************************************
    88 				;
    89 4E24			PlayerMethodInitOverPlatform
    90 4E24 A9 00			lda #0										; clear player speed in Y
    91 4E26 85 BD			sta m_playerSpeedY_H1
    92 4E28 85 BE			sta m_playerSpeedY_L1
    93 					
    94 4E2A A9 01			lda #SIDE_SPEED_LAND_H1						; init max side speed
    95 4E2C 85 B7			sta m_playerMaxSideSpeed_H1
    96 4E2E A9 01			lda #SIDE_SPEED_LAND_L1
    97 4E30 85 B8			sta m_playerMaxSideSpeed_L1
    98 					
    99 4E32 A9 00			lda #SIDE_ACCEL_LAND_H1						; init side accelerations
   100 4E34 85 B9			sta m_playerSideAccel_H1
   101 4E36 A9 20			lda #SIDE_ACCEL_LAND_L1
   102 4E38 85 BA			sta m_playerSideAccel_L1
   103
   104 4E3A A9 00			lda #SIDE_DEACCEL_LAND_H1
   105 4E3C 85 BB			sta m_playerSideDeaccel_H1
   106 4E3E A9 80			lda #SIDE_DEACCEL_LAND_L1
   107 4E40 85 BC			sta m_playerSideDeaccel_L1
   108 4E42 60				rts
   109 				;
   110 				;**************************************************************************************************
   111 				; PlayerMethodInitJumping
   112 				;**************************************************************************************************
   113 				;
   114 4E43			PlayerMethodInitJumping
   115
   116 4E43 A9 08			lda #JUMP_HOLD_FRAMES						; hold jump for this number of frames, if the button is still pressed
   117 4E45 85 CC			sta m_playerHoldJumpCounter
   118
   119 4E47 A5 BF			lda m_playerJumpSpeed_H1
   120 4E49 85 BD			sta m_playerSpeedY_H1
   121 4E4B A5 C0			lda m_playerJumpSpeed_L1
   122 4E4D 85 BE			sta m_playerSpeedY_L1
   123
   124 4E4F A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   125 4E51 85 B7			sta m_playerMaxSideSpeed_H1
   126 4E53 A9 20			lda #SIDE_SPEED_AIR_L1
   127 4E55 85 B8			sta m_playerMaxSideSpeed_L1
   128
   129 4E57 A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   130 4E59 85 B9			sta m_playerSideAccel_H1
   131 4E5B A9 10			lda #SIDE_ACCEL_AIR_L1
   132 4E5D 85 BA			sta m_playerSideAccel_L1
   133
   134 4E5F A9 00			lda #SIDE_DEACCEL_AIR_H1
   135 4E61 85 BB			sta m_playerSideDeaccel_H1
   136 4E63 A9 10			lda #SIDE_DEACCEL_AIR_L1
   137 4E65 85 BC			sta m_playerSideDeaccel_L1
   138 4E67 60				rts
   139 				;
   140 				;**************************************************************************************************
   141 				; PlayerMethodInitFalling
   142 				;**************************************************************************************************
   143 				;
   144 4E68			PlayerMethodInitFalling
   145
   146 4E68 A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   147 4E6A 85 B7			sta m_playerMaxSideSpeed_H1
   148 4E6C A9 20			lda #SIDE_SPEED_AIR_L1
   149 4E6E 85 B8			sta m_playerMaxSideSpeed_L1
   150
   151 4E70 A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   152 4E72 85 B9			sta m_playerSideAccel_H1
   153 4E74 A9 10			lda #SIDE_ACCEL_AIR_L1
   154 4E76 85 BA			sta m_playerSideAccel_L1
   155
   156 4E78 A9 00			lda #SIDE_DEACCEL_AIR_H1
   157 4E7A 85 BB			sta m_playerSideDeaccel_H1
   158 4E7C A9 10			lda #SIDE_DEACCEL_AIR_L1
   159 4E7E 85 BC			sta m_playerSideDeaccel_L1
   160
   161 4E80 60				rts
   162 				;
   163 				;**************************************************************************************************
   164 				; PlayerMethodInitClimbing
   165 				;**************************************************************************************************
   166 				;
   167 4E81			PlayerMethodInitClimbing
   168
   169 4E81 A9 00			lda #0										; clear player speed in X and Y
   170 4E83 85 B5			sta m_playerSideSpeed_H1
   171 4E85 85 B6			sta m_playerSideSpeed_L1
   172 4E87 85 BD			sta m_playerSpeedY_H1
   173 4E89 85 BE			sta m_playerSpeedY_L1
   174
   175 4E8B 60				rts
   176 				;
   177 				;**************************************************************************************************
   178 				; PlayerMethodInitInWater
   179 				;**************************************************************************************************
   180 				;
   181 4E8C			PlayerMethodInitInWater
   182
   183 4E8C A9 01			lda #1										; set starting direction going down (0 = going up, 1 = going down)
   184 4E8E 8D 38 32			sta m_waterPlayerDirectionFlag
   185
   186 4E91 A9 00			lda #0
   187 4E93 8D 39 32			sta m_playerOnWaterSurfaceFlag
   188
   189 4E96 46 BD			lsr m_playerSpeedY_H1						; reduce in half current falling speed
   190 4E98 66 BE			ror m_playerSpeedY_L1
   191
   192 4E9A 46 B5			lsr m_playerSideSpeed_H1					; reduce in half current side speed
   193 4E9C 66 B6			ror m_playerSideSpeed_L1
   194
   195 4E9E A9 00			lda #SIDE_SPEED_WATER_H1					; init max side speed
   196 4EA0 85 B7			sta m_playerMaxSideSpeed_H1
   197 4EA2 A9 80			lda #SIDE_SPEED_WATER_L1
   198 4EA4 85 B8			sta m_playerMaxSideSpeed_L1
   199
   200 4EA6 A9 00			lda #SIDE_ACCEL_WATER_H1					; init side accelerations
   201 4EA8 85 B9			sta m_playerSideAccel_H1
   202 4EAA A9 04			lda #SIDE_ACCEL_WATER_L1
   203 4EAC 85 BA			sta m_playerSideAccel_L1
   204
   205 4EAE A9 00			lda #SIDE_DEACCEL_WATER_H1
   206 4EB0 85 BB			sta m_playerSideDeaccel_H1
   207 4EB2 A9 04			lda #SIDE_DEACCEL_WATER_L1
   208 4EB4 85 BC			sta m_playerSideDeaccel_L1
   209
   210 4EB6 A9 1E			lda #WATER_NO_JUMP_FRAMES					; disable jump for some frames
   211 4EB8 85 CB			sta m_playerNoJumpTimer
   212 					
   213 4EBA 60				rts
   214 				;
   215 				;**************************************************************************************************
   216 				; PlayerMethodInitGravityTest
   217 				;**************************************************************************************************
   218 				;
   219 4EBB			PlayerMethodInitGravityTest
   220 4EBB 60				rts
   221 				;
   222 				;**************************************************************************************************
   223 				; PlayerMethodInitLose
   224 				;**************************************************************************************************
   225 				;
   226 4EBC			PlayerMethodInitLose
   227 4EBC A5 AE			lda m_playerScreenTopY
   228 4EBE 8D 3A 32			sta m_playerExplosionScreenTopY_H1
   229 4EC1 A9 00			lda #0
   230 4EC3 8D 3B 32			sta m_playerExplosionScreenTopY_L1
   231
   232 4EC6 A9 01			lda #1
   233 4EC8 8D 36 32			sta m_playerExplosionStep
   234
   235 4ECB 60				rts
   236 				;
   237 				;**************************************************************************************************
   238 				; PlayerMethodInitLose
   239 				;**************************************************************************************************
   240 				;
   241 4ECC			PlayerMethodStatic
   242 4ECC 4C 8A 49			jmp PlayerMethodReturn
   243
   244 				;
   245 				;**************************************************************************************************
   246 				;
   247 				; 	CheckCollectable
   248 				;
   249 				;**************************************************************************************************
   250 				;
   251 4ECF			.proc CheckCollectable
   252
   253 4ECF A9 04			lda #[PLR_WIDTH / 2]						; check middle left center pixel, to see if there is a collectable
   254 4ED1 8D 34 32			sta m_bottomPosOffsetX
   255 					
   256 4ED4 A9 0A			lda #[PLR_HEIGHT / 2]
   257 4ED6 8D 35 32			sta m_bottomPosOffsetY
   258 					
   259 4ED9 20 33 5B			jsr CheckPlayerBottomUpPos
   260
   261 4EDC 29 0F			and #15
   262 4EDE C9 02			cmp #CT_COLLECTABLE
   263 4EE0 F0 07			beq DecrementCoins
   264 					
   265 4EE2 C9 06			cmp	#CT_HEALTH
   266 4EE4 F0 0D			beq DecrementHealth
   267 					
   268 				;	lda m_playerLevelLeftX_H1					; check if right side pixel is in other char
   269 				;	and #%11									; "m_playerSizeXMinusOne"
   270 				;	beq CC_exit
   271 				;
   272 				;	iny											; check the right side char then
   273 				;	lda (m_ptrLevelLine),y
   274 				;	tax
   275 				;	lda TabCharDefinition,x
   276 				;	
   277 				;	and #15	
   278 				;	cmp #CT_COLLECTABLE
   279 				;	beq DecrementCoins
   280 				;	
   281 				;	cmp	#CT_HEALTH
   282 				;	beq DecrementHealth
   283 					
   284 				;	inc m_middleBottomCharPosX
   285
   286 4EE6 4C 0B 4F			jmp CC_exit
   287 					
   288 				;***** Decrement Coins
   289 				;	
   290 4EE9			DecrementCoins
   291 					
   292 4EE9 CE DC 31			dec m_goldCounter
   293 4EEC A9 06			lda #06
   294 4EEE 85 99			sta m_sfxEffect
   295 4EF0 4C FA 4E			jmp CC_start_animation
   296 					
   297 				;***** Decrement Health
   298 				;	
   299 4EF3			DecrementHealth	
   300 					
   301 4EF3 CE DD 31			dec m_healthCounter
   302 4EF6 A9 06			lda #06
   303 4EF8 85 99			sta m_sfxEffect
   304 						
   305 				;*****	Start Animation
   306 				;
   307 4EFA			CC_start_animation								; erase the collectable with the correct animation
   308 4EFA A5 E9			lda m_ptrLevelLine
   309 4EFC 18				clc
   310 4EFD 6D 37 32			adc m_middleBottomCharPosX
   311 4F00 85 EB			sta m_pageZeroTempPointer
   312 4F02 A5 EA			lda m_ptrLevelLine+1
   313 4F04 69 00			adc #0
   314 4F06 85 EC			sta m_pageZeroTempPointer+1
   315
   316 4F08 20 C1 61			jsr AddCoinAnimation
   317 					
   318 				;*****	Exit Proc
   319 				;
   320 4F0B			CC_exit
   321 						
   322 4F0B 60					rts
   323 						
   324 				.endp
   325 						
   326 				;
   327 				;**************************************************************************************************
   328 				; DoSideMovement
   329 				;**************************************************************************************************
   330 				;
   331 4F0C			DoSideMovement
   332
   333 4F0C A5 DE			lda m_stick0
   334 4F0E 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   335 4F10 C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   336 4F12 D0 1F			bne DSM_check_right							; if one or both are pressed, just continue
   337
   338 				;**************************************************
   339 				;
   340 4F14			DSM_check_deaccel_right
   341 4F14 A5 CD			lda m_lastPlayerSideDirection
   342 4F16 C9 01			cmp #PSD_RIGHT
   343 4F18 D0 09			bne DSM_check_deaccel_left
   344
   345 4F1A 20 53 59			jsr SubstractSideDeaccelToSpeed
   346 4F1D 20 67 59			jsr AddSideSpeedToPosition
   347 4F20 4C 6C 4F			jmp DSM_exit
   348
   349 				;**************************************************
   350 				;
   351 4F23			DSM_check_deaccel_left
   352 4F23 C9 02			cmp #PSD_LEFT
   353 4F25 F0 03			beq DSM_cdl1
   354 4F27 4C 6C 4F			jmp DSM_exit
   355
   356 				;**************************************************
   357 				;
   358 4F2A			DSM_cdl1
   359 4F2A 20 53 59			jsr SubstractSideDeaccelToSpeed
   360 4F2D 20 93 59			jsr SubstractSideSpeedToPosition
   361 4F30 4C 6C 4F			jmp DSM_exit
   362
   363 				;**************************************************
   364 				;
   365 4F33			DSM_check_right
   366 4F33 29 08			and #STICK_RIGHT	; check right
   367 4F35 D0 19			bne DSM_check_left
   368
   369 4F37 A5 CD			lda m_lastPlayerSideDirection
   370 4F39 C9 02			cmp #PSD_LEFT
   371 4F3B D0 06			bne DSM_move_to_right
   372
   373 4F3D A9 00			lda #0
   374 4F3F 85 B5			sta m_playerSideSpeed_H1
   375 4F41 85 B6			sta m_playerSideSpeed_L1
   376
   377 				;**************************************************
   378 				;
   379 4F43			DSM_move_to_right
   380 4F43 A9 01			lda #PSD_RIGHT
   381 4F45 85 CD			sta m_lastPlayerSideDirection
   382 4F47 20 31 59			jsr AddSideAccelToSpeed
   383 4F4A 20 67 59			jsr AddSideSpeedToPosition
   384 4F4D 4C 6C 4F			jmp DSM_exit
   385
   386 				;**************************************************
   387 				;
   388 4F50			DSM_check_left
   389 4F50 A5 DE			lda m_stick0
   390 4F52 29 04			and #STICK_LEFT						; check left
   391 4F54 D0 16			bne DSM_exit
   392
   393 4F56 A5 CD			lda m_lastPlayerSideDirection
   394 4F58 C9 01			cmp #PSD_RIGHT
   395 4F5A D0 06			bne DSM_move_to_left
   396
   397 4F5C A9 00			lda #0
   398 4F5E 85 B5			sta m_playerSideSpeed_H1
   399 4F60 85 B6			sta m_playerSideSpeed_L1
   400
   401 				;**************************************************
   402 				;
   403 4F62			DSM_move_to_left
   404 4F62 A9 02			lda #PSD_LEFT
   405 4F64 85 CD			sta m_lastPlayerSideDirection
   406 4F66 20 31 59			jsr AddSideAccelToSpeed
   407 4F69 20 93 59			jsr SubstractSideSpeedToPosition
   408
   409 				;**************************************************
   410 				;
   411 4F6C			DSM_exit
   412 4F6C 60				rts
   413 				;
   414 				;**************************************************************************************************
   415 				; DoSideControl
   416 				;**************************************************************************************************
   417 				;
   418 4F6D			DoSideControl
   419
   420 4F6D A5 DE			lda m_stick0
   421 4F6F 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   422 4F71 C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   423 4F73 F0 41			beq DSC_check_right							; if neither is pressed, just continue
   424
   425 				;**************************************************
   426 				;
   427 4F75			DSC_side_control_right
   428 4F75 29 08			and #STICK_RIGHT
   429 4F77 D0 20			bne DSC_side_control_left
   430 4F79 A5 CD			lda m_lastPlayerSideDirection
   431 4F7B C9 01			cmp #PSD_RIGHT
   432 4F7D D0 06			bne DSC_scr1
   433 4F7F 20 31 59			jsr AddSideAccelToSpeed
   434 4F82 4C B6 4F			jmp DSC_check_right
   435
   436 				;**************************************************
   437 				;
   438 4F85			DSC_scr1
   439 4F85 C9 02			cmp #PSD_LEFT
   440 4F87 D0 06			bne DSC_scr2
   441 4F89 20 53 59			jsr SubstractSideDeaccelToSpeed
   442 4F8C 4C B6 4F			jmp DSC_check_right
   443
   444 				;**************************************************
   445 				;
   446 4F8F			DSC_scr2
   447 4F8F A9 01			lda #PSD_RIGHT
   448 4F91 85 CD			sta m_lastPlayerSideDirection
   449 4F93 20 31 59			jsr AddSideAccelToSpeed
   450 4F96 4C B6 4F			jmp DSC_check_right
   451
   452 				;**************************************************
   453 				;
   454 4F99			DSC_side_control_left
   455 4F99 A5 CD			lda m_lastPlayerSideDirection
   456 4F9B C9 02			cmp #PSD_LEFT
   457 4F9D D0 06			bne DSC_scl1
   458 4F9F 20 31 59			jsr AddSideAccelToSpeed
   459 4FA2 4C B6 4F			jmp DSC_check_right
   460
   461 				;**************************************************
   462 				;
   463 4FA5			DSC_scl1
   464 4FA5 C9 01			cmp #PSD_RIGHT
   465 4FA7 D0 06			bne DSC_scl2
   466 4FA9 20 53 59			jsr SubstractSideDeaccelToSpeed
   467 4FAC 4C B6 4F			jmp DSC_check_right
   468
   469 				;**************************************************
   470 				;
   471 4FAF			DSC_scl2
   472 4FAF A9 02			lda #PSD_LEFT
   473 4FB1 85 CD			sta m_lastPlayerSideDirection
   474 4FB3 20 31 59			jsr AddSideAccelToSpeed
   475
   476 				;**************************************************
   477 				;
   478 4FB6			DSC_check_right
   479 4FB6 A5 CD			lda m_lastPlayerSideDirection
   480 4FB8 C9 01			cmp #PSD_RIGHT
   481 4FBA D0 06			bne DSC_check_left
   482 4FBC 20 67 59			jsr AddSideSpeedToPosition
   483 4FBF 4C C9 4F			jmp DSC_exit
   484
   485 				;**************************************************
   486 				;
   487 4FC2			DSC_check_left
   488 4FC2 C9 02			cmp #PSD_LEFT
   489 4FC4 D0 03			bne DSC_exit
   490 4FC6 20 93 59			jsr SubstractSideSpeedToPosition
   491
   492 				;**************************************************
   493 				;
   494 4FC9			DSC_exit
   495 4FC9 60				rts
   496 				;
   497 				;**************************************************************************************************
   498 				; Include Files
   499 				;**************************************************************************************************
   500 				;
   501 4FCA				icl "StateInPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 4FCA			PlayerMethodOverPlatform
    14
    15 4FCA 20 CF 4E				jsr CheckCollectable
    16 4FCD 20 E5 5B				jsr CheckCreatePlayerMissile
    17 4FD0 20 0C 4F				jsr DoSideMovement	
    18
    19 				;************************************************
    20 				;
    21 4FD3			PMGT_check_up
    22 						
    23 4FD3 A5 DE				lda m_stick0
    24 4FD5 29 01				and #STICK_UP						; check up
    25 4FD7 D0 66				bne PMGT_check_fall
    26
    27 4FD9 A5 DF				lda m_oldStick0
    28 4FDB 29 01				and #STICK_UP						; check old up (looking for "just pressed")
    29 4FDD F0 60				beq PMGT_check_fall
    30
    31
    32 4FDF A9 00				lda #0									; check bottom of a stair (left pixel)
    33 4FE1 8D 34 32				sta m_bottomPosOffsetX
    34 					
    35 4FE4 A9 00				lda #0
    36 4FE6 8D 35 32				sta m_bottomPosOffsetY
    37 						
    38 4FE9 20 E6 5A				jsr CheckPlayerBottomDownPos
    39
    40 4FEC AD 33 32				lda m_middleBottomChar
    41 4FEF 29 0F				and #15
    42 4FF1 C9 04				cmp #CT_LADDER
    43 4FF3 F0 16				beq PMGT_snap_ladder_up
    44
    45 4FF5 A9 03				lda #3									; check bottom of a stair (right pixel)
    46 4FF7 8D 34 32				sta m_bottomPosOffsetX
    47 						
    48 4FFA A9 00				lda #0
    49 4FFC 8D 35 32				sta m_bottomPosOffsetY
    50 						
    51 4FFF 20 E6 5A				jsr CheckPlayerBottomDownPos
    52
    53 5002 AD 33 32				lda m_middleBottomChar
    54 5005 29 0F				and #15
    55 5007 C9 04				cmp #CT_LADDER
    56 5009 D0 19				bne PMGT_check_jump
    57
    58 				;************************************************
    59 				; snap player to center of the ladder
    60 				;
    61 500B			PMGT_snap_ladder_up
    62
    63 500B A9 00				lda #0
    64 500D 85 A3				sta m_playerLevelLeftX_L1
    65 500F 85 A1				sta m_playerLevelLeftX_H2
    66
    67 5011 AD 37 32				lda m_middleBottomCharPosX
    68 5014 0A					asl
    69 5015 26 A1				rol m_playerLevelLeftX_H2				; x2
    70 5017 0A					asl
    71 5018 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
    72 501A 85 A2				sta m_playerLevelLeftX_H1
    73
    74 501C A2 04				ldx #PS_CLIMBING						; start climbing state
    75 501E 20 FE 4D				jsr SetPlayerMethod
    76
    77 5021 4C FE 50				jmp PMGT_end
    78
    79 				;************************************************
    80 				; start jumping state
    81 				;
    82 5024			PMGT_check_jump
    83
    84 5024 A2 02				ldx #PS_JUMPING
    85 5026 20 FE 4D				jsr SetPlayerMethod
    86
    87 5029 A5 B6				lda m_playerSideSpeed_L1				; reduce side speed a little
    88 502B 38					sec
    89 502C E9 40				sbc #JUMP_HSPEED_SLOWDOWN
    90 502E 85 B6				sta m_playerSideSpeed_L1
    91 						
    92 5030 A5 B5				lda m_playerSideSpeed_H1
    93 5032 E9 00				sbc #0
    94 5034 B0 04				bcs PMGT_jump_side_speed
    95 						
    96 5036 A9 00				lda #0
    97 5038 85 B6				sta m_playerSideSpeed_L1
    98
    99 				;************************************************
   100 				;
   101 503A			PMGT_jump_side_speed
   102 						
   103 503A 85 B5				sta m_playerSideSpeed_H1
   104 503C 4C FE 50				jmp PMGT_end
   105
   106 				;************************************************
   107 				;
   108 503F			PMGT_check_fall
   109
   110 503F 20 07 56				jsr CheckHoleBelowPlayer
   111
   112 5042 A5 CF				lda m_playerOverPlatformFlag
   113 5044 D0 0C				bne CheckPlatformLeft
   114 					
   115 5046 A2 03				ldx #PS_FALLING							; start falling state
   116 5048 20 FE 4D				jsr SetPlayerMethod
   117
   118 504B 46 B5				lsr m_playerSideSpeed_H1				; divide by 2 the side speed, if there was any movement previous to falling
   119 504D 66 B6				ror m_playerSideSpeed_L1
   120
   121 504F 4C FE 50				jmp PMGT_end
   122
   123 				;*****	Check Platform Left
   124 				;
   125 5052			CheckPlatformLeft
   126 						
   127 5052 AD 31 32				lda m_leftBottomChar					; float Platform check
   128 5055 29 07				and #%00000111
   129 5057 C9 07				cmp #CT_FLOATPLATFORMH
   130 5059 D0 03				bne CheckPlatformRight
   131 						
   132 505B 4C C9 50				jmp ClampPlayer
   133
   134 				;*****	Check Platform Right		
   135 505E			CheckPlatformRight		
   136 						
   137 505E AD 32 32				lda m_rightBottomChar
   138 5061 29 07				and #%00000111
   139 5063 C9 07				cmp #CT_FLOATPLATFORMH
   140 5065 D0 03				bne PMGT_check_down	
   141
   142 5067 4C C9 50				jmp ClampPlayer
   143 						
   144 				;*****	Check down
   145 				;						
   146 506A			PMGT_check_down		
   147 506A A5 DE				lda m_stick0
   148 506C 29 02				and #STICK_DOWN	
   149 506E F0 03				beq SearchLadder
   150 						
   151 5070 4C FE 50				jmp PMGT_end
   152
   153 5073			SearchLadder
   154 5073 A9 00				lda #0									; search for a ladder one char below (left pixel)
   155 5075 8D 34 32				sta m_bottomPosOffsetX
   156 5078 A9 09				lda #[CHAR_PIX.else_Y+1]
   157 507A 8D 35 32				sta m_bottomPosOffsetY
   158 507D 20 E6 5A				jsr CheckPlayerBottomDownPos
   159
   160 5080 AD 33 32				lda m_middleBottomChar
   161 5083 29 0F				and #15
   162 5085 C9 04				cmp #CT_LADDER
   163 5087 F0 16				beq PMGT_snap_ladder_down
   164
   165 5089 A9 03				lda #3									; search for a ladder one char below (right pixel)
   166 508B 8D 34 32				sta m_bottomPosOffsetX
   167 508E A9 09				lda #[CHAR_PIX.else_Y+1]
   168 5090 8D 35 32				sta m_bottomPosOffsetY
   169 5093 20 E6 5A				jsr CheckPlayerBottomDownPos
   170
   171 5096 AD 33 32				lda m_middleBottomChar
   172 5099 29 0F				and #15
   173 509B C9 04				cmp #CT_LADDER
   174 509D D0 5F				bne PMGT_end
   175
   176 				;************************************************
   177 				; snap player to center of the ladder
   178 				;
   179 509F			PMGT_snap_ladder_down
   180 					
   181 509F A9 00				lda #0
   182 50A1 85 A3				sta m_playerLevelLeftX_L1
   183 50A3 85 A1				sta m_playerLevelLeftX_H2
   184
   185 50A5 AD 37 32				lda m_middleBottomCharPosX
   186 50A8 0A					asl
   187 50A9 26 A1				rol m_playerLevelLeftX_H2				; x2
   188 50AB 0A					asl
   189 50AC 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
   190 50AE 85 A2				sta m_playerLevelLeftX_H1
   191
   192 50B0 A9 00				lda #0									; put player one line below
   193 50B2 85 AC				sta m_playerLevelBottomY_L1
   194 						
   195 50B4 A5 AB				lda m_playerLevelBottomY_H1
   196 50B6 18					clc
   197 50B7 69 01				adc #1
   198 50B9 85 AB				sta m_playerLevelBottomY_H1
   199 					
   200 50BB A5 AA				lda m_playerLevelBottomY_H2
   201 50BD 69 00				adc #0
   202 50BF 85 AA				sta m_playerLevelBottomY_H2
   203
   204 50C1 A2 04				ldx #PS_CLIMBING						; start climbing state
   205 50C3 20 FE 4D				jsr SetPlayerMethod
   206 						
   207 50C6 4C FE 50				jmp PMGT_end
   208 						
   209 				;***** Clamp Player to platform
   210 50C9			ClampPlayer
   211
   212 50C9 A5 DE				lda m_stick0
   213 50CB C9 0F				cmp #$0F
   214 50CD D0 2F				bne PMGT_end
   215 						 
   216 50CF AE D7 31				ldx m_floatPlatformIdx
   217 50D2 CA					dex
   218 						
   219 50D3 BD 15 6A				lda PlatformTime,x
   220 50D6 C9 06				cmp #FLOAT_PLATFORM_TIMER
   221 50D8 D0 24				bne PMGT_end
   222 						
   223 50DA BD 25 6A				lda PlatformDirX,x
   224 50DD C9 00				cmp #00
   225 50DF D0 10				bne ClampLeft
   226 						
   227 50E1 18					clc		
   228 50E2 A5 A2				lda m_playerLevelLeftX_H1	
   229 50E4 69 04				adc #$04
   230 50E6 85 A2				sta m_playerLevelLeftX_H1
   231 50E8 A5 A1				lda m_playerLevelLeftX_H2
   232 50EA 69 00				adc #00
   233 50EC 85 A1				sta m_playerLevelLeftX_H2		
   234
   235 50EE 4C FE 50				jmp PMGT_end 
   236 						
   237 50F1			ClampLeft		
   238 50F1 38					sec
   239 50F2 A5 A2				lda m_playerLevelLeftX_H1
   240 50F4 E9 04				sbc #$04
   241 50F6 85 A2				sta m_playerLevelLeftX_H1
   242 50F8 A5 A1				lda m_playerLevelLeftX_H2
   243 50FA E9 00				sbc #00
   244 50FC 85 A1				sta m_playerLevelLeftX_H2		
   245 						
   246 				;************************************************
   247 				;
   248 50FE			PMGT_end
   249 						
   250 50FE 20 AE 54				jsr SetPlayerInfo
   251 5101 4C 8A 49				jmp PlayerMethodReturn
   502 5104				icl "StateJumping.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateJumping.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateJumping.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5104			PlayerMethodJumping
    14
    15 5104 20 CF 4E			jsr CheckCollectable
    16
    17 5107 20 E5 5B			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while jumping
    21 510A A5 DE			lda m_stick0
    22 510C 29 01			and #STICK_UP		; check if up is still pressed
    23 510E D0 3B			bne PMJ_air_control
    24
    25 5110 A5 DE			lda m_stick0
    26 5112 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 5114 C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 5116 D0 33			bne PMJ_air_control
    29
    30
    31 				;----------------------------------------
    32 5118			PMJ_check_ladder
    33 				; search for a ladder (middle pixel)
    34 5118 A9 02			lda #2
    35 511A 8D 34 32			sta m_bottomPosOffsetX
    36 511D A9 00			lda #0
    37 511F 8D 35 32			sta m_bottomPosOffsetY
    38 5122 20 E6 5A			jsr CheckPlayerBottomDownPos
    39
    40 5125 AD 33 32			lda m_middleBottomChar
    41 5128 29 0F			and #15
    42 512A C9 04			cmp #CT_LADDER
    43 512C D0 1D			bne PMJ_air_control
    44
    45 				; snap player to center of the ladder
    46 512E			PMJ_snap_ladder
    47 512E A9 00			lda #0
    48 5130 85 A3			sta m_playerLevelLeftX_L1
    49 5132 85 A1			sta m_playerLevelLeftX_H2
    50
    51 5134 AD 37 32			lda m_middleBottomCharPosX
    52 5137 0A				asl
    53 5138 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 513A 0A				asl
    55 513B 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 513D 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; abort jumping state
    59 513F A9 00			lda #0
    60 5141 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    61
    62 				; start climbing state
    63 5143 A2 04			ldx #PS_CLIMBING
    64 5145 20 FE 4D			jsr SetPlayerMethod
    65
    66 5148 4C 77 51			jmp PMJ_exit
    67
    68
    69 				;----------------------------------------
    70 514B			PMJ_air_control
    71 514B 20 6D 4F			jsr DoSideControl
    72
    73
    74 				;----------------------------------------
    75 514E			PMJ_update_jumping
    76 514E A5 CC			lda m_playerHoldJumpCounter
    77 5150 F0 0F			beq PMJ_decay_jump_speed
    78
    79 5152 A5 DE			lda m_stick0
    80 5154 29 01			and #STICK_UP		; check if up is still pressed
    81 5156 D0 05			bne PMJ_stick_not_up
    82
    83 5158 C6 CC			dec m_playerHoldJumpCounter	; update hold jump counter
    84 515A 4C 64 51			jmp PMJ_hold_jump_speed
    85
    86 515D			PMJ_stick_not_up
    87 515D A9 00			lda #0
    88 515F 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    89
    90 5161			PMJ_decay_jump_speed
    91 5161 20 E7 59			jsr SubstractGravityAccelToSpeed
    92
    93 5164			PMJ_hold_jump_speed
    94 5164 20 1D 5A			jsr SubstractSpeedYToPosition
    95
    96 5167 20 AE 54			jsr SetPlayerInfo
    97
    98 				; check if the speed in Y is already 0
    99 516A A5 BD			lda m_playerSpeedY_H1
   100 516C D0 09			bne PMJ_exit
   101 516E A5 BE			lda m_playerSpeedY_L1
   102 5170 D0 05			bne PMJ_exit
   103
   104 				; change to the falling state
   105 5172 A2 03			ldx #PS_FALLING
   106 5174 20 FE 4D			jsr SetPlayerMethod
   107
   108 5177			PMJ_exit
   109 5177 4C 8A 49			jmp PlayerMethodReturn
   503 517A				icl "StateFalling.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateFalling.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateFalling.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 517A			PlayerMethodFalling
    14
    15 517A 20 CF 4E			jsr CheckCollectable
    16
    17 517D 20 E5 5B			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while falling
    21 5180 A5 DE			lda m_stick0
    22 5182 29 01			and #STICK_UP		; check if up is still pressed
    23 5184 D0 37			bne PMF_check_restart_jump
    24
    25 5186 A5 DE			lda m_stick0
    26 5188 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 518A C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 518C D0 2F			bne PMF_check_restart_jump
    29
    30
    31 				;----------------------------------------
    32 518E			PMF_check_ladder
    33 				; search for a ladder (bottom middle pixel)
    34 518E A9 02			lda #2
    35 5190 8D 34 32			sta m_bottomPosOffsetX
    36 5193 A9 00			lda #0
    37 5195 8D 35 32			sta m_bottomPosOffsetY
    38 5198 20 E6 5A			jsr CheckPlayerBottomDownPos
    39
    40 519B AD 33 32			lda m_middleBottomChar
    41 519E 29 0F			and #15
    42 51A0 C9 04			cmp #CT_LADDER
    43 51A2 D0 19			bne PMF_check_restart_jump
    44
    45 				; snap player to center of the ladder
    46 51A4			PMF_snap_ladder
    47 51A4 A9 00			lda #0
    48 51A6 85 A3			sta m_playerLevelLeftX_L1
    49 51A8 85 A1			sta m_playerLevelLeftX_H2
    50
    51 51AA AD 37 32			lda m_middleBottomCharPosX
    52 51AD 0A				asl
    53 51AE 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 51B0 0A				asl
    55 51B1 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 51B3 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; start climbing state
    59 51B5 A2 04			ldx #PS_CLIMBING
    60 51B7 20 FE 4D			jsr SetPlayerMethod
    61
    62 51BA 4C F0 51			jmp PMF_exit
    63
    64
    65 				;----------------------------------------
    66 51BD			PMF_check_restart_jump
    67 				;
    68 				;	; uncomment this to allow infinite jumping
    69 				; 	lda m_stick0
    70 				; 	and #STICK_UP	; check up
    71 				; 	bne PMF_check_in_water
    72 				; 
    73 				; 	lda m_oldStick0
    74 				; 	and #STICK_UP	; check old up (looking for "just pressed")
    75 				; 	beq PMF_check_in_water
    76 				; 
    77 				;	; start jumping state
    78 				; 	ldx #PS_JUMPING
    79 				; 	jsr SetPlayerMethod
    80 				; 
    81 				; 	jmp PMF_exit
    82
    83
    84 				;----------------------------------------
    85 51BD			PMF_check_in_water
    86 				; search for water (center pixel)
    87 51BD A9 02			lda #2
    88 51BF 8D 34 32			sta m_bottomPosOffsetX
    89 51C2 A9 02			lda #2
    90 51C4 8D 35 32			sta m_bottomPosOffsetY
    91 51C7 20 33 5B			jsr CheckPlayerBottomUpPos
    92
    93 51CA AD 33 32			lda m_middleBottomChar
    94 51CD 29 0F			and #15
    95 51CF C9 05			cmp #CT_WATER
    96 51D1 D0 08			bne PMF_air_control
    97
    98 				; start in water state
    99 51D3 A2 05			ldx #PS_IN_WATER
   100 51D5 20 FE 4D			jsr SetPlayerMethod
   101
   102 51D8 4C F0 51			jmp PMF_exit
   103
   104
   105 				;----------------------------------------
   106 51DB			PMF_air_control
   107 51DB 20 6D 4F			jsr DoSideControl
   108
   109
   110 				;----------------------------------------
   111 51DE			PMF_update_falling
   112 51DE 20 C5 59			jsr AddGravityAccelToSpeed
   113
   114 51E1 20 FB 59			jsr AddSpeedYToPosition
   115
   116 51E4 20 AE 54			jsr SetPlayerInfo
   117
   118 51E7 A5 CF			lda m_playerOverPlatformFlag
   119 51E9 F0 05			beq PMF_exit
   120
   121
   122 				; change to the over platform state
   123 51EB A2 01			ldx #PS_OVER_PLATFORM
   124 51ED 20 FE 4D			jsr SetPlayerMethod
   125
   126
   127 51F0			PMF_exit
   128 51F0 4C 8A 49			jmp PlayerMethodReturn
   504 51F3				icl "StateClimbing.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateClimbing.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateClimbing.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; PlayerMethodClimbing
    15 				;**************************************************************************************************
    16 				;
    17 51F3			PlayerMethodClimbing
    18
    19 51F3 20 E5 5B				jsr CheckCreatePlayerMissile
    20
    21 				;************************************************
    22 				;
    23 51F6			PMC_check_up
    24 						
    25 51F6 A5 DE				lda m_stick0
    26 51F8 29 01				and #STICK_UP						; check up
    27 51FA D0 41				bne PMC_check_down
    28
    29 51FC A9 E0				lda #CLIMB_UP_SPEED_Y_L1
    30 51FE 85 BE				sta m_playerSpeedY_L1
    31 5200 A9 00				lda #CLIMB_UP_SPEED_Y_H1
    32 5202 85 BD				sta m_playerSpeedY_H1
    33
    34 						; update player position in Y
    35 5204 A5 AC				lda m_playerLevelBottomY_L1
    36 5206 38					sec
    37 5207 E5 BE				sbc m_playerSpeedY_L1
    38 5209 85 AC				sta m_playerLevelBottomY_L1
    39 520B A5 AB				lda m_playerLevelBottomY_H1
    40 520D E5 BD				sbc m_playerSpeedY_H1
    41 520F 85 AB				sta m_playerLevelBottomY_H1
    42 5211 A5 AA				lda m_playerLevelBottomY_H2
    43 5213 E9 00				sbc #0
    44 5215 85 AA				sta m_playerLevelBottomY_H2
    45
    46 						; search for an empty space at the middle bottom point of the player
    47 5217 A9 06				lda #[PLR_WIDTH/2 + 2]
    48 5219 8D 34 32				sta m_bottomPosOffsetX
    49 521C A9 00				lda #0
    50 521E 8D 35 32				sta m_bottomPosOffsetY
    51 5221 20 E6 5A				jsr CheckPlayerBottomDownPos
    52
    53 5224 AD 33 32				lda m_middleBottomChar
    54 5227 29 0F				and #15
    55 5229 D0 0F				bne PMC_end_move_up
    56
    57 						; snap to the bottom and go to the platform state
    58 522B A5 AB				lda m_playerLevelBottomY_H1
    59 522D 09 07				ora #[CHAR_PIX.else_Y-1]
    60 522F 85 AB				sta m_playerLevelBottomY_H1
    61
    62 5231 A9 00				lda #0
    63 5233 85 AC				sta m_playerLevelBottomY_L1
    64
    65 5235 A2 01				ldx #PS_OVER_PLATFORM
    66 5237 20 FE 4D				jsr SetPlayerMethod
    67
    68 				;************************************************
    69 				;
    70 523A			PMC_end_move_up
    71 523A 4C A9 52				jmp PMC_exit
    72
    73
    74 				;************************************************
    75 				;
    76 523D			PMC_check_down
    77
    78 523D A5 DE				lda m_stick0
    79 523F 29 02				and #STICK_DOWN					; check down
    80 5241 D0 66				bne PMC_exit
    81
    82 5243 A9 80				lda #CLIMB_DOWN_SPEED_Y_L1
    83 5245 85 BE				sta m_playerSpeedY_L1
    84 5247 A9 01				lda #CLIMB_DOWN_SPEED_Y_H1
    85 5249 85 BD				sta m_playerSpeedY_H1
    86
    87 						; update player position in Y
    88 524B A5 AC				lda m_playerLevelBottomY_L1
    89 524D 18					clc
    90 524E 65 BE				adc m_playerSpeedY_L1
    91 5250 85 AC				sta m_playerLevelBottomY_L1
    92 5252 A5 AB				lda m_playerLevelBottomY_H1
    93 5254 65 BD				adc m_playerSpeedY_H1
    94 5256 85 AB				sta m_playerLevelBottomY_H1
    95 5258 A5 AA				lda m_playerLevelBottomY_H2
    96 525A 69 00				adc #0
    97 525C 85 AA				sta m_playerLevelBottomY_H2
    98
    99 						; special check for the top char of a ladder (that is a platform)
   100 525E A9 06				lda #[PLR_WIDTH/2 + 2]
   101 5260 8D 34 32				sta m_bottomPosOffsetX
   102 5263 A9 08				lda #CHAR_PIX.else_Y
   103 5265 8D 35 32				sta m_bottomPosOffsetY
   104 5268 20 E6 5A				jsr CheckPlayerBottomDownPos
   105
   106 526B AD 33 32				lda m_middleBottomChar
   107 526E 29 0F				and #15
   108 5270 C9 04				cmp #CT_LADDER
   109 5272 F0 35				beq PMC_exit
   110
   111 						; search for a platform at the middle bottom point of the player
   112 5274 A9 06				lda #[PLR_WIDTH/2 + 2]
   113 5276 8D 34 32				sta m_bottomPosOffsetX
   114 5279 A9 00				lda #0
   115 527B 8D 35 32				sta m_bottomPosOffsetY
   116 527E 20 E6 5A				jsr CheckPlayerBottomDownPos
   117
   118 5281 AD 33 32				lda m_middleBottomChar
   119 5284 29 01				and #01
   120 5286 C9 01				cmp #CT_BLOCK
   121 5288 D0 1F				bne PMC_exit
   122
   123 528A AD 33 32				lda m_middleBottomChar
   124 528D 29 10				and #%00010000
   125 528F F0 18				beq PMC_exit
   126
   127 						; snap to the bottom and go to the platform state
   128 5291 A5 AB				lda m_playerLevelBottomY_H1
   129 5293 29 F8				and #%11111000
   130 5295 38					sec
   131 5296 E9 01				sbc #1
   132 5298 85 AB				sta m_playerLevelBottomY_H1
   133 529A A5 AA				lda m_playerLevelBottomY_H2
   134 529C E9 00				sbc #0
   135 529E 85 AA				sta m_playerLevelBottomY_H2
   136
   137 52A0 A9 00				lda #0
   138 52A2 85 AC				sta m_playerLevelBottomY_L1
   139 					
   140 52A4 A2 01				ldx #PS_OVER_PLATFORM
   141 52A6 20 FE 4D				jsr SetPlayerMethod
   142
   143 				;************************************************
   144 				;
   145 52A9			PMC_exit
   146
   147 52A9 20 AE 54				jsr SetPlayerInfo
   148 52AC 4C 8A 49				jmp PlayerMethodReturn
   505 52AF				icl "StateInWater.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInWater.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInWater.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 52AF			PlayerMethodInWater
    14
    15 52AF 20 CF 4E			jsr CheckCollectable		; add collectables in water for this
    16 					
    17 52B2 20 E5 5B			jsr CheckCreatePlayerMissile
    18
    19
    20 				;----------------------------------------
    21 				; search for water (top center pixel)
    22 52B5 A9 02			lda #2
    23 52B7 8D 34 32			sta m_bottomPosOffsetX
    24 52BA A9 07			lda #7
    25 52BC 8D 35 32			sta m_bottomPosOffsetY
    26 52BF 20 33 5B			jsr CheckPlayerBottomUpPos
    27
    28 52C2 AD 33 32			lda m_middleBottomChar
    29 52C5 29 0F			and #15
    30 52C7 C9 05			cmp #CT_WATER
    31 52C9 F0 12			beq PMIW_check_water_moves
    32
    33 				; check jump input to go out of the water
    34 52CB A5 DE			lda m_stick0
    35 52CD 29 01			and #STICK_UP	; check up
    36 52CF D0 0C			bne PMIW_check_water_moves
    37
    38 					; this doesn't work well..
    39 				 	;lda m_oldStick0
    40 				 	;and #STICK_UP	; check old up
    41 				 	;beq PMIW_check_water_moves
    42
    43 52D1 A5 CB			lda m_playerNoJumpTimer
    44 52D3 D0 08			bne PMIW_check_water_moves
    45 					
    46 				; start jumping state
    47 52D5 A2 02			ldx #PS_JUMPING
    48 52D7 20 FE 4D			jsr SetPlayerMethod
    49
    50 52DA 4C A6 53			jmp PMIW_exit
    51
    52
    53 				;----------------------------------------
    54 52DD			PMIW_check_water_moves
    55 52DD AD 39 32			lda m_playerOnWaterSurfaceFlag
    56 52E0 F0 03			beq PMIW_check_move_up
    57 52E2 4C 66 53			jmp PMIW_on_surface
    58
    59
    60 				;----------------------------------------
    61 				; check vertical movement
    62
    63 52E5			PMIW_check_move_up
    64 52E5 A5 DE			lda m_stick0
    65 52E7 29 01			and #STICK_UP		; check up
    66 52E9 D0 0E			bne PMIW_check_move_down
    67
    68 					;jmp PMIW_under_surface
    69
    70 52EB AD 38 32			lda m_waterPlayerDirectionFlag
    71 52EE D0 06			bne PMIW_move_up_down
    72
    73 52F0			PMIW_move_up_up
    74 52F0 20 94 5A			jsr AddWaterMoveUpAccelToSpeed
    75 52F3 4C 33 53			jmp PMIW_going_up_speed
    76
    77 52F6			PMIW_move_up_down
    78 52F6 4C 52 53			jmp PMIW_going_down
    79
    80
    81 52F9			PMIW_check_move_down
    82 52F9 A5 DE			lda m_stick0
    83 52FB 29 02			and #STICK_DOWN	; check down
    84 52FD D0 2C			bne PMIW_under_surface
    85
    86 52FF AD 38 32			lda m_waterPlayerDirectionFlag
    87 5302 D0 14			bne PMIW_move_down_down
    88
    89 5304			PMIW_move_down_up
    90 5304 20 80 5A			jsr SubstractWaterAccelToSpeed
    91
    92 5307 20 1D 5A			jsr SubstractSpeedYToPosition
    93
    94 530A A5 BD			lda m_playerSpeedY_H1
    95 530C 05 BE			ora m_playerSpeedY_L1
    96 530E D0 18			bne PMIW_check_move_exit
    97
    98 5310 A9 01			lda #1
    99 5312 8D 38 32			sta m_waterPlayerDirectionFlag
   100
   101 5315 4C A0 53			jmp PMIW_check_side_moves
   102
   103 5318			PMIW_move_down_down
   104 5318 20 B6 5A			jsr AddWaterMoveDownAccelToSpeed
   105
   106 531B 20 FB 59			jsr AddSpeedYToPosition
   107
   108 531E A5 CF			lda m_playerOverPlatformFlag
   109 5320 F0 06			beq PMIW_check_move_exit
   110
   111 				; reset speed in Y after a bottom collision
   112 5322 A9 00			lda #0
   113 5324 85 BD			sta m_playerSpeedY_H1
   114 5326 85 BE			sta m_playerSpeedY_L1
   115
   116 5328			PMIW_check_move_exit
   117 5328 4C A0 53			jmp PMIW_check_side_moves
   118
   119
   120 				;----------------------------------------
   121 532B			PMIW_under_surface
   122 532B AD 38 32			lda m_waterPlayerDirectionFlag
   123 532E D0 22			bne PMIW_going_down
   124
   125 5330			PMIW_going_up
   126 5330 20 5E 5A			jsr AddWaterAccelToSpeed
   127
   128 5333			PMIW_going_up_speed
   129 5333 20 1D 5A			jsr SubstractSpeedYToPosition
   130
   131 				; check if we are emerging from water (middle height, center pixel)
   132 5336			PMIW_emerging
   133 5336 A9 02			lda #2
   134 5338 8D 34 32			sta m_bottomPosOffsetX
   135 533B A9 03			lda #3
   136 533D 8D 35 32			sta m_bottomPosOffsetY
   137 5340 20 33 5B			jsr CheckPlayerBottomUpPos
   138
   139 5343 AD 33 32			lda m_middleBottomChar
   140 5346 29 0F			and #15
   141 5348 D0 56			bne PMIW_check_side_moves
   142
   143 534A A9 01			lda #1
   144 534C 8D 39 32			sta m_playerOnWaterSurfaceFlag
   145
   146 534F 4C A0 53			jmp PMIW_check_side_moves
   147
   148
   149 5352			PMIW_going_down
   150 5352 20 80 5A			jsr SubstractWaterAccelToSpeed
   151
   152 5355			PMIW_going_down_speed
   153 5355 20 FB 59			jsr AddSpeedYToPosition
   154
   155 				; 	lda m_playerOverPlatformFlag
   156 				; 	beq PMIW_check_down_speed
   157 				;
   158 				; ; reset speed in Y after a bottom collision
   159 				; 	lda #0
   160 				; 	sta m_playerSpeedY_H1
   161 				; 	sta m_playerSpeedY_L1
   162 				; 	jmp PMIW_change_dir_to_up
   163
   164 5358			PMIW_check_down_speed
   165 5358 A5 BD			lda m_playerSpeedY_H1
   166 535A 05 BE			ora m_playerSpeedY_L1
   167 535C D0 42			bne PMIW_check_side_moves
   168
   169 535E			PMIW_change_dir_to_up
   170 535E A9 00			lda #0
   171 5360 8D 38 32			sta m_waterPlayerDirectionFlag
   172
   173 5363 4C A0 53			jmp PMIW_check_side_moves
   174
   175
   176 				;----------------------------------------
   177 5366			PMIW_on_surface
   178
   179 				; check water "buoyancy"
   180 5366 AD 38 32			lda m_waterPlayerDirectionFlag
   181 5369 D0 14			bne PMIW_going_down_surface
   182
   183 536B			PMIW_going_up_surface
   184 536B 20 80 5A			jsr SubstractWaterAccelToSpeed
   185
   186 536E 20 1D 5A			jsr SubstractSpeedYToPosition
   187
   188 5371 A5 BD			lda m_playerSpeedY_H1
   189 5373 05 BE			ora m_playerSpeedY_L1
   190 5375 D0 29			bne PMIW_check_side_moves
   191
   192 5377 A9 01			lda #1
   193 5379 8D 38 32			sta m_waterPlayerDirectionFlag
   194
   195 537C 4C A0 53			jmp PMIW_check_side_moves
   196
   197
   198 537F			PMIW_going_down_surface
   199 537F 20 5E 5A			jsr AddWaterAccelToSpeed
   200
   201 5382 20 FB 59			jsr AddSpeedYToPosition
   202
   203 				; search for water (top center pixel)
   204 5385 A9 02			lda #2
   205 5387 8D 34 32			sta m_bottomPosOffsetX
   206 538A A9 07			lda #7
   207 538C 8D 35 32			sta m_bottomPosOffsetY
   208 538F 20 33 5B			jsr CheckPlayerBottomUpPos
   209
   210 5392 AD 33 32			lda m_middleBottomChar
   211 5395 29 0F			and #15
   212 5397 C9 05			cmp #CT_WATER
   213 5399 D0 05			bne PMIW_check_side_moves
   214
   215 539B A9 00			lda #0
   216 539D 8D 39 32			sta m_playerOnWaterSurfaceFlag
   217
   218
   219 				;----------------------------------------
   220 53A0			PMIW_check_side_moves
   221 53A0 20 0C 4F			jsr DoSideMovement
   222
   223
   224 				;----------------------------------------
   225 53A3			PMIW_update_pos
   226 53A3 20 AE 54			jsr SetPlayerInfo
   227
   228
   229 53A6			PMIW_exit
   230 53A6 4C 8A 49			jmp PlayerMethodReturn
   506 				;	
   507 				;**************************************************************************************************
   508 				;
   509 				;**************************************************************************************************
   510 				; PlayerMethodGravityTest
   511 				;**************************************************************************************************
   512 				;
   513 53A9			PlayerMethodGravityTest
   514 53A9 4C 8A 49			jmp PlayerMethodReturn
   515 				;
   516 				;**************************************************************************************************
   517 				; PlayerMethodLose
   518 				;**************************************************************************************************
   519 				;
   520 53AC			PlayerMethodLose
   521 53AC 4C 8A 49			jmp PlayerMethodReturn
   316 53AF					icl "PlayerMovement.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerMovement.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerMoveent.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				;
    15 				;	SetSpawnPos
    16 				;
    17 				;		Set the initial position of the player.
    18 				;		Uses PARAM00 as the level number.		
    19 				;
    20 				;**************************************************************************************************
    21 				;
    22 53AF			.proc SetSpawnPos
    23
    24 						; set spawn position
    25 53AF A6 92				ldx m_param00
    26 						
    27 53B1 A9 00				lda #0
    28 53B3 85 A1				sta m_playerLevelLeftX_H2
    29 53B5 BD 00 30				lda LevelsPlayer_X,x
    30 53B8 85 A2				sta m_playerLevelLeftX_H1
    31 						
    32 53BA A9 00				lda #0
    33 53BC 85 A3				sta m_playerLevelLeftX_L1				; fractional part
    34 53BE 85 AA				sta m_playerLevelBottomY_H2
    35 						
    36 53C0 A6 F2				ldx m_currLevelNum
    37 53C2 BD 01 30				lda LevelsPlayer_Y,x
    38 53C5 A2 08				ldx #8 
    39 53C7 20 66 4A				jsr MultiplyAX
    40 53CA AD E2 49				lda _productLo
    41 53CD 69 07				adc #7		
    42 53CF 85 AB				sta m_playerLevelBottomY_H1
    43 						
    44 53D1 A9 00				lda #0
    45 53D3 85 AC				sta m_playerLevelBottomY_L1				; fractional part
    46
    47 53D5 20 AE 54				jsr SetPlayerInfo						; Set the players info	
    48 					
    49 53D8 60					rts
    50
    51 				.endp	
    52
    53 				;
    54 				;**************************************************************************************************
    55 				; SetAnimationIndex
    56 				;**************************************************************************************************
    57 				;
    58 53D9			.proc SetAnimationIndex
    59
    60 53D9			CheckState
    61 53D9 A5 D2				lda m_playerState
    62 53DB C9 01				cmp #PS_OVER_PLATFORM
    63 53DD F0 19				beq CheckWalking	
    64 53DF C9 00				cmp #PS_STATIC
    65 53E1 F0 5B				beq StandingIndex
    66 53E3 C9 02				cmp #PS_JUMPING
    67 53E5 F0 52				beq JumpFallIndex
    68 53E7 C9 03				cmp #PS_FALLING
    69 53E9 F0 4E				beq JumpFallIndex		
    70 53EB C9 04				cmp #PS_CLIMBING
    71 53ED F0 4F				beq StandingIndex		
    72 53EF C9 05				cmp #PS_IN_WATER
    73 53F1 F0 4B				beq StandingIndex		
    74 53F3 C9 07				cmp #PS_LOSE
    75 53F5 4C 3E 54				jmp StandingIndex		
    76 						 
    77 53F8			CheckWalking
    78 53F8 A5 DE				lda m_stick0
    79 53FA 29 0C				and #[STICK_RIGHT | STICK_LEFT]
    80 53FC C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
    81 53FE D0 03				bne ProcessFrame
    82 5400 4C 3E 54				jmp StandingIndex
    83 							
    84 5403			ProcessFrame		
    85 						; Process frame 
    86 5403 AD 2A 32				lda m_animFrame
    87 5406 69 01				adc #$01
    88 5408 8D 2A 32				sta m_animFrame
    89 						
    90 540B			IsWalking
    91 540B 29 0C				and #12
    92 540D C9 0C				cmp #12
    93 540F D0 03				bne check_one
    94 5411 4C 34 54				jmp WalkingIndex1
    95 						
    96 5414			check_one
    97 5414 AD 2A 32				lda m_animFrame
    98 5417 29 08				and #8		
    99 5419 C9 08				cmp #8
   100 541B D0 03				bne check_two
   101 541D 4C 3E 54				jmp StandingIndex
   102 						
   103 5420			check_two
   104 5420 AD 2A 32				lda m_animFrame
   105 5423 29 04				and #4
   106 5425 C9 04				cmp #4
   107 5427 D0 03				bne check_three		
   108 5429 4C 2F 54				jmp WalkingIndex
   109
   110 542C			check_three
   111 542C 4C 3E 54				jmp StandingIndex		
   112
   113 542F			WalkingIndex
   114 542F A9 03				lda #$03
   115 5431 4C 40 54				jmp Return_Exit		
   116
   117 5434			WalkingIndex1
   118 5434 A9 06				lda #$06
   119 5436 4C 40 54				jmp Return_Exit		
   120
   121 5439			JumpFallIndex
   122 5439 A9 09				lda #$09
   123 543B 4C 40 54				jmp Return_Exit
   124 						
   125 543E			StandingIndex
   126 543E A9 00				lda #0	
   127 								
   128 5440			Return_Exit
   129 5440 8D 2B 32				sta m_animIndex
   130 5443 AA					tax	
   131 5444 BD 97 35				lda TabAnimationMap,x
   132 5447 8D 2D 32				sta m_animOffset
   133 544A BD 98 35				lda TabAnimationMap+1,x
   134 544D 8D 2C 32				sta m_animHeight
   135 								
   136 5450 60					rts		
   137 				.endp
   138 				;
   139 				;**************************************************************************************************
   140 				; FlipPlayer
   141 				;**************************************************************************************************
   142 				;
   143 5451			.proc FlipPlayer
   144 					
   145 5451 48					pha
   146 5452 8A					txa
   147 5453 48					pha
   148 5454 98					tya
   149 5455 48					pha	
   150 							
   151 5456 BD 99 35				lda TabAnimationMap[0]+2,x	
   152 5459 C5 CD				cmp m_lastplayerSideDirection
   153 545B F0 38				beq FlipExit
   154
   155 545D BD 97 35				lda TabAnimationMap[0],x
   156 5460 8D 28 32				sta m_revOffset
   157 								
   158 5463 BD 98 35				lda TabAnimationMap[0]+1,x
   159 5466 8D 27 32				sta m_revHeight
   160 						
   161 5469 A5 CD				lda m_lastPlayerSideDirection
   162 546B 9D 99 35				sta TabAnimationMap[0]+2,x		
   163 						
   164 546E A0 00				ldy #0
   165 5470 AE 28 32				ldx m_revOffset				
   166 5473 BD AD 35		Flip	lda TabPlayerShape_01,x
   167 5476 20 9B 54				jsr ReverseSprite 
   168 5479 9D AD 35				sta TabPlayerShape_01,x
   169 						
   170 547C BD 01 36				lda TabPlayerShape_01A,x
   171 547F 20 9B 54				jsr ReverseSprite 
   172 5482 9D 01 36				sta TabPlayerShape_01A,x
   173 						
   174 5485 BD 55 36				lda TabPlayerShape_01B,x
   175 5488 20 9B 54				jsr ReverseSprite 
   176 548B 9D 55 36				sta TabPlayerShape_01B,x
   177 548E E8					inx
   178 548F C8					iny
   179 5490 CC 27 32				cpy m_revHeight
   180 5493 D0 DE				bne Flip
   181 						
   182 5495			FlipExit
   183 5495 68					pla
   184 5496 A8					tay
   185 5497 68					pla
   186 5498 AA					tax
   187 5499 68					pla
   188 549A 60					rts
   189 				.endp
   190 				;
   191 				;**************************************************************************************************
   192 				; ReverseSprite
   193 				;**************************************************************************************************
   194 				;
   195 549B			.proc ReverseSprite
   196 549B 8D 22 32				sta m_hldA
   197 549E 8C 23 32				sty m_hldY
   198 54A1 A0 07			 	ldy #$07 
   199 54A3 0E 22 32		loop1   asl m_hldA
   200 54A6 6A			        ror 
   201 54A7 88			        dey 
   202 54A8 10 F9		        bpl loop1        
   203 54AA AC 23 32		        ldy m_hldY
   204 54AD 60			        rts
   205 				.endp         	
   206 				;
   207 				;**************************************************************************************************
   208 				; SetPlayerInfo
   209 				;**************************************************************************************************
   210 				;
   211 54AE			.proc SetPlayerInfo
   212
   213 54AE A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   214 54B0 18					clc
   215 54B1 65 B3				adc m_playerSizeXMinusOne
   216 54B3 85 A5				sta m_playerLevelRightX_H1
   217 54B5 A5 A1				lda m_playerLevelLeftX_H2
   218 54B7 69 00				adc #0
   219 54B9 85 A4				sta m_playerLevelRightX_H2
   220
   221 54BB A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   222 54BD 38					sec
   223 54BE E5 B4				sbc m_playerSizeYMinusOne
   224 54C0 85 A8				sta m_playerLevelTopY_H1
   225 54C2 A5 AA				lda m_playerLevelBottomY_H2
   226 54C4 E9 00				sbc #0
   227 54C6 85 A7				sta m_playerLevelTopY_H2
   228
   229 54C8 60					rts
   230 						
   231 				.endp		
   232 				;
   233 				;**************************************************************************************************
   234 				; SetPlayerScreenPos
   235 				;**************************************************************************************************
   236 				;
   237 54C9			.proc SetPlayerScreenPos
   238
   239 54C9 A5 AD				lda m_playerScreenLeftX					; save old screen pos
   240 54CB 85 AF				sta m_oldPlayerScreenLeftX
   241
   242 54CD A5 AE				lda m_playerScreenTopY
   243 54CF 85 B0				sta m_oldPlayerScreenTopY
   244 						;
   245 						; get new screen pos
   246 						;
   247 						; 	(this should use the "_H2" positions if the delta between the player
   248 						; 	and the camera is too big, 64 chars in X, or 32 chars in Y)
   249 						;
   250 54D1 A5 A2				lda m_playerLevelLeftX_H1
   251 54D3 38					sec
   252 54D4 E5 DB				sbc m_levelWindowX_H1
   253 54D6 18					clc
   254 54D7 69 30				adc #PM_BASE_SCREEN_X
   255 54D9 85 AD				sta m_playerScreenLeftX
   256
   257 54DB A5 A8				lda m_playerLevelTopY_H1
   258 54DD 38					sec
   259 54DE E5 DD				sbc m_levelWindowY_H1
   260 54E0 18					clc
   261 54E1 69 20				adc #PM_BASE_SCREEN_Y
   262 54E3 85 AE				sta m_playerScreenTopY
   263
   264 54E5 E6 9C				inc m_redrawPlayerCounter				; signal for the DLI to redraw the player
   265
   266 54E7 60					rts
   267
   268 				.endp		
   269 				;
   270 				;**************************************************************************************************
   271 				; DrawPlayer
   272 				;**************************************************************************************************
   273 				;
   274 54E8			.proc DrawPlayer
   275
   276 54E8 A5 9E				lda m_playerBaseColor00
   277 54EA 8D 12 D0				sta COLPM0
   278 54ED A5 9F				lda m_playerBaseColor1A
   279 54EF 8D 13 D0				sta COLPM1
   280 54F2 A5 A0				lda m_playerBaseColor1B
   281 54F4 8D 14 D0				sta COLPM2
   282
   283 54F7 A5 9C				lda m_redrawPlayerCounter
   284 54F9 D0 03				bne zdraw		
   285 54FB 4C 4A 55				jmp DP_exit				
   286
   287 54FE			zdraw
   288 54FE A9 00				lda #0
   289 5500 85 9C				sta m_redrawPlayerCounter
   290 						
   291 5502 20 D9 53				jsr SetAnimationIndex
   292
   293 5505 A9 00				lda #0
   294 5507 A2 00				ldx #0
   295 5509 A4 B0				ldy m_oldPlayerScreenTopY	
   296 550B			zfill	
   297 550B 99 00 A4				sta p0_area_1,y
   298 550E 99 00 A5				sta p1_area_1,y
   299 5511 99 00 A6				sta p2_area_1,y
   300 5514 C8					iny
   301 5515 E8					inx
   302 5516 EC 27 32				cpx m_revHeight
   303 5519 D0 F0				bne zfill
   304
   305 551B AE 2B 32				ldx m_animIndex
   306 551E 20 51 54				jsr FlipPlayer		
   307
   308 5521 A9 00				lda #$00
   309 5523 8D 29 32				sta m_animCount
   310 5526 AE 2D 32				ldx m_animOffset
   311 5529 A4 AE				ldy m_playerScreenTopY	
   312 552B			fill01
   313 552B BD AD 35				lda TabPlayerShape_01,x
   314 552E 99 00 A4				sta p0_area_1,y		
   315 5531 BD 01 36				lda TabPlayerShape_01A,x
   316 5534 99 00 A5				sta p1_area_1,y
   317 5537 BD 55 36				lda TabPlayerShape_01B,x
   318 553A 99 00 A6				sta p2_area_1,y
   319 553D C8					iny
   320 553E E8					inx
   321 553F EE 29 32				inc m_animCount
   322 5542 AD 29 32				lda m_animCount
   323 5545 CD 2C 32				cmp m_animHeight
   324 5548 90 E1				bcc fill01
   325
   326 554A			DP_exit
   327 554A 60					rts
   328 				.endp		
   329 				;
   330 				;**************************************************************************************************
   331 				; DrawPlayerExplosion
   332 				;**************************************************************************************************
   333 				;
   334 554B			.proc DrawPlayerExplosion
   335 554B A5 9D				lda m_missleBaseColor0
   336 554D 8D 15 D0				sta COLPM3
   337
   338 				;************************************************
   339 				;
   340 5550			DPE_erase										; erase previous player explosion frame
   341 5550 A2 00				ldx #0
   342 5552 AC 3A 32				ldy m_playerExplosionScreenTopY_H1
   343
   344 				;************************************************
   345 				;
   346 5555			DPE_erase_loop
   347 5555 A9 00				lda #0
   348 5557 99 00 A4				sta p0_area_1,y
   349 555A 99 00 A5				sta p1_area_1,y
   350 555D 99 00 A6				sta p2_area_1,y
   351 						
   352 5560 98					tya
   353 5561 18					clc
   354 5562 6D 36 32				adc m_playerExplosionStep
   355 5565 B0 06				bcs DPE_update_frame
   356 5567 A8					tay
   357
   358 5568 E8					inx
   359 5569 E4 B2				cpx m_playerSizeY
   360 556B D0 E8				bne DPE_erase_loop
   361
   362 				;************************************************
   363 				; 	update step and explosion starting line
   364 				; 	if step +1 --> line - 3.5
   365 				; 	if step +2 --> line - 7.0
   366 				;
   367 556D			DPE_update_frame
   368 556D AD 3B 32				lda m_playerExplosionScreenTopY_L1
   369 5570 38					sec
   370 5571 E9 80				sbc #$80
   371 5573 8D 3B 32				sta m_playerExplosionScreenTopY_L1
   372
   373 5576 AD 3A 32				lda m_playerExplosionScreenTopY_H1
   374 5579 E9 03				sbc #$03
   375 557B B0 06				bcs DPE_do_update
   376
   377 557D 20 99 4B				jsr InitPlayerInfo						; reached top of the screen, end explosion, respawn player
   378 5580 4C B3 55				jmp DPE_exit
   379 					
   380 				;************************************************
   381 				;
   382 5583			DPE_do_update
   383 5583 8D 3A 32				sta m_playerExplosionScreenTopY_H1
   384 5586 EE 36 32				inc m_playerExplosionStep				; step +1
   385
   386 				;************************************************
   387 				; draw new player explosion frame
   388 5589			DPE_draw										
   389 5589 A2 00				ldx #0
   390 558B AC 3A 32				ldy m_playerExplosionScreenTopY_H1
   391
   392 				;************************************************
   393 				;
   394 558E			DPE_draw_loop
   395 558E BD AD 35				lda TabPlayerShape_01,x
   396 5591 F0 03				beq DPE_draw_p1
   397 5593 99 00 A4				sta p0_area_1,y
   398
   399 				;************************************************
   400 				;
   401 5596			DPE_draw_p1
   402 5596 BD 01 36				lda TabPlayerShape_01A,x
   403 5599 F0 03				beq DPE_draw_p2	
   404 559B 99 00 A5				sta p1_area_1,y
   405
   406 				;************************************************
   407 				;
   408 559E			DPE_draw_p2	
   409 559E BD 55 36				lda TabPlayerShape_01B,x
   410 55A1 F0 03				beq DPE_draw_end
   411 55A3 99 00 A6				sta p2_area_1,y
   412
   413 				;************************************************
   414 				;
   415 55A6			DPE_draw_end
   416 55A6 98					tya
   417 55A7 18					clc
   418 55A8 6D 36 32				adc m_playerExplosionStep
   419 55AB B0 06				bcs DPE_exit
   420 55AD A8					tay
   421 55AE E8					inx
   422 55AF E4 B2				cpx m_playerSizeY
   423 55B1 D0 DB				bne DPE_draw_loop
   424
   425 				;************************************************
   426 				;
   427 55B3			DPE_exit
   428 						
   429 55B3 60					rts
   430
   431 				.endp		
   432 				;
   433 				;**************************************************************************************************
   434 				; CheckPlayerInLevelRightLimit
   435 				;**************************************************************************************************
   436 				;
   437 55B4			.proc CheckPlayerInLevelRightLimit
   438
   439 55B4 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   440 55B6 18					clc
   441 55B7 65 B3				adc m_playerSizeXMinusOne
   442 55B9 85 A5				sta m_playerLevelRightX_H1
   443 55BB A5 A1				lda m_playerLevelLeftX_H2
   444 55BD 69 00				adc #0
   445 55BF 85 A4				sta m_playerLevelRightX_H2
   446
   447 55C1 C5 D6				cmp m_levelSizeX_H2
   448 55C3 90 1D				bcc CPILRL_exit
   449 55C5 D0 06				bne CPILRL_reset_pos
   450
   451 55C7 A5 A5				lda m_playerLevelRightX_H1
   452 55C9 C5 D7				cmp m_levelSizeX_H1
   453 55CB 90 15				bcc CPILRL_exit
   454
   455 				;************************************************
   456 				;
   457 55CD			CPILRL_reset_pos
   458 55CD A9 00				lda #0
   459 55CF 85 A3				sta m_playerLevelLeftX_L1
   460
   461 55D1 A5 D7				lda m_levelSizeX_H1
   462 55D3 38					sec
   463 55D4 E5 B1				sbc m_playerSizeX
   464 55D6 85 A2				sta m_playerLevelLeftX_H1
   465 55D8 A5 D6				lda m_levelSizeX_H2
   466 55DA E9 00				sbc #0
   467 55DC 85 A1				sta m_playerLevelLeftX_H2
   468
   469 55DE A9 01				lda #1
   470 55E0 85 D1				sta m_playerSideCollisionFlag
   471
   472 				;************************************************
   473 				;
   474 55E2			CPILRL_exit
   475 					
   476 55E2 60				rts
   477 					
   478 				.endp	
   479 				;
   480 				;**************************************************************************************************
   481 				; CheckPlayerInLevelBottomLimit
   482 				;**************************************************************************************************
   483 				;
   484 55E3			.proc CheckPlayerInLevelBottomLimit
   485
   486 55E3 A5 AA				lda m_playerLevelBottomY_H2
   487 55E5 C5 D8				cmp m_levelSizeY_H2
   488 55E7 90 1D				bcc Exit
   489 55E9 D0 06				bne Reset_Pos
   490
   491 55EB A5 AB				lda m_playerLevelBottomY_H1
   492 55ED C5 D9				cmp m_levelSizeY_H1
   493 55EF 90 15				bcc Exit
   494
   495 				;************************************************
   496 				;
   497 55F1			Reset_Pos
   498 55F1 A9 00				lda #0
   499 55F3 85 AC				sta m_playerLevelBottomY_L1
   500
   501 55F5 A5 D9				lda m_levelSizeY_H1
   502 55F7 38					sec
   503 55F8 E9 01				sbc #1
   504 55FA 85 AB				sta m_playerLevelBottomY_H1
   505 55FC A5 D8				lda m_levelSizeY_H2
   506 55FE E9 00				sbc #0
   507 5600 85 AA				sta m_playerLevelBottomY_H2
   508
   509 5602 A9 01				lda #1
   510 5604 85 CF				sta m_playerOverPlatformFlag
   511
   512 				;************************************************
   513 				;
   514 5606			Exit
   515 5606 60					rts
   516
   517 				.endp		
   518 				;
   519 				;**************************************************************************************************
   520 				; CheckHoleBelowPlayer
   521 				;**************************************************************************************************
   522 				;
   523 5607			.proc CheckHoleBelowPlayer
   524
   525 						; get bottom char line
   526 5607 A5 AA				lda m_playerLevelBottomY_H2
   527 5609 8D 30 32				sta m_charBuffer_H2
   528 560C A5 AB				lda m_playerLevelBottomY_H1
   529 560E 18					clc
   530 560F 69 01				adc #1									; check one pixel below the bottom line of the player
   531 5611 90 03				bcc CHBP_get_char_line
   532 5613 EE 30 32				inc m_charBuffer_H2
   533
   534 				;************************************************
   535 				;
   536 5616			CHBP_get_char_line
   537 						
   538 5616 4E 30 32				lsr m_charBuffer_H2						; /2
   539 5619 6A					ror
   540 561A 4E 30 32				lsr m_charBuffer_H2						; /4
   541 561D 6A					ror
   542 561E 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   543 5621 6A					ror
   544
   545 						; check bottom level limit
   546 5622 C5 D5				cmp m_levelCharSizeY
   547 5624 B0 6F				bcs CHBP_no_hole
   548
   549 5626			GetLevelLine
   550
   551 5626 AA					tax
   552 5627 BD 3F 32				lda TabLevelLineAddressLSB,x
   553 562A 85 E9				sta m_ptrLevelLine
   554 562C BD 3F 33				lda TabLevelLineAddressMSB,x
   555 562F 85 EA				sta m_ptrLevelLine+1
   556
   557 						; update right coordinate
   558 5631 A5 A2				lda m_playerLevelLeftX_H1
   559 5633 18					clc
   560 5634 65 B3				adc m_playerSizeXMinusOne
   561 5636 85 A5				sta m_playerLevelRightX_H1
   562 5638 A5 A1				lda m_playerLevelLeftX_H2
   563 563A 69 00				adc #0
   564 563C 85 A4				sta m_playerLevelRightX_H2
   565
   566 						; get left point char column
   567 563E A5 A1				lda m_playerLevelLeftX_H2
   568 5640 8D 30 32				sta m_charBuffer_H2
   569 5643 A5 A2				lda m_playerLevelLeftX_H1
   570 5645 4E 30 32				lsr m_charBuffer_H2						; /2
   571 5648 6A					ror
   572 5649 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   573 564C 6A					ror
   574
   575 564D A8					tay
   576 564E B1 E9				lda (m_ptrLevelLine),y
   577 5650 AA					tax
   578 5651 BD 3F 34				lda TabCharDefinition,x
   579 5654 8D 31 32				sta m_leftBottomChar
   580
   581 						; get right point char column
   582 5657 A5 A4				lda m_playerLevelRightX_H2
   583 5659 8D 30 32				sta m_charBuffer_H2
   584 565C A5 A5				lda m_playerLevelRightX_H1
   585 565E 4E 30 32				lsr m_charBuffer_H2						; /2
   586 5661 6A					ror
   587 5662 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   588 5665 6A					ror
   589
   590 5666 A8					tay
   591 5667 B1 E9				lda (m_ptrLevelLine),y
   592 5669 AA					tax
   593 566A BD 3F 34				lda TabCharDefinition,x
   594 566D 8D 32 32				sta m_rightBottomChar
   595 					
   596 						; fast collision check
   597 5670 AD 31 32				lda m_leftBottomChar
   598 5673 29 01				and #01
   599 5675 C9 01				cmp #CT_BLOCK
   600 5677 D0 07				bne CHBP_check_next_char
   601
   602 5679 AD 31 32				lda m_leftBottomChar
   603 567C 29 10				and #%00010000
   604 567E D0 15				bne CHBP_no_hole
   605
   606 				;************************************************
   607 				;
   608 5680			CHBP_check_next_char
   609 						
   610 5680 AD 32 32				lda m_rightBottomChar
   611 5683 29 01				and #01
   612 5685 C9 01				cmp #CT_BLOCK
   613 5687 D0 07				bne CHBP_hole
   614
   615 5689 AD 32 32				lda m_rightBottomChar
   616 568C 29 10				and #%00010000
   617 568E D0 05				bne CHBP_no_hole
   618
   619 				;************************************************
   620 				;
   621 5690			CHBP_hole
   622
   623 						; need to change the player to the falling state
   624 5690 A9 00				lda #0
   625 5692 85 CF				sta m_playerOverPlatformFlag
   626 5694 60					rts
   627
   628 				;************************************************
   629 				;
   630 5695			CHBP_no_hole
   631
   632 5695 A9 01				lda #1
   633 5697 85 CF				sta m_playerOverPlatformFlag
   634 5699 60					rts
   635 				.endp
   636 				;
   637 				;**************************************************************************************************
   638 				; CheckPlayerBottomCollision
   639 				;**************************************************************************************************
   640 				;
   641 569A			.proc CheckPlayerBottomCollision
   642
   643 						; get bottom char line
   644 569A A5 AA				lda m_playerLevelBottomY_H2
   645 569C 8D 30 32				sta m_charBuffer_H2
   646 569F A5 AB				lda m_playerLevelBottomY_H1
   647
   648 56A1 4E 30 32				lsr m_charBuffer_H2						; /2
   649 56A4 6A					ror
   650 56A5 4E 30 32				lsr m_charBuffer_H2						; /4
   651 56A8 6A					ror
   652 56A9 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   653 56AC 6A					ror
   654
   655 56AD AA					tax
   656 56AE BD 3F 32				lda TabLevelLineAddressLSB,x
   657 56B1 85 E9				sta m_ptrLevelLine
   658 56B3 BD 3F 33				lda TabLevelLineAddressMSB,x
   659 56B6 85 EA				sta m_ptrLevelLine+1
   660
   661 						; update right coordinate
   662 56B8 A5 A2				lda m_playerLevelLeftX_H1
   663 56BA 18					clc
   664 56BB 65 B3				adc m_playerSizeXMinusOne
   665 56BD 85 A5				sta m_playerLevelRightX_H1
   666 56BF A5 A1				lda m_playerLevelLeftX_H2
   667 56C1 69 00				adc #0
   668 56C3 85 A4				sta m_playerLevelRightX_H2
   669
   670 						; get left point char column
   671 56C5 A5 A1				lda m_playerLevelLeftX_H2
   672 56C7 8D 30 32				sta m_charBuffer_H2
   673 56CA A5 A2				lda m_playerLevelLeftX_H1
   674 56CC 4E 30 32				lsr m_charBuffer_H2						; /2
   675 56CF 6A					ror
   676 56D0 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   677 56D3 6A					ror
   678
   679 56D4 A8					tay
   680 56D5 B1 E9				lda (m_ptrLevelLine),y
   681 56D7 AA					tax
   682 56D8 BD 3F 34				lda TabCharDefinition,x
   683 56DB 8D 31 32				sta m_leftBottomChar
   684
   685 						; get right point char column
   686 56DE A5 A4				lda m_playerLevelRightX_H2
   687 56E0 8D 30 32				sta m_charBuffer_H2
   688 56E3 A5 A5				lda m_playerLevelRightX_H1
   689 56E5 4E 30 32				lsr m_charBuffer_H2						; /2
   690 56E8 6A					ror
   691 56E9 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   692 56EC 6A					ror
   693
   694 56ED A8					tay
   695 56EE B1 E9				lda (m_ptrLevelLine),y
   696 56F0 AA					tax
   697 56F1 BD 3F 34				lda TabCharDefinition,x
   698 56F4 8D 32 32				sta m_rightBottomChar
   699
   700 						; fast collision check
   701 56F7 AD 31 32				lda m_leftBottomChar
   702 56FA 29 01				and #01
   703 56FC C9 01				cmp #CT_BLOCK
   704 56FE D0 07				bne CPBC_check_next_char
   705
   706 5700 AD 31 32				lda m_leftBottomChar
   707 5703 29 10				and #%00010000
   708 5705 D0 10				bne CPBC_found_collision
   709
   710 				;************************************************
   711 				;
   712 5707			CPBC_check_next_char
   713
   714 5707 AD 32 32				lda m_rightBottomChar
   715 570A 29 01				and #01
   716 570C C9 01				cmp #CT_BLOCK
   717 570E D0 1E				bne CPBC_exit
   718
   719 5710 AD 32 32				lda m_rightBottomChar
   720 5713 29 10				and #%00010000
   721 5715 F0 17				beq CPBC_exit
   722
   723 				;************************************************
   724 				;
   725 5717			CPBC_found_collision
   726
   727 						; need to move the player up and change to the platform state
   728 5717 A9 01				lda #1
   729 5719 85 CF				sta m_playerOverPlatformFlag
   730
   731 571B A9 00				lda #0
   732 571D 85 AC				sta m_playerLevelBottomY_L1
   733
   734 571F A5 AB				lda m_playerLevelBottomY_H1
   735 5721 29 F8				and #%11111000		; mask for CHAR_PIX.else_Y
   736 5723 38					sec
   737 5724 E9 01				sbc #1
   738 5726 85 AB				sta m_playerLevelBottomY_H1
   739 5728 A5 AA				lda m_playerLevelBottomY_H2
   740 572A E9 00				sbc #0
   741 572C 85 AA				sta m_playerLevelBottomY_H2
   742
   743 				;************************************************
   744 				;
   745 572E			CPBC_exit
   746 572E 60					rts
   747
   748 				.endp		
   749 				;
   750 				;**************************************************************************************************
   751 				; CheckPlayerTopCollision
   752 				;**************************************************************************************************
   753 				;
   754 572F			.proc CheckPlayerTopCollision
   755
   756 572F A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   757 5731 38					sec
   758 5732 E5 B4				sbc m_playerSizeYMinusOne
   759 5734 85 A8				sta m_playerLevelTopY_H1
   760 						
   761 5736 A5 AA				lda m_playerLevelBottomY_H2
   762 5738 E9 00				sbc #0
   763 573A 85 A7				sta m_playerLevelTopY_H2
   764
   765 573C A5 A7				lda m_playerLevelTopY_H2				; get top char line
   766 573E 8D 30 32				sta m_charBuffer_H2
   767 5741 A5 A8				lda m_playerLevelTopY_H1
   768
   769 5743 4E 30 32				lsr m_charBuffer_H2						; /2
   770 5746 6A					ror
   771 5747 4E 30 32				lsr m_charBuffer_H2						; /4
   772 574A 6A					ror
   773 574B 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   774 574E 6A					ror
   775
   776 574F AA					tax
   777 5750 BD 3F 32				lda TabLevelLineAddressLSB,x
   778 5753 85 E9				sta m_ptrLevelLine
   779 						
   780 5755 BD 3F 33				lda TabLevelLineAddressMSB,x
   781 5758 85 EA				sta m_ptrLevelLine+1
   782
   783 575A A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   784 575C 18					clc
   785 575D 65 B3				adc m_playerSizeXMinusOne
   786 575F 85 A5				sta m_playerLevelRightX_H1
   787 						
   788 5761 A5 A1				lda m_playerLevelLeftX_H2
   789 5763 69 00				adc #0
   790 5765 85 A4				sta m_playerLevelRightX_H2
   791
   792 5767 A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   793 5769 8D 30 32				sta m_charBuffer_H2
   794 						
   795 576C A5 A2				lda m_playerLevelLeftX_H1
   796 576E 4E 30 32				lsr m_charBuffer_H2						; /2
   797 5771 6A					ror
   798 5772 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   799 5775 6A					ror
   800
   801 5776 A8					tay
   802 5777 B1 E9				lda (m_ptrLevelLine),y
   803 						
   804 5779 AA					tax		
   805 577A BD 3F 34				lda TabCharDefinition,x
   806 577D 8D 2E 32				sta m_leftTopChar
   807
   808 5780 A5 A4				lda m_playerLevelRightX_H2				; get right point char column	
   809 5782 8D 30 32				sta m_charBuffer_H2
   810 						
   811 5785 A5 A5				lda m_playerLevelRightX_H1
   812 5787 4E 30 32				lsr m_charBuffer_H2						; /2
   813 578A 6A					ror
   814 578B 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   815 578E 6A					ror
   816
   817 578F A8					tay
   818 5790 B1 E9				lda (m_ptrLevelLine),y
   819 5792 AA					tax
   820 5793 BD 3F 34				lda TabCharDefinition,x
   821 5796 8D 2F 32				sta m_rightTopChar
   822
   823 5799 AD 2E 32				lda m_leftTopChar						; fast collision check	
   824 579C 29 01				and #01
   825 579E C9 01				cmp #CT_BLOCK
   826 57A0 D0 07				bne CPTC_check_next_char
   827
   828 57A2 AD 2E 32				lda m_leftTopChar
   829 57A5 29 20				and #%00100000
   830 57A7 D0 10				bne CPTC_found_collision
   831
   832 				;**************************************************
   833 				;
   834 57A9			CPTC_check_next_char
   835 						
   836 57A9 AD 2F 32				lda m_rightTopChar
   837 57AC 29 01				and #01
   838 57AE C9 01				cmp #CT_BLOCK
   839 57B0 D0 2B				bne CPTC_exit
   840
   841 57B2 AD 2F 32				lda m_rightTopChar
   842 57B5 29 20				and #%00100000
   843 57B7 F0 24				beq CPTC_exit
   844
   845 				;**************************************************
   846 				;
   847 57B9			CPTC_found_collision
   848
   849 57B9 A9 01				lda #1									; need to move the player down
   850 57BB 85 D0				sta m_playerTopCollisionFlag
   851
   852 57BD A9 00				lda #0
   853 57BF 85 AC				sta m_playerLevelBottomY_L1
   854
   855 57C1 A5 A8				lda m_playerLevelTopY_H1
   856 57C3 29 F8				and #%11111000							; mask for CHAR_PIX.else_Y
   857 57C5 18					clc
   858 57C6 69 08				adc #CHAR_PIX.else_Y 						; +m_playerSizeY
   859 57C8 85 AB				sta m_playerLevelBottomY_H1
   860 						
   861 57CA A5 A7				lda m_playerLevelTopY_H2
   862 57CC 69 00				adc #0
   863 57CE 85 AA				sta m_playerLevelBottomY_H2
   864
   865 57D0 A5 AB				lda m_playerLevelBottomY_H1
   866 57D2 18					clc
   867 57D3 65 B4				adc m_playerSizeYMinusOne
   868 57D5 85 AB				sta m_playerLevelBottomY_H1
   869 						
   870 57D7 A5 AA				lda m_playerLevelBottomY_H2
   871 57D9 69 00				adc #0
   872 57DB 85 AA				sta m_playerLevelBottomY_H2
   873
   874 				;**************************************************
   875 				;
   876 57DD			CPTC_exit
   877 57DD 60					rts
   878
   879 				.endp		
   880 				;
   881 				;**************************************************************************************************
   882 				; CheckPlayerLeftCollision
   883 				;**************************************************************************************************
   884 				;
   885 57DE			.proc CheckPlayerLeftCollision
   886
   887 57DE A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   888 57E0 38					sec
   889 57E1 E5 B4				sbc m_playerSizeYMinusOne
   890 57E3 85 A8				sta m_playerLevelTopY_H1
   891 						
   892 57E5 A5 AA				lda m_playerLevelBottomY_H2
   893 57E7 E9 00				sbc #0
   894 57E9 85 A7				sta m_playerLevelTopY_H2
   895
   896 57EB A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   897 57ED 8D 30 32				sta m_charBuffer_H2
   898 57F0 A5 A2				lda m_playerLevelLeftX_H1
   899
   900 57F2 4E 30 32				lsr m_charBuffer_H2						; /2
   901 57F5 6A					ror
   902 57F6 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   903 57F9 6A					ror
   904
   905 57FA A8					tay
   906 57FB A5 A7				lda m_playerLevelTopY_H2				; get top char line	
   907 57FD 8D 30 32				sta m_charBuffer_H2
   908 5800 A5 A8				lda m_playerLevelTopY_H1
   909
   910 5802 4E 30 32				lsr m_charBuffer_H2						; /2
   911 5805 6A					ror
   912 5806 4E 30 32				lsr m_charBuffer_H2						; /4
   913 5809 6A					ror
   914 580A 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   915 580D 6A					ror
   916
   917 580E AA					tax
   918 580F BD 3F 32				lda TabLevelLineAddressLSB,x
   919 5812 85 E9				sta m_ptrLevelLine
   920 5814 BD 3F 33				lda TabLevelLineAddressMSB,x
   921 5817 85 EA				sta m_ptrLevelLine+1
   922
   923 5819 B1 E9				lda (m_ptrLevelLine),y
   924 581B AA					tax
   925 581C BD 3F 34				lda TabCharDefinition,x
   926 581F 8D 2E 32				sta m_leftTopChar
   927
   928 5822 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
   929 5824 8D 30 32				sta m_charBuffer_H2
   930 5827 A5 AB				lda m_playerLevelBottomY_H1
   931
   932 5829 4E 30 32				lsr m_charBuffer_H2						; /2
   933 582C 6A					ror
   934 582D 4E 30 32				lsr m_charBuffer_H2						; /4
   935 5830 6A					ror
   936 5831 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   937 5834 6A					ror
   938
   939 5835 AA					tax
   940 5836 BD 3F 32				lda TabLevelLineAddressLSB,x
   941 5839 85 E9				sta m_ptrLevelLine
   942 						
   943 583B BD 3F 33				lda TabLevelLineAddressMSB,x
   944 583E 85 EA				sta m_ptrLevelLine+1
   945
   946 5840 B1 E9				lda (m_ptrLevelLine),y
   947 5842 AA					tax
   948 						
   949 5843 BD 3F 34				lda TabCharDefinition,x
   950 5846 8D 31 32				sta m_leftBottomChar
   951
   952 5849 AD 2E 32				lda m_leftTopChar						; fast collision check
   953 584C 29 0F				and #15
   954 584E C9 01				cmp #CT_BLOCK
   955 5850 D0 07				bne CPLC_check_next_char
   956
   957 5852 AD 2E 32				lda m_leftTopChar
   958 5855 29 80				and #%10000000
   959 5857 D0 10				bne CPLC_found_collision
   960
   961 				;**************************************************
   962 				;
   963 5859			CPLC_check_next_char
   964
   965 5859 AD 31 32				lda m_leftBottomChar
   966 585C 29 01				and #01
   967 585E C9 01				cmp #CT_BLOCK
   968 5860 D0 1E				bne CPLC_exit
   969
   970 5862 AD 31 32				lda m_leftBottomChar
   971 5865 29 80				and #%10000000
   972 5867 F0 17				beq CPLC_exit
   973
   974 				;**************************************************
   975 				;
   976 5869			CPLC_found_collision
   977
   978 5869 A9 01				lda #1
   979 586B 85 D1				sta m_playerSideCollisionFlag
   980
   981 586D A9 00				lda #0									; need to move the player to the right
   982 586F 85 A3				sta m_playerLevelLeftX_L1
   983
   984 5871 A5 A2				lda m_playerLevelLeftX_H1
   985 5873 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
   986 5875 18					clc
   987 5876 69 04				adc #CHAR_PIX.else_X
   988 5878 85 A2				sta m_playerLevelLeftX_H1
   989 						
   990 587A A5 A1				lda m_playerLevelLeftX_H2
   991 587C 69 00				adc #0
   992 587E 85 A1				sta m_playerLevelLeftX_H2
   993
   994 				;**************************************************
   995 				;
   996 5880			CPLC_exit	
   997 5880 60					rts
   998
   999 				.endp	
  1000 				;
  1001 				;**************************************************************************************************
  1002 				; CheckPlayerRightCollision
  1003 				;**************************************************************************************************
  1004 				;
  1005 5881			.proc CheckPlayerRightCollision
  1006
  1007 5881 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1008 5883 38					sec
  1009 5884 E5 B4				sbc m_playerSizeYMinusOne
  1010 5886 85 A8				sta m_playerLevelTopY_H1
  1011 					
  1012 5888 A5 AA				lda m_playerLevelBottomY_H2
  1013 588A E9 00				sbc #0
  1014 588C 85 A7				sta m_playerLevelTopY_H2
  1015
  1016 588E A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
  1017 5890 18					clc
  1018 5891 65 B3				adc m_playerSizeXMinusOne
  1019 5893 85 A5				sta m_playerLevelRightX_H1
  1020 					
  1021 5895 A5 A1				lda m_playerLevelLeftX_H2
  1022 5897 69 00				adc #0
  1023 5899 85 A4				sta m_playerLevelRightX_H2
  1024
  1025 589B A5 A4				lda m_playerLevelRightX_H2				; get right point char column
  1026 589D 8D 30 32				sta m_charBuffer_H2
  1027 						
  1028 58A0 A5 A5				lda m_playerLevelRightX_H1
  1029 58A2 4E 30 32				lsr m_charBuffer_H2						; /2
  1030 58A5 6A					ror
  1031 58A6 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1032 58A9 6A					ror
  1033 58AA A8					tay
  1034
  1035 58AB A5 A7				lda m_playerLevelTopY_H2				; get top char line
  1036 58AD 8D 30 32				sta m_charBuffer_H2
  1037 					
  1038 58B0 A5 A8				lda m_playerLevelTopY_H1
  1039 58B2 4E 30 32				lsr m_charBuffer_H2						; /2
  1040 58B5 6A					ror
  1041 58B6 4E 30 32				lsr m_charBuffer_H2						; /4
  1042 58B9 6A					ror
  1043 58BA 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1044 58BD 6A					ror	
  1045
  1046 58BE AA					tax
  1047 58BF BD 3F 32				lda TabLevelLineAddressLSB,x
  1048 58C2 85 E9				sta m_ptrLevelLine
  1049 					
  1050 58C4 BD 3F 33				lda TabLevelLineAddressMSB,x
  1051 58C7 85 EA				sta m_ptrLevelLine+1
  1052
  1053 58C9 B1 E9				lda (m_ptrLevelLine),y
  1054 58CB AA					tax
  1055 					
  1056 58CC BD 3F 34				lda TabCharDefinition,x
  1057 58CF 8D 2F 32				sta m_rightTopChar
  1058
  1059 58D2 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1060 58D4 8D 30 32				sta m_charBuffer_H2
  1061 58D7 A5 AB				lda m_playerLevelBottomY_H1
  1062
  1063 58D9 4E 30 32				lsr m_charBuffer_H2						; /2
  1064 58DC 6A					ror
  1065 58DD 4E 30 32				lsr m_charBuffer_H2						; /4
  1066 58E0 6A					ror
  1067 58E1 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1068 58E4 6A					ror
  1069
  1070 58E5 AA					tax
  1071 58E6 BD 3F 32				lda TabLevelLineAddressLSB,x
  1072 58E9 85 E9				sta m_ptrLevelLine
  1073 					
  1074 58EB BD 3F 33				lda TabLevelLineAddressMSB,x
  1075 58EE 85 EA				sta m_ptrLevelLine+1
  1076
  1077 58F0 B1 E9				lda (m_ptrLevelLine),y
  1078 58F2 AA					tax	
  1079 58F3 BD 3F 34				lda TabCharDefinition,x
  1080 58F6 8D 32 32				sta m_rightBottomChar
  1081
  1082 58F9 AD 2F 32				lda m_rightTopChar						; fast collision check
  1083 58FC 29 01				and #01
  1084 58FE C9 01				cmp #CT_BLOCK
  1085 5900 D0 07				bne CPRC_check_next_char
  1086
  1087 5902 AD 2F 32				lda m_rightTopChar
  1088 5905 29 40				and #%01000000
  1089 5907 D0 10				bne CPRC_found_collision
  1090
  1091 				;**************************************************
  1092 				;
  1093 5909			CPRC_check_next_char
  1094 						
  1095 5909 AD 32 32				lda m_rightBottomChar
  1096 590C 29 01				and #01
  1097 590E C9 01				cmp #CT_BLOCK
  1098 5910 D0 1E				bne CPRC_exit
  1099
  1100 5912 AD 32 32				lda m_rightBottomChar
  1101 5915 29 40				and #%01000000
  1102 5917 F0 17				beq CPRC_exit
  1103
  1104 				;**************************************************
  1105 				;
  1106 5919			CPRC_found_collision
  1107 5919 A9 01				lda #1
  1108 591B 85 D1				sta m_playerSideCollisionFlag
  1109
  1110 591D A9 00				lda #0									; need to move the player to the left
  1111 591F 85 A3				sta m_playerLevelLeftX_L1
  1112 					
  1113 5921 A5 A5				lda m_playerLevelRightX_H1
  1114 5923 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
  1115 5925 38					sec
  1116 5926 E5 B1				sbc m_playerSizeX
  1117 5928 85 A2				sta m_playerLevelLeftX_H1
  1118 					
  1119 592A A5 A4				lda m_playerLevelRightX_H2
  1120 592C E9 00				sbc #0
  1121 592E 85 A1				sta m_playerLevelLeftX_H2
  1122
  1123 				;**************************************************
  1124 				;
  1125 5930			CPRC_exit
  1126 5930 60					rts
  1127 						
  1128 				.endp		
  1129 				;
  1130 				;**************************************************************************************************
  1131 				; AddSideAccelToSpeed
  1132 				;**************************************************************************************************
  1133 				;
  1134 5931			.proc AddSideAccelToSpeed
  1135
  1136 5931 A5 B6				lda m_playerSideSpeed_L1				; update frame speed with frame accel	
  1137 5933 18					clc
  1138 5934 65 BA				adc m_playerSideAccel_L1
  1139 5936 85 B6				sta m_playerSideSpeed_L1
  1140 						
  1141 5938 A5 B5				lda m_playerSideSpeed_H1
  1142 593A 65 B9				adc m_playerSideAccel_H1
  1143
  1144 				;**************************************************
  1145 				;
  1146 593C			ASATS_entry_point
  1147 						
  1148 593C 85 B5				sta m_playerSideSpeed_H1
  1149 593E C5 B7				cmp m_playerMaxSideSpeed_H1				; check max frame speed
  1150 5940 90 10				bcc ASATS_exit							; lower than max speed
  1151 5942 D0 06				bne ASATS_max_speed						; greater than max speed
  1152
  1153 5944 A5 B8				lda m_playerMaxSideSpeed_L1				; need to check the low byte
  1154 5946 C5 B6				cmp m_playerSideSpeed_L1
  1155 5948 B0 08				bcs ASATS_exit							; lower or equal to max speed
  1156
  1157 				;**************************************************
  1158 				;
  1159 594A			ASATS_max_speed									
  1160 						
  1161 594A A5 B7				lda m_playerMaxSideSpeed_H1				; is higher than the max speed
  1162 594C 85 B5				sta m_playerSideSpeed_H1
  1163 						
  1164 594E A5 B8				lda m_playerMaxSideSpeed_L1
  1165 5950 85 B6				sta m_playerSideSpeed_L1
  1166
  1167 				;**************************************************
  1168 				;
  1169 5952			ASATS_exit		
  1170 5952 60					rts
  1171
  1172 				.endp
  1173 				;
  1174 				;**************************************************************************************************
  1175 				; SubstractSideDeaccelToSpeed
  1176 				;**************************************************************************************************
  1177 				;
  1178 5953			SubstractSideDeaccelToSpeed
  1179
  1180 5953 A5 B6				lda m_playerSideSpeed_L1					; update frame speed with frame accel
  1181 5955 38					sec
  1182 5956 E5 BC				sbc m_playerSideDeaccel_L1
  1183 5958 85 B6				sta m_playerSideSpeed_L1
  1184
  1185 595A A5 B5				lda m_playerSideSpeed_H1
  1186 595C E5 BB				sbc m_playerSideDeaccel_H1
  1187 595E B0 04				bcs SSDTS_dont_reset_speed
  1188
  1189 				;************************************************
  1190 				;
  1191 5960			SSDTS_reset_speed
  1192 5960 A9 00				lda #0
  1193 5962 85 B6				sta m_playerSideSpeed_L1
  1194
  1195 				;************************************************
  1196 				;
  1197 5964			SSDTS_dont_reset_speed
  1198 5964 85 B5				sta m_playerSideSpeed_H1
  1199
  1200 5966 60					rts	
  1201 				;
  1202 				;**************************************************************************************************
  1203 				; AddSideSpeedToPosition
  1204 				;**************************************************************************************************
  1205 				;
  1206 5967			.proc AddSideSpeedToPosition
  1207
  1208 5967 A5 A3				lda m_playerLevelLeftX_L1				; update player side position
  1209 5969 18					clc
  1210 596A 65 B6				adc m_playerSideSpeed_L1
  1211 596C 85 A3				sta m_playerLevelLeftX_L1
  1212 						
  1213 596E A5 A2				lda m_playerLevelLeftX_H1		
  1214 5970 65 B5				adc m_playerSideSpeed_H1
  1215 5972 85 A2				sta m_playerLevelLeftX_H1
  1216 						
  1217 5974 A5 A1				lda m_playerLevelLeftX_H2
  1218 5976 69 00				adc #0
  1219 5978 85 A1				sta m_playerLevelLeftX_H2
  1220
  1221 597A A9 00				lda #0									; check collisions for a player moving to the right	
  1222 597C 85 D1				sta m_playerSideCollisionFlag
  1223
  1224 597E 20 B4 55				jsr CheckPlayerInLevelRightLimit		; check level right side limit
  1225 					
  1226 5981 A5 D1				lda m_playerSideCollisionFlag
  1227 5983 D0 07				bne ASSTP_found_collision
  1228
  1229 5985 20 81 58				jsr CheckPlayerRightCollision
  1230
  1231 5988 A5 D1				lda m_playerSideCollisionFlag
  1232 598A F0 06				beq ASSTP_exit
  1233
  1234 				;************************************************
  1235 				;
  1236 598C			ASSTP_found_collision
  1237 						
  1238 598C A9 00				lda #0
  1239 598E 85 B5				sta m_playerSideSpeed_H1
  1240 5990 85 B6				sta m_playerSideSpeed_L1
  1241
  1242 				;************************************************
  1243 				;
  1244 5992			ASSTP_exit
  1245 						
  1246 5992 60					rts
  1247
  1248 				.endp
  1249 				;
  1250 				;**************************************************************************************************
  1251 				; SubstractSideSpeedToPosition
  1252 				;**************************************************************************************************
  1253 				;
  1254 5993			.proc SubstractSideSpeedToPosition
  1255
  1256 5993 A5 A3				lda m_playerLevelLeftX_L1	; update player side position
  1257 5995 38					sec
  1258 5996 E5 B6				sbc m_playerSideSpeed_L1
  1259 5998 85 A3				sta m_playerLevelLeftX_L1
  1260 						
  1261 599A A5 A2				lda m_playerLevelLeftX_H1
  1262 599C E5 B5				sbc m_playerSideSpeed_H1
  1263 599E 85 A2				sta m_playerLevelLeftX_H1
  1264 						
  1265 59A0 A5 A1				lda m_playerLevelLeftX_H2
  1266 59A2 E9 00				sbc #0
  1267 59A4 85 A1				sta m_playerLevelLeftX_H2
  1268
  1269 						; check collisions for a player moving to the left
  1270 59A6 B0 0B				bcs SSSTP_check_left_collision			; check level left side limit
  1271 59A8 A9 00				lda #0
  1272 59AA 85 A1				sta m_playerLevelLeftX_H2
  1273 59AC 85 A2				sta m_playerLevelLeftX_H1
  1274 59AE 85 A3				sta m_playerLevelLeftX_L1
  1275 59B0 4C BE 59				jmp SSSTP_found_collision
  1276
  1277 				;************************************************
  1278 				;
  1279 59B3			SSSTP_check_left_collision
  1280 						
  1281 59B3 A9 00				lda #0
  1282 59B5 85 D1				sta m_playerSideCollisionFlag
  1283
  1284 59B7 20 DE 57				jsr CheckPlayerLeftCollision
  1285
  1286 59BA A5 D1				lda m_playerSideCollisionFlag
  1287 59BC F0 06				beq SSSTP_exit
  1288
  1289 				;************************************************
  1290 				;
  1291 59BE			SSSTP_found_collision
  1292 						
  1293 59BE A9 00				lda #0
  1294 59C0 85 B5				sta m_playerSideSpeed_H1
  1295 59C2 85 B6				sta m_playerSideSpeed_L1
  1296
  1297 59C4			SSSTP_exit
  1298 59C4 60					rts
  1299 						
  1300 				.endp		
  1301 				;
  1302 				;**************************************************************************************************
  1303 				; AddGravityAccelToSpeed
  1304 				;**************************************************************************************************
  1305 				;
  1306 59C5			.proc AddGravityAccelToSpeed
  1307
  1308 59C5 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1309 59C7 18					clc
  1310 59C8 65 C4				adc m_playerGravityAccel_L1
  1311 59CA 85 BE				sta m_playerSpeedY_L1
  1312 						
  1313 59CC A5 BD				lda m_playerSpeedY_H1
  1314 59CE 65 C3				adc m_playerGravityAccel_H1
  1315 59D0 85 BD				sta m_playerSpeedY_H1
  1316
  1317 59D2 C5 C1				cmp m_playerMaxFallSpeed_H1				; check max frame speed
  1318 59D4 90 10				bcc AGATS_exit							; lower than max speed
  1319 59D6 D0 06				bne AGATS_max_speed						; greater than max speed
  1320
  1321 59D8 A5 C2				lda m_playerMaxFallSpeed_L1				; need to check the low byte
  1322 59DA C5 BE				cmp m_playerSpeedY_L1
  1323 59DC B0 08				bcs AGATS_exit							; lower or equal to max speed
  1324
  1325 				;************************************************
  1326 				;
  1327 59DE			AGATS_max_speed			
  1328
  1329 59DE A5 C1				lda m_playerMaxFallSpeed_H1				; is higher than the max speed
  1330 59E0 85 BD				sta m_playerSpeedY_H1
  1331 						
  1332 59E2 A5 C2				lda m_playerMaxFallSpeed_L1
  1333 59E4 85 BE				sta m_playerSpeedY_L1
  1334
  1335 				;************************************************
  1336 				;
  1337 59E6			AGATS_exit
  1338 59E6 60					rts
  1339 						
  1340 				.endp		
  1341 				;
  1342 				;**************************************************************************************************
  1343 				; SubstractGravityAccelToSpeed
  1344 				;**************************************************************************************************
  1345 				;
  1346 59E7			.proc SubstractGravityAccelToSpeed
  1347 						
  1348 59E7 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1349 59E9 38					sec
  1350 59EA E5 C4				sbc m_playerGravityAccel_L1
  1351 59EC 85 BE				sta m_playerSpeedY_L1
  1352 						
  1353 59EE A5 BD				lda m_playerSpeedY_H1
  1354 59F0 E5 C3				sbc m_playerGravityAccel_H1
  1355 59F2 B0 04				bcs SGATS_dont_reset_speed
  1356
  1357 				;************************************************
  1358 				;
  1359 59F4			SGATS_reset_speed
  1360 59F4 A9 00				lda #0
  1361 59F6 85 BE				sta m_playerSpeedY_L1
  1362
  1363 				;************************************************
  1364 				;
  1365 59F8			SGATS_dont_reset_speed
  1366 59F8 85 BD				sta m_playerSpeedY_H1
  1367 59FA 60					rts
  1368
  1369 				.endp
  1370 				;
  1371 				;**************************************************************************************************
  1372 				; AddSpeedYToPosition
  1373 				;**************************************************************************************************
  1374 				;
  1375 59FB			.proc AddSpeedYToPosition
  1376
  1377 59FB A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1378 59FD 18					clc
  1379 59FE 65 BE				adc m_playerSpeedY_L1
  1380 5A00 85 AC				sta m_playerLevelBottomY_L1
  1381 						
  1382 5A02 A5 AB				lda m_playerLevelBottomY_H1
  1383 5A04 65 BD				adc m_playerSpeedY_H1
  1384 5A06 85 AB				sta m_playerLevelBottomY_H1
  1385 						
  1386 5A08 A5 AA				lda m_playerLevelBottomY_H2
  1387 5A0A 69 00				adc #0
  1388 5A0C 85 AA				sta m_playerLevelBottomY_H2
  1389
  1390 5A0E A9 00				lda #0									; check collisions for a player moving down
  1391 5A10 85 CF				sta m_playerOverPlatformFlag
  1392
  1393 5A12 20 E3 55				jsr CheckPlayerInLevelBottomLimit		; check level bottom limit collision
  1394
  1395 5A15 A5 CF				lda m_playerOverPlatformFlag
  1396 5A17 D0 03				bne ASYTP_exit
  1397
  1398 5A19 20 9A 56				jsr CheckPlayerBottomCollision			; check collision with the top of a platform
  1399
  1400 				;************************************************
  1401 				;
  1402 5A1C			ASYTP_exit
  1403 5A1C 60					rts
  1404 						
  1405 				.endp		
  1406 				;
  1407 				;**************************************************************************************************
  1408 				; SubstractSpeedYToPosition
  1409 				;**************************************************************************************************
  1410 				;
  1411 5A1D			.proc SubstractSpeedYToPosition
  1412
  1413 5A1D A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1414 5A1F 38					sec
  1415 5A20 E5 BE				sbc m_playerSpeedY_L1
  1416 5A22 85 AC				sta m_playerLevelBottomY_L1
  1417 5A24 A5 AB				lda m_playerLevelBottomY_H1
  1418 5A26 E5 BD				sbc m_playerSpeedY_H1
  1419 5A28 85 AB				sta m_playerLevelBottomY_H1
  1420 5A2A A5 AA				lda m_playerLevelBottomY_H2
  1421 5A2C E9 00				sbc #0
  1422 5A2E 85 AA				sta m_playerLevelBottomY_H2
  1423
  1424 5A30 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1425 5A32 38					sec
  1426 5A33 E5 B4				sbc m_playerSizeYMinusOne
  1427 5A35 85 A8				sta m_playerLevelTopY_H1
  1428 5A37 A5 AA				lda m_playerLevelBottomY_H2
  1429 5A39 E9 00				sbc #0
  1430 5A3B 85 A7				sta m_playerLevelTopY_H2
  1431
  1432 5A3D B0 0D				bcs SSYTP_check_platform_bottom			; check collisions for a player moving up check level top limit collision
  1433
  1434 5A3F A9 00				lda #0
  1435 5A41 85 AC				sta m_playerLevelBottomY_L1
  1436 5A43 85 AA				sta m_playerLevelBottomY_H2
  1437
  1438 5A45 A5 B4				lda m_playerSizeYMinusOne
  1439 5A47 85 AB				sta m_playerLevelBottomY_H1
  1440
  1441 5A49 4C 57 5A				jmp SSYTP_found_collision
  1442
  1443 5A4C			SSYTP_check_platform_bottom
  1444 					
  1445 5A4C A9 00				lda #0									; check collision with the bottom of a platform
  1446 5A4E 85 D0				sta m_playerTopCollisionFlag
  1447
  1448 5A50 20 2F 57				jsr CheckPlayerTopCollision
  1449
  1450 5A53 A5 D0				lda m_playerTopCollisionFlag
  1451 5A55 F0 06				beq SSYTP_exit
  1452
  1453 5A57			SSYTP_found_collision
  1454 5A57 A9 00				lda #0
  1455 5A59 85 BD				sta m_playerSpeedY_H1
  1456 5A5B 85 BE				sta m_playerSpeedY_L1
  1457
  1458 5A5D			SSYTP_exit
  1459 5A5D 60					rts
  1460
  1461 				.endp		
  1462 				;
  1463 				;**************************************************************************************************
  1464 				; AddWaterAccelToSpeed
  1465 				;**************************************************************************************************
  1466 				;
  1467 5A5E			.proc AddWaterAccelToSpeed
  1468
  1469 5A5E A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1470 5A60 18					clc
  1471 5A61 65 C6				adc m_playerWaterAccelY_L1
  1472 5A63 85 BE				sta m_playerSpeedY_L1
  1473 5A65 A5 BD				lda m_playerSpeedY_H1
  1474 5A67 65 C5				adc m_playerWaterAccelY_H1
  1475 5A69 85 BD				sta m_playerSpeedY_H1
  1476
  1477
  1478 5A6B C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1479 5A6D 90 10				bcc AWATS_exit							; lower than max speed
  1480 5A6F D0 06				bne AWATS_max_speed						; greater than max speed
  1481
  1482 					
  1483 5A71 A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1484 5A73 C5 BE				cmp m_playerSpeedY_L1
  1485 5A75 B0 08				bcs AWATS_exit							; lower or equal to max speed
  1486
  1487 				;************************************************
  1488 				;
  1489 5A77			AWATS_max_speed			
  1490
  1491 5A77 A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1492 5A79 85 BD				sta m_playerSpeedY_H1
  1493 5A7B A5 C8				lda m_playerMaxWaterSpeedY_L1
  1494 5A7D 85 BE				sta m_playerSpeedY_L1
  1495
  1496 				;************************************************
  1497 				;
  1498 5A7F			AWATS_exit
  1499 5A7F 60					rts
  1500 					
  1501 				.endp	
  1502 				;
  1503 				;**************************************************************************************************
  1504 				; SubstractWaterAccelToSpeed
  1505 				;**************************************************************************************************
  1506 				;
  1507 5A80			.proc SubstractWaterAccelToSpeed
  1508
  1509 5A80 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1510 5A82 38					sec
  1511 5A83 E5 C6				sbc m_playerWaterAccelY_L1
  1512 5A85 85 BE				sta m_playerSpeedY_L1
  1513 5A87 A5 BD				lda m_playerSpeedY_H1
  1514 5A89 E5 C5				sbc m_playerWaterAccelY_H1
  1515 5A8B B0 04				bcs SWATS_dont_reset_speed
  1516
  1517 				;************************************************
  1518 				;
  1519 5A8D			SWATS_reset_speed
  1520 5A8D A9 00				lda #0
  1521 5A8F 85 BE				sta m_playerSpeedY_L1
  1522
  1523 				;************************************************
  1524 				;
  1525 5A91			SWATS_dont_reset_speed
  1526 5A91 85 BD				sta m_playerSpeedY_H1
  1527
  1528 5A93 60					rts
  1529 						
  1530 				.endp		
  1531 				;
  1532 				;**************************************************************************************************
  1533 				; AddWaterMoveUpAccelToSpeed
  1534 				;**************************************************************************************************
  1535 				;
  1536 5A94			.proc AddWaterMoveUpAccelToSpeed
  1537
  1538 5A94 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1539 5A96 18					clc
  1540 5A97 65 C6				adc m_playerWaterAccelY_L1
  1541 5A99 85 BE				sta m_playerSpeedY_L1
  1542 5A9B A5 BD				lda m_playerSpeedY_H1
  1543 5A9D 65 C5				adc m_playerWaterAccelY_H1
  1544 5A9F 85 BD				sta m_playerSpeedY_H1
  1545
  1546 5AA1 C5 C9				cmp m_playerMoveWaterSpeedY_H1			; check max frame speed
  1547 5AA3 90 10				bcc AWMUATS_exit						; lower than max speed
  1548 5AA5 D0 06				bne AWMUATS_max_speed					; greater than max speed
  1549
  1550 5AA7 A5 CA				lda m_playerMoveWaterSpeedY_L1			; need to check the low byte
  1551 5AA9 C5 BE				cmp m_playerSpeedY_L1
  1552 5AAB B0 08				bcs AWMUATS_exit						; lower or equal to max speed
  1553
  1554 				;************************************************
  1555 				;
  1556 5AAD			AWMUATS_max_speed								; is higher than the max speed
  1557 						
  1558 5AAD A5 C9				lda m_playerMoveWaterSpeedY_H1
  1559 5AAF 85 BD				sta m_playerSpeedY_H1
  1560 5AB1 A5 CA				lda m_playerMoveWaterSpeedY_L1
  1561 5AB3 85 BE				sta m_playerSpeedY_L1
  1562
  1563 				;************************************************
  1564 				;
  1565 5AB5			AWMUATS_exit
  1566 5AB5 60					rts
  1567
  1568 				.endp	
  1569 				;
  1570 				;**************************************************************************************************
  1571 				; AddWaterMoveDownAccelToSpeed
  1572 				;**************************************************************************************************
  1573 				;
  1574 5AB6			.proc AddWaterMoveDownAccelToSpeed
  1575
  1576 5AB6 A5 C7				lda m_playerMaxWaterSpeedY_H1			; check max frame speed
  1577 5AB8 C5 BD				cmp m_playerSpeedY_H1
  1578 5ABA 90 29				bcc AWMAATS_exit						; greater than max speed, exit
  1579 5ABC D0 06				bne AWMAATS_add							; lower than the max, continue with the add
  1580
  1581 5ABE A5 BE				lda m_playerSpeedY_L1					; need to check the low byte
  1582 5AC0 C5 C8				cmp m_playerMaxWaterSpeedY_L1
  1583 5AC2 B0 21				bcs AWMAATS_exit						; greater or equal to max speed, exit
  1584
  1585 				;************************************************
  1586 				;
  1587 5AC4			AWMAATS_add
  1588
  1589 5AC4 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1590 5AC6 18					clc
  1591 5AC7 65 C6				adc m_playerWaterAccelY_L1
  1592 5AC9 85 BE				sta m_playerSpeedY_L1
  1593 5ACB A5 BD				lda m_playerSpeedY_H1
  1594 5ACD 65 C5				adc m_playerWaterAccelY_H1
  1595 5ACF 85 BD				sta m_playerSpeedY_H1
  1596
  1597 5AD1 C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1598 5AD3 90 10				bcc AWMAATS_exit						; lower than max speed
  1599 5AD5 D0 06				bne AWMAATS_max_speed					; greater than max speed
  1600
  1601 5AD7 A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1602 5AD9 C5 BE				cmp m_playerSpeedY_L1
  1603 5ADB B0 08				bcs AWMAATS_exit						; lower or equal to max speed
  1604
  1605 				;************************************************
  1606 				;
  1607 5ADD			AWMAATS_max_speed			
  1608 5ADD A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1609 5ADF 85 BD				sta m_playerSpeedY_H1
  1610 5AE1 A5 C8				lda m_playerMaxWaterSpeedY_L1
  1611 5AE3 85 BE				sta m_playerSpeedY_L1
  1612
  1613 				;************************************************
  1614 				;
  1615 5AE5			AWMAATS_exit
  1616 						
  1617 5AE5 60					rts
  1618 					
  1619 				.endp	
  1620 				;
  1621 				;**************************************************************************************************
  1622 				; CheckPlayerBottomDownPos
  1623 				;**************************************************************************************************
  1624 				;
  1625 5AE6			.proc CheckPlayerBottomDownPos
  1626
  1627 5AE6 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1628 5AE8 8D 30 32				sta m_charBuffer_H2
  1629
  1630 5AEB A5 AB				lda m_playerLevelBottomY_H1
  1631 5AED 18					clc
  1632 5AEE 6D 35 32				adc m_bottomPosOffsetY
  1633 5AF1 90 03				bcc CPBDP_offset_no_carry
  1634 5AF3 EE 30 32				inc m_charBuffer_H2
  1635
  1636 				;************************************************
  1637 				;
  1638 5AF6			CPBDP_offset_no_carry
  1639 5AF6 4E 30 32				lsr m_charBuffer_H2						; /2
  1640 5AF9 6A					ror
  1641 5AFA 4E 30 32				lsr m_charBuffer_H2						; /4
  1642 5AFD 6A					ror
  1643 5AFE 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1644 5B01 6A					ror
  1645
  1646 5B02 AA					tax
  1647 5B03 BD 3F 32				lda TabLevelLineAddressLSB,x
  1648 5B06 85 E9				sta m_ptrLevelLine
  1649 						
  1650 5B08 BD 3F 33				lda TabLevelLineAddressMSB,x
  1651 5B0B 85 EA				sta m_ptrLevelLine+1
  1652 					
  1653 5B0D A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1654 5B0F 8D 30 32				sta m_charBuffer_H2
  1655
  1656 5B12 A5 A2				lda m_playerLevelLeftX_H1
  1657 5B14 18					clc
  1658 5B15 6D 34 32				adc m_bottomPosOffsetX
  1659 5B18 90 03				bcc CPBDP_no_carry
  1660 5B1A EE 30 32				inc m_charBuffer_H2
  1661 					
  1662 				;************************************************
  1663 				;
  1664 5B1D			CPBDP_no_carry
  1665
  1666 5B1D 4E 30 32				lsr m_charBuffer_H2						; /2
  1667 5B20 6A					ror
  1668 5B21 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1669 5B24 6A					ror
  1670
  1671 5B25 A8					tay
  1672 5B26 8C 37 32				sty m_middleBottomCharPosX
  1673 5B29 B1 E9				lda (m_ptrLevelLine),y
  1674 5B2B AA					tax
  1675 5B2C BD 3F 34				lda TabCharDefinition,x
  1676 5B2F 8D 33 32				sta m_middleBottomChar
  1677
  1678 5B32 60					rts
  1679 					
  1680 				.endp	
  1681 				;
  1682 				;**************************************************************************************************
  1683 				; CheckPlayerBottomUpPos
  1684 				;**************************************************************************************************
  1685 				;
  1686 5B33			.proc CheckPlayerBottomUpPos
  1687
  1688 5B33 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1689 5B35 8D 30 32				sta m_charBuffer_H2
  1690
  1691 5B38 A5 AB				lda m_playerLevelBottomY_H1
  1692 5B3A 38					sec
  1693 5B3B ED 35 32				sbc m_bottomPosOffsetY
  1694 5B3E B0 03				bcs CPBUP_offset_no_carry
  1695 5B40 CE 30 32				dec m_charBuffer_H2
  1696
  1697 				;************************************************
  1698 				;
  1699 5B43			CPBUP_offset_no_carry
  1700
  1701 5B43 4E 30 32				lsr m_charBuffer_H2						; /2
  1702 5B46 6A					ror
  1703 5B47 4E 30 32				lsr m_charBuffer_H2						; /4
  1704 5B4A 6A					ror
  1705 5B4B 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1706 5B4E 6A					ror
  1707
  1708 5B4F AA					tax
  1709 5B50 BD 3F 32				lda TabLevelLineAddressLSB,x
  1710 5B53 85 E9				sta m_ptrLevelLine
  1711 					
  1712 5B55 BD 3F 33				lda TabLevelLineAddressMSB,x
  1713 5B58 85 EA				sta m_ptrLevelLine+1
  1714
  1715 5B5A A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1716 5B5C 8D 30 32				sta m_charBuffer_H2
  1717
  1718 5B5F A5 A2				lda m_playerLevelLeftX_H1
  1719 5B61 18					clc
  1720 5B62 6D 34 32				adc m_bottomPosOffsetX
  1721 5B65 90 03				bcc CPBUP_no_carry
  1722 5B67 EE 30 32				inc m_charBuffer_H2
  1723
  1724 				;************************************************
  1725 				;
  1726 5B6A			CPBUP_no_carry
  1727
  1728 5B6A 4E 30 32				lsr m_charBuffer_H2						; /2
  1729 5B6D 6A					ror
  1730 5B6E 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1731 5B71 6A					ror
  1732
  1733 5B72 A8					tay
  1734 5B73 8C 37 32				sty m_middleBottomCharPosX
  1735 5B76 B1 E9				lda (m_ptrLevelLine),y
  1736 5B78 AA					tax
  1737 5B79 BD 3F 34				lda TabCharDefinition,x
  1738 5B7C 8D 33 32				sta m_middleBottomChar
  1739
  1740 5B7F 60					rts
  1741
  1742 				.endp	
   317 5B80					icl "MissileSystem.Asm"	
Source: E:\_8BitProjects\Series\Scroller\MissileSystem.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		MissileSystem.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Missle Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 00FC			CLEAR_MASK_M0 				= %11111100
    18 = 00F3			CLEAR_MASK_M1 				= %11110011
    19 = 00CF			CLEAR_MASK_M2 				= %11001111
    20 = 003F			CLEAR_MASK_M3 				= %00111111
    21
    22 = 0003			SET_MASK_M0 				= %00000011
    23 = 000C			SET_MASK_M1 				= %00001100
    24 = 0030			SET_MASK_M2 				= %00110000
    25 = 00C0			SET_MASK_M3 				= %11000000
    26
    27 = 0002			SET_MASK_M0_R_L1 			= %00000010
    28 = 0001			SET_MASK_M0_R_L2 			= %00000001
    29 = 0002			SET_MASK_M0_R_L3 			= %00000010
    30 = 0001			SET_MASK_M0_L_L1 			= %00000001
    31 = 0002			SET_MASK_M0_L_L2 			= %00000010
    32 = 0001			SET_MASK_M0_L_L3 			= %00000001
    33
    34 = 0008			SET_MASK_M1_R_L1 			= %00001000
    35 = 0004			SET_MASK_M1_R_L2 			= %00000100
    36 = 0008			SET_MASK_M1_R_L3 			= %00001000
    37 = 0004			SET_MASK_M1_L_L1 			= %00000100
    38 = 0008			SET_MASK_M1_L_L2 			= %00001000
    39 = 0004			SET_MASK_M1_L_L3 			= %00000100
    40
    41 = 0020			SET_MASK_M2_R_L1 			= %00100000
    42 = 0010			SET_MASK_M2_R_L2 			= %00010000
    43 = 0020			SET_MASK_M2_R_L3 			= %00100000
    44 = 0010			SET_MASK_M2_L_L1 			= %00010000
    45 = 0020			SET_MASK_M2_L_L2 			= %00100000
    46 = 0010			SET_MASK_M2_L_L3 			= %00010000
    47
    48 = 0080			SET_MASK_M3_R_L1 			= %10000000
    49 = 0040			SET_MASK_M3_R_L2 			= %01000000
    50 = 0080			SET_MASK_M3_R_L3 			= %10000000
    51 = 0040			SET_MASK_M3_L_L1 			= %01000000
    52 = 0080			SET_MASK_M3_L_L2 			= %10000000
    53 = 0040			SET_MASK_M3_L_L3 			= %01000000
    54
    55 5B80			TabClearMissileMask
    56 5B80 FC F3 CF 3F			.byte CLEAR_MASK_M0, CLEAR_MASK_M1, CLEAR_MASK_M2, CLEAR_MASK_M3
    57
    58 5B84			TabSetMissileToRightMaskL1
    59 5B84 02 08 20 80			.byte SET_MASK_M0_R_L1, SET_MASK_M1_R_L1, SET_MASK_M2_R_L1, SET_MASK_M3_R_L1
    60
    61 5B88			TabSetMissileToRightMaskL2
    62 5B88 01 04 10 40			.byte SET_MASK_M0_R_L2, SET_MASK_M1_R_L2, SET_MASK_M2_R_L2, SET_MASK_M3_R_L2
    63
    64 5B8C			TabSetMissileToRightMaskL3
    65 5B8C 02 08 20 80			.byte SET_MASK_M0_R_L3, SET_MASK_M1_R_L3, SET_MASK_M2_R_L3, SET_MASK_M3_R_L3
    66
    67 5B90			TabSetMissileToLeftMaskL1
    68 5B90 01 04 10 40			.byte SET_MASK_M0_L_L1, SET_MASK_M1_L_L1, SET_MASK_M2_L_L1, SET_MASK_M3_L_L1
    69
    70 5B94			TabSetMissileToLeftMaskL2
    71 5B94 02 08 20 80			.byte SET_MASK_M0_L_L2, SET_MASK_M1_L_L2, SET_MASK_M2_L_L2, SET_MASK_M3_L_L2
    72
    73 5B98			TabSetMissileToLeftMaskL3
    74 5B98 01 04 10 40			.byte SET_MASK_M0_L_L3, SET_MASK_M1_L_L3, SET_MASK_M2_L_L3, SET_MASK_M3_L_L3
    75
    76 5B9C			TabDrawMissileMethodLSB
    77 5B9C 48 64 81 BE			.byte <DrawMissileM0, <DrawMissileM1, <DrawMissileM2, <DrawMissileM3
    78
    79 5BA0			TabDrawMissileMethodMSB
    80 5BA0 5E 5E 5E 5E			.byte >DrawMissileM0, >DrawMissileM1, >DrawMissileM2, >DrawMissileM3
    81
    82 				; virtual missiles tables
    83 = 0004			MAX_VIRTUAL_MISSILES = 4
    84
    85 5BA4 00			m_currentVirtualMissiles .byte 0
    86
    87 5BA5 00 00 00 00		TabMissileScreenLeftX			:MAX_VIRTUAL_MISSILES .byte 0
    88
    89 5BA9 00 00 00 00		TabMissileScreenTopY			:MAX_VIRTUAL_MISSILES .byte 0
    90
    91 5BAD 00 00 00 00		TabOldMissileScreenLeftX		:MAX_VIRTUAL_MISSILES .byte 0
    92
    93 5BB1 00 00 00 00		TabOldMissileScreenTopY			:MAX_VIRTUAL_MISSILES .byte 0
    94
    95 5BB5 00 00 00 00		TabMissileLevelLeftX_H2			:MAX_VIRTUAL_MISSILES .byte 0
    96
    97 5BB9 00 00 00 00		TabMissileLevelLeftX_H1			:MAX_VIRTUAL_MISSILES .byte 0
    98
    99 5BBD 00 00 00 00		TabMissileLevelLeftX_L1			:MAX_VIRTUAL_MISSILES .byte 0
   100
   101 5BC1 00 00 00 00		TabMissileLevelTopY_H2			:MAX_VIRTUAL_MISSILES .byte 0
   102
   103 5BC5 00 00 00 00		TabMissileLevelTopY_H1			:MAX_VIRTUAL_MISSILES .byte 0
   104
   105 5BC9 00 00 00 00		TabMissileLevelTopY_L1			:MAX_VIRTUAL_MISSILES .byte 0
   106
   107 5BCD 00 00 00 00		TabMissileSpeedX_H1				:MAX_VIRTUAL_MISSILES .byte 0
   108
   109 5BD1 00 00 00 00		TabMissileSpeedX_L1				:MAX_VIRTUAL_MISSILES .byte 0
   110
   111 5BD5 00 00 00 00		TabMissileDirection				:MAX_VIRTUAL_MISSILES .byte 0
   112
   113 5BD9 00 00 00 00		TabMissileFrameCounter_H2		:MAX_VIRTUAL_MISSILES .byte 0
   114
   115 5BDD 00 00 00 00		TabMissileFrameCounter_H1		:MAX_VIRTUAL_MISSILES .byte 0
   116
   117 5BE1 00 00 00 00		TabMissileOwner					:MAX_VIRTUAL_MISSILES .byte 0
   118
   119 				;
   120 				;**************************************************************************************************
   121 				; CheckCreatePlayerMissile
   122 				;**************************************************************************************************
   123 				;
   124 5BE5			.proc CheckCreatePlayerMissile
   125
   126 5BE5 A5 E1				lda m_triggerState
   127 5BE7 C9 02				cmp #2									; check just pressed
   128 5BE9 D0 4D				bne CCPM_exit
   129 5BEB 20 BD 5C				jsr GetFreeMissileIndex
   130 						
   131 5BEE E0 02				cpx #2									; only use index 0 and 1 for the player missiles
   132 5BF0 B0 46				bcs CCPM_exit
   133 					
   134 5BF2 A9 02				lda #>[PLAYER_MISSILE_SPEED_X]
   135 5BF4 9D CD 5B				sta TabMissileSpeedX_H1,x
   136 						
   137 5BF7 A9 80				lda #<[PLAYER_MISSILE_SPEED_X]
   138 5BF9 9D D1 5B				sta TabMissileSpeedX_L1,x
   139
   140 5BFC A5 CE				lda m_lastPlayerShootDirection
   141 5BFE C9 01				cmp #PSD_RIGHT
   142 5C00 F0 08				beq CCPM_shoot_right
   143 					
   144 				;************************************************
   145 				;
   146 5C02			CCPM_shoot_left
   147 					
   148 5C02 A9 02				lda #2
   149 5C04 9D D5 5B				sta TabMissileDirection,x
   150 5C07 4C 0F 5C				jmp CCPM_init_position
   151 					
   152 				;************************************************
   153 				;
   154 5C0A			CCPM_shoot_right
   155 					
   156 5C0A A9 01				lda #1
   157 5C0C 9D D5 5B				sta TabMissileDirection,x
   158 					
   159 				;************************************************
   160 				;
   161 5C0F			CCPM_init_position
   162 					
   163 5C0F A5 A2				lda m_playerLevelLeftX_H1
   164 5C11 9D B9 5B				sta TabMissileLevelLeftX_H1,x
   165 						
   166 5C14 A5 A1				lda m_playerLevelLeftX_H2
   167 5C16 9D B5 5B				sta TabMissileLevelLeftX_H2,x
   168 						
   169 5C19 A5 A8				lda m_playerLevelTopY_H1
   170 5C1B 18					clc
   171 5C1C 69 0C				adc #[PLR_HEIGHT/2]+2
   172 5C1E 9D C5 5B				sta TabMissileLevelTopY_H1,x
   173 						
   174 5C21 A5 A7				lda m_playerLevelTopY_H2
   175 5C23 69 00				adc #0
   176 5C25 9D C1 5B				sta TabMissileLevelTopY_H2,x
   177
   178 5C28 A9 00				lda #0
   179 5C2A 9D BD 5B				sta TabMissileLevelLeftX_L1,x
   180 5C2D 9D C9 5B				sta TabMissileLevelTopY_L1,x
   181
   182 5C30 A9 01				lda #1									; player owner
   183 5C32 9D E1 5B				sta TabMissileOwner,x
   184
   185 5C35 20 CC 5C				jsr CreateMissile						; before this, call GetFreeMissileIndex and then init..
   186 					
   187 				;************************************************
   188 				;
   189 5C38			CCPM_exit		
   190 5C38 60					rts
   191 					
   192 				.endp	
   193 				;	
   194 				;**************************************************************************************************
   195 				; CheckCreateEnemyMissile
   196 				;**************************************************************************************************
   197 				;
   198 5C39			.proc CheckCreateEnemyMissile
   199 					
   200 5C39 A2 02				ldx #2									; check for a free missile index
   201 5C3B BD E1 5B				lda TabMissileOwner,x
   202 5C3E F0 07				beq CCEM_found_one_free
   203 					
   204 5C40 A2 03				ldx #3
   205 5C42 BD E1 5B				lda TabMissileOwner,x
   206 5C45 D0 38				bne CCEM_exit
   207
   208 				;************************************************
   209 				;	
   210 5C47			CCEM_found_one_free
   211 					
   212 5C47 A9 02				lda #>[ENEMY_MISSILE_SPEED_X]
   213 5C49 9D CD 5B				sta TabMissileSpeedX_H1,x
   214 						
   215 5C4C A9 00				lda #<[ENEMY_MISSILE_SPEED_X]
   216 5C4E 9D D1 5B				sta TabMissileSpeedX_L1,x
   217 					
   218 5C51 AD 0D 32				lda m_enemyShootDirection
   219 5C54 9D D5 5B				sta TabMissileDirection,x
   220
   221 					
   222 5C57 AD 0E 32				lda m_enemyShotLevelLeftX_H1			; init position
   223 5C5A 9D B9 5B				sta TabMissileLevelLeftX_H1,x
   224 						
   225 5C5D AD 0F 32				lda m_enemyShotLevelLeftX_H2
   226 5C60 9D B5 5B				sta TabMissileLevelLeftX_H2,x
   227
   228 5C63 AD 10 32				lda m_enemyShotLevelTopY_H1
   229 5C66 9D C5 5B				sta TabMissileLevelTopY_H1,x
   230 						
   231 5C69 AD 11 32				lda m_enemyShotLevelTopY_H2
   232 5C6C 9D C1 5B				sta TabMissileLevelTopY_H2,x
   233 						
   234 5C6F A9 00				lda #0
   235 5C71 9D BD 5B				sta TabMissileLevelLeftX_L1,x
   236 5C74 9D C9 5B				sta TabMissileLevelTopY_L1,x
   237
   238 5C77 A9 02				lda #2									; enemy owner
   239 5C79 9D E1 5B				sta TabMissileOwner,x
   240
   241 5C7C 20 CC 5C				jsr CreateMissile
   242
   243 				;************************************************
   244 				;	
   245 5C7F			CCEM_exit		
   246 5C7F 60					rts
   247 					
   248 				.endp	
   249 				;
   250 				;**************************************************************************************************
   251 				; InitMissileSystem
   252 				;	
   253 				; 	Right now, the missile system is using a 1-on-1 relationship between
   254 				; 	a virtual missile and a hardware missile, so we have a max of 4 virtual
   255 				; 	missiles. If we want more virtual missiles we can only draw 4 every frame,
   256 				; 	so some of them can lose hardware collisions and they are going to flicker
   257 				;
   258 				;**************************************************************************************************
   259 				;
   260 5C80			.proc InitMissileSystem
   261
   262 5C80 A9 00				lda #0
   263 5C82 8D A4 5B				sta m_currentVirtualMissiles
   264 5C85 A2 00				ldx #0
   265
   266 				;************************************************
   267 				;
   268 5C87			IMS_loop
   269 						
   270 5C87 9D A5 5B				sta TabMissileScreenLeftX,x
   271 5C8A 9D A9 5B				sta TabMissileScreenTopY,x
   272 5C8D 9D AD 5B				sta TabOldMissileScreenLeftX,x
   273 5C90 9D B1 5B				sta TabOldMissileScreenTopY,x
   274
   275 5C93 9D B5 5B				sta TabMissileLevelLeftX_H2,x
   276 5C96 9D B9 5B				sta TabMissileLevelLeftX_H1,x
   277 5C99 9D BD 5B				sta TabMissileLevelLeftX_L1,x
   278 5C9C 9D C1 5B				sta TabMissileLevelTopY_H2,x
   279 5C9F 9D C5 5B				sta TabMissileLevelTopY_H1,x
   280 5CA2 9D C9 5B				sta TabMissileLevelTopY_L1,x
   281
   282 5CA5 9D CD 5B				sta TabMissileSpeedX_H1,x
   283 5CA8 9D D1 5B				sta TabMissileSpeedX_L1,x
   284
   285 5CAB 9D D5 5B				sta TabMissileDirection,x
   286
   287 5CAE 9D D9 5B				sta TabMissileFrameCounter_H2,x
   288 5CB1 9D DD 5B				sta TabMissileFrameCounter_H1,x
   289
   290 5CB4 9D E1 5B				sta TabMissileOwner,x
   291
   292 5CB7 E8					inx
   293 5CB8 E0 04				cpx #MAX_VIRTUAL_MISSILES
   294 5CBA D0 CB				bne IMS_loop
   295
   296 5CBC 60					rts
   297
   298 				.endp		
   299 				;
   300 				;**************************************************************************************************
   301 				; GetFreeMissileIndex
   302 				;**************************************************************************************************
   303 				;
   304 5CBD			.proc GetFreeMissileIndex
   305
   306 					
   307 5CBD A2 00				ldx #0									; return in X the index of the free virtual missile
   308 					
   309 				;************************************************
   310 				;
   311 5CBF			GFMI_loop
   312 5CBF BD E1 5B				lda TabMissileOwner,x					; if the owner is 0, the slot is free
   313 5CC2 F0 07				beq GFMI_exit
   314
   315 5CC4 E8					inx
   316 5CC5 E0 04				cpx #MAX_VIRTUAL_MISSILES
   317 5CC7 D0 F6				bne GFMI_loop
   318
   319 5CC9 A2 FF				ldx #255								; value for: "there is no free index"
   320 					
   321 				;************************************************
   322 				;
   323 5CCB			GFMI_exit
   324 5CCB 60					rts
   325
   326 				.endp		
   327 				;	
   328 				;**************************************************************************************************
   329 				; CreateMissile
   330 				;
   331 				; 	before this, call GetFreeMissileIndex and then init:
   332 				; 	TabMissileLevelLeftX_H2/H1/L1, TabMissileLevelTopY_H2/H1/L1,
   333 				; 	TabMissileSpeedX_H1/L1 (negative if going to the left)
   334 				; 	and TabMissileOwner (different than 0)
   335 				;
   336 				;**************************************************************************************************
   337 				;
   338 5CCC			.proc CreateMissile
   339
   340 					
   341 5CCC A9 00				lda #0									; use X as a parameter (the index of the virtual missile)
   342 5CCE 9D D9 5B				sta TabMissileFrameCounter_H2,x
   343 5CD1 9D DD 5B				sta TabMissileFrameCounter_H1,x
   344 5CD4 20 E3 5D				jsr SetMissileScreenPos
   345 					
   346 						
   347 5CD7 20 3B 5E				jsr DrawMissileMX						; maybe should check screen position before creating the missile
   348 5CDA EE A4 5B				inc m_currentVirtualMissiles
   349 5CDD 60					rts
   350
   351 				.endp		
   352 				;	
   353 				;**************************************************************************************************
   354 				; UpdateMissileSystem
   355 				;
   356 				; 	should call this every frame, before calling CreateMissile in that frame (?)
   357 				;
   358 				;**************************************************************************************************
   359 				;
   360 5CDE			.proc UpdateMissileSystem
   361
   362 5CDE A2 00				ldx #0
   363
   364 				;************************************************
   365 				; if the owner is 0, the slot is free
   366 				;
   367 5CE0			UMS_loop
   368 					
   369 5CE0 BD E1 5B				lda TabMissileOwner,x					
   370 5CE3 D0 03				bne UMS_update
   371 5CE5 4C DA 5D				jmp UMS_next
   372
   373 				;************************************************
   374 				; update frame counter (life time)
   375 				;
   376 5CE8			UMS_update	
   377 						
   378 5CE8 FE DD 5B				inc TabMissileFrameCounter_H1,x			
   379 5CEB D0 03				bne UMS_check_collision
   380 5CED FE D9 5B				inc TabMissileFrameCounter_H2,x
   381
   382 				;************************************************
   383 				; check if we need to destroy the missile by a hardware collision
   384 				;
   385 5CF0			UMS_check_collision								
   386 					
   387 5CF0 20 65 5F				jsr GetPlayerMissileFrontChar
   388 5CF3 BD E1 5B				lda TabMissileOwner,x
   389 5CF6 C9 01				cmp #1
   390 5CF8 F0 0C				beq UMS_player_owner
   391
   392 				;************************************************
   393 				; the collision check is a lot simpler for enemies
   394 				;
   395 5CFA			UMS_enemy_owner									
   396 					
   397 5CFA AD 1F 32				lda m_charDef
   398 5CFD 29 01				and #01
   399 5CFF C9 01				cmp #CT_BLOCK
   400 5D01 D0 57				bne UMS_update_position
   401 5D03 4C B6 5D				jmp UMS_destroy
   402
   403 				;************************************************
   404 				;
   405 5D06			UMS_player_owner
   406 						
   407 5D06 AD 1F 32				lda m_charDef
   408 5D09 29 01				and #$01
   409
   410 				;************************************************
   411 				;
   412 5D0B			UMS_check_block
   413 						
   414 5D0B C9 01				cmp #CT_BLOCK
   415 5D0D D0 05				bne UMS_check_danger
   416 						
   417 5D0F A9 04				lda #4									; gray color
   418 5D11 4C 57 5D				jmp TEST_B1
   419
   420 				;************************************************
   421 				;
   422 5D14			UMS_check_danger
   423 					
   424 5D14 C9 03				cmp #CT_DANGER
   425 5D16 D0 42				bne UMS_update_position
   426
   427 				;************************************************
   428 				;
   429 5D18			UMS_check_vlaser
   430 					
   431 5D18 AD 1E 32				lda m_charRaw							; check for a disabed vertical laser
   432 5D1B C9 95				cmp #[$80 + $15]
   433 5D1D D0 0A				bne UMS_check_enemy1_left
   434 					
   435 5D1F AD EB 31				lda m_animLaserCurrentFrame
   436 5D22 C9 3C				cmp #VLASER_DISABLED_INDEX				; disabled state index
   437 5D24 F0 34				beq UMS_update_position
   438 5D26 4C 55 5D				jmp UMS_danger
   439
   440 				;************************************************
   441 				;
   442 5D29			UMS_check_enemy1_left
   443 					
   444 5D29 C9 C0				cmp #[$80 + $40]						; danger plus enemy 1 left char index
   445 5D2B D0 12				bne UMS_check_enemy1_right
   446 					
   447 5D2D AD 1A 32				lda m_charPositionX
   448 5D30 8D 01 32				sta m_enemyCharPosX
   449 5D33 AD 1B 32				lda m_charPositionY
   450 5D36 8D 02 32				sta m_enemyCharPosY	
   451 5D39 20 D0 68				jsr HitEnemy	
   452 5D3C 4C 55 5D				jmp UMS_danger
   453
   454 				;************************************************
   455 				;
   456 5D3F			UMS_check_enemy1_right
   457
   458 5D3F C9 C1				cmp #[$80 + $41]						; danger plus enemy 1 right char index
   459 5D41 D0 12				bne UMS_danger
   460 5D43 AD 1A 32				lda m_charPositionX
   461 5D46 8D 01 32				sta m_enemyCharPosX
   462 5D49 CE 01 32				dec m_enemyCharPosX
   463 5D4C AD 1B 32				lda m_charPositionY
   464 5D4F 8D 02 32				sta m_enemyCharPosY	
   465 5D52 20 D0 68				jsr HitEnemy
   466
   467 				;************************************************
   468 				;
   469 5D55			UMS_danger
   470
   471 				.if PAL_VERSION = 0		
   472 5D55 A9 24				lda #[32+4]								; red color, change for pal
   473 				.else
   474 						lda #[16+4]
   475 				.endif
   476
   477 				;************************************************
   478 				;
   479 5D57			TEST_B1
   480 					
   481 5D57 4C B6 5D				jmp UMS_destroy
   482
   483 				;************************************************
   484 				; update position using the missile speed
   485 				;
   486 5D5A			UMS_update_position								
   487 						
   488 5D5A BD D5 5B				lda TabMissileDirection,x
   489 5D5D C9 01				cmp #1
   490 5D5F D0 21				bne UMS_move_left
   491
   492 				;************************************************
   493 				;
   494 5D61			UMS_move_right
   495 					
   496 5D61 BD BD 5B				lda TabMissileLevelLeftX_L1,x
   497 5D64 18					clc
   498 5D65 7D D1 5B				adc TabMissileSpeedX_L1,x
   499 5D68 9D BD 5B				sta TabMissileLevelLeftX_L1,x
   500
   501 5D6B BD B9 5B				lda TabMissileLevelLeftX_H1,x
   502 5D6E 7D CD 5B				adc TabMissileSpeedX_H1,x
   503 5D71 9D B9 5B				sta TabMissileLevelLeftX_H1,x
   504
   505 5D74 BD B5 5B				lda TabMissileLevelLeftX_H2,x
   506 5D77 69 00				adc #0
   507 5D79 9D B5 5B				sta TabMissileLevelLeftX_H2,x
   508
   509 5D7C 20 E3 5D				jsr SetMissileScreenPos
   510
   511 5D7F 4C A0 5D				jmp UMS_check_screen_limits
   512
   513 				;************************************************
   514 				;
   515 5D82			UMS_move_left
   516 						
   517 5D82 BD BD 5B				lda TabMissileLevelLeftX_L1,x
   518 5D85 38					sec
   519 5D86 FD D1 5B				sbc TabMissileSpeedX_L1,x
   520 5D89 9D BD 5B				sta TabMissileLevelLeftX_L1,x
   521
   522 5D8C BD B9 5B				lda TabMissileLevelLeftX_H1,x
   523 5D8F FD CD 5B				sbc TabMissileSpeedX_H1,x
   524 5D92 9D B9 5B				sta TabMissileLevelLeftX_H1,x
   525
   526 5D95 BD B5 5B				lda TabMissileLevelLeftX_H2,x
   527 5D98 E9 00				sbc #0
   528 5D9A 9D B5 5B				sta TabMissileLevelLeftX_H2,x
   529
   530 5D9D 20 E3 5D				jsr SetMissileScreenPos
   531
   532 				;************************************************
   533 				; check outside screen position, to destroy the missile
   534 				;
   535 5DA0			UMS_check_screen_limits							
   536
   537 5DA0 BD A5 5B				lda TabMissileScreenLeftX,x
   538 5DA3 C9 30				cmp #[PM_BASE_SCREEN_X]					; screen left limit
   539 5DA5 90 0F				bcc UMS_destroy
   540 						
   541 5DA7 C9 CD				cmp #[PM_BASE_SCREEN_X+160-3]			; screen right limit (minus width of the missile)
   542 5DA9 B0 0B				bcs UMS_destroy
   543
   544 5DAB BD A9 5B				lda TabMissileScreenTopY,x
   545 5DAE C9 20				cmp #[PM_BASE_SCREEN_Y]					; screen top limit
   546 5DB0 90 04				bcc UMS_destroy
   547 					
   548 5DB2 C9 DE				cmp #[PM_BASE_SCREEN_Y+192-2]			; screen bottom limit (minus height of the missile)
   549 					
   550 5DB4 90 21				bcc UMS_draw
   551
   552 				;************************************************
   553 				;
   554 5DB6			UMS_destroy
   555 						
   556 5DB6 BD E1 5B				lda TabMissileOwner,x
   557 5DB9 C9 02				cmp #2
   558 5DBB D0 03				bne UMS_not_from_enemy
   559 5DBD CE 0C 32				dec m_enemyMissilesActive
   560
   561 				;************************************************
   562 				;
   563 5DC0			UMS_not_from_enemy
   564 					
   565 5DC0 A9 00				lda #0
   566 5DC2 9D E1 5B				sta TabMissileOwner,x
   567
   568 5DC5 BC B1 5B				ldy TabOldMissileScreenTopY,x
   569 5DC8 20 33 5F				jsr ClearMissileLines
   570
   571 5DCB BC A9 5B				ldy TabMissileScreenTopY,x
   572 5DCE 20 33 5F				jsr ClearMissileLines
   573
   574 5DD1 CE A4 5B				dec m_currentVirtualMissiles
   575 5DD4 4C DA 5D				jmp UMS_next
   576
   577 				;************************************************
   578 				; draw the missile
   579 				;
   580 5DD7			UMS_draw										
   581
   582 5DD7 20 3B 5E				jsr DrawMissileMX
   583
   584 				;************************************************
   585 				;
   586 5DDA			UMS_next
   587 					
   588 5DDA E8					inx
   589 5DDB E0 04				cpx #MAX_VIRTUAL_MISSILES
   590 5DDD F0 03				beq UMS_exit
   591 5DDF 4C E0 5C				jmp UMS_loop
   592
   593 				;************************************************
   594 				;
   595 5DE2			UMS_exit		
   596 5DE2 60					rts
   597 				.endp
   598 				;
   599 				;**************************************************************************************************
   600 				; SetMissileScreenPos
   601 				;
   602 				; 	use X as a parameter (the index of the virtual missile)
   603 				;
   604 				;**************************************************************************************************
   605 				;
   606 5DE3			.proc SetMissileScreenPos
   607 					
   608 5DE3 BD A5 5B				lda TabMissileScreenLeftX,x						; save old screen pos
   609 5DE6 9D AD 5B				sta TabOldMissileScreenLeftX,x
   610 5DE9 BD A9 5B				lda TabMissileScreenTopY,x
   611 5DEC 9D B1 5B				sta TabOldMissileScreenTopY,x
   612 						
   613 						;
   614 						;************************************************
   615 						; get new screen pos
   616 						; this must use the "_H2" positions for when the
   617 						; delta between the missile and the camera is too
   618 						; big (64 chars in X, or 32 chars in Y)
   619 						;************************************************
   620 						;
   621 5DEF BD B9 5B				lda TabMissileLevelLeftX_H1,x
   622 5DF2 38					sec
   623 5DF3 E5 DB				sbc m_levelWindowX_H1
   624 5DF5 8D 21 32				sta m_screenDelta_H1
   625 						
   626 5DF8 BD B5 5B				lda TabMissileLevelLeftX_H2,x
   627 5DFB E5 DA				sbc m_levelWindowX_H2
   628 5DFD 90 33				bcc SMSP_set_outside							; this is not totally correct, because it doesn't use the width of the missile
   629 5DFF 8D 20 32				sta m_screenDelta_H2							; (but if we do it correctly we should clip the missile graphics)
   630 5E02 D0 2E				bne SMSP_set_outside							; could remove the bcc and only use this..
   631
   632 5E04 AD 21 32				lda m_screenDelta_H1
   633 5E07 C9 9F				cmp #[160-1]									; 40 chars x 4 pixels, minus (missile width - 1)
   634 5E09 B0 27				bcs SMSP_set_outside
   635
   636 5E0B 69 30				adc #PM_BASE_SCREEN_X
   637 5E0D 9D A5 5B				sta TabMissileScreenLeftX,x
   638 5E10 BD C5 5B				lda TabMissileLevelTopY_H1,x
   639 5E13 38					sec
   640 5E14 E5 DD				sbc m_levelWindowY_H1
   641 5E16 8D 21 32				sta m_screenDelta_H1
   642 						
   643 5E19 BD C1 5B				lda TabMissileLevelTopY_H2,x
   644 5E1C E5 DC				sbc m_levelWindowY_H2
   645 5E1E 90 12				bcc SMSP_set_outside							; this is not totally correct, because it doesn't use the height of the missile
   646 5E20 8D 20 32				sta m_screenDelta_H2							; (but if we do it correctly we should clip the missile graphics)
   647 5E23 D0 0D				bne SMSP_set_outside							; could remove the bcc and only use this..
   648
   649 5E25 AD 21 32				lda m_screenDelta_H1
   650 5E28 C9 BF				cmp #[193-2]									; 24 chars x 8 scan lines, plus one extra scan line, minus (missile height - 1)
   651 5E2A B0 06				bcs SMSP_set_outside
   652 					
   653 5E2C 69 20				adc #PM_BASE_SCREEN_Y
   654 5E2E 9D A9 5B				sta TabMissileScreenTopY,x
   655 						
   656 5E31 60					rts
   657
   658 				;************************************************
   659 				; if outside the visible range in X or Y, just set 
   660 				; it out of the screen (for a p/m the screen 
   661 				; coordinate 0 is outside the visible range)
   662 				;
   663 5E32			SMSP_set_outside								
   664 						
   665 5E32 A9 00				lda #0
   666 5E34 9D A5 5B				sta TabMissileScreenLeftX,x
   667 5E37 9D A9 5B				sta TabMissileScreenTopY,x
   668 5E3A 60					rts	
   669 				.endp	
   670 				;
   671 				;**************************************************************************************************
   672 				; DrawMissileMX
   673 				;
   674 				; 	draw missiles, use X as a parameter (the index of the virtual missile)
   675 				;
   676 				;**************************************************************************************************
   677 				;
   678 5E3B			DrawMissileMX
   679 5E3B BD 9C 5B			lda TabDrawMissileMethodLSB,x
   680 5E3E 85 EB			sta m_pageZeroTempPointer
   681 5E40 BD A0 5B			lda TabDrawMissileMethodMSB,x
   682 5E43 85 EC			sta m_pageZeroTempPointer+1
   683
   684 5E45 6C EB 00			jmp (m_pageZeroTempPointer)
   685 				;
   686 				;**************************************************************************************************
   687 				; DrawMissileM0
   688 				;**************************************************************************************************
   689 				;
   690 5E48			DrawMissileM0
   691 5E48 BD A5 5B			lda TabMissileScreenLeftX,x
   692 5E4B 8D 04 D0			sta HPOSM0
   693
   694 					; clear old position first
   695 5E4E BC B1 5B			ldy TabOldMissileScreenTopY,x
   696
   697 5E51 20 33 5F			jsr ClearMissileLines
   698
   699 					; draw shape in new position
   700 5E54 BC A9 5B			ldy TabMissileScreenTopY,x
   701
   702 5E57 BD D5 5B			lda TabMissileDirection,x
   703 5E5A C9 01			cmp #1
   704 5E5C D0 03			bne DMM0_left
   705
   706 5E5E 4C FB 5E			jmp SetMissileToRightLines
   707 				;
   708 				;**************************************************************************************************
   709 				; DMM0_left
   710 				;**************************************************************************************************
   711 				;
   712 5E61			DMM0_left
   713 5E61 4C 17 5F			jmp SetMissileToLeftLines
   714 				;
   715 				;**************************************************************************************************
   716 				; DrawMissileM1
   717 				;**************************************************************************************************
   718 				;
   719 5E64			DrawMissileM1
   720 5E64 BD A5 5B			lda TabMissileScreenLeftX,x
   721 5E67 8D 05 D0			sta HPOSM1
   722 					; clear old position first
   723 5E6A BC B1 5B			ldy TabOldMissileScreenTopY,x
   724 5E6D 20 33 5F			jsr ClearMissileLines
   725
   726 					; draw shape in new position
   727 5E70 BC A9 5B			ldy TabMissileScreenTopY,x
   728
   729 5E73 BD D5 5B			lda TabMissileDirection,x
   730 5E76 C9 01			cmp #1
   731 5E78 D0 03			bne DMM1_left
   732
   733 5E7A 4C FB 5E			jmp SetMissileToRightLines
   734 				;
   735 				;**************************************************************************************************
   736 				;
   737 5E7D			DMM1_left
   738 5E7D 4C 17 5F			jmp SetMissileToLeftLines
   739 5E80 60				rts
   740 				;
   741 				;**************************************************************************************************
   742 				; DrawMissileM2
   743 				;**************************************************************************************************
   744 				;
   745 5E81			DrawMissileM2
   746 5E81 BD A5 5B			lda TabMissileScreenLeftX,x
   747 5E84 8D 06 D0			sta HPOSM2
   748
   749 					; clear old position first
   750 5E87 BC B1 5B			ldy TabOldMissileScreenTopY,x
   751
   752 5E8A B9 00 A3			lda ms_area_1,y
   753 5E8D 29 CF			and #CLEAR_MASK_M2
   754 5E8F 99 00 A3			sta ms_area_1,y
   755 5E92 B9 01 A3			lda ms_area_1+1,y
   756 5E95 29 CF			and #CLEAR_MASK_M2
   757 5E97 99 01 A3			sta ms_area_1+1,y
   758 5E9A B9 02 A3			lda ms_area_1+2,y
   759 5E9D 29 CF			and #CLEAR_MASK_M2
   760 5E9F 99 02 A3			sta ms_area_1+2,y
   761
   762 					; draw shape in new position
   763 5EA2 BC A9 5B			ldy TabMissileScreenTopY,x
   764
   765 5EA5 B9 00 A3			lda ms_area_1,y
   766 5EA8 09 30			ora #SET_MASK_M2
   767 5EAA 99 00 A3			sta ms_area_1,y
   768 5EAD B9 01 A3			lda ms_area_1+1,y
   769 5EB0 09 30			ora #SET_MASK_M2
   770 5EB2 99 01 A3			sta ms_area_1+1,y
   771 5EB5 B9 02 A3			lda ms_area_1+2,y
   772 5EB8 09 30			ora #SET_MASK_M2
   773 5EBA 99 02 A3			sta ms_area_1+2,y
   774 5EBD 60				rts
   775 				;
   776 				;**************************************************************************************************
   777 				; DrawMissileM3
   778 				;**************************************************************************************************
   779 				;
   780 5EBE			DrawMissileM3
   781 5EBE BD A5 5B			lda TabMissileScreenLeftX,x
   782 5EC1 8D 07 D0			sta HPOSM3
   783
   784 					; clear old position first
   785 5EC4 BC B1 5B			ldy TabOldMissileScreenTopY,x
   786
   787 5EC7 B9 00 A3			lda ms_area_1,y
   788 5ECA 29 3F			and #CLEAR_MASK_M3
   789 5ECC 99 00 A3			sta ms_area_1,y
   790 5ECF B9 01 A3			lda ms_area_1+1,y
   791 5ED2 29 3F			and #CLEAR_MASK_M3
   792 5ED4 99 01 A3			sta ms_area_1+1,y
   793 5ED7 B9 02 A3			lda ms_area_1+2,y
   794 5EDA 29 3F			and #CLEAR_MASK_M3
   795 5EDC 99 02 A3			sta ms_area_1+2,y
   796
   797 					; draw shape in new position
   798 5EDF BC A9 5B			ldy TabMissileScreenTopY,x
   799
   800 5EE2 B9 00 A3			lda ms_area_1,y
   801 5EE5 09 C0			ora #SET_MASK_M3
   802 5EE7 99 00 A3			sta ms_area_1,y
   803 5EEA B9 01 A3			lda ms_area_1+1,y
   804 5EED 09 C0			ora #SET_MASK_M3
   805 5EEF 99 01 A3			sta ms_area_1+1,y
   806 5EF2 B9 02 A3			lda ms_area_1+2,y
   807 5EF5 09 C0			ora #SET_MASK_M3
   808 5EF7 99 02 A3			sta ms_area_1+2,y
   809
   810 5EFA 60				rts
   811 				;
   812 				;**************************************************************************************************
   813 				; SetMissileToRightLines
   814 				;**************************************************************************************************
   815 				;
   816 5EFB			SetMissileToRightLines
   817 5EFB B9 00 A3			lda ms_area_1,y
   818 5EFE 1D 84 5B			ora TabSetMissileToRightMaskL1,x			; this "x" should be a hardware missile index
   819 5F01 99 00 A3			sta ms_area_1,y
   820 5F04 B9 01 A3			lda ms_area_1+1,y
   821 5F07 1D 88 5B			ora TabSetMissileToRightMaskL2,x			; this "x" should be a hardware missile index
   822 5F0A 99 01 A3			sta ms_area_1+1,y
   823 5F0D B9 02 A3			lda ms_area_1+2,y
   824 5F10 1D 8C 5B			ora TabSetMissileToRightMaskL3,x			; this "x" should be a hardware missile index
   825 5F13 99 02 A3			sta ms_area_1+2,y
   826
   827 5F16 60				rts
   828 				;
   829 				;**************************************************************************************************
   830 				; SetMissileToLeftLines
   831 				;**************************************************************************************************
   832 				;
   833 5F17			SetMissileToLeftLines
   834 5F17 B9 00 A3			lda ms_area_1,y
   835 5F1A 1D 90 5B			ora TabSetMissileToLeftMaskL1,x				; this "x" should be a hardware missile index
   836 5F1D 99 00 A3			sta ms_area_1,y
   837 5F20 B9 01 A3			lda ms_area_1+1,y
   838 5F23 1D 94 5B			ora TabSetMissileToLeftMaskL2,x				; this "x" should be a hardware missile index
   839 5F26 99 01 A3			sta ms_area_1+1,y
   840 5F29 B9 02 A3			lda ms_area_1+2,y
   841 5F2C 1D 98 5B			ora TabSetMissileToLeftMaskL3,x				; this "x" should be a hardware missile index
   842 5F2F 99 02 A3			sta ms_area_1+2,y
   843 5F32 60				rts
   844 				;
   845 				;**************************************************************************************************
   846 				; ClearMissileLines
   847 				;**************************************************************************************************
   848 				;
   849 5F33			ClearMissileLines
   850 5F33 B9 00 A3			lda ms_area_1,y
   851 5F36 3D 80 5B			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   852 5F39 99 00 A3			sta ms_area_1,y
   853 5F3C B9 01 A3			lda ms_area_1+1,y
   854 5F3F 3D 80 5B			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   855 5F42 99 01 A3			sta ms_area_1+1,y
   856 5F45 B9 02 A3			lda ms_area_1+2,y
   857 5F48 3D 80 5B			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   858 5F4B 99 02 A3			sta ms_area_1+2,y
   859 5F4E 60				rts
   860 				;
   861 				;**************************************************************************************************
   862 				; ClearAllMissiles
   863 				;**************************************************************************************************
   864 				;
   865 5F4F			.proc ClearAllMissiles
   866 					
   867 5F4F A2 00				ldx #0
   868 5F51 A9 00				lda #0
   869
   870 				;************************************************
   871 				;
   872 5F53			CAM_loop
   873 5F53 BC A9 5B				ldy TabMissileScreenTopY,x
   874 5F56 99 00 A3				sta ms_area_1,y
   875 5F59 99 01 A3				sta ms_area_1+1,y
   876 5F5C 99 02 A3				sta ms_area_1+2,y
   877
   878 5F5F E8					inx
   879 5F60 E0 04				cpx #MAX_VIRTUAL_MISSILES
   880 5F62 D0 EF				bne CAM_loop
   881
   882 5F64 60					rts
   883 						
   884 				.endp		
   885
   886 				;
   887 				;**************************************************************************************************
   888 				; GetPlayerMissileFrontChar
   889 				;
   890 				; 	use X as a parameter (the index of the virtual missile)
   891 				; 	return in A the character definition value
   892 				;
   893 				;**************************************************************************************************
   894 				;
   895 5F65			.proc GetPlayerMissileFrontChar	
   896
   897 5F65 BD D5 5B				lda TabMissileDirection,x				; get front point char column
   898 5F68 C9 01				cmp #1
   899 5F6A D0 14				bne GMFC_left
   900
   901 				;*****	Right
   902 				;
   903 5F6C			GMFC_right										; moving to the right, use right side pixel
   904 5F6C BD B9 5B				lda TabMissileLevelLeftX_H1,x
   905 5F6F 18					clc
   906 5F70 69 03				adc #3									; missile X size minus one
   907 5F72 8D 17 32				sta m_pixelPositionX_H1
   908 5F75 BD B5 5B				lda TabMissileLevelLeftX_H2,x
   909 5F78 69 00				adc #0
   910 5F7A 8D 16 32				sta m_pixelPositionX_H2
   911 5F7D 4C 8C 5F				jmp GMFC_middle_line
   912
   913 				;*****	Left
   914 				;
   915 5F80			GMFC_left										
   916 5F80 BD B9 5B				lda TabMissileLevelLeftX_H1,x			; moving to the left, use left side pixel
   917 5F83 8D 17 32				sta m_pixelPositionX_H1
   918 5F86 BD B5 5B				lda TabMissileLevelLeftX_H2,x
   919 5F89 8D 16 32				sta m_pixelPositionX_H2
   920
   921 				;***** 	Middle Line
   922 				;
   923 5F8C			GMFC_middle_line
   924 												
   925 5F8C BD C5 5B				lda TabMissileLevelTopY_H1,x			; get middle char line
   926 5F8F 18					clc
   927 5F90 69 01				adc #1									; because the height is 3 lines
   928 5F92 8D 19 32				sta m_pixelPositionY_H1
   929 5F95 BD C1 5B				lda TabMissileLevelTopY_H2,x
   930 5F98 69 00				adc #0
   931 5F9A 8D 18 32				sta m_pixelPositionY_H2
   932 5F9D 20 A1 5F				jsr GetCharDefinitionFromPixelPos
   933 					
   934 5FA0 60					rts
   935 					
   936 				.endp
   937 					
   938 				;
   939 				;**************************************************************************************************
   940 				; GetCharDefinitionFromPixelPos
   941 				;
   942 				; 	put coord "x" in m_pixelPositionX_H2/_H1 and coord "y" in m_pixelPositionY_H2/_H1
   943 				; 	return in A the character definition value (and also use the Y register)
   944 				; 	(this assume that there no more than 256 chars in x or in y, in a room)
   945 				;
   946 				;**************************************************************************************************
   947 				;
   948 5FA1			.proc GetCharDefinitionFromPixelPos
   949
   950 5FA1 AD 18 32				lda m_pixelPositionY_H2					; get char line, divide by 8 (put in Y)
   951 5FA4 8D 30 32				sta m_charBuffer_H2
   952 						
   953 5FA7 AD 19 32				lda m_pixelPositionY_H1
   954 5FAA 4E 30 32				lsr m_charBuffer_H2						; /2
   955 5FAD 6A					ror
   956 5FAE 4E 30 32				lsr m_charBuffer_H2						; /4
   957 5FB1 6A					ror
   958 5FB2 4E 30 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   959 5FB5 6A					ror
   960 5FB6 8D 1B 32				sta m_charPositionY
   961 						
   962 5FB9 A8					tay
   963 5FBA B9 3F 32				lda TabLevelLineAddressLSB,y			; init pointer to char
   964 5FBD 8D E2 5F				sta GCDFPP_pointer+1
   965 5FC0 8D 1C 32				sta m_lineAddressLSB
   966 					
   967 5FC3 B9 3F 33				lda TabLevelLineAddressMSB,y
   968 5FC6 8D E3 5F				sta GCDFPP_pointer+2
   969 5FC9 8D 1D 32				sta m_lineAddressMSB
   970
   971 5FCC AD 16 32				lda m_pixelPositionX_H2					; get char column, divide by 4 (put in Y)
   972 5FCF 8D 30 32				sta m_charBuffer_H2
   973 5FD2 AD 17 32				lda m_pixelPositionX_H1
   974 5FD5 4E 30 32				lsr m_charBuffer_H2						; /2
   975 5FD8 6A					ror
   976 5FD9 4E 30 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   977 5FDC 6A					ror
   978 5FDD 8D 1A 32				sta m_charPositionX
   979 						
   980 5FE0 A8					tay
   981
   982 				;************************************************
   983 				;
   984 5FE1			GCDFPP_pointer
   985 						
   986 5FE1 B9 FF FF				lda $FFFF,y
   987 5FE4 8D 1E 32				sta m_charRaw
   988 5FE7 A8					tay
   989 5FE8 B9 3F 34				lda TabCharDefinition,y
   990 5FEB 8D 1F 32				sta m_charDef
   991 5FEE 60					rts
   992
   993 				.endp		
   318 5FEF					icl "AnimationsLogic.Asm"	
Source: E:\_8BitProjects\Series\Scroller\AnimationsLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AnimationsLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;*****	Local to Animations Logic
    14 				;
    15 = 000A			ANIM_COIN_CHAR1 			= $0A
    16 = 0006			ANIM_COIN_FRAMES 			= $06
    17 = 0008			ANIM_COIN_MAX_NUMBER 		= $08
    18
    19 = 0004			ANIM_MISC_FRAME_TIME		= $04
    20 = 0004			ANIM_SEA_TOP_FRAME_TIME 	= $04
    21
    22 5FEF 00 00 00 00 00 00 + TabCoinAnimFrame			.byte $00, $00, $00, $00, $00, $00, $00, $00
    23
    24 5FF7 00 00 00 00 00 00 + TabCoinAnimTimer			.byte $00, $00, $00, $00, $00, $00, $00, $00
    25
    26 5FFF 02 02 02 02 02 02	TabCoinAnimCharTime			.byte $02, $02, $02, $02, $02, $02
    27
    28 6005 00 00 00 00 00 00 + TabCoinAnimAddressLSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    29 600D 00 00 00 00 00 00 + TabCoinAnimAddressMSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    30
    31 				; vertical line, dither (red)
    32 6015 30 0C 30 0C 30 0C + TabAnimLaserFrame_01		.byte %00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100
    33 601D 0C 30 0C 30 0C 30 + TabAnimLaserFrame_02		.byte %00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000
    34 6025 00 00 00 00 00 00 + TabAnimLaserFrame_03		.byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
    35
    36 				; hoizontal line, dither (red)
    37 602D 33 CC 33		TabAnimHLaserFrame_01		.byte %00110011, %11001100, %00110011
    38 6030 CC 33 CC		TabAnimHLaserFrame_02		.byte %11001100, %00110011, %11001100
    39 6033 00 00 00 00 00 00 + TabAnimHLaserFrame_03		.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
    40
    41 				; sea top (blue)
    42 603B 0F			TabAnimSeaTopLeftFrame_01	.byte %00001111
    43 603C 3F										.byte %00111111
    44 603D FF										.byte %11111111
    45 603E FF										.byte %11111111
    46
    47 603F 00			TabAnimSeaTopRightFrame_01	.byte %00000000
    48 6040 C0										.byte %11000000
    49 6041 F0										.byte %11110000
    50 6042 FF										.byte %11111111
    51
    52 				.if PAL_VERSION = 0
    53 					
    54 = 003D				ANIM_LASER_FRAMES 		= $3D
    55 = 003D				ANIM_HLASER_FRAMES 		= $3D
    56 					
    57 6043 15 1D 15 1D 15 1D + TabAnimLaserFrameAddressLSB		:30 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    58 607F 25												.byte <TabAnimLaserFrame_03
    59 										
    60 6080 60 60 60 60 60 60 + TabAnimLaserFrameAddressMSB		:30 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    61 60BC 60												.byte >TabAnimLaserFrame_03
    62
    63 60BD 2D 30 2D 30 2D 30 + TabAnimHLaserFrameAddressLSB	:30 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    64 60F9 33												.byte <TabAnimHLaserFrame_03
    65
    66 60FA 60 60 60 60 60 60 + TabAnimHLaserFrameAddressMSB	:30 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    67 6136 60												.byte >TabAnimHLaserFrame_03
    68
    69 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    70 6137 01 01 01 01 01 01 + TabAnimHLaserFrameTime			:30 .byte $01, $01
    71 6173 5A												.byte $5A
    72
    73 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    74 6174 01 01 01 01 01 01 + TabAnimLaserFrameTime			:30 .byte $01, $01
    75 61B0 3C												.byte $3C
    76
    77 				.else
    78
    79 					ANIM_LASER_FRAMES 		= $33
    80 					ANIM_HLASER_FRAMES 		= $33
    81
    82 				TabAnimLaserFrameAddressLSB		:25 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    83 													.byte <TabAnimLaserFrame_03
    84 											
    85 				TabAnimLaserFrameAddressMSB		:25 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    86 													.byte >TabAnimLaserFrame_03
    87
    88 				TabAnimHLaserFrameAddressLSB	:25 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    89 													.byte <TabAnimHLaserFrame_03
    90
    91 				TabAnimHLaserFrameAddressMSB	:25 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    92 													.byte >TabAnimHLaserFrame_03
    93
    94 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    95 				TabAnimHLaserFrameTime			:25 .byte $01, $01
    96 													.byte $4B
    97
    98 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    99 				TabAnimLaserFrameTime			:25 .byte $01, $01
   100 													.byte $32
   101
   102 				.endif
   103
   104 				;
   105 				;**************************************************************************************************
   106 				; DoFontAnimations	
   107 				;**************************************************************************************************
   108 				;
   109 61B1			.proc DoFontAnimations
   110 					
   111 61B1 20 4A 62				jsr AnimateWater
   112 61B4 20 8A 62				jsr AnimateVerticalLaser
   113 61B7 20 BF 62				jsr AnimateHorizontalLaser
   114 61BA 20 F4 62				jsr AnimateMisc		
   115 61BD 20 51 6A				jsr PlatformControlH
   116 						
   117 61C0 60					rts
   118 						
   119 				.endp
   120
   121 				;
   122 				;**************************************************************************************************
   123 				;
   124 				;	AddCoinAnimation
   125 				;
   126 				;		the word "m_pageZeroTempPointer" has the address of the char to animate
   127 				;	
   128 				;**************************************************************************************************
   129 				;
   130 61C1			.proc AddCoinAnimation
   131 					
   132 61C1 AD E7 31				lda m_currentCoinAnimations					
   133 61C4 C9 08				cmp #ANIM_COIN_MAX_NUMBER
   134 61C6 F0 28				beq Exit
   135 						
   136 61C8 EE E7 31				inc m_currentCoinAnimations
   137 61CB AE E6 31				ldx m_emptyCoinAnimIndex
   138 					
   139 61CE A5 EB				lda m_pageZeroTempPointer
   140 61D0 9D 05 60				sta TabCoinAnimAddressLSB,x
   141 						
   142 61D3 A5 EC				lda m_pageZeroTempPointer+1
   143 61D5 9D 0D 60				sta TabCoinAnimAddressMSB,x
   144
   145 61D8 A9 00				lda #0										; use first frame
   146 61DA 9D EF 5F				sta TabCoinAnimFrame,x
   147 					
   148 61DD AD FF 5F				lda TabCoinAnimCharTime						; use first element of the table
   149 61E0 9D F7 5F				sta TabCoinAnimTimer,x
   150
   151 61E3 A0 00				ldy #0
   152 61E5 A9 0A				lda #ANIM_COIN_CHAR1
   153 61E7 91 EB				sta (m_pageZeroTempPointer),y				; update screen
   154
   155 61E9 E8					inx
   156 61EA 8A					txa
   157 61EB 29 07				and #%111
   158 61ED 8D E6 31				sta m_emptyCoinAnimIndex
   159
   160 				;*****	Add Coin Animation Exit
   161 				;
   162 61F0			Exit
   163 61F0 60					rts
   164
   165 				.endp
   166 					
   167 				;
   168 				;**************************************************************************************************
   169 				; UpdateCoinAnimations	
   170 				;**************************************************************************************************
   171 				;
   172 61F1			UpdateCoinAnimations
   173
   174 61F1 AD E7 31			lda m_currentCoinAnimations					; update coin animations every frame	
   175 61F4 F0 53			beq UCA_exit
   176 61F6 AE E5 31			ldx m_firstCoinAnimIndex
   177
   178 				;**************************************************
   179 				;
   180 61F9			UCA_loop
   181 61F9 DE F7 5F			dec TabCoinAnimTimer,x
   182 61FC D0 41			bne UCA_check_loop
   183
   184 61FE FE EF 5F			inc TabCoinAnimFrame,x
   185 6201 BD EF 5F			lda TabCoinAnimFrame,x
   186 6204 C9 06			cmp #ANIM_COIN_FRAMES
   187 6206 F0 19			beq UCA_clear_anim
   188
   189 				;**************************************************
   190 				;
   191 6208			UCA_update_anim
   192 6208 A8				tay
   193 6209 B9 FF 5F			lda TabCoinAnimCharTime,y					; #ANIM_COIN_TIME
   194 620C 9D F7 5F			sta TabCoinAnimTimer,x
   195
   196 620F BD 05 60			lda TabCoinAnimAddressLSB,x
   197 6212 8D 1C 62			sta UCA_char_pointer+1
   198 6215 BD 0D 60			lda TabCoinAnimAddressMSB,x
   199 6218 8D 1D 62			sta UCA_char_pointer+2
   200
   201 				;**************************************************
   202 				;
   203 621B			UCA_char_pointer
   204 621B EE FF FF			inc $FFFF									; update the animation frame, increment the char on screen
   205 621E 4C 3F 62			jmp UCA_check_loop
   206
   207 				;**************************************************
   208 				;
   209 6221			UCA_clear_anim
   210 6221 BD 05 60			lda TabCoinAnimAddressLSB,x
   211 6224 8D 30 62			sta UCA_clear_char_pointer+1
   212 6227 BD 0D 60			lda TabCoinAnimAddressMSB,x
   213 622A 8D 31 62			sta UCA_clear_char_pointer+2
   214 622D A9 00			lda #0
   215
   216 				;**************************************************
   217 				;
   218 622F			UCA_clear_char_pointer
   219 622F 8D FF FF			sta $FFFF									; clear the char on screen
   220 6232 CE E7 31			dec m_currentCoinAnimations
   221 6235 AC E5 31			ldy m_firstCoinAnimIndex
   222 6238 C8				iny
   223 6239 98				tya
   224 623A 29 07			and #%111
   225 623C 8D E5 31			sta m_firstCoinAnimIndex
   226
   227 				;**************************************************
   228 				;
   229 623F			UCA_check_loop
   230 623F E8				inx
   231 6240 8A				txa
   232 6241 29 07			and #%111
   233 6243 AA				tax
   234 6244 EC E6 31			cpx m_emptyCoinAnimIndex
   235 6247 D0 B0			bne UCA_loop
   236
   237 				;**************************************************
   238 				;
   239 6249			UCA_exit
   240 6249 60				rts
   241
   242 				;
   243 				;***************************************************************************************************
   244 				;	
   245 				;	AnimateWater
   246 				;	
   247 				; 		do sea top animation (chars 70, 71)
   248 				; 
   249 				;***************************************************************************************************
   250 				;	
   251 624A			.proc AnimateWater
   252
   253 624A AD DE 31			lda m_waterAvailable
   254 624D F0 3A			beq Exit
   255 					
   256 624F CE E4 31			dec m_animSeaTopTimer
   257 6252 D0 35			bne Exit
   258
   259 6254 A9 04			lda #ANIM_SEA_TOP_FRAME_TIME
   260 6256 8D E4 31			sta m_animSeaTopTimer
   261
   262 6259 AD 38 AA			lda GameFontAddress+8*71
   263 625C 4A				lsr											; put left bit in the carry
   264 625D 6E 30 AA			ror GameFontAddress+8*70
   265 6260 6E 38 AA			ror GameFontAddress+8*71
   266 6263 6E 30 AA			ror GameFontAddress+8*70
   267 6266 6E 38 AA			ror GameFontAddress+8*71
   268
   269 6269 AD 39 AA			lda GameFontAddress+8*71+1
   270 626C 4A				lsr											; put left bit in the carry
   271 626D 6E 31 AA			ror GameFontAddress+8*70+1
   272 6270 6E 39 AA			ror GameFontAddress+8*71+1
   273 6273 6E 31 AA			ror GameFontAddress+8*70+1
   274 6276 6E 39 AA			ror GameFontAddress+8*71+1
   275
   276 6279 AD 3A AA			lda GameFontAddress+8*71+2
   277 627C 4A				lsr											; put left bit in the carry
   278 627D 6E 32 AA			ror GameFontAddress+8*70+2
   279 6280 6E 3A AA			ror GameFontAddress+8*71+2
   280 6283 6E 32 AA			ror GameFontAddress+8*70+2
   281 6286 6E 3A AA			ror GameFontAddress+8*71+2
   282
   283 				;*****	Exit
   284 				;
   285 6289			Exit
   286
   287 6289 60					rts
   288 				.endp	
   289
   290 				;
   291 				;***************************************************************************************************
   292 				;	
   293 				;	AnimateVerticalLaser
   294 				;	
   295 				; 		do vertical line dither, laser animation (char 20, 21, 22)
   296 				; 
   297 				;***************************************************************************************************
   298 				;	
   299 628A			.proc AnimateVerticalLaser
   300
   301 628A AD DA 31				lda m_verticalLaserOn
   302 628D F0 2F				beq Exit
   303 						
   304 628F CE EA 31				dec m_animLaserTimer						
   305 6292 D0 2A				bne Exit
   306
   307 6294 AE EB 31				ldx m_animLaserCurrentFrame
   308 6297 E8					inx
   309 6298 E0 3D				cpx #ANIM_LASER_FRAMES
   310 629A D0 02				bne NextFrame
   311 						
   312 629C A2 00				ldx #0
   313
   314 				;*****	Animate Vertical Laser Next Frame
   315 				;
   316 629E			NextFrame
   317
   318 629E 8E EB 31				stx m_animLaserCurrentFrame
   319
   320 62A1 BD 74 61				lda TabAnimLaserFrameTime,x
   321 62A4 8D EA 31				sta m_animLaserTimer
   322
   323 62A7 BD 43 60				lda TabAnimLaserFrameAddressLSB,x
   324 62AA 8D B6 62				sta CopyFrame+1
   325
   326 62AD BD 80 60				lda TabAnimLaserFrameAddressMSB,x
   327 62B0 8D B7 62				sta CopyFrame+2
   328
   329 62B3 A0 07				ldy #7
   330 					
   331 				;*****	Animate Vertical Laser Copy Frame
   332 				;
   333 62B5			CopyFrame
   334 					
   335 62B5 B9 FF FF				lda $FFFF,y
   336 62B8 99 A8 A8				sta GameFontAddress+8*21,y
   337 62BB 88					dey
   338 62BC 10 F7				bpl CopyFrame
   339
   340 				;*****	Animate Vertical Laser End
   341 				;
   342 62BE			Exit
   343 						
   344 62BE 60					rts
   345
   346 				.endp
   347
   348 				;
   349 				;***************************************************************************************************
   350 				;	
   351 				;	AnimateHorizontalLaser
   352 				;	
   353 				; 		do horizontal line dither, laser animation (char 23, 24, 25)
   354 				; 
   355 				;***************************************************************************************************
   356 				;	
   357 62BF			.proc AnimateHorizontalLaser
   358
   359 62BF AD DB 31				lda m_horizontalLaserOn
   360 62C2 F0 2F				beq Exit
   361
   362 62C4 CE E8 31				dec m_animHLaserTimer						
   363 62C7 D0 2A				bne Exit
   364
   365 62C9 AE E9 31				ldx m_animHLaserCurrentFrame
   366 62CC E8					inx
   367 62CD E0 3D				cpx #ANIM_HLASER_FRAMES
   368 62CF D0 02				bne NextFrame
   369 						
   370 62D1 A2 00				ldx #0
   371
   372 				;******	Animate Horizontal Laser Next Frame
   373 				;
   374 62D3			NextFrame
   375 						
   376 62D3 8E E9 31				stx m_animHLaserCurrentFrame
   377 62D6 BD 37 61				lda TabAnimHLaserFrameTime,x
   378 62D9 8D E8 31				sta m_animHLaserTimer
   379
   380 62DC BD BD 60				lda TabAnimHLaserFrameAddressLSB,x
   381 62DF 8D EB 62				sta CopyFrame+1
   382 						
   383 62E2 BD FA 60				lda TabAnimHLaserFrameAddressMSB,x
   384 62E5 8D EC 62				sta CopyFrame+2
   385
   386 62E8 A0 02				ldy #2
   387
   388 				;*****	Animate Horizontal Laser Copy Frame
   389 				;
   390 62EA			CopyFrame
   391 					
   392 62EA B9 FF FF				lda $FFFF,y
   393 62ED 99 CA A8				sta GameFontAddress+8*25+2,y
   394 62F0 88					dey
   395 62F1 10 F7				bpl CopyFrame
   396
   397 				;*****	Animate Horizontal Laser Exit
   398 				;
   399 62F3			Exit
   400 62F3 60					rts
   401
   402 				.endp
   403
   404 				;
   405 				;***************************************************************************************************
   406 				;	
   407 				;	AnimateMisc
   408 				;	
   409 				; 		do misc animation
   410 				; 
   411 				;***************************************************************************************************
   412 				;	
   413 62F4			.proc AnimateMisc
   414
   415 62F4 A2 00				ldx #$00
   416
   417 62F6 BD A3 35				lda TabAnimationMiscMap[0], x
   418 62F9 85 E3				sta m_paramW01
   419
   420 62FB BD A4 35				lda TabAnimationMiscMap[0]+1, x
   421 62FE 85 E4				sta m_paramW01+1
   422 						
   423 6300 BD A6 35				lda TabAnimationMiscMap[0]+3, x
   424 6303 85 9A				sta m_animMiscWidth
   425
   426 6305 BD A7 35				lda TabAnimationMiscMap[0]+4, x
   427 6308 85 9B				sta m_animMiscHeight
   428 					
   429 630A A5 AE				lda m_playerScreenTopY
   430 630C A4 9B				ldy m_animMiscHeight		
   431 630E			Sub1
   432 630E 38					sec
   433 630F E9 01				sbc #$01
   434 6311 88					dey
   435 6312 D0 FA				bne Sub1
   436 						
   437 								 
   438 						
   439 6314			Loop
   440 								
   441
   442 				;*****	Exit Method
   443 6314			Exit
   444
   445 6314 60					rts
   446
   447 				.endp
   319 6315					icl "CameraLogic.Asm"
Source: E:\_8BitProjects\Series\Scroller\CameraLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		CameraLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 6315 0C 0B 0A 09		TabOffsetForHSCROL			.byte 12,11,10,9
    18 6319 00 01 02 03 04 05 + TabOffsetForVSCROL			.byte 0,1,2,3,4,5,6,7
    19
    20 6321			TabMultiply82_LSB			
    21 6321 00 52 A4 F6 48 9A + 	:26 .byte <[#*LEVEL_CHAR_SIZE_X]
    22
    23 633B			TabMultiply82_MSB
    24 633B 00 00 00 00 01 01 + 	:26 .byte >[#*LEVEL_CHAR_SIZE_X]
    25 				;
    26 				;**************************************************************************************************
    27 				; UpdateCameraWindow
    28 				;
    29 				; 	update target window pos (m_windowTargetPos*_*), using the player level position,
    30 				; 	correct (clamp) target window pos with level limits if necessary
    31 				;
    32 				;**************************************************************************************************
    33 				;
    34 6355			.proc UpdateCameraWindow
    35
    36 				;************************************************
    37 				;
    38 6355			UCW_check_left_limit
    39 					
    40 						; check left limit (clamp to the left)
    41 6355 A5 A1				lda m_playerLevelLeftX_H2				
    42 6357 C9 00				cmp #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    43 6359 90 08				bcc UCW_force_left_limit
    44 635B D0 13				bne UCW_check_right_limit
    45 						
    46 635D A5 A2				lda m_playerLevelLeftX_H1
    47 635F C9 52				cmp #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    48 6361 B0 0D				bcs UCW_check_right_limit
    49
    50 				;************************************************
    51 				;
    52 6363			UCW_force_left_limit
    53 						
    54 6363 A9 00				lda #>[CHAR_PIX.else_X]
    55 6365 8D F0 31				sta m_windowTargetPosX_H2
    56 						
    57 6368 A9 04				lda #<[CHAR_PIX.else_X]
    58 636A 8D F1 31				sta m_windowTargetPosX_H1
    59 						
    60 636D 4C 9A 63				jmp UCW_check_top_limit
    61
    62 				;************************************************
    63 				;
    64 6370			UCW_check_right_limit
    65 					
    66 						; check right limit (clamp to the right)
    67 6370 A9 00				lda #>[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    68 																											; [[[ 62 ] * 4 - 4] + 1]
    69 																											; [ 244 + 1] = 245	
    70 6372 C5 A4				cmp m_playerLevelRightX_H2	
    71 6374 90 08				bcc UCW_force_right_limit
    72 6376 D0 13				bne UCW_set_target_x
    73 						
    74 6378 A9 F5				lda #<[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    75 																											; [[[ 62 ] * 4 - 4] + 1]
    76 																											; [ 244 + 1] = 245	
    77 637A C5 A5				cmp m_playerLevelRightX_H1
    78 637C B0 0D				bcs UCW_set_target_x
    79
    80 				;************************************************
    81 				;
    82 637E			UCW_force_right_limit
    83 					
    84 637E A9 00				lda #>[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    85 6380 8D F0 31				sta m_windowTargetPosX_H2
    86 					
    87 6383 A9 A4				lda #<[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    88 6385 8D F1 31				sta m_windowTargetPosX_H1
    89 					
    90 6388 4C 9A 63				jmp UCW_check_top_limit
    91
    92 				;************************************************
    93 				; no clamp, use current player X position 
    94 				; and substract half the window size
    95 				;
    96 638B			UCW_set_target_x
    97 					
    98 638B A5 A2				lda m_playerLevelLeftX_H1
    99 638D 38					sec
   100 638E E9 4E				sbc #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   101 6390 8D F1 31				sta m_windowTargetPosX_H1
   102 					
   103 6393 A5 A1				lda m_playerLevelLeftX_H2
   104 6395 E9 00				sbc #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   105 6397 8D F0 31				sta m_windowTargetPosX_H2
   106
   107 				;************************************************
   108 				; check top limit (clamp to the top)
   109 				; 
   110 639A			UCW_check_top_limit
   111 						
   112 639A A5 A7				lda m_playerLevelTopY_H2
   113 639C C9 00				cmp #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   114 639E 90 08				bcc UCW_force_top_limit
   115 63A0 D0 13				bne UCW_check_bottom_limit
   116 						
   117 63A2 A5 A8				lda m_playerLevelTopY_H1
   118 63A4 C9 5C				cmp #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   119 63A6 B0 0D				bcs UCW_check_bottom_limit
   120
   121 				;************************************************
   122 				;
   123 63A8			UCW_force_top_limit
   124 						
   125 63A8 A9 00				lda #>[0]
   126 63AA 8D F2 31				sta m_windowTargetPosY_H2
   127 					
   128 63AD A9 00				lda #<[0]
   129 63AF 8D F3 31				sta m_windowTargetPosY_H1
   130 					
   131 63B2 4C DF 63				jmp UCW_get_deltas
   132
   133 				;************************************************
   134 				; check bottom limit (clamp to the bottom)
   135 				;
   136 63B5			UCW_check_bottom_limit
   137 						
   138 63B5 A9 00				lda #>[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   139 63B7 C5 AA				cmp m_playerLevelBottomY_H2
   140 63B9 90 08				bcc UCW_force_bottom_limit
   141 63BB D0 13				bne UCW_set_target_y
   142 						
   143 63BD A9 63				lda #<[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   144 63BF C5 AB				cmp m_playerLevelBottomY_H1
   145 63C1 B0 0D				bcs UCW_set_target_y
   146
   147 				;************************************************
   148 				;
   149 63C3			UCW_force_bottom_limit
   150 					
   151 63C3 A9 00				lda #>[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   152 63C5 8D F2 31				sta m_windowTargetPosY_H2
   153 					
   154 63C8 A9 00				lda #<[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   155 63CA 8D F3 31				sta m_windowTargetPosY_H1
   156 						
   157 63CD 4C DF 63				jmp UCW_get_deltas
   158
   159 				;************************************************
   160 				; no clamp, use current player Y position and substract half the window size
   161 				;
   162 63D0			UCW_set_target_y
   163 					
   164 63D0 A5 A8				lda m_playerLevelTopY_H1
   165 63D2 38					sec		
   166 63D3 E9 5C				sbc #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   167 63D5 8D F3 31				sta m_windowTargetPosY_H1
   168 					
   169 63D8 A5 A7				lda m_playerLevelTopY_H2
   170 63DA E9 00				sbc #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   171 63DC 8D F2 31				sta m_windowTargetPosY_H2
   172
   173 				;************************************************
   174 				; calculate deltas in X and Y for the current and
   175 				; the target window pos, update the current window
   176 				; pos according to the distance to the target
   177 				; (compare the level window with the target pos, 
   178 				; get the delta and divide it by 8, so the movement 
   179 				; speed is proportional to the distance, with a minimum step of 1)
   180 				;
   181 63DF			UCW_get_deltas
   182
   183 				;************************************************
   184 				;
   185 63DF			UCW_check_deltaX								
   186 						
   187 63DF A5 DA				lda m_levelWindowX_H2					; compare target X and current X
   188 63E1 CD F0 31				cmp m_windowTargetPosX_H2
   189 63E4 90 4D				bcc UCW_deltaX_positive
   190 63E6 D0 0C				bne UCW_deltaX_negative
   191 					
   192 63E8 A5 DB				lda m_levelWindowX_H1
   193 63EA CD F1 31				cmp m_windowTargetPosX_H1
   194 												
   195 63ED 90 44				bcc UCW_deltaX_positive					; target X equal to current X
   196 63EF D0 03				bne UCW_deltaX_negative
   197 63F1 4C 6F 64				jmp UCW_deltaX_exit						; target X equal to current X
   198
   199 				;************************************************
   200 				;
   201 63F4			UCW_deltaX_negative								
   202 63F4 A5 DB				lda m_levelWindowX_H1 					; target X lower than current X
   203 63F6 38					sec
   204 63F7 ED F1 31				sbc m_windowTargetPosX_H1
   205 63FA 8D F5 31				sta m_windowTargetDeltaX_H1
   206 					
   207 63FD A5 DA				lda m_levelWindowX_H2
   208 63FF ED F0 31				sbc m_windowTargetPosX_H2
   209 6402 8D F4 31				sta m_windowTargetDeltaX_H2
   210
   211 				;************************************************
   212 				;
   213 6405			UCW_dxn_divide
   214
   215 6405 AD F4 31				lda m_windowTargetDeltaX_H2
   216 6408 4A					lsr
   217 6409 6E F5 31				ror m_windowTargetDeltaX_H1				; /2
   218 640C 4A					lsr
   219 640D 6E F5 31				ror m_windowTargetDeltaX_H1				; /4
   220 6410 4A					lsr
   221 6411 6E F5 31				ror m_windowTargetDeltaX_H1				; /8
   222 6414 8D F4 31				sta m_windowTargetDeltaX_H2
   223
   224 6417 0D F5 31				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   225 641A D0 05				bne UCW_apply_negative_deltaX
   226 						
   227 641C A9 01				lda #MINIMUM_CAMERA_STEP
   228 641E 8D F5 31				sta m_windowTargetDeltaX_H1
   229 					
   230 				;************************************************
   231 				;
   232 6421			UCW_apply_negative_deltaX
   233 					
   234 6421 A5 DB				lda m_levelWindowX_H1
   235 6423 38					sec
   236 6424 ED F5 31				sbc m_windowTargetDeltaX_H1
   237 6427 85 DB				sta m_levelWindowX_H1
   238 6429 A5 DA				lda m_levelWindowX_H2
   239 642B ED F4 31				sbc m_windowTargetDeltaX_H2
   240 642E 85 DA				sta m_levelWindowX_H2
   241
   242 				;************************************************
   243 				;
   244 6430			UCW_deltaX_exit_jmp
   245 					
   246 6430 4C 6F 64				jmp UCW_deltaX_exit
   247
   248 				;************************************************
   249 				;
   250 6433			UCW_deltaX_positive								
   251 						
   252 6433 AD F1 31				lda m_windowTargetPosX_H1				; target X greater than current X
   253 6436 38					sec
   254 6437 E5 DB				sbc m_levelWindowX_H1
   255 6439 8D F5 31				sta m_windowTargetDeltaX_H1
   256 					
   257 643C AD F0 31				lda m_windowTargetPosX_H2
   258 643F E5 DA				sbc m_levelWindowX_H2
   259 6441 8D F4 31				sta m_windowTargetDeltaX_H2
   260
   261 				;************************************************
   262 				;
   263 6444			UCW_dxp_divide
   264 						
   265 6444 AD F4 31				lda m_windowTargetDeltaX_H2
   266 6447 4A					lsr
   267 6448 6E F5 31				ror m_windowTargetDeltaX_H1				; /2
   268 644B 4A					lsr
   269 644C 6E F5 31				ror m_windowTargetDeltaX_H1				; /4
   270 644F 4A					lsr
   271 6450 6E F5 31				ror m_windowTargetDeltaX_H1				; /8
   272 6453 8D F4 31				sta m_windowTargetDeltaX_H2
   273
   274 6456 0D F5 31				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   275 6459 D0 05				bne UCW_apply_positive_deltaX
   276 						
   277 645B A9 01				lda #MINIMUM_CAMERA_STEP
   278 645D 8D F5 31				sta m_windowTargetDeltaX_H1
   279
   280 				;************************************************
   281 				;
   282 6460			UCW_apply_positive_deltaX
   283 						
   284 6460 A5 DB				lda m_levelWindowX_H1
   285 6462 18					clc
   286 6463 6D F5 31				adc m_windowTargetDeltaX_H1
   287 6466 85 DB				sta m_levelWindowX_H1
   288 						
   289 6468 A5 DA				lda m_levelWindowX_H2
   290 646A 6D F4 31				adc m_windowTargetDeltaX_H2
   291 646D 85 DA				sta m_levelWindowX_H2
   292
   293 				;************************************************
   294 				;
   295 646F			UCW_deltaX_exit
   296
   297 				;************************************************
   298 				;
   299 646F			UCW_check_deltaY								
   300 						
   301 646F A5 DC				lda m_levelWindowY_H2					; compare target Y and current Y	
   302 6471 CD F2 31				cmp m_windowTargetPosY_H2
   303 6474 90 44				bcc UCW_deltaY_positive
   304 6476 D0 09				bne UCW_deltaY_negative
   305 					
   306 6478 A5 DD				lda m_levelWindowY_H1
   307 647A CD F3 31				cmp m_windowTargetPosY_H1
   308 647D F0 71				beq UCW_deltaY_exit						; target Y equal to current Y
   309 647F 90 39				bcc UCW_deltaY_positive
   310
   311 				;************************************************
   312 				;
   313 6481			UCW_deltaY_negative								
   314 						
   315 6481 A5 DD				lda m_levelWindowY_H1					; target Y lower than current Y
   316 6483 38					sec
   317 6484 ED F3 31				sbc m_windowTargetPosY_H1
   318 6487 8D F7 31				sta m_windowTargetDeltaY_H1
   319 						
   320 648A A5 DC				lda m_levelWindowY_H2
   321 648C ED F2 31				sbc m_windowTargetPosY_H2
   322
   323 648F 4A					lsr
   324 6490 6E F7 31				ror m_windowTargetDeltaY_H1				; /2
   325 6493 4A					lsr
   326 6494 6E F7 31				ror m_windowTargetDeltaY_H1				; /4
   327 6497 4A					lsr
   328 6498 6E F7 31				ror m_windowTargetDeltaY_H1				; /8
   329 649B 8D F6 31				sta m_windowTargetDeltaY_H2
   330
   331 649E 0D F7 31				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   332 64A1 D0 05				bne UCW_apply_negative_deltaY
   333 						
   334 64A3 A9 01				lda #MINIMUM_CAMERA_STEP
   335 64A5 8D F7 31				sta m_windowTargetDeltaY_H1
   336 				;
   337 				;**************************************************************************************************
   338 				;
   339 64A8			UCW_apply_negative_deltaY
   340 						
   341 64A8 A5 DD				lda m_levelWindowY_H1
   342 64AA 38					sec
   343 64AB ED F7 31				sbc m_windowTargetDeltaY_H1
   344 64AE 85 DD				sta m_levelWindowY_H1
   345 						
   346 64B0 A5 DC				lda m_levelWindowY_H2
   347 64B2 ED F6 31				sbc m_windowTargetDeltaY_H2
   348 64B5 85 DC				sta m_levelWindowY_H2
   349
   350 64B7 4C F0 64				jmp UCW_deltaY_exit
   351 				;
   352 				;**************************************************************************************************
   353 				;
   354 64BA			UCW_deltaY_positive								
   355 						
   356 64BA AD F3 31				lda m_windowTargetPosY_H1				; target Y greater than current Y
   357 64BD 38					sec
   358 64BE E5 DD				sbc m_levelWindowY_H1
   359 64C0 8D F7 31				sta m_windowTargetDeltaY_H1
   360 						
   361 64C3 AD F2 31				lda m_windowTargetPosY_H2
   362 64C6 E5 DC				sbc m_levelWindowY_H2
   363
   364 64C8 4A					lsr
   365 64C9 6E F7 31				ror m_windowTargetDeltaY_H1				; /2
   366 64CC 4A					lsr
   367 64CD 6E F7 31				ror m_windowTargetDeltaY_H1				; /4
   368 64D0 4A					lsr
   369 64D1 6E F7 31				ror m_windowTargetDeltaY_H1				; /8
   370 64D4 8D F6 31				sta m_windowTargetDeltaY_H2
   371
   372 64D7 0D F7 31				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   373 64DA D0 05				bne UCW_apply_positive_deltaY
   374 						
   375 64DC A9 01				lda #MINIMUM_CAMERA_STEP
   376 64DE 8D F7 31				sta m_windowTargetDeltaY_H1
   377
   378 				;************************************************
   379 				;
   380 64E1			UCW_apply_positive_deltaY
   381 						
   382 64E1 A5 DD				lda m_levelWindowY_H1
   383 64E3 18					clc
   384 64E4 6D F7 31				adc m_windowTargetDeltaY_H1
   385 64E7 85 DD				sta m_levelWindowY_H1
   386 						
   387 64E9 A5 DC				lda m_levelWindowY_H2
   388 64EB 6D F6 31				adc m_windowTargetDeltaY_H2
   389 64EE 85 DC				sta m_levelWindowY_H2
   390
   391 				;************************************************
   392 				;
   393 64F0			UCW_deltaY_exit
   394
   395 				;************************************************
   396 				; update all LMS in the display list
   397 				;
   398 64F0			UCW_update_LMS
   399 						
   400 64F0 A5 DA				lda m_levelWindowX_H2
   401 64F2 8D ED 31				sta m_screenBaseAddress1+1
   402 						
   403 64F5 A5 DB				lda m_levelWindowX_H1
   404 64F7 4E ED 31				lsr m_screenBaseAddress1+1
   405 64FA 6A					ror										; /2
   406 64FB 4E ED 31				lsr m_screenBaseAddress1+1
   407 64FE 6A					ror										; /4 == CHAR_PIX.else_X
   408
   409 64FF 18					clc
   410 6500 69 FF				adc #<[GAME_MEM-1]
   411 6502 8D EE 31				sta m_screenBaseAddress2
   412 						
   413 6505 AD ED 31				lda m_screenBaseAddress1+1
   414 6508 69 AF				adc #>[GAME_MEM-1]
   415 650A 8D EF 31				sta m_screenBaseAddress2+1
   416
   417
   418 650D A5 DC				lda m_levelWindowY_H2
   419 650F 8D ED 31				sta m_screenBaseAddress1+1
   420 6512 A5 DD				lda m_levelWindowY_H1
   421
   422 6514 4E ED 31				lsr m_screenBaseAddress1+1
   423 6517 6A					ror										; /2
   424 6518 4E ED 31				lsr m_screenBaseAddress1+1
   425 651B 6A					ror										; /4
   426 651C 4E ED 31				lsr m_screenBaseAddress1+1
   427 651F 6A					ror										; /8 == CHAR_PIX.else_Y
   428
   429 6520 AA					tax
   430 6521 BD 21 63				lda TabMultiply82_LSB,x
   431 6524 18					clc
   432 6525 6D EE 31				adc m_screenBaseAddress2
   433 6528 8D EE 31				sta m_screenBaseAddress2
   434 					
   435 652B BD 3B 63				lda TabMultiply82_MSB,x
   436 652E 6D EF 31				adc m_screenBaseAddress2+1
   437 6531 8D EF 31				sta m_screenBaseAddress2+1
   438
   439 6534 A2 00				ldx #0
   440
   441 				;************************************************
   442 				;
   443 6536			UCW_update_LMS_loop
   444
   445 6536 AD EE 31				lda m_screenBaseAddress2
   446 6539 9D 04 0E				sta GAME_LMS1+1,x						; should update this outside the screen zone!
   447 						
   448 653C AD EF 31				lda m_screenBaseAddress2+1
   449 653F 9D 05 0E				sta GAME_LMS1+2,x						; should update this outside the screen zone!
   450
   451 6542 AD EE 31				lda m_screenBaseAddress2
   452 6545 18					clc
   453 6546 69 52				adc #LEVEL_CHAR_SIZE_X
   454 6548 8D EE 31				sta m_screenBaseAddress2
   455 						
   456 654B AD EF 31				lda m_screenBaseAddress2+1
   457 654E 69 00				adc #0
   458 6550 8D EF 31				sta m_screenBaseAddress2+1
   459
   460 6553 E8					inx
   461 6554 E8					inx
   462 6555 E8					inx
   463 6556 E0 4B				cpx #[[WINDOW_CHAR_SIZE_Y+1]*3]
   464 6558 D0 DC				bne UCW_update_LMS_loop
   465
   466 				;************************************************
   467 				; update HSCROL and VSCROL with the offsets of the window pos
   468 				;
   469 655A A5 DB				lda m_levelWindowX_H1
   470 655C 29 03				and #[CHAR_PIX.else_X-1]
   471 655E AA					tax
   472 						
   473 655F BD 15 63				lda TabOffsetForHSCROL,x
   474 6562 8D 04 D4				sta HSCROL								; should update this outside the screen zone!
   475
   476 6565 A5 DD				lda m_levelWindowY_H1
   477 6567 29 07				and #[CHAR_PIX.else_Y-1]
   478 6569 AA					tax
   479 					
   480 656A BD 19 63				lda TabOffsetForVSCROL,x
   481 656D 8D 05 D4				sta VSCROL								; should update this outside the screen zone!
   482 						
   483 6570 60					rts
   484 					
   485 				.endp	
   320 6571					icl "EnemyManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\EnemyManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		EnemyManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 0002			MAX_ENEMY_MISSILES 				= 2
    18 = 0016			MAX_EXPLOSION_STEPS 			= 22
    19 = 0020			MAX_ENEMIES_PER_LEVEL 			= 32
    20
    21 6571 08			TabEnemyShapeSizeY				.byte $08
    22
    23 6572 3C			TabEnemyShape_01				.byte %00111100
    24 6573 E7											.byte %11100111
    25 6574 18											.byte %00011000
    26 6575 E7											.byte %11100111
    27 6576 3C											.byte %00111100
    28 6577 00											.byte %00000000
    29 6578 3C											.byte %00111100
    30 6579 7E											.byte %01111110
    31
    32 657A			TabEnemyExplosionColor
    33 				.if PAL_VERSION = 0
    34 657A 20 0E 0E 0E 0C 0C + 	.byte +32, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    35 				.else
    36 					.byte +16, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    37 				.endif
    38
    39 				.if PAL_VERSION = 0
    40 = 002A				ENEMY_EXPLOSION_COLOR 			= 32+10
    41 				.else
    42 					ENEMY_EXPLOSION_COLOR 			= 16+10
    43 				.endif
    44
    45
    46 6591			TabEnemyType
    47 6591 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    48
    49 65B1			TabEnemyLife									; this table could be per level, if we can go back to the same screen
    50 65B1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    51
    52 65D1			TabEnemyState
    53 65D1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    54
    55 65F1			TabEnemyStateTimer
    56 65F1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    57
    58 6611			TabEnemyBaseCharIndex
    59 6611 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    60
    61 6631			TabEnemyBaseCharX
    62 6631 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    63 6651			TabEnemyBaseCharY
    64 6651 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    65
    66 6671			TabEnemyLevelLeftX_H1
    67 6671 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    68
    69 6691			TabEnemyLevelLeftX_H2
    70 6691 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    71
    72 66B1			TabEnemyLevelTopY_H1
    73 66B1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    74
    75 66D1			TabEnemyLevelTopY_H2
    76 66D1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    77
    78 66F1			TabEnemyShotLevelLeftX_H1
    79 66F1 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    80 6711			TabEnemyShotLevelLeftX_H2
    81 6711 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    82 6731			TabEnemyShotLevelTopY_H1
    83 6731 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    84 6751			TabEnemyShotLevelTopY_H2
    85 6751 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL 		.byte $00
    86
    87 6771 00 01		TabEnemyDefLife					.byte $00, $01	; enemy definition tables (index or type 0 is not used)		
    88
    89 6773 00 C0		TabEnemyDefBaseChar				.byte $00, $C0
    90
    91 6775			TabEnemyDefShootCooldown
    92 				.if PAL_VERSION = 0
    93 6775 00 78			.byte $00, 120
    94 				.else
    95 					.byte $00, 100
    96 				.endif
    97 				;
    98 				;**************************************************************************************************
    99 				; InitEnemyManager
   100 				;
   101 				; parse every type of enemy, init its life, state, char index and position
   102 				; update total and active enemies
   103 				;
   104 				;**************************************************************************************************
   105 				;
   106 6777			.proc InitEnemyManager
   107
   108 						; parse enemy type 1 (only one for now)
   109 6777 A2 01				ldx #1									; enemy type index
   110 6779 BD 73 67				lda TabEnemyDefBaseChar,x
   111 677C 8D 07 32				sta m_searchEnemyChar
   112 677F BD 71 67				lda TabEnemyDefLife,x
   113 6782 8D 08 32				sta m_defEnemyLife
   114 					
   115 6785 A6 D4				ldx m_levelCharSizeX
   116 6787 CA					dex										; we search in a shorter line because this enemy has a width of 2 chars
   117 6788 8E 09 32				stx m_numberOfValidRows
   118 					
   119 678B A2 00				ldx #0									; line index
   120 				;
   121 				;************************************************
   122 				;
   123 678D			IEM_loop1
   124 					
   125 678D A0 00				ldy #0									; column index	
   126 678F BD 3F 32				lda TabLevelLineAddressLSB,x
   127 6792 85 E9				sta m_ptrLevelLine
   128 6794 BD 3F 33				lda TabLevelLineAddressMSB,x
   129 6797 85 EA				sta m_ptrLevelLine+1
   130
   131 				;************************************************
   132 				;
   133 6799			IEM_loop2
   134 					
   135 6799 B1 E9				lda (m_ptrLevelLine),y
   136 679B CD 07 32				cmp m_searchEnemyChar
   137 679E D0 78				bne IEM_no_enemy
   138
   139 67A0 8E 0A 32				stx m_tempByte
   140 67A3 AE 05 32				ldx m_totalEnemies
   141
   142 						; init info for this enemy
   143 67A6 A9 01				lda #1
   144 67A8 9D 91 65				sta TabEnemyType,x
   145 						
   146 67AB AD 08 32				lda m_defEnemyLife
   147 67AE 9D B1 65				sta TabEnemyLife,x
   148 						
   149 67B1 A9 01				lda #1
   150 67B3 9D D1 65				sta TabEnemyState,x
   151 						
   152 67B6 A9 78				lda #ENEMY_INIT_TIMER					; dont allow enemy actions for the first 4 seconds
   153 67B8 9D F1 65				sta TabEnemyStateTimer,x
   154 						
   155 67BB AD 07 32				lda m_searchEnemyChar
   156 67BE 9D 11 66				sta TabEnemyBaseCharIndex,x
   157 67C1 98					tya
   158 67C2 9D 31 66				sta TabEnemyBaseCharX,x
   159 						
   160 67C5 AD 0A 32				lda m_tempByte
   161 67C8 9D 51 66				sta TabEnemyBaseCharY,x
   162
   163 						; init level position
   164 						; TabEnemyLevelTopY_H2 starts as 0, now multiply by 8 to get the line
   165 67CB 0A					asl
   166 67CC 3E D1 66				rol TabEnemyLevelTopY_H2,x
   167 67CF 0A					asl
   168 67D0 3E D1 66				rol TabEnemyLevelTopY_H2,x
   169 67D3 0A					asl
   170 67D4 3E D1 66				rol TabEnemyLevelTopY_H2,x
   171 67D7 9D B1 66				sta TabEnemyLevelTopY_H1,x
   172 					
   173 						; TabEnemyLevelLeftX_H2 starts as 0, now multiply by 4 to get the horizontal pixel
   174 67DA 98					tya
   175 67DB 0A					asl
   176 67DC 3E 91 66				rol TabEnemyLevelLeftX_H2,x
   177 67DF 0A					asl
   178 67E0 3E 91 66				rol TabEnemyLevelLeftX_H2,x
   179 67E3 9D 71 66				sta TabEnemyLevelLeftX_H1,x
   180
   181 						; init shot creation position (offset x: 3, offset y: 1)
   182 67E6 BD 71 66				lda TabEnemyLevelLeftX_H1,x
   183 67E9 18					clc
   184 67EA 69 03				adc #3
   185 67EC 9D F1 66				sta TabEnemyShotLevelLeftX_H1,x
   186 67EF BD 91 66				lda TabEnemyLevelLeftX_H2,x
   187 67F2 69 00				adc #0
   188 67F4 9D 11 67				sta TabEnemyShotLevelLeftX_H2,x
   189 					
   190 67F7 BD B1 66				lda TabEnemyLevelTopY_H1,x
   191 67FA 18					clc
   192 67FB 69 01				adc #1
   193 67FD 9D 31 67				sta TabEnemyShotLevelTopY_H1,x
   194 						
   195 6800 BD D1 66				lda TabEnemyLevelTopY_H2,x
   196 6803 69 00				adc #0
   197 6805 9D 51 67				sta TabEnemyShotLevelTopY_H2,x
   198
   199 						; update number of enemies	
   200 6808 EE 05 32				inc m_totalEnemies
   201 680B EE 06 32				inc m_activeEnemies
   202
   203 680E AD 05 32				lda m_totalEnemies
   204 6811 C9 20				cmp #MAX_ENEMIES_PER_LEVEL
   205 6813 F0 14				beq IEM_exit
   206 					
   207 6815 AE 0A 32				ldx m_tempByte
   208
   209 				;************************************************
   210 				;
   211 6818			IEM_no_enemy
   212 						
   213 6818 C8					iny
   214 6819 CC 09 32				cpy m_numberOfValidRows
   215 681C F0 03				beq IEM_check_loop_Y
   216 681E 4C 99 67				jmp IEM_loop2
   217
   218 				;************************************************
   219 				;
   220 6821			IEM_check_loop_Y
   221
   222 6821 E8					inx
   223 6822 E4 D5				cpx m_levelCharSizeY
   224 6824 F0 03				beq IEM_exit
   225 6826 4C 8D 67				jmp IEM_loop1
   226
   227 				;************************************************
   228 				;
   229 6829			IEM_exit
   230 					
   231 6829 60					rts
   232 						
   233 				.endp		
   234 				;
   235 				;**************************************************************************************************
   236 				; UpdateEnemyManager
   237 				;**************************************************************************************************
   238 				;
   239 682A			.proc UpdateEnemyManager
   240
   241 						; update one enemy per frame, rotate through all active enemies
   242 682A AD 06 32				lda m_activeEnemies
   243 682D D0 03				bne UEM_active_enemies
   244 682F 4C CF 68				jmp UEM_exit
   245
   246 				;************************************************
   247 				;
   248 6832			UEM_active_enemies
   249 					
   250 						; update state timer for all enemies (if we don't want to do this, we should use a general time stamp system)
   251 6832 A2 00				ldx #0
   252
   253 				;************************************************
   254 				;
   255 6834			UEM_loop1
   256 					
   257 6834 BD F1 65				lda TabEnemyStateTimer,x
   258 6837 F0 03				beq UEM_next_timer
   259 6839 DE F1 65				dec TabEnemyStateTimer,x
   260
   261 				;*************************************************
   262 				;
   263 683C			UEM_next_timer
   264 					
   265 683C E8					inx
   266 683D EC 05 32				cpx m_totalEnemies
   267 6840 D0 F2				bne UEM_loop1
   268
   269 						; iterate until we find the next active enemy
   270 6842 AE 0B 32				ldx m_lastEnemyIndexUpdated
   271
   272 				;************************************************
   273 				;
   274 6845			UEM_loop2
   275 					
   276 6845 E8					inx
   277 6846 EC 05 32				cpx m_totalEnemies
   278 6849 D0 02				bne UEM_no_loop_back
   279 684B A2 00				ldx #0
   280
   281 				;************************************************
   282 				;
   283 684D			UEM_no_loop_back
   284 					
   285 684D BD D1 65				lda TabEnemyState,x						; state 0 implies a disabled enemy
   286 6850 F0 F3				beq UEM_loop2
   287 6852 8E 0B 32				stx m_lastEnemyIndexUpdated
   288
   289 						;
   290 						; should use the enemy type to jump to the correct update for that type
   291 						; check state timer, update state if is 0
   292 						;
   293 6855 BD F1 65				lda TabEnemyStateTimer,x
   294 6858 D0 75				bne UEM_exit
   295
   296 				;************************************************
   297 				; timer is 0, check if the player is near enough 
   298 				; to shoot, in what direction, and if there are 
   299 				; missiles available 
   300 				;	(maybe check against the maximum number of enemy missiles possible)
   301 				;
   302 685A			UEM_check_shoot
   303 					
   304 685A AD 0C 32				lda m_enemyMissilesActive
   305 685D C9 02				cmp #MAX_ENEMY_MISSILES
   306 685F F0 6E				beq UEM_exit
   307 					
   308 						; check delta Y between the player and the enemy
   309 6861 A5 A8				lda m_playerLevelTopY_H1
   310 6863 38					sec
   311 6864 FD B1 66				sbc TabEnemyLevelTopY_H1,x
   312 6867 85 EB				sta m_pageZeroTempPointer
   313 6869 A5 A7				lda m_playerLevelTopY_H2
   314 686B FD D1 66				sbc TabEnemyLevelTopY_H2,x
   315 686E 85 EC				sta m_pageZeroTempPointer+1
   316
   317 6870 A5 EB				lda m_pageZeroTempPointer
   318 6872 18					clc
   319 6873 69 20				adc #ENEMY_SHOOT_DELTA_Y
   320 6875 85 EB				sta m_pageZeroTempPointer
   321 6877 A5 EC				lda m_pageZeroTempPointer+1
   322 6879 69 00				adc #0
   323 687B 85 EC				sta m_pageZeroTempPointer+1
   324 687D D0 50				bne UEM_exit							; abort if the high byte is already greater than 0
   325
   326 						; this works for a delta Y lower than 128 (lines)
   327 687F A5 EB				lda m_pageZeroTempPointer
   328 6881 C9 40				cmp #[ENEMY_SHOOT_DELTA_Y*2]
   329 6883 B0 4A				bcs UEM_exit
   330
   331 				;************************************************
   332 				;	
   333 6885			UEM_shot
   334 					
   335 6885 BC 91 65				ldy TabEnemyType,x
   336 6888 B9 75 67				lda TabEnemyDefShootCooldown,y
   337 688B 9D F1 65				sta TabEnemyStateTimer,x				; set shoot cooldown		
   338 						;
   339 						; update m_enemyShootDirection (1 - right, 2 - left)
   340 						; player width = 4 pixels, enemy1 width = 8 pixels
   341 						; compare to see if: px + (pw/2) == ex + (ew/2) (the center of the player and the enemy)
   342 						; if player info is equal or greater, then player is to the right of the enemy
   343 						;
   344 688E A5 A2				lda m_playerLevelLeftX_H1
   345 6890 38					sec
   346 6891 E9 04				sbc #4
   347 6893 85 D3				sta m_pageZeroTempValue
   348 						
   349 6895 A5 A1				lda m_playerLevelLeftX_H2
   350 6897 E9 00				sbc #0
   351 6899 DD 91 66				cmp TabEnemyLevelLeftX_H2,x
   352 689C 90 0E				bcc UEM_shoot_left
   353 689E D0 07				bne UEM_shoot_right
   354 					
   355 68A0 A5 D3				lda m_pageZeroTempValue
   356 68A2 DD 71 66				cmp TabEnemyLevelLeftX_H1,x
   357 68A5 90 05				bcc UEM_shoot_left
   358
   359 				;************************************************
   360 				;	
   361 68A7			UEM_shoot_right
   362 					
   363 68A7 A9 01				lda #1
   364 68A9 4C AE 68				jmp UEM_just_shoot
   365
   366 				;************************************************
   367 				;	
   368 68AC			UEM_shoot_left
   369 					
   370 68AC A9 02				lda #2
   371
   372 				;************************************************
   373 				;	
   374 68AE			UEM_just_shoot
   375 					
   376 68AE 8D 0D 32				sta m_enemyShootDirection
   377
   378 						; update shot creation pos (assuming left and right pos are the same in this case)
   379 68B1 BD F1 66				lda TabEnemyShotLevelLeftX_H1,x
   380 68B4 8D 0E 32				sta m_enemyShotLevelLeftX_H1
   381 						
   382 68B7 BD 11 67				lda TabEnemyShotLevelLeftX_H2,x
   383 68BA 8D 0F 32				sta m_enemyShotLevelLeftX_H2
   384 					
   385 68BD BD 31 67				lda TabEnemyShotLevelTopY_H1,x
   386 68C0 8D 10 32				sta m_enemyShotLevelTopY_H1
   387 						
   388 68C3 BD 51 67				lda TabEnemyShotLevelTopY_H2,x
   389 68C6 8D 11 32				sta m_enemyShotLevelTopY_H2
   390
   391 68C9 20 39 5C				jsr CheckCreateEnemyMissile
   392 					
   393 68CC EE 0C 32				inc m_enemyMissilesActive
   394
   395 				;************************************************
   396 				;	
   397 68CF			UEM_exit
   398
   399 68CF 60					rts
   400 						
   401 				.endp		
   402 				;
   403 				;**************************************************************************************************
   404 				; HitEnemy
   405 				;**************************************************************************************************
   406 				;	
   407 68D0			.proc HitEnemy
   408
   409 						; should not use x register
   410 68D0 8E 04 32				stx m_hitEnemySaveX
   411 					
   412 						;
   413 						; pass parameters in m_enemyCharPosX and m_enemyCharPosY
   414 						; get address of that char (clear it and the next one) --> comes in m_lineAddressLSB, m_lineAddressMSB
   415 						; get pixel xpos for pm hpos, get pixel ypos for explosion start line
   416 						;
   417 						; search for enemy index at the left char position
   418 						;
   419 68D3 A2 00				ldx #0
   420
   421 				;************************************************
   422 				;	
   423 68D5			HE_loop	
   424 					
   425 68D5 BD 31 66				lda TabEnemyBaseCharX,x
   426 68D8 CD 01 32				cmp m_enemyCharPosX
   427 68DB D0 1A				bne HE_next_enemy
   428 					
   429 68DD BD 51 66				lda TabEnemyBaseCharY,x
   430 68E0 CD 02 32				cmp m_enemyCharPosY
   431 68E3 D0 12				bne HE_next_enemy
   432 				;
   433 				;************************************************
   434 				;	
   435 68E5			HE_found_pos
   436 					
   437 68E5 BD D1 65				lda TabEnemyState,x
   438 68E8 F0 62				beq HE_exit								; already disabled
   439 					
   440 68EA BD B1 65				lda TabEnemyLife,x
   441 68ED F0 5D				beq HE_exit								; already destroyed
   442
   443 68EF DE B1 65				dec TabEnemyLife,x
   444 68F2 F0 0C				beq HE_destroy_enemy					; life reached 0
   445 					
   446 68F4 4C 4C 69				jmp HE_exit								; still alive (no feedback for now?)
   447
   448 				;************************************************
   449 				;	
   450 68F7			HE_next_enemy
   451 					
   452 68F7 E8					inx
   453 68F8 EC 05 32				cpx m_totalEnemies
   454 68FB D0 D8				bne HE_loop
   455 68FD 4C 4C 69				jmp HE_exit
   456
   457 				;**************************************************************************************************
   458 				;	
   459 6900			HE_destroy_enemy
   460
   461 6900 A9 00				lda #0
   462 6902 9D D1 65				sta TabEnemyState,x
   463 6905 CE 06 32				dec m_activeEnemies
   464 						
   465 6908 AD 1C 32				lda m_lineAddressLSB
   466 690B 85 E9				sta m_ptrLevelLine
   467 						
   468 690D AD 1D 32				lda m_lineAddressMSB
   469 6910 85 EA				sta m_ptrLevelLine+1
   470 6912 AC 01 32				ldy m_enemyCharPosX
   471 						
   472 6915 A9 00				lda #0
   473 6917 91 E9				sta (m_ptrLevelLine),y
   474 6919 C8					iny
   475 691A 91 E9				sta (m_ptrLevelLine),y
   476
   477 						; init explosion info (clear previous explosion if there was one active)
   478 691C AD 03 32				lda m_numEnemyExplosions
   479 691F F0 03				beq HE_no_explosions
   480 6921 20 50 69				jsr EraseExplosionFrame
   481
   482 				;************************************************
   483 				;	
   484 6924			HE_no_explosions
   485 					
   486 6924 BD 91 66				lda TabEnemyLevelLeftX_H2,x
   487 6927 8D F8 31				sta m_enemyExplosionLevelLeftX_H2
   488 						
   489 692A BD 71 66				lda TabEnemyLevelLeftX_H1,x
   490 692D 8D F9 31				sta m_enemyExplosionLevelLeftX_H1
   491 					
   492 6930 BD D1 66				lda TabEnemyLevelTopY_H2,x
   493 6933 8D FA 31				sta m_enemyExplosionLevelTopY_H2
   494 					
   495 6936 BD B1 66				lda TabEnemyLevelTopY_H1,x
   496 6939 8D FB 31				sta m_enemyExplosionLevelTopY_H1
   497 						
   498 693C A9 00				lda #0
   499 693E 8D FC 31				sta m_enemyExplosionLevelTopY_L1
   500 6941 8D 00 32				sta m_enemyExplosionStepIndex
   501
   502 6944 A9 01				lda #1
   503 6946 8D FF 31				sta m_enemyExplosionStep
   504 6949 8D 03 32				sta m_numEnemyExplosions				; 1 max for now
   505
   506 				;************************************************
   507 				;	
   508 694C			HE_exit
   509
   510 694C AE 04 32				ldx m_hitEnemySaveX	
   511 694F 60					rts
   512 					
   513 				.endp	
   514 				;
   515 				;**************************************************************************************************
   516 				; EraseExplosionFrame
   517 				;	
   518 				; 	also clear enemy explosion if the player respawns
   519 				; 	also clear enemy missiles and m_enemyMissilesActive
   520 				;
   521 				;**************************************************************************************************
   522 				;
   523 6950			.proc EraseExplosionFrame
   524
   525 6950 A2 00				ldx #0
   526 6952 AC FE 31				ldy m_enemyExplosionScreenTopY_H1
   527
   528 				;************************************************
   529 				;
   530 6955			EEF_loop
   531 6955 A9 00				lda #0
   532 6957 99 00 A3				sta ms_area_1,y
   533
   534 695A 98					tya
   535 695B 18					clc
   536 695C 6D FF 31				adc m_enemyExplosionStep
   537 695F A8					tay
   538
   539 6960 E8					inx
   540 6961 EC 71 65				cpx TabEnemyShapeSizeY					; should use and index here, if there is more than one enemy explosion
   541 6964 D0 EF				bne EEF_loop
   542
   543 				;************************************************
   544 				;
   545 6966			EEF_exit		
   546 6966 60					rts
   547 					
   548 				.endp	
   549 				;
   550 				;**************************************************************************************************
   551 				; DrawExplosionFrame
   552 				;**************************************************************************************************
   553 				;
   554 6967			.proc DrawExplosionFrame
   555
   556 6967 A2 00				ldx #0
   557 6969 AC FE 31				ldy m_enemyExplosionScreenTopY_H1
   558
   559 				;************************************************
   560 				;
   561 696C			DEF_loop
   562 						
   563 696C BD 72 65				lda TabEnemyShape_01,x
   564 696F 99 00 A3				sta ms_area_1,y
   565
   566 6972 98					tya
   567 6973 18					clc
   568 6974 6D FF 31				adc m_enemyExplosionStep
   569 6977 A8					tay
   570 6978 E8					inx
   571 6979 EC 71 65				cpx TabEnemyShapeSizeY					; should use and index here, if there is more than one enemy explosion
   572 697C D0 EE				bne DEF_loop
   573 				;
   574 				;************************************************
   575 				;
   576 697E			DEF_exit
   577 						
   578 697E 60					rts
   579
   580 				.endp		
   581 				;
   582 				;**************************************************************************************************
   583 				; DrawEnemyExplosion
   584 				;**************************************************************************************************
   585 				;
   586 697F			.proc DrawEnemyExplosion
   587
   588 697F AD 03 32				lda m_numEnemyExplosions
   589 6982 D0 03				bne DEE_erase
   590 6984 4C FE 69				jmp DEE_exit
   591 					
   592 				;************************************************
   593 				; erase previous enemy explosion frame
   594 				;
   595 6987			DEE_erase
   596 6987 20 50 69				jsr EraseExplosionFrame
   597
   598 				;************************************************
   599 				;
   600 698A			DEE_update_frame
   601 					
   602 698A EE 00 32				inc m_enemyExplosionStepIndex
   603 698D AE 00 32				ldx m_enemyExplosionStepIndex
   604 6990 E0 16				cpx #MAX_EXPLOSION_STEPS
   605 6992 90 08				bcc DEE_do_update
   606 					
   607 						; reached end of the explosion
   608 6994 A9 00				lda #0
   609 6996 8D 03 32				sta m_numEnemyExplosions
   610
   611 6999 4C FE 69				jmp DEE_exit
   612
   613 				;************************************************
   614 				;
   615 699C			DEE_do_update
   616 					
   617 699C BD 7A 65				lda TabEnemyExplosionColor,x
   618 699F 8D 15 D0				sta COLPM3
   619
   620 						; update step and explosion starting line
   621 						; if step +1 --> line - 3.5
   622 						; if step +2 --> line - 7.0
   623 69A2 AD FC 31				lda m_enemyExplosionLevelTopY_L1
   624 69A5 38					sec
   625 69A6 E9 80				sbc #128
   626 69A8 8D FC 31				sta m_enemyExplosionLevelTopY_L1
   627
   628 69AB AD FB 31				lda m_enemyExplosionLevelTopY_H1
   629 69AE E9 03				sbc #3
   630 69B0 8D FB 31				sta m_enemyExplosionLevelTopY_H1
   631
   632 69B3 AD FA 31				lda m_enemyExplosionLevelTopY_H2
   633 69B6 E9 00				sbc #0
   634 69B8 8D FA 31				sta m_enemyExplosionLevelTopY_H2
   635
   636 69BB EE FF 31				inc m_enemyExplosionStep				; step +1 (delta between every explosion line, in this frame)
   637 					
   638 						;
   639 						; get new screen pos for the explosion
   640 						; this must use the "_H2" positions for 
   641 						; when the delta between the explosion 
   642 						; and the camera is too big (64 chars 
   643 						; in X, or 32 chars in Y)
   644 						;
   645 69BE AD F9 31				lda m_enemyExplosionLevelLeftX_H1
   646 69C1 38					sec
   647 69C2 E5 DB				sbc m_levelWindowX_H1
   648 69C4 8D 21 32				sta m_screenDelta_H1
   649
   650 69C7 AD F8 31				lda m_enemyExplosionLevelLeftX_H2
   651 69CA E5 DA				sbc m_levelWindowX_H2
   652 69CC 90 1F				bcc DEE_set_outside						; this is not totally correct, because it doesn't use the width of the missile
   653 69CE 8D 20 32				sta m_screenDelta_H2					; (but if we do it correctly we should clip the missile graphics)
   654
   655 69D1 D0 1A				bne DEE_set_outside						; could remove the bcc and only use this..
   656 69D3 AD 21 32				lda m_screenDelta_H1
   657 69D6 C9 A0				cmp #[160]								; 40 chars x 4 pixels
   658 69D8 B0 13				bcs DEE_set_outside
   659 					
   660 69DA 69 30				adc #PM_BASE_SCREEN_X
   661 69DC 8D FD 31				sta m_enemyExplosionScreenLeftX_H1
   662 					
   663 69DF AD FB 31				lda m_enemyExplosionLevelTopY_H1
   664 69E2 38					sec
   665 69E3 E5 DD				sbc m_levelWindowY_H1
   666 69E5 69 20				adc #PM_BASE_SCREEN_Y
   667 69E7 8D FE 31				sta m_enemyExplosionScreenTopY_H1
   668
   669 69EA 4C F5 69				jmp DEE_update_hpos
   670
   671 				;************************************************
   672 				; if outside the visible range in X or Y, just set 
   673 				; it out of the screen (for a p/m the screen coordinate 0 is outside the visible range)
   674 				;
   675 69ED			DEE_set_outside
   676
   677 69ED A9 00				lda #0
   678 69EF 8D FD 31				sta m_enemyExplosionScreenLeftX_H1
   679 69F2 8D FE 31				sta m_enemyExplosionScreenTopY_H1
   680
   681 				;************************************************
   682 				;
   683 69F5			DEE_update_hpos
   684 					
   685 69F5 AD FD 31				lda m_enemyExplosionScreenLeftX_H1
   686 69F8 8D 04 D0				sta HPOSM0
   687
   688 				;************************************************
   689 				;
   690 69FB			DEE_draw
   691 						
   692 						; draw new enemy explosion frame
   693 69FB 20 67 69				jsr DrawExplosionFrame
   694
   695 				;************************************************
   696 				;
   697 69FE			DEE_exit
   698 69FE 60					rts
   699
   700 				.endp
   321 69FF					icl "FloatPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\FloatPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		FloatPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 0006			FLOAT_PLATFORM_CHR_X    = 6
    18
    19 = 000F			FLOAT_PLATFORM_MAX_X	= 15
    20
    21 = 0005			FLOAT_PLATFORM_MAX_Y	= 5
    22
    23 = 0006			FLOAT_PLATFORM_TIMER	= 6
    24
    25 69FF 00 26 27 28 29 00	PlatformCharX			.byte $00, $26, $27, $28, $29, $00
    26
    27 6A05 00 00 00 00 00 00 + PlatformLSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    28
    29 6A0D 00 00 00 00 00 00 + PlatformMSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    30
    31 6A15 00 00 00 00 00 00 + PlatformTime 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    32
    33 6A1D 00 00 00 00 00 00 + PlatformType 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    34
    35 6A25 00 00 00 00 00 00 + PlatformDirX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    36
    37 6A2D 00 00 00 00 00 00 + PlatformStepX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    38
    39 6A35 00 00 00 00 00 00 + PlatformStepY			.byte $00, $00, $00, $00, $00, $00, $00, $00
    40
    41 6A3D 26 A6		PlatformCharH			.byte $26, $A6
    42
    43 6A3F 00 00		PlatformCharY			.byte $00, $00
    44
    45 6A41 00 00 00 00 00 00 + PlatformBaseLSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    46
    47 6A49 00 00 00 00 00 00 + PlatformBaseMSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    48
    49 				;
    50 				;**************************************************************************************************
    51 				; PlatformControlH
    52 				;**************************************************************************************************
    53 6A51			.proc PlatformControlH
    54
    55 6A51 85 96				sta m_SaveRegA
    56 6A53 86 97				stx m_SaveRegX
    57 6A55 84 98				sty m_SaveRegY
    58 					
    59 6A57 AD D6 31				lda m_floatPlatformH
    60 6A5A D0 03				bne LoadIndex
    61 6A5C 4C 03 6B				jmp Exit 
    62 					
    63 6A5F			LoadIndex
    64 				 
    65 6A5F AE D7 31				ldx m_floatPlatformIdx
    66 6A62 CA					dex 
    67 6A63 86 92				stx m_param00
    68 					
    69 6A65 BD 15 6A				lda PlatformTime, x
    70 6A68 C9 06				cmp #FLOAT_PLATFORM_TIMER
    71 6A6A F0 09				beq PerformAnimation
    72 					
    73 6A6C 18					clc
    74 6A6D 69 01				adc #01
    75 6A6F 9D 15 6A				sta PlatformTime, x
    76
    77 6A72 4C 03 6B				jmp Exit
    78 					
    79 6A75			PerformAnimation
    80 					
    81 6A75 BD 05 6A				lda PlatformLSB,x
    82 6A78 85 EF				sta m_platformLevelPointer
    83 						
    84 6A7A BD 0D 6A				lda PlatformMSB,x
    85 6A7D 85 F0				sta m_platformLevelPointer+1
    86
    87 6A7F BD 25 6A				lda PlatformDirX, x
    88 6A82 C9 00				cmp #$00
    89 6A84 F0 07				beq MoveForward
    90 					
    91 6A86 C5 01				cmp $01
    92 6A88 F0 35				beq MoveBack 		
    93 					
    94 6A8A 4C 03 6B				jmp Exit
    95 						
    96 6A8D			MoveForward
    97 					
    98 6A8D A0 00				ldy #$00	
    99 6A8F A2 00				ldx #$00	
   100
   101 6A91			moveF
   102 					
   103 6A91 BD FF 69				lda PlatformCharX, x
   104 6A94 91 EF				sta (m_platformLevelPointer), y
   105 6A96 C8					iny
   106 6A97 E8					inx
   107 6A98 E0 06				cpx #FLOAT_PLATFORM_CHR_X
   108 6A9A D0 F5				bne moveF
   109
   110 6A9C A6 92				ldx m_param00		
   111
   112 6A9E 18					clc
   113 6A9F BD 2D 6A				lda PlatformStepX, x
   114 6AA2 69 01				adc #$01		
   115 6AA4 9D 2D 6A				sta PlatformStepX, x
   116 6AA7 C9 0F				cmp #FLOAT_PLATFORM_MAX_X	
   117 6AA9 F0 46				beq SetBackDir	
   118 					
   119 6AAB 18					clc
   120 6AAC BD 05 6A				lda PlatformLSB,x
   121 6AAF 69 01				adc #$01
   122 6AB1 9D 05 6A				sta PlatformLSB,x
   123 6AB4 BD 0D 6A				lda PlatformMSB,x
   124 6AB7 69 00				adc #$00
   125 6AB9 9D 0D 6A				sta PlatformMSB,x
   126 					
   127 6ABC 4C FE 6A				jmp ResetTime
   128 								 	
   129 6ABF			MoveBack
   130 					
   131 6ABF A0 05				ldy #FLOAT_PLATFORM_CHR_X - 1	
   132 6AC1 A2 05				ldx #FLOAT_PLATFORM_CHR_X - 1
   133 					
   134 6AC3			moveB
   135 					
   136 6AC3 BD FF 69				lda PlatformCharX, x
   137 6AC6 91 EF				sta (m_platformLevelPointer), y
   138 6AC8 88					dey
   139 6AC9 CA					dex
   140 6ACA E0 00				cpx #$00
   141 6ACC D0 F5				bne moveB
   142 					
   143 6ACE A6 92				ldx m_param00	
   144 					
   145 6AD0 38					sec
   146 6AD1 BD 2D 6A				lda PlatformStepX, x
   147 6AD4 E9 01				sbc #$01
   148 6AD6 9D 2D 6A				sta PlatformStepX, x
   149 6AD9 C9 00				cmp #$00
   150 6ADB F0 1C				beq SetForwardDir	
   151 						
   152 6ADD 38					sec
   153 6ADE BD 05 6A				lda PlatformLSB,x
   154 6AE1 E9 01				sbc #$01
   155 6AE3 9D 05 6A				sta PlatformLSB,x
   156 6AE6 BD 0D 6A				lda PlatformMSB,x	
   157 6AE9 E9 00				sbc #0
   158 6AEB 9D 0D 6A				sta PlatformMSB,x
   159 						
   160 6AEE 4C FE 6A				jmp ResetTime
   161
   162 6AF1			SetBackDir
   163 					
   164 6AF1 A9 01				lda #$01
   165 6AF3 9D 25 6A				sta PlatformDirX, x
   166 6AF6 4C FE 6A				jmp ResetTime
   167
   168 6AF9			SetForwardDir
   169 					
   170 6AF9 A9 00				lda #$00
   171 6AFB 9D 25 6A				sta PlatformDirX, x
   172 					
   173 6AFE			ResetTime
   174
   175 6AFE A9 00				lda #00
   176 6B00 9D 15 6A				sta PlatformTime, x
   177 					
   178
   179 				;*****	Exit
   180 				;
   181 6B03			Exit
   182
   183 6B03 A5 96				lda m_SaveRegA
   184 6B05 A6 97				ldx m_SaveRegX
   185 6B07 A4 98				ldy m_SaveRegY
   186 					
   187 6B09 60					rts
   188
   189 				.endp	
   322 6B0A					icl "LevelLoader.Asm"
Source: E:\_8BitProjects\Series\Scroller\LevelLoader.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		LevelLoader.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;**************************************************************************************************
    16 				;
    17 = 00FD			LN_BRK				= $FD
    18 = 00FE			LN_CRG				= $FE
    19 = 00FF			LN_EOD				= $FF
    20
    21 				;
    22 				;**************************************************************************************************
    23 				; 	LoadDisplayListData
    24 				;
    25 				;		Routine to load the desired display list data to Atari's LISTL and LISTH location.
    26 				;
    27 				;		Parameters:		m_param00	-	Length of data
    28 				;						m_paramW01	-	Source of data
    29 				;						m_paramW02	-	Destination of data
    30 				;
    31 				;		Destroy's A, X, and Y registers 
    32 				;
    33 				;**************************************************************************************************
    34 6B0A			.proc LoadDisplayListData
    35
    36 6B0A A6 92				ldx m_param00
    37 6B0C A0 00				ldy #$00
    38
    39 				;*****	Loop until data length is reached	
    40 6B0E			loop
    41 6B0E B1 E3				lda (m_paramW01), y
    42 6B10 91 E5				sta (m_paramW02), y
    43 6B12 C8					iny
    44 6B13 CA					dex
    45 6B14 D0 F8				bne loop
    46 						
    47 6B16 60					rts
    48
    49 				.endp
    50
    51 				;
    52 				;**************************************************************************************************
    53 				; LoadLevel
    54 				;
    55 				;	Level index is passed in zero page PARAM01
    56 				;
    57 				;**************************************************************************************************
    58 6B17			.proc LoadLevel
    59
    60 6B17 A6 93				ldx m_param01
    61 								
    62 6B19 BD 02 30				lda LevelsAddr_LSB,x					; get the LSB for the requested levels data
    63 6B1C 85 E7				sta m_ptrLevelAddr						; store it in our zero page pointer
    64 6B1E BD 03 30				lda LevelsAddr_MSB,x					; get the MSB for the requested levels data
    65 6B21 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
    66 						
    67 6B23 A9 00				lda #$00								; initialize the counters
    68 6B25 8D 14 32				sta m_scrYCount		
    69 6B28 8D 15 32				sta m_datYCount
    70 						
    71 6B2B A8					tay										; begin with the Y register set
    72
    73 				;************************************************
    74 				;
    75 6B2C			GetNextRowCol		
    76 						
    77 6B2C AC 15 32				ldy m_datYCount		
    78 6B2F B1 E7				lda (m_ptrLevelAddr), y					; make sure this level is valid (while not EOD)
    79 6B31 C9 FF				cmp #LN_EOD								; check for eof of level data
    80 6B33 F0 65				beq ExitLoadLevel						; true jump to exit
    81
    82 6B35			StoreRow
    83 						
    84 6B35 8D 12 32				sta	m_currRow							; save off the first byte the current row
    85
    86 6B38 EE 15 32				inc m_datYCount							; increment for COLS value
    87 6B3B AC 15 32				ldy m_datYCount							; use it
    88 6B3E B1 E7				lda (m_ptrLevelAddr),y					; make sure this level is valid
    89 6B40 8D 13 32				sta m_currCol							; now we have the current column
    90 						
    91 6B43 AE 13 32				ldx m_currCol
    92 6B46 BD 3F 32				lda TabLevelLineAddressLSB,x			; get the low part of the screen address by row
    93 6B49 18					clc
    94 6B4A 6D 12 32				adc m_currRow		
    95 6B4D 85 E9				sta m_ptrLevelLine						; save it off to the current line address		
    96 6B4F BD 3F 33				lda TabLevelLineAddressMSB,x			; get the low part of the screen address by row
    97 6B52 69 00				adc #$00
    98 6B54 85 EA				sta m_ptrLevelLine + 1					; save it off to the current line address
    99
   100 				;************************************************
   101 				;
   102 6B56			SetCharacter
   103 				  		
   104 6B56 EE 15 32		  		inc m_datYCount							; increment for next COLS value
   105 6B59 AC 15 32				ldy m_datYCount							; use the value
   106
   107 6B5C B1 E7				lda (m_ptrLevelAddr),y					; check for line break
   108 6B5E C9 FD				cmp #LN_BRK								; did we hit it 
   109 6B60 F0 0B				beq GetNextDataLine						; go reset the counters and test for carriage return  
   110
   111 				;		sta mm_currChar							; hold the maps character		
   112 				;		lda mm_currChar							; get the character back
   113
   114 6B62 AC 14 32				ldy m_scrYCount
   115 6B65 91 E9				sta (m_ptrLevelLine),y					; store it at location
   116 6B67 EE 14 32				inc m_scrYCount
   117 						
   118 6B6A 4C 56 6B				jmp SetCharacter						; do the process all over
   119 						
   120 				;************************************************
   121 				;
   122 6B6D			GetNextDataLine
   123 						
   124 6B6D A9 00				lda #$00
   125 6B6F 8D 14 32				sta m_scrYCount
   126 						
   127 6B72 EE 15 32		  		inc m_datYCount							; increment for next COLS value
   128 6B75 AC 15 32				ldy m_datYCount							; use the value
   129 6B78 B1 E7				lda (m_ptrLevelAddr), y					; load up the next level data item
   130 						
   131 6B7A C9 FE				cmp #LN_CRG								; check for carraige return
   132 6B7C F0 03				beq SetNextRowCol						; true get the next row of data
   133 						
   134 6B7E 4C 35 6B				jmp StoreRow		
   135
   136 6B81			SetNextRowCol
   137 6B81 EE 15 32				inc m_datYCount		
   138 						
   139 6B84 18					clc
   140 6B85 A5 E7				lda m_ptrLevelAddr					; get the LSB for the requested levels data
   141 6B87 6D 15 32				adc m_datYCount
   142 6B8A 85 E7				sta m_ptrLevelAddr
   143 6B8C A5 E8				lda m_ptrLevelAddr + 1
   144 6B8E 69 00				adc #$00
   145 6B90 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
   146
   147 6B92 A9 00				lda #$00
   148 6B94 8D 15 32				sta m_datYCount
   149
   150 6B97 4C 2C 6B				jmp GetNextRowCol			
   151 				 
   152 				;************************************************
   153 				;
   154 6B9A			ExitLoadLevel
   155
   156 6B9A 60					rts
   157 					
   158 				.endp			
   323 6B9B					icl "JoyKeyAndCollision.Asm"
Source: E:\_8BitProjects\Series\Scroller\JoyKeyAndCollision.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		JoyKeyAndCollision.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; CheckInput
    15 				;**************************************************************************************************
    16 				;
    17 6B9B			.proc CheckInput
    18
    19 				;*****	Check Stick
    20 				;
    21 6B9B			CI_check_stick
    22 						
    23 6B9B A5 DE				lda m_stick0
    24 6B9D 85 DF				sta m_oldStick0
    25
    26 6B9F AD 00 D3				lda PORTA
    27 6BA2 29 0F				and #15
    28 6BA4 85 DE				sta m_stick0
    29
    30 				;*****	Check Shoot Right
    31 				;
    32 6BA6			CI_check_shoot_right
    33 						
    34 6BA6 C9 08				cmp #%1000								; right
    35 6BA8 B0 07				bcs CI_check_shoot_left
    36 						
    37 6BAA A9 01				lda #PSD_RIGHT
    38 6BAC 85 CE				sta m_lastPlayerShootDirection
    39 6BAE 4C B9 6B				jmp CI_check_trigger
    40
    41 				;*****	Check Shoot Left
    42 				;
    43 6BB1			CI_check_shoot_left
    44 						
    45 6BB1 29 04				and #%0100								; left
    46 6BB3 D0 04				bne CI_check_trigger
    47 					
    48 6BB5 A9 02				lda #PSD_LEFT
    49 6BB7 85 CE				sta m_lastPlayerShootDirection
    50
    51 				;*****	Check Trigger
    52 				;
    53 6BB9			CI_check_trigger
    54 					
    55 6BB9 A5 E2				lda m_currentTrigger0
    56 6BBB 85 E0				sta m_oldTrigger0
    57
    58 6BBD AD 10 D0				lda TRIG0								; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
    59 6BC0 85 E2				sta m_currentTrigger0	
    60 6BC2 0A					asl
    61 6BC3 05 E0				ora m_oldTrigger0
    62 6BC5 49 03				eor #%11
    63 6BC7 85 E1				sta m_triggerState
    64 							
    65 6BC9 A9 03				lda #0+GRACTL_OPTIONS					; reset trigger latches	
    66 6BCB 8D 1D D0				sta GRACTL								; reset triggers latch mode
    67 					
    68 6BCE A9 07				lda #4+GRACTL_OPTIONS
    69 6BD0 8D 1D D0				sta GRACTL								; set triggers latch mode
    70
    71 6BD3 60					rts
    72 						
    73 				.endp	
    74 					
    75 				;
    76 				;**************************************************************************************************
    77 				; CheckPMCollisions
    78 				;**************************************************************************************************
    79 				;
    80 6BD4			.proc CheckPMCollisions
    81 					
    82 				;*****	Check Player 0 Playfield 3
    83 				;
    84 6BD4 AD 0A D0				lda M2PL
    85 6BD7 29 0B				and #%1011
    86 6BD9 F0 08				beq check_p0_pf3
    87 								
    88 6BDB A2 07				ldx #PS_LOSE
    89 6BDD 20 FE 4D				jsr SetPlayerMethod
    90 6BE0 4C 0D 6C				jmp CPMC_check_m0_pf0_3
    91
    92 				;*****	Check Player 0 Playfield 3
    93 				;
    94 6BE3			check_p0_pf3
    95 						
    96 6BE3 AD 04 D0				lda P0PF
    97 6BE6 29 08				and #%1000
    98 6BE8 F0 08				beq CPMC_check_m2_pl0
    99
   100 6BEA A2 07				ldx #PS_LOSE
   101 6BEC 20 FE 4D				jsr SetPlayerMethod
   102 6BEF 4C 0D 6C				jmp CPMC_check_m0_pf0_3
   103 						
   104 				;*****	Check Missile 2 Player 0
   105 				;
   106 6BF2			CPMC_check_m2_pl0
   107 					
   108 6BF2 AD 0A D0				lda M2PL
   109 6BF5 29 01				and #%0001
   110 6BF7 F0 08				beq CPMC_check_m3_pl0
   111
   112 6BF9 A2 07				ldx #PS_LOSE
   113 6BFB 20 FE 4D				jsr SetPlayerMethod
   114 6BFE 4C 0D 6C				jmp CPMC_check_m0_pf0_3
   115
   116 				;*****	Check Missile 3 Player 0
   117 				;
   118 6C01			CPMC_check_m3_pl0
   119
   120 6C01 AD 0B D0				lda M3PL
   121 6C04 29 01				and #%0001
   122 6C06 F0 05				beq CPMC_check_m0_pf0_3
   123
   124 6C08 A2 07				ldx #PS_LOSE
   125 6C0A 20 FE 4D				jsr SetPlayerMethod
   126
   127 				;*****	Check Missile 0 Player 0-3
   128 				;
   129 6C0D			CPMC_check_m0_pf0_3
   130 					
   131 6C0D AD 00 D0				lda M0PF
   132 6C10 29 09				and #%1001
   133 6C12 F0 00				beq CPMC_check_m1_pf0_3
   134
   135 				;*****	Check Missile 1 Player 0-3
   136 				;
   137 6C14			CPMC_check_m1_pf0_3
   138 					
   139 6C14 AD 01 D0				lda M1PF
   140 6C17 29 09				and #%1001
   141 6C19 F0 00				beq ClearPMCollisions
   142
   143 				;*****	Check PM Collisions
   144 				;
   145 6C1B			ClearPMCollisions
   146
   147 6C1B A9 00				lda #0
   148 6C1D 8D 1E D0				sta HITCLR		
   149 						
   150 6C20 60					rts
   151
   152 				.endp		
   153
   324 6C21					icl "AudioManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\AudioManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AudioManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 6C21			.proc	SfxOff
    15
    16 6C21 A9 F0			lda #$f0					;initial value
    17 6C23 8D 4E 25			sta RMTSFXVOLUME			;sfx note volume * 16 (0,16,32,...,240)
    18 				;
    19 6C26 A9 FF			lda #$ff					;initial value
    20 6C28 85 99			sta m_sfxEffect
    21 				;
    22 6C2A A2 00			ldx #<SoundAddress					;low byte of RMT module to X reg
    23 6C2C A0 40			ldy #>SoundAddress					;hi byte of RMT module to Y reg
    24 6C2E A9 02			lda #$02						;starting song line 0-255 to A reg
    25 6C30 20 00 24			jsr RASTERMUSICTRACKER		;Init
    26
    27 				; 		 lda #0             ; silence sound output
    28 				;	     sta m_sfxBusy
    29 				;         sta m_sfxLEFT
    30 				;         sta m_sfxRIGHT
    31 				;         
    32 				;         sta AUDCTL								; clear sound
    33 				;		 
    34 				;		 sta AUDC1
    35 				;	     sta AUDC2
    36 				;	     sta AUDC3
    37 				;	     sta AUDF4
    38 				;		 
    39 				;		 sta AUDF1
    40 				;	     sta AUDF2
    41 				;	     sta AUDF3
    42 				;	     sta AUDF4
    43 					     
    44 6C33 60			         rts
    45 				.endp
    46
    47 6C34			.proc SfxTrigger
    48 						 
    49 				;		 lda m_sfxBusy
    50 				;		 cmp #$01
    51 				;	 	 bne seteffect
    52 				;		 
    53 				;		 rts
    54 				;		 
    55 6C34			seteffect
    56 				;         ldx m_sfxLEFT       ; test left channel
    57 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle 
    58 				;         bne leftnotfree   ; if not 0 then skip ahead
    59 				;         sty m_sfxLEFT       ; channel is idle, use it
    60 				;		 lda #$01
    61 				;		 sta m_sfxBusy
    62 				;         rts                ; all done
    63 				;
    64 6C34			leftnotfree 
    65 				;         ldx m_sfxRIGHT      ; test right channel
    66 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle
    67 				;         bne rightnotfree  ; if not 0 then skip ahead
    68 				;         sty m_sfxRIGHT      ; channel is idle, use it
    69 				;		 lda #$01
    70 				;		 sta m_sfxBusy
    71 6C34 60			         rts                ; all done
    72
    73 6C35			rightnotfree
    74 				;         cpy m_sfxLEFT       ; test sfx priority with left channel
    75 				;         bcc leftnotlower  ; skip ahead if new sfx has lower priority than active sfx
    76 				;         sty m_sfxLEFT       ; new sfx has higher priority so use left channel
    77 				;		 lda #$01
    78 				;		 sta m_sfxBusy
    79 6C35 60			         rts                ; all done
    80
    81 6C36			leftnotlower 
    82 				;         cpy m_sfxRIGHT      ; test sfx with right channel
    83 				;         bcc rightnotlower ; skip ahead if new sfx has lower priority than active sfx
    84 				;         sty m_sfxRIGHT      ; new sfx has higher priority so use right channel
    85 				; 		 lda #$01
    86 				;		 sta m_sfxBusy
    87 						 
    88 6C36			rightnotlower
    89 						
    90 						
    91 6C36 60			        rts
    92
    93 				.endp
    94
    95
    96 6C37			.proc SfxUpdate
    97 6C37 A5 99			lda m_sfxEffect
    98 6C39 30 0D			bmi lab2
    99 6C3B 0A				asl 						; * 2
   100 6C3C A8				tay							;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   101 6C3D A2 03			ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   102 6C3F A9 0C			lda #12						;A = 12			note (0..60)
   103 6C41 20 0F 24			jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   104 				;
   105 6C44 A9 FF			lda #$ff
   106 6C46 85 99			sta m_sfxEffect				;reinit value
   107 				;
   108 6C48			lab2
   109 6C48 20 03 24			jsr RASTERMUSICTRACKER+3	;1 play
   110 6C4B 60				rts
   111 					
   112 				;	lda #%11101010
   113 				;	sta AUDCTL
   114 				;	ldx m_sfxLEFT       ; get the pointer for the left channel
   115 				;    lda SFX_F,x         ; get the Frequency value
   116 				;    sta AUDF1          ; update the Frequency register
   117 				;    lda SFX_CV,x        ; get the combined Control and Volume value
   118 				;    sta AUDC1          ; update the Volume register
   119 				;    lsr                ; prep the Control value,
   120 				;    lsr                ;   it's stored in the upper nybble
   121 				;	lsr                ;   but must be in the lower nybble
   122 				;	lsr                ;   when Control is updated
   123 				;	sta AUDC1          ; update the Control register
   124 				;	beq skipleftdec   ; skip ahead if Control = 0
   125 				;	dec m_sfxLEFT       ; update pointer for left channel
   126 				;skipleftdec 
   127 				;	ldx m_sfxRIGHT      ; get the pointer for the right channel
   128 				;	lda SFX_F,x         ; get the Frequency value
   129 				;	sta AUDF2          ; update the Frequency register
   130 				;	lda SFX_CV,x        ; get the combined Control and Volume value
   131 				;    sta AUDC2          ; update the Volume register
   132 				;    lsr                ; prep the Control value,
   133 				;    lsr                ;   it's stored in the upper nybble
   134 				;    lsr                ;   but must be in the lower nybble
   135 				;    lsr                ;   when Control is updated
   136 				;    sta AUDC2         ; update the Control register
   137 				;	beq skiprightdec  ; skip ahead if Control = 0
   138 				;    dec m_sfxRIGHT      ; update pointer for right channel
   139 				;skiprightdec
   140 				;	lda m_sfxLeft
   141 				;	cmp #$00
   142 				;	bne noreset
   143 				;	sta m_sfxBusy
   144 				;noreset	
   145 				;    rts                ; all done
   146 				.endp
   147
   325 6C4C					icl "rmtplayr.asm"
Source: E:\_8BitProjects\Series\Scroller\rmtplayr.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 					IFT STEREOMODE==1
    25 				TRACKS		equ 8
    26 					ELS
    27 = 0004			TRACKS		equ 4
    28 					EIF
    29 				;*
    30 = 2400			PLAYER		equ SoundPlayerAddress
    31 				;*
    32 				;* RMT FEATures definitions file
    33 				;* For optimizations of RMT player routine to concrete RMT modul only!
    34 6C4C				icl "rmt_feat.asm"
Source: E:\_8BitProjects\Series\Scroller\rmt_feat.asm
     1 				;*
     2 				;* RMT FEATures definitions
     3 				;*
     4 				;* For optimizations of RMT player routine to concrete RMT modul only!
     5 				;* --------BEGIN--------
     6 				;* asm_src/sfx/sfx.rmt
     7 = 0001			FEAT_SFX		equ 1
     8 = 0000			FEAT_GLOBALVOLUMEFADE	equ 0		;RMTGLOBALVOLUMEFADE variable
     9 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
    10 = 0001			FEAT_INSTRSPEED		equ 1
    11 = 0009			FEAT_CONSTANTSPEED		equ 9		;(0 times)
    12 = 0001			FEAT_COMMAND1		equ 1		;(96 times)
    13 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
    14 = 0001			FEAT_COMMAND3		equ 1		;(1 times)
    15 = 0001			FEAT_COMMAND4		equ 1		;(1 times)
    16 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    17 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    18 = 0001			FEAT_COMMAND7SETNOTE		equ 1		;(1 times)
    19 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    20 = 0000			FEAT_PORTAMENTO		equ 0		;(0 times)
    21 = 0000			FEAT_FILTER		equ 0		;(0 times)
    22 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    23 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    24 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    25 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    26 = 0000			FEAT_BASS16		equ 0		;(0 times)
    27 = 0000			FEAT_BASS16G1L		equ 0		;(0 times)
    28 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    29 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    30 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    32 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    33 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    34 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    35 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    36 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    37 = 0000			FEAT_TABLETYPE		equ 0		;(0 times)
    38 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    39 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    40 = 0000			FEAT_AUDCTLMANUALSET		equ 0		;(0 times)
    41 = 0000			FEAT_VOLUMEMIN		equ 0		;(0 times)
    42 = 0000			FEAT_EFFECTVIBRATO		equ 0		;(0 times)
    43 = 0000			FEAT_EFFECTFSHIFT		equ 0		;(0 times)
    44 				;* --------END--------
    35 				;*
    36 				;* RMT ZeroPage addresses
    37 					;org $80
    38 					IFT FEAT_COMMAND2
    39 				frqaddcmd2					org *+1
    40 					EIF
    41
    42 					IFT TRACKS>4
    43 					org PLAYER-$400+$40
    44 					ELS
    45 6C4C				org PLAYER-$400+$e0
    46 					EIF
    47 					
    48 20E0			track_variables
    49 20E0			trackn_db	org *+TRACKS
    50 20E4			trackn_hb	org *+TRACKS
    51 20E8			trackn_idx	org *+TRACKS
    52 20EC			trackn_pause	org *+TRACKS
    53 20F0			trackn_note	org *+TRACKS
    54 20F4			trackn_volume	org *+TRACKS
    55 20F8			trackn_distor 	org *+TRACKS
    56 20FC			trackn_shiftfrq	org *+TRACKS
    57 					IFT FEAT_PORTAMENTO
    58 				trackn_portafrqc org *+TRACKS
    59 				trackn_portafrqa org *+TRACKS
    60 				trackn_portaspeed org *+TRACKS
    61 				trackn_portaspeeda org *+TRACKS
    62 				trackn_portadepth org *+TRACKS
    63 					EIF
    64 2100			trackn_instrx2	org *+TRACKS
    65 2104			trackn_instrdb	org *+TRACKS
    66 2108			trackn_instrhb	org *+TRACKS
    67 210C			trackn_instridx	org *+TRACKS
    68 2110			trackn_instrlen	org *+TRACKS
    69 2114			trackn_instrlop	org *+TRACKS
    70 2118			trackn_instrreachend	org *+TRACKS
    71 211C			trackn_volumeslidedepth org *+TRACKS
    72 2120			trackn_volumeslidevalue org *+TRACKS
    73 					IFT FEAT_VOLUMEMIN
    74 				trackn_volumemin		org *+TRACKS
    75 					EIF
    76 = 0000			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    77 					IFT FEAT_EFFECTS
    78 				trackn_effdelay			org *+TRACKS
    79 					EIF
    80 					IFT FEAT_EFFECTVIBRATO
    81 				trackn_effvibratoa		org *+TRACKS
    82 					EIF
    83 					IFT FEAT_EFFECTFSHIFT
    84 				trackn_effshift		org *+TRACKS
    85 					EIF
    86 2124			trackn_tabletypespeed org *+TRACKS
    87 					IFT FEAT_TABLEMODE
    88 				trackn_tablemode	org *+TRACKS
    89 					EIF
    90 2128			trackn_tablenote	org *+TRACKS
    91 212C			trackn_tablea		org *+TRACKS
    92 2130			trackn_tableend		org *+TRACKS
    93 					IFT FEAT_TABLEGO
    94 				trackn_tablelop		org *+TRACKS
    95 					EIF
    96 2134			trackn_tablespeeda	org *+TRACKS
    97 					IFT FEAT_FILTER||FEAT_BASS16
    98 				trackn_command		org *+TRACKS
    99 					EIF
   100 					IFT FEAT_BASS16
   101 				trackn_outnote		org *+TRACKS
   102 					EIF
   103 					IFT FEAT_FILTER
   104 				trackn_filter		org *+TRACKS
   105 					EIF
   106 2138			trackn_audf	org *+TRACKS
   107 213C			trackn_audc	org *+TRACKS
   108 					IFT FEAT_AUDCTLMANUALSET
   109 				trackn_audctl	org *+TRACKS
   110 					EIF
   111 2140			v_aspeed		org *+1
   112 2141			track_endvariables
   113 2141					org PLAYER-$100-$140-$40+2
   114 = 000C			INSTRPAR	equ 12
   115 2182			tabbeganddistor
   116 2182-2191> 80 00		 dta frqtabpure-frqtab,$00
   117 2184 80 20		 dta frqtabpure-frqtab,$20
   118 2186 80 40		 dta frqtabpure-frqtab,$40
   119 2188 00 C0		 dta frqtabbass1-frqtab,$c0
   120 218A 80 80		 dta frqtabpure-frqtab,$80
   121 218C 80 A0		 dta frqtabpure-frqtab,$a0
   122 218E 00 C0		 dta frqtabbass1-frqtab,$c0
   123 2190 40 C0		 dta frqtabbass2-frqtab,$c0
   124 						IFT FEAT_EFFECTVIBRATO
   125 				vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   126 				vib0	dta 0
   127 				vib1	dta 1,-1,-1,1
   128 				vib2	dta 1,0,-1,-1,0,1
   129 				vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   130 				vibtabnext
   131 						dta vib0-vib0+0
   132 						dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   133 						dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   134 						dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   135 						EIF
   136 2192					org PLAYER-$100-$140
   137 					IFT FEAT_BASS16
   138 				frqtabbasslo
   139 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   140 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   141 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   142 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   143 					EIF
   144 21C0					org PLAYER-$100-$100
   145 2200			frqtab
   146 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   147 2200			frqtabbass1
   148 2200-22BF> BF B6 AA A1 + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   149 2210 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   150 2220 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   151 2230 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   152 2240			frqtabbass2
   153 2240 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   154 2250 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   155 2260 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   156 2270 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   157 2280			frqtabpure
   158 2280 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   159 2290 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   160 22A0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   161 22B0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   162 					IFT FEAT_BASS16
   163 				frqtabbasshi
   164 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   165 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   166 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   167 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   168 					EIF
   169 22C0					org PLAYER-$0100
   170 2300			volumetab
   171 2300-271F> 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   172 2310 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   173 2320 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   174 2330 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   175 2340 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   176 2350 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   177 2360 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   178 2370 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   179 2380 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   180 2390 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   181 23A0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   182 23B0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   183 23C0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   184 23D0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   185 23E0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   186 23F0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   187 2400				org PLAYER
   188 				;*
   189 				;* Set of RMT main vectors:
   190 				;*
   191 2400			RASTERMUSICTRACKER
   192 2400 4C 12 24			jmp rmt_init
   193 2403 4C A4 25			jmp rmt_play
   194 2406 4C BE 25			jmp rmt_p3
   195 2409 4C 4D 24			jmp rmt_silence
   196 240C 4C EA 26			jmp SetPokey
   197 					IFT FEAT_SFX
   198 240F 4C 4A 25			jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   199 					EIF
   200 2412			rmt_init
   201 2412 86 88			stx ns
   202 2414 84 89			sty ns+1
   203 					IFT FEAT_NOSTARTINGSONGLINE==0
   204 2416 48				pha
   205 					EIF
   206 					IFT track_endvariables-track_variables>255
   207 					ldy #0
   208 					tya
   209 				ri0	sta track_variables,y
   210 					sta track_endvariables-$100,y
   211 					iny
   212 					bne ri0
   213 					ELS
   214 2417 A0 61			ldy #track_endvariables-track_variables
   215 2419 A9 00			lda #0
   216 241B 99 DF 20		ri0	sta track_variables-1,y
   217 241E 88				dey
   218 241F D0 FA			bne ri0
   219 					EIF
   220 2421 A0 04			ldy #4
   221 2423 B1 88			lda (ns),y
   222 2425 8D B2 25			sta v_maxtracklen
   223 2428 C8				iny
   224 					IFT FEAT_CONSTANTSPEED==0
   225 					lda (ns),y
   226 					sta v_speed
   227 					EIF
   228 					IFT FEAT_INSTRSPEED==0
   229 					iny
   230 					lda (ns),y
   231 					sta v_instrspeed
   232 					sta v_ainstrspeed
   233 					ELI FEAT_INSTRSPEED>1
   234 					lda #FEAT_INSTRSPEED
   235 					sta v_ainstrspeed
   236 					EIF
   237 2429 A0 08			ldy #8
   238 242B B1 88		ri1	lda (ns),y
   239 242D 99 78 00			sta p_tis-8,y
   240 2430 C8				iny
   241 2431 C0 10			cpy #8+8
   242 2433 D0 F6			bne ri1
   243 					IFT FEAT_NOSTARTINGSONGLINE==0
   244 2435 68				pla
   245 2436 48				pha
   246 					IFT TRACKS>4
   247 					asl @
   248 					asl @
   249 					asl @
   250 					clc
   251 					adc p_song
   252 					sta p_song
   253 					pla
   254 					php
   255 					and #$e0
   256 					asl @
   257 					rol @
   258 					rol @
   259 					rol @
   260 					ELS
   261 2437 0A				asl @
   262 2438 0A				asl @
   263 2439 18				clc
   264 243A 65 86			adc p_song
   265 243C 85 86			sta p_song
   266 243E 68				pla
   267 243F 08				php
   268 2440 29 C0			and #$c0
   269 2442 0A				asl @
   270 2443 2A				rol @
   271 2444 2A				rol @
   272 					EIF
   273 2445 28				plp
   274 2446 65 87			adc p_song+1
   275 2448 85 87			sta p_song+1
   276 					EIF
   277 244A 20 62 24			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   278 244D			rmt_silence
   279 					IFT STEREOMODE>0
   280 					lda #0
   281 					sta $d208
   282 					sta $d218
   283 					ldy #3
   284 					sty $d20f
   285 					sty $d21f
   286 					ldy #8
   287 				si1	sta $d200,y
   288 					sta $d210,y
   289 					dey
   290 					bpl si1
   291 					ELS
   292 244D A9 00			lda #0
   293 244F 8D 08 D2			sta $d208
   294 2452 A0 03			ldy #3
   295 2454 8C 0F D2			sty $d20f
   296 2457 A0 08			ldy #8
   297 2459 99 00 D2		si1	sta $d200,y
   298 245C 88				dey
   299 245D 10 FA			bpl si1
   300 					EIF
   301 					IFT FEAT_INSTRSPEED==0
   302 					lda v_instrspeed
   303 					ELS
   304 245F A9 01			lda #FEAT_INSTRSPEED
   305 					EIF
   306 2461 60				rts
   307 2462			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   308 2462			GetSongLine
   309 2462 A2 00			ldx #0
   310 2464 8E B0 25			stx v_abeat
   311 2467			nn0
   312 2467 8A			nn1	txa
   313 2468 A8				tay
   314 2469 B1 86			lda (p_song),y
   315 246B C9 FE			cmp #$fe
   316 246D B0 2D			bcs nn2
   317 246F A8				tay
   318 2470 B1 82			lda (p_trackslbstable),y
   319 2472 9D E0 20			sta trackn_db,x
   320 2475 B1 84			lda (p_trackshbstable),y
   321 2477 9D E4 20		nn1a sta trackn_hb,x
   322 247A A9 00			lda #0
   323 247C 9D E8 20			sta trackn_idx,x
   324 247F A9 01			lda #1
   325 2481 9D EC 20		nn1a2 sta trackn_pause,x
   326 2484 A9 80			lda #$80
   327 2486 9D 00 21			sta trackn_instrx2,x
   328 2489 E8				inx
   329 248A E0 04		xtracks01	cpx #TRACKS
   330 248C D0 D9			bne nn1
   331 248E A5 86			lda p_song
   332 2490 18				clc
   333 2491 69 04		xtracks02	adc #TRACKS
   334 2493 85 86			sta p_song
   335 2495 90 1B			bcc GetTrackLine
   336 2497 E6 87			inc p_song+1
   337 2499			nn1b
   338 2499 4C B2 24			jmp GetTrackLine
   339 249C			nn2
   340 249C F0 04			beq nn3
   341 249E			nn2a
   342 249E A9 00			lda #0
   343 24A0 F0 DF			beq nn1a2
   344 24A2			nn3
   345 24A2 A0 02			ldy #2
   346 24A4 B1 86			lda (p_song),y
   347 24A6 AA				tax
   348 24A7 C8				iny
   349 24A8 B1 86			lda (p_song),y
   350 24AA 85 87			sta p_song+1
   351 24AC 86 86			stx p_song
   352 24AE A2 00			ldx #0
   353 24B0 F0 B5			beq nn0
   354 24B2			GetTrackLine
   355 24B2			oo0
   356 24B2			oo0a
   357 					IFT FEAT_CONSTANTSPEED==0
   358 					lda #$ff
   359 				v_speed equ *-1
   360 					sta v_bspeed
   361 					EIF
   362 24B2 A2 FF			ldx #-1
   363 24B4			oo1
   364 24B4 E8				inx
   365 24B5 DE EC 20			dec trackn_pause,x
   366 24B8 D0 42			bne oo1x
   367 24BA			oo1b
   368 24BA BD E0 20			lda trackn_db,x
   369 24BD 85 88			sta ns
   370 24BF BD E4 20			lda trackn_hb,x
   371 24C2 85 89			sta ns+1
   372 24C4			oo1i
   373 24C4 BC E8 20			ldy trackn_idx,x
   374 24C7 FE E8 20			inc trackn_idx,x
   375 24CA B1 88			lda (ns),y
   376 24CC 85 8E			sta reg1
   377 24CE 29 3F			and #$3f
   378 24D0 C9 3D			cmp #61
   379 24D2 F0 0E			beq oo1a
   380 24D4 B0 32			bcs oo2
   381 24D6 9D F0 20			sta trackn_note,x
   382 					IFT FEAT_BASS16
   383 					sta trackn_outnote,x
   384 					EIF
   385 24D9 C8				iny
   386 24DA B1 88			lda (ns),y
   387 24DC 4A				lsr @
   388 24DD 29 7E			and #$3f*2
   389 24DF 9D 00 21			sta trackn_instrx2,x
   390 24E2			oo1a
   391 24E2 A9 01			lda #1
   392 24E4 9D EC 20			sta trackn_pause,x
   393 24E7 BC E8 20			ldy trackn_idx,x
   394 24EA FE E8 20			inc trackn_idx,x
   395 24ED B1 88			lda (ns),y
   396 24EF 4A				lsr @
   397 24F0 66 8E			ror reg1
   398 24F2 4A				lsr @
   399 24F3 66 8E			ror reg1
   400 24F5 A5 8E			lda reg1
   401 					IFT FEAT_GLOBALVOLUMEFADE
   402 					sec
   403 					sbc #$00
   404 				RMTGLOBALVOLUMEFADE equ *-1
   405 					bcs voig
   406 					lda #0
   407 				voig
   408 					EIF
   409 24F7 29 F0			and #$f0
   410 24F9 9D F4 20			sta trackn_volume,x
   411 24FC			oo1x
   412 24FC E0 03		xtracks03sub1	cpx #TRACKS-1
   413 24FE D0 B4			bne oo1
   414 					IFT FEAT_CONSTANTSPEED==0
   415 					lda #$ff
   416 				v_bspeed equ *-1
   417 					sta v_speed
   418 					ELS
   419 2500 A9 09			lda #FEAT_CONSTANTSPEED
   420 					EIF
   421 2502 8D 40 21			sta v_aspeed
   422 2505 4C 3F 25			jmp InitOfNewSetInstrumentsOnly
   423 2508			oo2
   424 2508 C9 3F			cmp #63
   425 250A F0 1B			beq oo63
   426 250C A5 8E			lda reg1
   427 250E 29 C0			and #$c0
   428 2510 F0 09			beq oo62_b
   429 2512 0A				asl @
   430 2513 2A				rol @
   431 2514 2A				rol @
   432 2515 9D EC 20			sta trackn_pause,x
   433 2518 4C FC 24			jmp oo1x
   434 251B			oo62_b
   435 251B C8				iny
   436 251C B1 88			lda (ns),y
   437 251E 9D EC 20			sta trackn_pause,x
   438 2521 FE E8 20			inc trackn_idx,x
   439 2524 4C FC 24			jmp oo1x
   440 2527			oo63
   441 2527 A5 8E			lda reg1
   442 					IFT FEAT_CONSTANTSPEED==0
   443 					bmi oo63_1X
   444 					iny
   445 					lda (ns),y
   446 					sta v_bspeed
   447 					inc trackn_idx,x
   448 					jmp oo1i
   449 				oo63_1X
   450 					EIF
   451 2529 C9 FF			cmp #255
   452 252B F0 09			beq oo63_11
   453 252D C8				iny
   454 252E B1 88			lda (ns),y
   455 2530 9D E8 20			sta trackn_idx,x
   456 2533 4C C4 24			jmp oo1i
   457 2536			oo63_11
   458 2536 4C 62 24			jmp GetSongLine
   459 2539 4C BE 25		p2xrmtp3	jmp rmt_p3
   460 253C CA			p2x0 dex
   461 253D 30 FA			 bmi p2xrmtp3
   462 253F			InitOfNewSetInstrumentsOnly
   463 253F BC 00 21		p2x1 ldy trackn_instrx2,x
   464 2542 30 F8			bmi p2x0
   465 					IFT FEAT_SFX
   466 2544 20 52 25			jsr SetUpInstrumentY2
   467 2547 4C 3C 25			jmp p2x0
   468 254A			rmt_sfx
   469 254A 9D F0 20			sta trackn_note,x
   470 					IFT FEAT_BASS16
   471 					sta trackn_outnote,x
   472 					EIF
   473 254D A9 F0			lda #$f0				;* sfx note volume*16
   474 = 254E			RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   475 254F 9D F4 20			sta trackn_volume,x
   476 					EIF
   477 2552			SetUpInstrumentY2
   478 2552 B1 80			lda (p_instrstable),y
   479 2554 9D 04 21			sta trackn_instrdb,x
   480 2557 85 8C			sta nt
   481 2559 C8				iny
   482 255A B1 80			lda (p_instrstable),y
   483 255C 9D 08 21			sta trackn_instrhb,x
   484 255F 85 8D			sta nt+1
   485 					IFT FEAT_FILTER
   486 					lda #1
   487 					sta trackn_filter,x
   488 					EIF
   489 					IFT FEAT_TABLEGO
   490 					IFT FEAT_FILTER
   491 					tay
   492 					ELS
   493 					ldy #1
   494 					EIF
   495 					lda (nt),y
   496 					sta trackn_tablelop,x
   497 					iny
   498 					ELS
   499 2561 A0 02			ldy #2
   500 					EIF
   501 2563 B1 8C			lda (nt),y
   502 2565 9D 10 21			sta trackn_instrlen,x
   503 2568 C8				iny
   504 2569 B1 8C			lda (nt),y
   505 256B 9D 14 21			sta trackn_instrlop,x
   506 256E C8				iny
   507 256F B1 8C			lda (nt),y
   508 2571 9D 24 21			sta trackn_tabletypespeed,x
   509 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   510 					and #$3f
   511 					EIF
   512 2574 9D 34 21			sta trackn_tablespeeda,x
   513 					IFT FEAT_TABLEMODE
   514 					lda (nt),y
   515 					and #$40
   516 					sta trackn_tablemode,x
   517 					EIF
   518 					IFT FEAT_AUDCTLMANUALSET
   519 					iny
   520 					lda (nt),y
   521 					sta trackn_audctl,x
   522 					iny
   523 					ELS
   524 2577 A0 06			ldy #6
   525 					EIF
   526 2579 B1 8C			lda (nt),y
   527 257B 9D 1C 21			sta trackn_volumeslidedepth,x
   528 					IFT FEAT_VOLUMEMIN
   529 					iny
   530 					lda (nt),y
   531 					sta trackn_volumemin,x
   532 					IFT FEAT_EFFECTS
   533 					iny
   534 					EIF
   535 					ELS
   536 					IFT FEAT_EFFECTS
   537 					ldy #8
   538 					EIF
   539 					EIF
   540 					IFT FEAT_EFFECTS
   541 					lda (nt),y
   542 					sta trackn_effdelay,x
   543 					IFT FEAT_EFFECTVIBRATO
   544 					iny
   545 					lda (nt),y
   546 					tay
   547 					lda vibtabbeg,y
   548 					sta trackn_effvibratoa,x
   549 					EIF
   550 					IFT FEAT_EFFECTFSHIFT
   551 					ldy #10
   552 					lda (nt),y
   553 					sta trackn_effshift,x
   554 					EIF
   555 					EIF
   556 257E A9 80			lda #128
   557 2580 9D 20 21			sta trackn_volumeslidevalue,x
   558 2583 9D 00 21			sta trackn_instrx2,x
   559 2586 0A				asl @
   560 2587 9D 18 21			sta trackn_instrreachend,x
   561 258A 9D FC 20			sta trackn_shiftfrq,x
   562 258D A8				tay
   563 258E B1 8C			lda (nt),y
   564 2590 9D 30 21			sta trackn_tableend,x
   565 2593 69 00			adc #0
   566 2595 9D 0C 21			sta trackn_instridx,x
   567 2598 A9 0C			lda #INSTRPAR
   568 259A 9D 2C 21			sta trackn_tablea,x
   569 259D A8				tay
   570 259E B1 8C			lda (nt),y
   571 25A0 9D 28 21			sta trackn_tablenote,x
   572 25A3			xata_rtshere
   573 					IFT FEAT_SFX
   574 25A3 60				rts
   575 					ELS
   576 					jmp p2x0
   577 					EIF
   578 25A4			rmt_play
   579 25A4			rmt_p0
   580 25A4 20 EA 26			jsr SetPokey
   581 25A7			rmt_p1
   582 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   583 					dec v_ainstrspeed
   584 					bne rmt_p3
   585 					EIF
   586 					IFT FEAT_INSTRSPEED==0
   587 					lda #$ff
   588 				v_instrspeed	equ *-1
   589 					sta v_ainstrspeed
   590 					ELI FEAT_INSTRSPEED>1
   591 					lda #FEAT_INSTRSPEED
   592 					sta v_ainstrspeed
   593 					EIF
   594 25A7			rmt_p2
   595 25A7 CE 40 21			dec v_aspeed
   596 25AA D0 12			bne rmt_p3
   597 25AC EE B0 25			inc v_abeat
   598 25AF A9 FF			lda #$ff
   599 = 25B0			v_abeat equ *-1
   600 25B1 C9 FF			cmp #$ff
   601 = 25B2			v_maxtracklen equ *-1
   602 25B3 F0 03			beq p2o3
   603 25B5 4C B2 24			jmp GetTrackLine
   604 25B8			p2o3
   605 25B8 4C 62 24			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   606 25BB 4C D9 26		go_ppnext	jmp ppnext
   607 25BE			rmt_p3
   608 25BE A9 22			lda #>frqtab
   609 25C0 85 8B			sta nr+1
   610 25C2 A2 03		xtracks05sub1	ldx #TRACKS-1
   611 25C4			pp1
   612 25C4 BD 08 21			lda trackn_instrhb,x
   613 25C7 F0 F2			beq go_ppnext
   614 25C9 85 89			sta ns+1
   615 25CB BD 04 21			lda trackn_instrdb,x
   616 25CE 85 88			sta ns
   617 25D0 BC 0C 21			ldy trackn_instridx,x
   618 25D3 B1 88			lda (ns),y
   619 25D5 85 8E			sta reg1
   620 25D7 C8				iny
   621 25D8 B1 88			lda (ns),y
   622 25DA 85 8F			sta reg2
   623 25DC C8				iny
   624 25DD B1 88			lda (ns),y
   625 25DF 85 90			sta reg3
   626 25E1 C8				iny
   627 25E2 98				tya
   628 25E3 DD 10 21			cmp trackn_instrlen,x
   629 25E6 90 0A			bcc pp2
   630 25E8 F0 08			beq pp2
   631 25EA A9 80			lda #$80
   632 25EC 9D 18 21			sta trackn_instrreachend,x
   633 25EF			pp1b
   634 25EF BD 14 21			lda trackn_instrlop,x
   635 25F2 9D 0C 21		pp2	sta trackn_instridx,x
   636 25F5 A5 8E			lda reg1
   637 					IFT TRACKS>4
   638 					cpx #4
   639 					bcc pp2s
   640 					lsr @
   641 					lsr @
   642 					lsr @
   643 					lsr @
   644 				pp2s
   645 					EIF
   646 25F7 29 0F			and #$0f
   647 25F9 1D F4 20			ora trackn_volume,x
   648 25FC A8				tay
   649 25FD B9 00 23			lda volumetab,y
   650 2600 85 91			sta tmp
   651 2602 A5 8F			lda reg2
   652 2604 29 0E			and #$0e
   653 2606 A8				tay
   654 2607 B9 82 21			lda tabbeganddistor,y
   655 260A 85 8A			sta nr
   656 260C A5 91			lda tmp
   657 260E 19 83 21			ora tabbeganddistor+1,y
   658 2611 9D 3C 21			sta trackn_audc,x
   659 2614			InstrumentsEffects
   660 					IFT FEAT_EFFECTS
   661 					lda trackn_effdelay,x
   662 					beq ei2
   663 					cmp #1
   664 					bne ei1
   665 					lda trackn_shiftfrq,x
   666 					IFT FEAT_EFFECTFSHIFT
   667 					clc
   668 					adc trackn_effshift,x
   669 					EIF
   670 					IFT FEAT_EFFECTVIBRATO
   671 					clc
   672 					ldy trackn_effvibratoa,x
   673 					adc vib0,y
   674 					EIF
   675 					sta trackn_shiftfrq,x
   676 					IFT FEAT_EFFECTVIBRATO
   677 					lda vibtabnext,y
   678 					sta trackn_effvibratoa,x
   679 					EIF
   680 					jmp ei2
   681 				ei1
   682 					dec trackn_effdelay,x
   683 				ei2
   684 					EIF
   685 2614 BC 30 21			ldy trackn_tableend,x
   686 2617 C0 0D			cpy #INSTRPAR+1
   687 2619 90 30			bcc ei3
   688 261B BD 34 21			lda trackn_tablespeeda,x
   689 261E 10 25			bpl ei2f
   690 2620			ei2c
   691 2620 98				tya
   692 2621 DD 2C 21			cmp trackn_tablea,x
   693 2624 D0 07			bne ei2c2
   694 					IFT FEAT_TABLEGO
   695 					lda trackn_tablelop,x
   696 					ELS
   697 2626 A9 0C			lda #INSTRPAR
   698 					EIF
   699 2628 9D 2C 21			sta trackn_tablea,x
   700 262B D0 03			bne ei2a
   701 262D			ei2c2
   702 262D FE 2C 21			inc trackn_tablea,x
   703 2630			ei2a
   704 2630 BD 04 21			lda trackn_instrdb,x
   705 2633 85 8C			sta nt
   706 2635 BD 08 21			lda trackn_instrhb,x
   707 2638 85 8D			sta nt+1
   708 263A BC 2C 21			ldy trackn_tablea,x
   709 263D B1 8C			lda (nt),y
   710 					IFT FEAT_TABLEMODE
   711 					ldy trackn_tablemode,x
   712 					beq ei2e
   713 					clc
   714 					adc trackn_tablenote,x
   715 				ei2e
   716 					EIF
   717 263F 9D 28 21			sta trackn_tablenote,x
   718 2642 BD 24 21			lda trackn_tabletypespeed,x
   719 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   720 					and #$3f
   721 					EIF
   722 2645			ei2f
   723 2645 38				sec
   724 2646 E9 01			sbc #1
   725 2648 9D 34 21			sta trackn_tablespeeda,x
   726 264B			ei3
   727 264B BD 18 21			lda trackn_instrreachend,x
   728 264E 10 18			bpl ei4
   729 2650 BD F4 20			lda trackn_volume,x
   730 2653 F0 13			beq ei4
   731 					IFT FEAT_VOLUMEMIN
   732 					cmp trackn_volumemin,x
   733 					beq ei4
   734 					bcc ei4
   735 					EIF
   736 2655 A8				tay
   737 2656 BD 20 21			lda trackn_volumeslidevalue,x
   738 2659 18				clc
   739 265A 7D 1C 21			adc trackn_volumeslidedepth,x
   740 265D 9D 20 21			sta trackn_volumeslidevalue,x
   741 2660 90 06			bcc ei4
   742 2662 98				tya
   743 2663 E9 10			sbc #16
   744 2665 9D F4 20			sta trackn_volume,x
   745 2668			ei4
   746 					IFT FEAT_COMMAND2
   747 					lda #0
   748 					sta frqaddcmd2
   749 					EIF
   750 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   751 2668 A5 8F			lda reg2
   752 					IFT FEAT_FILTER||FEAT_BASS16
   753 					sta trackn_command,x
   754 					EIF
   755 266A 29 70			and #$70
   756 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   757 					beq cmd0
   758 					ELS
   759 266C 4A				lsr @
   760 266D 4A				lsr @
   761 266E 8D 72 26			sta jmx+1
   762 2671 90 FE		jmx	bcc *
   763 2673 4C BA 26			jmp cmd0
   764 2676 EA				nop
   765 2677 4C 92 26			jmp cmd1
   766 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   767 267A EA				nop
   768 267B 4C 97 26			jmp cmd2
   769 					EIF
   770 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   771 267E EA				nop
   772 267F 4C 97 26			jmp cmd3
   773 					EIF
   774 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   775 2682 EA				nop
   776 2683 4C A3 26			jmp cmd4
   777 					EIF
   778 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   779 2686 EA				nop
   780 2687 4C B2 26			jmp cmd5
   781 					EIF
   782 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   783 268A EA				nop
   784 268B 4C B2 26			jmp cmd6
   785 					EIF
   786 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   787 268E EA				nop
   788 268F 4C B2 26			jmp cmd7
   789 					EIF
   790 					EIF
   791 					ELS
   792 					IFT FEAT_FILTER||FEAT_BASS16
   793 					lda reg2
   794 					sta trackn_command,x
   795 					EIF
   796 					EIF
   797 2692			cmd1
   798 					IFT FEAT_COMMAND1
   799 2692 A5 90			lda reg3
   800 2694 4C D6 26			jmp cmd0c
   801 					EIF
   802 2697			cmd2
   803 					IFT FEAT_COMMAND2
   804 					lda reg3
   805 					sta frqaddcmd2
   806 					lda trackn_note,x
   807 					jmp cmd0a
   808 					EIF
   809 2697			cmd3
   810 					IFT FEAT_COMMAND3
   811 2697 BD F0 20			lda trackn_note,x
   812 269A 18				clc
   813 269B 65 90			adc reg3
   814 269D 9D F0 20			sta trackn_note,x
   815 26A0 4C C0 26			jmp cmd0a
   816 					EIF
   817 26A3			cmd4
   818 					IFT FEAT_COMMAND4
   819 26A3 BD FC 20			lda trackn_shiftfrq,x
   820 26A6 18				clc
   821 26A7 65 90			adc reg3
   822 26A9 9D FC 20			sta trackn_shiftfrq,x
   823 26AC BD F0 20			lda trackn_note,x
   824 26AF 4C C0 26			jmp cmd0a
   825 					EIF
   826 26B2			cmd5
   827 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   828 					IFT FEAT_TABLETYPE
   829 					lda trackn_tabletypespeed,x
   830 					bpl cmd5a1
   831 					ldy trackn_note,x
   832 					lda (nr),y
   833 					clc
   834 					adc trackn_tablenote,x
   835 					jmp cmd5ax
   836 					EIF
   837 				cmd5a1
   838 					lda trackn_note,x
   839 					clc
   840 					adc trackn_tablenote,x
   841 					cmp #61
   842 					bcc cmd5a2
   843 					lda #63
   844 				cmd5a2
   845 					tay
   846 					lda (nr),y
   847 				cmd5ax
   848 					sta trackn_portafrqc,x
   849 					ldy reg3
   850 					bne cmd5a
   851 					sta trackn_portafrqa,x
   852 				cmd5a
   853 					tya
   854 					lsr @
   855 					lsr @
   856 					lsr @
   857 					lsr @
   858 					sta trackn_portaspeed,x
   859 					sta trackn_portaspeeda,x
   860 					lda reg3
   861 					and #$0f
   862 					sta trackn_portadepth,x
   863 					lda trackn_note,x
   864 					jmp cmd0a
   865 					ELI FEAT_COMMAND5
   866 					lda trackn_note,x
   867 					jmp cmd0a
   868 					EIF
   869 26B2			cmd6
   870 					IFT FEAT_COMMAND6&&FEAT_FILTER
   871 					lda reg3
   872 					clc
   873 					adc trackn_filter,x
   874 					sta trackn_filter,x
   875 					lda trackn_note,x
   876 					jmp cmd0a
   877 					ELI FEAT_COMMAND6
   878 					lda trackn_note,x
   879 					jmp cmd0a
   880 					EIF
   881 26B2			cmd7
   882 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   883 					IFT FEAT_COMMAND7SETNOTE
   884 26B2 A5 90			lda reg3
   885 					IFT FEAT_COMMAND7VOLUMEONLY
   886 					cmp #$80
   887 					beq cmd7a
   888 					EIF
   889 26B4 9D F0 20			sta trackn_note,x
   890 26B7 4C C0 26			jmp cmd0a
   891 					EIF
   892 					IFT FEAT_COMMAND7VOLUMEONLY
   893 				cmd7a
   894 					lda trackn_audc,x
   895 					ora #$f0
   896 					sta trackn_audc,x
   897 					lda trackn_note,x
   898 					jmp cmd0a
   899 					EIF
   900 					EIF
   901 26BA			cmd0
   902 26BA BD F0 20			lda trackn_note,x
   903 26BD 18				clc
   904 26BE 65 90			adc reg3
   905 26C0			cmd0a
   906 					IFT FEAT_TABLETYPE
   907 					ldy trackn_tabletypespeed,x
   908 					bmi cmd0b
   909 					EIF
   910 26C0 18				clc
   911 26C1 7D 28 21			adc trackn_tablenote,x
   912 26C4 C9 3D			cmp #61
   913 26C6 90 07			bcc cmd0a1
   914 26C8 A9 00			lda #0
   915 26CA 9D 3C 21			sta trackn_audc,x
   916 26CD A9 3F			lda #63
   917 26CF			cmd0a1
   918 					IFT FEAT_BASS16
   919 					sta trackn_outnote,x
   920 					EIF
   921 26CF A8				tay
   922 26D0 B1 8A			lda (nr),y
   923 26D2 18				clc
   924 26D3 7D FC 20			adc trackn_shiftfrq,x
   925 					IFT FEAT_COMMAND2
   926 					clc
   927 					adc frqaddcmd2
   928 					EIF
   929 					IFT FEAT_TABLETYPE
   930 					jmp cmd0c
   931 				cmd0b
   932 					cmp #61
   933 					bcc cmd0b1
   934 					lda #0
   935 					sta trackn_audc,x
   936 					lda #63
   937 				cmd0b1
   938 					tay
   939 					lda trackn_shiftfrq,x
   940 					clc
   941 					adc trackn_tablenote,x
   942 					clc
   943 					adc (nr),y
   944 					IFT FEAT_COMMAND2
   945 					clc
   946 					adc frqaddcmd2
   947 					EIF
   948 					EIF
   949 26D6			cmd0c
   950 26D6 9D 38 21			sta trackn_audf,x
   951 26D9			pp9
   952 					IFT FEAT_PORTAMENTO
   953 					lda trackn_portaspeeda,x
   954 					beq pp10
   955 					dec trackn_portaspeeda,x
   956 					bne pp10
   957 					lda trackn_portaspeed,x
   958 					sta trackn_portaspeeda,x
   959 					lda trackn_portafrqa,x
   960 					cmp trackn_portafrqc,x
   961 					beq pp10
   962 					bcs pps1
   963 					adc trackn_portadepth,x
   964 					bcs pps8
   965 					cmp trackn_portafrqc,x
   966 					bcs pps8
   967 					jmp pps9
   968 				pps1
   969 					sbc trackn_portadepth,x
   970 					bcc pps8
   971 					cmp trackn_portafrqc,x
   972 					bcs pps9
   973 				pps8
   974 					lda trackn_portafrqc,x
   975 				pps9
   976 					sta trackn_portafrqa,x
   977 				pp10
   978 					lda reg2
   979 					and #$01
   980 					beq pp11
   981 					lda trackn_portafrqa,x
   982 					clc
   983 					adc trackn_shiftfrq,x
   984 					sta trackn_audf,x
   985 				pp11
   986 					EIF
   987 26D9			ppnext
   988 26D9 CA				dex
   989 26DA 30 03			bmi rmt_p4
   990 26DC 4C C4 25			jmp pp1
   991 26DF			rmt_p4
   992 					IFT FEAT_AUDCTLMANUALSET
   993 					lda trackn_audctl+0
   994 					ora trackn_audctl+1
   995 					ora trackn_audctl+2
   996 					ora trackn_audctl+3
   997 					tax
   998 					ELS
   999 26DF A2 00			ldx #0
  1000 					EIF
  1001 26E1			qq1
  1002 26E1 8E EB 26			stx v_audctl
  1003 					IFT FEAT_FILTER
  1004 					IFT FEAT_FILTERG0L
  1005 					lda trackn_command+0
  1006 					bpl qq2
  1007 					lda trackn_audc+0
  1008 					and #$0f
  1009 					beq qq2
  1010 					lda trackn_audf+0
  1011 					clc
  1012 					adc trackn_filter+0
  1013 					sta trackn_audf+2
  1014 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1015 					lda trackn_audc+2
  1016 					and #$10
  1017 					bne qq1a
  1018 					EIF
  1019 					lda #0
  1020 					sta trackn_audc+2
  1021 				qq1a
  1022 					txa
  1023 					ora #4
  1024 					tax
  1025 					EIF
  1026 				qq2
  1027 					IFT FEAT_FILTERG1L
  1028 					lda trackn_command+1
  1029 					bpl qq3
  1030 					lda trackn_audc+1
  1031 					and #$0f
  1032 					beq qq3
  1033 					lda trackn_audf+1
  1034 					clc
  1035 					adc trackn_filter+1
  1036 					sta trackn_audf+3
  1037 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1038 					lda trackn_audc+3
  1039 					and #$10
  1040 					bne qq2a
  1041 					EIF
  1042 					lda #0
  1043 					sta trackn_audc+3
  1044 				qq2a
  1045 					txa
  1046 					ora #2
  1047 					tax
  1048 					EIF
  1049 				qq3
  1050 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1051 					cpx v_audctl
  1052 					bne qq5
  1053 					EIF
  1054 					EIF
  1055 					IFT FEAT_BASS16
  1056 					IFT FEAT_BASS16G1L
  1057 					lda trackn_command+1
  1058 					and #$0e
  1059 					cmp #6
  1060 					bne qq4
  1061 					lda trackn_audc+1
  1062 					and #$0f
  1063 					beq qq4
  1064 					ldy trackn_outnote+1
  1065 					lda frqtabbasslo,y
  1066 					sta trackn_audf+0
  1067 					lda frqtabbasshi,y
  1068 					sta trackn_audf+1
  1069 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1070 					lda trackn_audc+0
  1071 					and #$10
  1072 					bne qq3a
  1073 					EIF
  1074 					lda #0
  1075 					sta trackn_audc+0
  1076 				qq3a
  1077 					txa
  1078 					ora #$50
  1079 					tax
  1080 					EIF
  1081 				qq4
  1082 					IFT FEAT_BASS16G3L
  1083 					lda trackn_command+3
  1084 					and #$0e
  1085 					cmp #6
  1086 					bne qq5
  1087 					lda trackn_audc+3
  1088 					and #$0f
  1089 					beq qq5
  1090 					ldy trackn_outnote+3
  1091 					lda frqtabbasslo,y
  1092 					sta trackn_audf+2
  1093 					lda frqtabbasshi,y
  1094 					sta trackn_audf+3
  1095 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1096 					lda trackn_audc+2
  1097 					and #$10
  1098 					bne qq4a
  1099 					EIF
  1100 					lda #0
  1101 					sta trackn_audc+2
  1102 				qq4a
  1103 					txa
  1104 					ora #$28
  1105 					tax
  1106 					EIF
  1107 					EIF
  1108 26E4			qq5
  1109 26E4 8E EB 26			stx v_audctl
  1110 					IFT TRACKS>4
  1111 					IFT FEAT_AUDCTLMANUALSET
  1112 					lda trackn_audctl+4
  1113 					ora trackn_audctl+5
  1114 					ora trackn_audctl+6
  1115 					ora trackn_audctl+7
  1116 					tax
  1117 					ELS
  1118 					ldx #0
  1119 					EIF
  1120 					stx v_audctl2
  1121 					IFT FEAT_FILTER
  1122 					IFT FEAT_FILTERG0R
  1123 					lda trackn_command+0+4
  1124 					bpl qs2
  1125 					lda trackn_audc+0+4
  1126 					and #$0f
  1127 					beq qs2
  1128 					lda trackn_audf+0+4
  1129 					clc
  1130 					adc trackn_filter+0+4
  1131 					sta trackn_audf+2+4
  1132 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1133 					lda trackn_audc+2+4
  1134 					and #$10
  1135 					bne qs1a
  1136 					EIF
  1137 					lda #0
  1138 					sta trackn_audc+2+4
  1139 				qs1a
  1140 					txa
  1141 					ora #4
  1142 					tax
  1143 					EIF
  1144 				qs2
  1145 					IFT FEAT_FILTERG1R
  1146 					lda trackn_command+1+4
  1147 					bpl qs3
  1148 					lda trackn_audc+1+4
  1149 					and #$0f
  1150 					beq qs3
  1151 					lda trackn_audf+1+4
  1152 					clc
  1153 					adc trackn_filter+1+4
  1154 					sta trackn_audf+3+4
  1155 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1156 					lda trackn_audc+3+4
  1157 					and #$10
  1158 					bne qs2a
  1159 					EIF
  1160 					lda #0
  1161 					sta trackn_audc+3+4
  1162 				qs2a
  1163 					txa
  1164 					ora #2
  1165 					tax
  1166 					EIF
  1167 				qs3
  1168 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1169 					cpx v_audctl2
  1170 					bne qs5
  1171 					EIF
  1172 					EIF
  1173 					IFT FEAT_BASS16
  1174 					IFT FEAT_BASS16G1R
  1175 					lda trackn_command+1+4
  1176 					and #$0e
  1177 					cmp #6
  1178 					bne qs4
  1179 					lda trackn_audc+1+4
  1180 					and #$0f
  1181 					beq qs4
  1182 					ldy trackn_outnote+1+4
  1183 					lda frqtabbasslo,y
  1184 					sta trackn_audf+0+4
  1185 					lda frqtabbasshi,y
  1186 					sta trackn_audf+1+4
  1187 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1188 					lda trackn_audc+0+4
  1189 					and #$10
  1190 					bne qs3a
  1191 					EIF
  1192 					lda #0
  1193 					sta trackn_audc+0+4
  1194 				qs3a
  1195 					txa
  1196 					ora #$50
  1197 					tax
  1198 					EIF
  1199 				qs4
  1200 					IFT FEAT_BASS16G3R
  1201 					lda trackn_command+3+4
  1202 					and #$0e
  1203 					cmp #6
  1204 					bne qs5
  1205 					lda trackn_audc+3+4
  1206 					and #$0f
  1207 					beq qs5
  1208 					ldy trackn_outnote+3+4
  1209 					lda frqtabbasslo,y
  1210 					sta trackn_audf+2+4
  1211 					lda frqtabbasshi,y
  1212 					sta trackn_audf+3+4
  1213 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1214 					lda trackn_audc+2+4
  1215 					and #$10
  1216 					bne qs4a
  1217 					EIF
  1218 					lda #0
  1219 					sta trackn_audc+2+4
  1220 				qs4a
  1221 					txa
  1222 					ora #$28
  1223 					tax
  1224 					EIF
  1225 					EIF
  1226 				qs5
  1227 					stx v_audctl2
  1228 					EIF
  1229 26E7			rmt_p5
  1230 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1231 					lda #$ff
  1232 				v_ainstrspeed equ *-1
  1233 					ELS
  1234 26E7 A9 01			lda #1
  1235 					EIF
  1236 26E9 60				rts
  1237 26EA			SetPokey
  1238 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1239 					ldy #$ff
  1240 				v_audctl2 equ *-1
  1241 					lda trackn_audf+0+4
  1242 					ldx trackn_audf+0
  1243 				xstastx01	sta $d210
  1244 					stx $d200
  1245 					lda trackn_audc+0+4
  1246 					ldx trackn_audc+0
  1247 				xstastx02	sta $d211
  1248 					stx $d201
  1249 					lda trackn_audf+1+4
  1250 					ldx trackn_audf+1
  1251 				xstastx03	sta $d212
  1252 					stx $d202
  1253 					lda trackn_audc+1+4
  1254 					ldx trackn_audc+1
  1255 				xstastx04	sta $d213
  1256 					stx $d203
  1257 					lda trackn_audf+2+4
  1258 					ldx trackn_audf+2
  1259 				xstastx05	sta $d214
  1260 					stx $d204
  1261 					lda trackn_audc+2+4
  1262 					ldx trackn_audc+2
  1263 				xstastx06	sta $d215
  1264 					stx $d205
  1265 					lda trackn_audf+3+4
  1266 					ldx trackn_audf+3
  1267 				xstastx07	sta $d216
  1268 					stx $d206
  1269 					lda trackn_audc+3+4
  1270 					ldx trackn_audc+3
  1271 				xstastx08	sta $d217
  1272 					stx $d207
  1273 					lda #$ff
  1274 				v_audctl equ *-1
  1275 				xstysta01	sty $d218
  1276 					sta $d208
  1277 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1278 26EA A0 FF			ldy #$ff
  1279 = 26EB			v_audctl equ *-1
  1280 26EC AD 38 21			lda trackn_audf+0
  1281 26EF AE 3C 21			ldx trackn_audc+0
  1282 26F2 8D 00 D2			sta $d200
  1283 26F5 8E 01 D2			stx $d201
  1284 26F8 AD 39 21			lda trackn_audf+1
  1285 26FB AE 3D 21			ldx trackn_audc+1
  1286 26FE 8D 02 D2			sta $d200+2
  1287 2701 8E 03 D2			stx $d201+2
  1288 2704 AD 3A 21			lda trackn_audf+2
  1289 2707 AE 3E 21			ldx trackn_audc+2
  1290 270A 8D 04 D2			sta $d200+4
  1291 270D 8E 05 D2			stx $d201+4
  1292 2710 AD 3B 21			lda trackn_audf+3
  1293 2713 AE 3F 21			ldx trackn_audc+3
  1294 2716 8D 06 D2			sta $d200+6
  1295 2719 8E 07 D2			stx $d201+6
  1296 271C 8C 08 D2			sty $d208
  1297 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1298 					ldy #$ff
  1299 				v_audctl equ *-1
  1300 					lda trackn_audf+0
  1301 					ldx trackn_audc+0
  1302 					sta $d200
  1303 					stx $d201
  1304 					sta $d210
  1305 					lda trackn_audf+1
  1306 					ldx trackn_audc+1
  1307 					sta $d210+2
  1308 					stx $d211+2
  1309 					lda trackn_audf+2
  1310 					ldx trackn_audc+2
  1311 					sta $d210+4
  1312 					stx $d211+4
  1313 					sta $d200+4
  1314 					lda trackn_audf+3
  1315 					ldx trackn_audc+3
  1316 					sta $d200+6
  1317 					stx $d201+6
  1318 					sta $d210+6
  1319 					sty $d218
  1320 					sty $d208
  1321 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1322 					ldy #$ff
  1323 				v_audctl equ *-1
  1324 					lda trackn_audf+0
  1325 					ldx trackn_audc+0
  1326 					sta $d200
  1327 					stx $d201
  1328 					lda trackn_audf+1
  1329 					ldx trackn_audc+1
  1330 					sta $d200+2
  1331 					stx $d201+2
  1332 					lda trackn_audf+2
  1333 					ldx trackn_audc+2
  1334 					sta $d210+4
  1335 					stx $d211+4
  1336 					sta $d200+4
  1337 					lda trackn_audf+3
  1338 					ldx trackn_audc+3
  1339 					sta $d210+6
  1340 					stx $d211+6
  1341 					sta $d200+6
  1342 					sty $d218
  1343 					sty $d208
  1344 					EIF
  1345 271F 60				rts
  1346 2720			RMTPLAYEREND
   326 						
   327 				;*****	End of code test
   328 				;
   329 2720			END_CODE_WARNING
   330 					.if END_CODE_WARNING > PmgAddress 
   331 						.error "Code overrides fixed data area!"
   332 					.endif
   333
   334 				;*****	Player missle graphics address
   335 				;
   336 2720				org PmgAddress
   337 A000-A7FF> 00 00 00 00 + :768	.byte %00000000	
   338 					
   339 				;*****	Missle starting address
   340 				;
   341 A300				org ms_area_1
   342 A300 00 00 00 00 00 00 + :1280 .byte %00000000
   343
   344 				;*****	Level Data definition
   345 				;
   346 A800					org DataAddress
   347 						
   348 3000					icl "Data/Levels.Asm"
Source: E:\_8BitProjects\Series\Scroller\Data\Levels.Asm
     1 				;
     2 				;****************************************************************************************************
     3 				;
     4 				;	Player Data
     5 				;
     6 				;		Each row of X and Y is associated with a level number (zero based).
     7 				;
     8 				;****************************************************************************************************
     9 				;
    10 3000			LevelsPlayer_X
    11 3000-36D8> 02					.byte $02
    12
    13 3001			LevelsPlayer_Y
    14 3001 0B						.byte $0B
    15 				;
    16 				;****************************************************************************************************
    17 				;
    18 				;	Level Data
    19 				;
    20 				;		Low (LSB) and High (MSB) addresses of the level data map
    21 				;
    22 				;****************************************************************************************************
    23 				;
    24 3002			LevelsAddr_LSB
    25 3002 04				.byte <LEVELS_01
    26
    27 3003			LevelsAddr_MSB
    28 3003 30				.byte >LEVELS_01
    29 				;
    30 				;****************************************************************************************************
    31 				;
    32 3004			LEVELS_01
    33 3004 1B 09 26 27 28 29 + 			.byte $1B,$09,$26,$27,$28,$29,$FD,$FE
    34 300C 01 0A 01 FD 04 0A + 			.byte $01,$0A,$01,$FD,$04,$0A,$01,$FD,$07,$0A,$01,$FD,$FE
    35 3019 0A 0B 01 FD 14 0B + 			.byte $0A,$0B,$01,$FD,$14,$0B,$01,$FD,$16,$0B,$01,$FD,$1D,$0B,$03,$FD,$1F,$0B,$03,$FD,$FE
    36 302E 00 0C 60 60 60 60 + 			.byte $00,$0C,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$0C,$0C,$01,$FD,$0E,$0C,$01,$FD,$26,$0C,$01,$FD,$28,$0C,$01,$FD,$2A,$0C,$01,$FD,$FE
    37 304E 08 0D 60 60 60 FD + 			.byte $08,$0D,$60,$60,$60,$FD,$14,$0D,$71,$71,$71,$FD,$1D,$0D,$61,$61,$61,$FD,$2D,$0D,$01,$FD,$FE
    38 3065 0B 0E 60 60 60 60 + 			.byte $0B,$0E,$60,$60,$60,$60,$FD,$1C,$0E,$60,$70,$70,$70,$60,$FD,$26,$0E,$60,$60,$60,$60,$60,$FD,$FE
    39 307D 26 0F 5E 5D 5D 5D + 			.byte $26,$0F,$5E,$5D,$5D,$5D,$5D,$60,$60,$60,$FD,$FE
    40 3089 26 10 65 23 24 25 + 			.byte $26,$10,$65,$23,$24,$25,$65,$66,$67,$5D,$FD,$36,$10,$01,$FD,$38,$10,$01,$FD,$3A,$10,$01,$FD,$FE
    41 30A1 00 11 60 60 60 60 + 			.byte $00,$11,$60,$60,$60,$60,$60,$60,$FD,$13,$11,$01,$FD,$15,$11,$01,$FD,$17,$11,$01,$FD,$28,$11,$95,$FD,$2D,$11,$5D,$FD,$FE
    42 30BF 28 12 95 FD 2D 12 + 			.byte $28,$12,$95,$FD,$2D,$12,$5D,$FD,$35,$12,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$FE
    43 30D3 1A 13 60 60 99 99 + 			.byte $1A,$13,$60,$60,$99,$99,$99,$99,$99,$60,$60,$FD,$28,$13,$95,$FD,$2B,$13,$01,$FD,$2D,$13,$5D,$FD,$35,$13,$10,$11,$12,$FD,$FE
    44 30F2 1A 14 5D 5D FD 21 + 			.byte $1A,$14,$5D,$5D,$FD,$21,$14,$5D,$5D,$FD,$28,$14,$95,$FD,$2A,$14,$01,$FD,$2D,$14,$5D,$FD,$35,$14,$10,$11,$12,$FD,$FE
    45 310F 17 15 60 60 60 5D + 			.byte $17,$15,$60,$60,$60,$5D,$5D,$FD,$21,$15,$5D,$5D,$FD,$28,$15,$95,$FD,$2B,$15,$01,$FD,$2D,$15,$5D,$FD,$35,$15,$10,$11,$12,$FD,$3B,$15,$01,$FD,$3D,$15,$01,$FD,$3F,$15,$01,$FD,$41,$15,$01,$FD,$43,$15,$01,$FD,$45,$15,$01,$FD,$47,$15,$01,$FD,$49,$15,$01,$FD,$4B,$15,$01,$FD,$4D,$15,$01,$FD,$4F,$15,$01,$FD,$FE
    46 315B 15 16 60 60 60 60 + 			.byte $15,$16,$60,$60,$60,$60,$60,$5D,$5D,$FD,$21,$16,$5D,$6B,$FD,$28,$16,$95,$FD,$2D,$16,$5D,$FD,$35,$16,$10,$11,$12,$FD,$FE
    47 3179 00 17 60 60 60 60 + 			.byte $00,$17,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$5C,$6A,$60,$60,$60,$60,$60,$5D,$5D,$60,$60,$60,$60,$20,$21,$22,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$FE
    48 31CF FF						.byte $FF
    49
   349 31D0					icl "ScrollerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ScrollerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;***** System Data members
    14 				;
    15 31D0 00			m_sfxData						.byte $00
    16 31D1 00			m_sfxValue						.byte $00
    17 31D2 00			m_sfxLength						.byte $00
    18
    19 31D3 00			m_floatAnimModV					.byte $00		; used for modulus operation on vertical animation
    20 31D4 00			m_floatAnimModH					.byte $00		; used for modulus operation on horizontal animation
    21 31D5 00			m_floatPlatformV				.byte $00		; is there vertical floating platforms
    22 31D6 00			m_floatPlatformH				.byte $00		; is there horizontal floating platforms
    23 31D7 00			m_floatPlatformIdx				.byte $00		; index to platform screen array
    24 31D8 00			m_floatPlatform_X				.byte $00
    25 31D9 00			m_floatPlatform_Y				.byte $00
    26
    27 31DA 00			m_verticalLaserOn				.byte $00		; is vertical laser available
    28 31DB 00			m_horizontalLaserOn				.byte $00		; is horizontal laser available
    29
    30 31DC 00			m_goldCounter 					.byte $00		; current gold counter
    31 31DD 00			m_healthCounter					.byte $00		; current health counter
    32 31DE 00			m_waterAvailable				.byte $00		; is water available
    33
    34
    35 31DF 00			m_disableGameTimer				.byte $00		; disable game flag
    36
    37 31E0 00			m_gameTimerSeconds				.byte $00		; seconds timer
    38 31E1 00			m_gameTimerMinutes				.byte $00		; minutes timer
    39
    40 31E2 00			m_gameTimerTSeconds				.byte $00		; seconds timer total
    41 31E3 00			m_gameTSFrameCounter			.byte $00		; frame counter total
    42
    43 31E4 04			m_animSeaTopTimer				.byte ANIM_SEA_TOP_FRAME_TIME
    44
    45 31E5 00			m_firstCoinAnimIndex			.byte $00
    46 31E6 00			m_emptyCoinAnimIndex			.byte $00
    47 31E7 00			m_currentCoinAnimations			.byte $00
    48
    49 31E8 01			m_animHLaserTimer				.byte $01
    50 31E9 00			m_animHLaserCurrentFrame		.byte $00
    51
    52 31EA 01			m_animLaserTimer				.byte $01
    53 31EB 00			m_animLaserCurrentFrame			.byte $00
    54
    55 31EC 00 00		m_screenBaseAddress1		.word $00
    56 31EE 00 00		m_screenBaseAddress2		.word $00
    57
    58 31F0 00			m_windowTargetPosX_H2		.byte $00
    59 31F1 00			m_windowTargetPosX_H1		.byte $00
    60 31F2 00			m_windowTargetPosY_H2		.byte $00
    61 31F3 00			m_windowTargetPosY_H1		.byte $00
    62
    63 31F4 00			m_windowTargetDeltaX_H2		.byte $00
    64 31F5 00			m_windowTargetDeltaX_H1		.byte $00
    65 31F6 00			m_windowTargetDeltaY_H2		.byte $00
    66 31F7 00			m_windowTargetDeltaY_H1		.byte $00
    67
    68 31F8 00			m_enemyExplosionLevelLeftX_H2	.byte $00
    69 31F9 00			m_enemyExplosionLevelLeftX_H1	.byte $00
    70
    71 31FA 00			m_enemyExplosionLevelTopY_H2	.byte $00
    72 31FB 00			m_enemyExplosionLevelTopY_H1	.byte $00
    73 31FC 00			m_enemyExplosionLevelTopY_L1	.byte $00
    74
    75 31FD 00			m_enemyExplosionScreenLeftX_H1	.byte $00
    76 31FE 00			m_enemyExplosionScreenTopY_H1	.byte $00
    77
    78 31FF 00			m_enemyExplosionStep			.byte $00
    79
    80 3200 00			m_enemyExplosionStepIndex		.byte $00
    81 3201 00			m_enemyCharPosX					.byte $00
    82 3202 00			m_enemyCharPosY					.byte $00
    83
    84 3203 00			m_numEnemyExplosions			.byte $00
    85 3204 00			m_hitEnemySaveX 				.byte $00
    86
    87 3205 00			m_totalEnemies 					.byte $00
    88 3206 00			m_activeEnemies 				.byte $00
    89
    90 3207 00			m_searchEnemyChar 				.byte $00
    91 3208 00			m_defEnemyLife 					.byte $00
    92 3209 00			m_numberOfValidRows 			.byte $00
    93
    94 320A 00			m_tempByte 						.byte $00
    95
    96 320B 00			m_lastEnemyIndexUpdated 		.byte $00
    97
    98 320C 00			m_enemyMissilesActive 			.byte $00
    99
   100 320D 00			m_enemyShootDirection 			.byte $00
   101
   102 320E 00			m_enemyShotLevelLeftX_H1 		.byte $00
   103 320F 00			m_enemyShotLevelLeftX_H2 		.byte $00
   104 3210 00			m_enemyShotLevelTopY_H1 		.byte $00
   105 3211 00			m_enemyShotLevelTopY_H2 		.byte $00
   106
   107 3212 00			m_currRow						.byte $00
   108 3213 00			m_currCol						.byte $00
   109 3214 00			m_scrYCount						.byte $00
   110 3215 00			m_datYCount						.byte $00
   111
   112 3216 00			m_pixelPositionX_H2			.byte 0
   113 3217 00			m_pixelPositionX_H1			.byte 0
   114 3218 00			m_pixelPositionY_H2			.byte 0
   115 3219 00			m_pixelPositionY_H1			.byte 0
   116
   117 321A 00			m_charPositionX				.byte 0
   118 321B 00			m_charPositionY				.byte 0
   119
   120 321C 00			m_lineAddressLSB			.byte 0
   121 321D 00			m_lineAddressMSB			.byte 0
   122
   123 321E 00			m_charRaw					.byte 0
   124 321F 00			m_charDef					.byte 0
   125
   126 3220 00			m_screenDelta_H2			.byte 0
   127 3221 00			m_screenDelta_H1			.byte 0
   128
   129 3222 00			m_hldA							.byte $00
   130 3223 00			m_hldY							.byte $00
   131 3224 00			m_hldX							.byte $00
   132 3225 00			m_revX							.byte $00
   133 3226 00			m_revIndex						.byte $00
   134 3227 00			m_revHeight						.byte $00
   135 3228 00			m_revOffset						.byte $00
   136 3229 00			m_animCount						.byte $00
   137 322A 00			m_animFrame						.byte $00
   138 322B 00			m_animIndex        				.byte $00
   139 322C 00			m_animHeight					.byte $00
   140 322D 00			m_animOffset					.byte $00	
   141
   142 322E 00			m_leftTopChar					.byte $00
   143 322F 00			m_rightTopChar					.byte $00
   144 3230 00			m_charBuffer_H2					.byte $00
   145 3231 00			m_leftBottomChar				.byte $00
   146 3232 00			m_rightBottomChar				.byte $00
   147 3233 00			m_middleBottomChar				.byte $00
   148 3234 00			m_bottomPosOffsetX				.byte $00
   149 3235 00			m_bottomPosOffsetY				.byte $00
   150 3236 00			m_playerExplosionStep			.byte $00
   151 3237 00			m_middleBottomCharPosX			.byte $00
   152 3238 00			m_waterPlayerDirectionFlag		.byte $00
   153 3239 00			m_playerOnWaterSurfaceFlag		.byte $00
   154 323A 00			m_playerExplosionScreenTopY_H1	.byte $00
   155 323B 00			m_playerExplosionScreenTopY_L1	.byte $00
   156
   157 323C 00			m_debugSaveX					.byte 0
   158
   159 323D 00 00		m_currentLineAddress			.word $0000
   160
   161 323F 00 00 00 00 00 00 + TabLevelLineAddressLSB			:256 .byte $00
   162 333F 00 00 00 00 00 00 + TabLevelLineAddressMSB			:256 .byte $00
   163
   164 				;
   165 				;**************************************************************************************************
   166 				; Character tile type definition
   167 				;
   168 				; 	Type definition: low 4 bits (0-15 value)
   169 				;		- 0: empty normal space (with gravity info?)			CT_BLANK			= 0					
   170
   171 				;		- 1: block (with collision info, RLDU)					CT_BLOCK			= 1
   172 				;		- 6: floating platform									CT_FLOATPLATFORM	= 1	
   173
   174 				;		- 2: collectable (with value info?)						CT_COLLECTABLE		= 2
   175 				;		- 3: danger (with energy info?)							CT_DANGER			= 3
   176 				;		- 4: ladder, climbable (with directions info?)			CT_LADDER			= 4
   177 				;		- 5: water (with density info? currents?)				CT_WATER			= 5
   178 				;		- 7: health 											CT_HEALTH			= 6
   179 				;		- 8: Vertical Lasers									CT_VLASER			= 7
   180 				;		- 9: Horizontal Lasers									CT_HLASER			= 8
   181 				;
   182 				; 	External level definitions:
   183 				; 		- blocks ON/OFF
   184 				; 		- moving blocks
   185 				; 		- switches, triggers and traps
   186 				; 		- enemies and generators
   187 				; 		- dangers ON/OFF
   188 				; 		- moving dangers
   189 				; 		- interactions zones
   190 				; 		- text messages
   191 				;
   192 				;**************************************************************************************************
   193 				;
   194 343F			TabCharDefinition
   195 343F 00				.byte %00000000+CT_BLANK								; blank								[00]
   196 3440 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[01]
   197 3441 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[02]				
   198 3442 06				.byte %00000000+CT_HEALTH								; collectable 1						[03]
   199 3443 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[04]
   200 3444 03				.byte %00000000+CT_DANGER								; blue spikes						[05]
   201 3445 03				.byte %00000000+CT_DANGER								; blue spikes						[06]
   202 3446 05				.byte %00000000+CT_WATER								; blank								[07]
   203 3447 00				.byte %00000000+CT_BLANK								; blank								[08]
   204 3448 00				.byte %00000000+CT_BLANK								; blank								[09]
   205 3449 00				.byte %00000000+CT_BLANK								; blank								[0A]
   206 344A 00				.byte %00000000+CT_BLANK								; blank								[0B]
   207 344B 00				.byte %00000000+CT_BLANK								; blank								[0C]
   208 344C 00				.byte %00000000+CT_BLANK								; blank								[0D]
   209 344D 00				.byte %00000000+CT_BLANK								; blank								[0E]
   210 344E 00				.byte %00000000+CT_BLANK								; blank								[0F]
   211 344F 04				.byte %00000000+CT_LADDER								; ladder							[10]
   212 3450 04				.byte %00000000+CT_LADDER								; ladder							[11]
   213 3451 04				.byte %00000000+CT_LADDER								; ladder							[12]
   214 3452 03				.byte %00000000+CT_DANGER								; blue spikes						[13]
   215 3453 F8				.byte %11110000+CT_VLASER								; vertical dither 1					[14]				
   216 3454 F8				.byte %11110000+CT_VLASER								; vertical dither 2					[15]
   217 3455 F8				.byte %11110000+CT_VLASER								; vertical dither 3					[16]
   218 3456 FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[17]
   219 3457 FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[18]
   220 3458 FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[19]
   221 3459 03				.byte %00000000+CT_DANGER								; spikes							[1A]
   222 345A 03				.byte %00000000+CT_DANGER								; spikes							[1B]
   223 345B 03				.byte %00000000+CT_DANGER								; spikes							[1C]
   224 345C 03				.byte %00000000+CT_DANGER								; spikes							[1D]
   225 345D 03				.byte %00000000+CT_DANGER								; spikes							[1E]
   226 345E 03				.byte %00000000+CT_DANGER								; spikes							[1F]
   227 345F F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[20]
   228 3460 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[21]
   229 3461 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[22]
   230 3462 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[23]
   231 3463 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[24]
   232 3464 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[25]
   233 3465 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[26]
   234 3466 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[27]
   235 3467 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[28]
   236 3468 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[29]
   237 3469 00				.byte %00000000+CT_BLANK								; blank								[2A]
   238 346A 00				.byte %00000000+CT_BLANK								; blank								[2B]
   239 346B 00				.byte %00000000+CT_BLANK								; blank								[2C]
   240 346C 00				.byte %00000000+CT_BLANK								; blank								[2D]
   241 346D 00				.byte %00000000+CT_BLANK								; blank								[2E]
   242 346E 00				.byte %00000000+CT_BLANK								; blank								[2F]
   243 346F 00				.byte %00000000+CT_BLANK								; blank								[30]
   244 3470 00				.byte %00000000+CT_BLANK								; blank								[31]
   245 3471 00				.byte %00000000+CT_BLANK								; blank								[32]
   246 3472 00				.byte %00000000+CT_BLANK								; blank								[33]
   247 3473 00				.byte %00000000+CT_BLANK								; blank								[34]
   248 3474 00				.byte %00000000+CT_BLANK								; blank								[35]
   249 3475 00				.byte %00000000+CT_BLANK								; blank								[36]
   250 3476 00				.byte %00000000+CT_BLANK								; blank								[37]
   251 3477 00				.byte %00000000+CT_BLANK								; blank								[38]
   252 3478 00				.byte %00000000+CT_BLANK								; blank								[39]
   253 3479 03				.byte %00000000+CT_DANGER								; spikes							[3A]
   254 347A 03				.byte %00000000+CT_DANGER								; spikes							[3B]
   255 347B 00				.byte %00000000+CT_BLANK								; blank								[3C]
   256 347C 00				.byte %00000000+CT_BLANK								; blank								[3D]
   257 347D 00				.byte %00000000+CT_BLANK								; blank								[3E]
   258 347E 00				.byte %00000000+CT_BLANK								; blank								[3F]
   259 347F 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [40]
   260 3480 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [41]
   261 3481 00				.byte %00000000+CT_BLANK								; blank								[42]
   262 3482 00				.byte %00000000+CT_BLANK								; blank								[43]
   263 3483 00				.byte %00000000+CT_BLANK								; blank								[44]
   264 3484 00				.byte %00000000+CT_BLANK								; blank								[45]
   265 3485 05				.byte %00000000+CT_WATER								; blank								[46]
   266 3486 05				.byte %00000000+CT_WATER								; blank								[47]
   267 3487 00				.byte %00000000+CT_BLANK								; blank								[48]
   268 3488 00				.byte %00000000+CT_BLANK								; blank								[49]
   269 3489 00				.byte %00000000+CT_BLANK								; blank								[4A]
   270 348A 00				.byte %00000000+CT_BLANK								; blank								[4B]
   271 348B F1				.byte %11110000+CT_BLOCK								; solid platform					[4C]
   272 348C F1				.byte %11110000+CT_BLOCK								; solid platform					[4D]
   273 348D F1				.byte %11110000+CT_BLOCK								; solid platform					[4E]
   274 348E F1				.byte %11110000+CT_BLOCK								; solid platform					[4F]
   275 348F F1				.byte %11110000+CT_BLOCK								; solid platform					[50]
   276 3490 F1				.byte %11110000+CT_BLOCK								; solid platform					[51]
   277 3491 00				.byte %00000000+CT_BLANK								; blank								[52]   
   278 3492 00				.byte %00000000+CT_BLANK								; blank								[53]   
   279 3493 00				.byte %00000000+CT_BLANK								; blank								[54]   
   280 3494 00				.byte %00000000+CT_BLANK								; blank								[55]   
   281 3495 00				.byte %00000000+CT_BLANK								; blank								[56]   
   282 3496 00				.byte %00000000+CT_BLANK								; blank								[57]   
   283 3497 00				.byte %00000000+CT_BLANK								; blank								[58]   
   284 3498 00				.byte %00000000+CT_BLANK								; blank								[59]   
   285 3499 03				.byte %00000000+CT_DANGER								; spikes							[5A]   
   286 349A 03				.byte %00000000+CT_DANGER								; spikes							[5B]   
   287 349B F1				.byte %11110000+CT_BLOCK								; solid platform					[5C]   
   288 349C F1				.byte %11110000+CT_BLOCK								; solid platform					[5D]   
   289 349D F1				.byte %11110000+CT_BLOCK								; solid platform					[5E]   
   290 349E 00				.byte %00000000+CT_BLANK								; blank								[5F]   
   291 349F F1				.byte %11110000+CT_BLOCK								; solid platform					[60]   
   292 34A0 F1				.byte %11110000+CT_BLOCK								; solid platform					[61]   
   293 34A1 F1				.byte %11110000+CT_BLOCK								; solid platform					[62]   
   294 34A2 F1				.byte %11110000+CT_BLOCK								; solid platform					[63]   
   295 34A3 F1				.byte %11110000+CT_BLOCK								; solid platform					[64]   
   296 34A4 F1				.byte %11110000+CT_BLOCK								; solid platform					[65]   
   297 34A5 F1				.byte %11110000+CT_BLOCK								; solid platform					[66]   
   298 34A6 F1				.byte %11110000+CT_BLOCK								; solid platform					[67]   
   299 34A7 F1				.byte %11110000+CT_BLOCK								; solid platform					[68]   
   300 34A8 F1				.byte %11110000+CT_BLOCK								; solid platform					[69]   
   301 34A9 F1				.byte %11110000+CT_BLOCK								; solid platform					[6A]   
   302 34AA F1				.byte %11110000+CT_BLOCK								; solid platform					[6B]   
   303 34AB F1				.byte %11110000+CT_BLOCK								; solid platform					[6C]   
   304 34AC F1				.byte %11110000+CT_BLOCK								; solid platform					[6D]   
   305 34AD F1				.byte %11110000+CT_BLOCK								; solid platform					[6E]   
   306 34AE F1				.byte %11110000+CT_BLOCK								; solid platform					[6F]   
   307 34AF F1				.byte %11110000+CT_BLOCK								; solid platform					[70]   
   308 34B0 F1				.byte %11110000+CT_BLOCK								; solid platform					[71]   
   309 34B1 F1				.byte %11110000+CT_BLOCK								; solid platform					[72]   
   310 34B2 F1				.byte %11110000+CT_BLOCK								; solid platform					[73]   
   311 34B3 F1				.byte %11110000+CT_BLOCK								; solid platform					[74]   
   312 34B4 00				.byte %00000000+CT_BLANK								; blank								[75]   
   313 34B5 00				.byte %00000000+CT_BLANK								; blank								[76]   
   314 34B6 00				.byte %00000000+CT_BLANK								; blank								[77]   
   315 34B7 00				.byte %00000000+CT_BLANK								; blank								[78]   
   316 34B8 00				.byte %00000000+CT_BLANK								; blank								[79]   
   317 34B9 00				.byte %00000000+CT_BLANK								; blank								[7A]   
   318 34BA 00				.byte %00000000+CT_BLANK								; blank								[7B]   
   319 34BB 00				.byte %00000000+CT_BLANK								; blank								[7C]   
   320 34BC 00				.byte %00000000+CT_BLANK								; blank								[7D]   
   321 34BD 00				.byte %00000000+CT_BLANK								; blank								[7E]   
   322 34BE 00				.byte %00000000+CT_BLANK								; blank								[7F]   
   323 				;
   324 				;**************************************************************************************************
   325 				; second half, inverse characters, fifth color (red, danger)
   326 				;**************************************************************************************************
   327 				;
   328 34BF				org TabCharDefinition+$80
   329
   330 34BF 00				.byte %00000000+CT_BLANK								; blank								[80]
   331 34C0 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[81]
   332 34C1 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[82]				
   333 34C2 06				.byte %00000000+CT_HEALTH								; collectable 1						[83]
   334 34C3 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[84]
   335 34C4 03				.byte %00000000+CT_DANGER								; blue spikes						[85]
   336 34C5 03				.byte %00000000+CT_DANGER								; blue spikes						[86]
   337 34C6 05				.byte %00000000+CT_WATER								; blank								[87]
   338 34C7 00				.byte %00000000+CT_BLANK								; blank								[88]
   339 34C8 00				.byte %00000000+CT_BLANK								; blank								[89]
   340 34C9 00				.byte %00000000+CT_BLANK								; blank								[8A]
   341 34CA 00				.byte %00000000+CT_BLANK								; blank								[8B]
   342 34CB 00				.byte %00000000+CT_BLANK								; blank								[8C]
   343 34CC 00				.byte %00000000+CT_BLANK								; blank								[8D]
   344 34CD 00				.byte %00000000+CT_BLANK								; blank								[8E]
   345 34CE 00				.byte %00000000+CT_BLANK								; blank								[8F]
   346 34CF 04				.byte %00000000+CT_LADDER								; ladder							[90]
   347 34D0 04				.byte %00000000+CT_LADDER								; ladder							[91]
   348 34D1 04				.byte %00000000+CT_LADDER								; ladder							[92]
   349 34D2 03				.byte %00000000+CT_DANGER								; blue spikes						[93]
   350 34D3 F8				.byte %11110000+CT_VLASER								; vertical dither 1					[94]				
   351 34D4 F8				.byte %11110000+CT_VLASER								; vertical dither 2					[95]
   352 34D5 F8				.byte %11110000+CT_VLASER								; vertical dither 3					[96]
   353 34D6 FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[97]
   354 34D7 FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[98]
   355 34D8 FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[99]
   356 34D9 03				.byte %00000000+CT_DANGER								; spikes							[9A]
   357 34DA 03				.byte %00000000+CT_DANGER								; spikes							[9B]
   358 34DB 03				.byte %00000000+CT_DANGER								; spikes							[9C]
   359 34DC 03				.byte %00000000+CT_DANGER								; spikes							[9D]
   360 34DD 03				.byte %00000000+CT_DANGER								; spikes							[9E]
   361 34DE 03				.byte %00000000+CT_DANGER								; spikes							[9F]
   362 34DF F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[A0]
   363 34E0 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[A1]
   364 34E1 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[A2]
   365 34E2 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[A3]
   366 34E3 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[A4]
   367 34E4 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[A5]
   368 34E5 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A6]
   369 34E6 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A7]
   370 34E7 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A8]
   371 34E8 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A9]
   372 34E9 00				.byte %00000000+CT_BLANK								; blank								[AA]
   373 34EA 00				.byte %00000000+CT_BLANK								; blank								[AB]
   374 34EB 00				.byte %00000000+CT_BLANK								; blank								[AC]
   375 34EC 00				.byte %00000000+CT_BLANK								; blank								[AD]
   376 34ED 00				.byte %00000000+CT_BLANK								; blank								[AE]
   377 34EE 00				.byte %00000000+CT_BLANK								; blank								[AF]
   378 34EF 00				.byte %00000000+CT_BLANK								; blank								[B0]
   379 34F0 00				.byte %00000000+CT_BLANK								; blank								[B1]
   380 34F1 00				.byte %00000000+CT_BLANK								; blank								[B2]
   381 34F2 00				.byte %00000000+CT_BLANK								; blank								[B3]
   382 34F3 00				.byte %00000000+CT_BLANK								; blank								[B4]
   383 34F4 00				.byte %00000000+CT_BLANK								; blank								[B5]
   384 34F5 00				.byte %00000000+CT_BLANK								; blank								[B6]
   385 34F6 00				.byte %00000000+CT_BLANK								; blank								[B7]
   386 34F7 00				.byte %00000000+CT_BLANK								; blank								[B8]
   387 34F8 00				.byte %00000000+CT_BLANK								; blank								[B9]
   388 34F9 03				.byte %00000000+CT_DANGER								; spikes							[BA]
   389 34FA 03				.byte %00000000+CT_DANGER								; spikes							[BB]
   390 34FB 00				.byte %00000000+CT_BLANK								; blank								[BC]
   391 34FC 00				.byte %00000000+CT_BLANK								; blank								[BD]
   392 34FD 00				.byte %00000000+CT_BLANK								; blank								[BE]
   393 34FE 00				.byte %00000000+CT_BLANK								; blank								[BF]
   394 34FF 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C0]
   395 3500 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C1]
   396 3501 00				.byte %00000000+CT_BLANK								; blank								[C2]
   397 3502 00				.byte %00000000+CT_BLANK								; blank								[C3]
   398 3503 00				.byte %00000000+CT_BLANK								; blank								[C4]
   399 3504 00				.byte %00000000+CT_BLANK								; blank								[C5]
   400 3505 05				.byte %00000000+CT_WATER								; blank								[C6]
   401 3506 05				.byte %00000000+CT_WATER								; blank								[C7]
   402 3507 00				.byte %00000000+CT_BLANK								; blank								[C8]
   403 3508 00				.byte %00000000+CT_BLANK								; blank								[C9]
   404 3509 00				.byte %00000000+CT_BLANK								; blank								[CA]
   405 350A 00				.byte %00000000+CT_BLANK								; blank								[CB]
   406 350B F1				.byte %11110000+CT_BLOCK								; solid platform					[CC]
   407 350C F1				.byte %11110000+CT_BLOCK								; solid platform					[CD]
   408 350D F1				.byte %11110000+CT_BLOCK								; solid platform					[CE]
   409 350E F1				.byte %11110000+CT_BLOCK								; solid platform					[CF]
   410 350F F1				.byte %11110000+CT_BLOCK								; solid platform					[D0]
   411 3510 F1				.byte %11110000+CT_BLOCK								; solid platform					[D1]
   412 3511 00				.byte %00000000+CT_BLANK								; blank								[D2]   
   413 3512 00				.byte %00000000+CT_BLANK								; blank								[D3]   
   414 3513 00				.byte %00000000+CT_BLANK								; blank								[D4]   
   415 3514 00				.byte %00000000+CT_BLANK								; blank								[D5]   
   416 3515 00				.byte %00000000+CT_BLANK								; blank								[D6]   
   417 3516 00				.byte %00000000+CT_BLANK								; blank								[D7]   
   418 3517 00				.byte %00000000+CT_BLANK								; blank								[D8]   
   419 3518 00				.byte %00000000+CT_BLANK								; blank								[D9]   
   420 3519 03				.byte %00000000+CT_DANGER								; spikes							[DA]   
   421 351A 03				.byte %00000000+CT_DANGER								; spikes							[DB]   
   422 351B F1				.byte %11110000+CT_BLOCK								; solid platform					[DC]   
   423 351C F1				.byte %11110000+CT_BLOCK								; solid platform					[DD]   
   424 351D F1				.byte %11110000+CT_BLOCK								; solid platform					[DE]   
   425 351E 00				.byte %00000000+CT_BLANK								; blank								[DF]   
   426 351F F1				.byte %11110000+CT_BLOCK								; solid platform					[E0]   
   427 3520 F1				.byte %11110000+CT_BLOCK								; solid platform					[E1]   
   428 3521 F1				.byte %11110000+CT_BLOCK								; solid platform					[E2]   
   429 3522 F1				.byte %11110000+CT_BLOCK								; solid platform					[E3]   
   430 3523 F1				.byte %11110000+CT_BLOCK								; solid platform					[E4]   
   431 3524 F1				.byte %11110000+CT_BLOCK								; solid platform					[E5]   
   432 3525 F1				.byte %11110000+CT_BLOCK								; solid platform					[E6]   
   433 3526 F1				.byte %11110000+CT_BLOCK								; solid platform					[E7]   
   434 3527 F1				.byte %11110000+CT_BLOCK								; solid platform					[E8]   
   435 3528 F1				.byte %11110000+CT_BLOCK								; solid platform					[E9]   
   436 3529 F1				.byte %11110000+CT_BLOCK								; solid platform					[EA]   
   437 352A F1				.byte %11110000+CT_BLOCK								; solid platform					[EB]   
   438 352B F1				.byte %11110000+CT_BLOCK								; solid platform					[EC]   
   439 352C F1				.byte %11110000+CT_BLOCK								; solid platform					[ED]   
   440 352D F1				.byte %11110000+CT_BLOCK								; solid platform					[EE]   
   441 352E F1				.byte %11110000+CT_BLOCK								; solid platform					[EF]   
   442 352F F1				.byte %11110000+CT_BLOCK								; solid platform					[F0]   
   443 3530 F1				.byte %11110000+CT_BLOCK								; solid platform					[F1]   
   444 3531 F1				.byte %11110000+CT_BLOCK								; solid platform					[F2]   
   445 3532 F1				.byte %11110000+CT_BLOCK								; solid platform					[F3]   
   446 3533 F1				.byte %11110000+CT_BLOCK								; solid platform					[F4]   
   447 3534 00				.byte %00000000+CT_BLANK								; blank								[F5]   
   448 3535 00				.byte %00000000+CT_BLANK								; blank								[F6]   
   449 3536 00				.byte %00000000+CT_BLANK								; blank								[F7]   
   450 3537 00				.byte %00000000+CT_BLANK								; blank								[F8]   
   451 3538 00				.byte %00000000+CT_BLANK								; blank								[F9]   
   452 3539 00				.byte %00000000+CT_BLANK								; blank								[FA]   
   453 353A 00				.byte %00000000+CT_BLANK								; blank								[FB]   
   454 353B 00				.byte %00000000+CT_BLANK								; blank								[FC]   
   455 353C 00				.byte %00000000+CT_BLANK								; blank								[FD]   
   456 353D 00				.byte %00000000+CT_BLANK								; blank								[FE]   
   457 353E 00				.byte %00000000+CT_BLANK								; blank								[FF]
   458
   459 				;*****	Game Dislplay List Definition
   460 				;
   461 353F			GameDL 
   462 353F 70					.byte DL_BLANK_8
   463 3540 70					.byte DL_BLANK_8
   464 3541 F0					.byte DL_BLANK_8 + DL_DLI
   465
   466 3542			GameDL_LMS1
   467 						
   468 = B000					?dldata = GameMemoryAddress
   469 						.rept 24
   470 							.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 							.BYTE <?DLDATA, >?DLDATA
   472 							?DLDATA += LEVEL_CHAR_SIZE_X
   473 						.ENDR
   473 						.endr
Source: REPT
   470 3542 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3543 00 B0					.BYTE <?DLDATA, >?DLDATA
   470 = B052						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3545 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3546 52 B0					.BYTE <?DLDATA, >?DLDATA
   470 = B0A4						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3548 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3549 A4 B0					.BYTE <?DLDATA, >?DLDATA
   470 = B0F6						?DLDATA += LEVEL_CHAR_SIZE_X
   470 354B 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 354C F6 B0					.BYTE <?DLDATA, >?DLDATA
   470 = B148						?DLDATA += LEVEL_CHAR_SIZE_X
   470 354E 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 354F 48 B1					.BYTE <?DLDATA, >?DLDATA
   470 = B19A						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3551 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3552 9A B1					.BYTE <?DLDATA, >?DLDATA
   470 = B1EC						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3554 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3555 EC B1					.BYTE <?DLDATA, >?DLDATA
   470 = B23E						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3557 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3558 3E B2					.BYTE <?DLDATA, >?DLDATA
   470 = B290						?DLDATA += LEVEL_CHAR_SIZE_X
   470 355A 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 355B 90 B2					.BYTE <?DLDATA, >?DLDATA
   470 = B2E2						?DLDATA += LEVEL_CHAR_SIZE_X
   470 355D 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 355E E2 B2					.BYTE <?DLDATA, >?DLDATA
   470 = B334						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3560 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3561 34 B3					.BYTE <?DLDATA, >?DLDATA
   470 = B386						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3563 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3564 86 B3					.BYTE <?DLDATA, >?DLDATA
   470 = B3D8						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3566 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3567 D8 B3					.BYTE <?DLDATA, >?DLDATA
   470 = B42A						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3569 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 356A 2A B4					.BYTE <?DLDATA, >?DLDATA
   470 = B47C						?DLDATA += LEVEL_CHAR_SIZE_X
   470 356C 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 356D 7C B4					.BYTE <?DLDATA, >?DLDATA
   470 = B4CE						?DLDATA += LEVEL_CHAR_SIZE_X
   470 356F 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3570 CE B4					.BYTE <?DLDATA, >?DLDATA
   470 = B520						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3572 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3573 20 B5					.BYTE <?DLDATA, >?DLDATA
   470 = B572						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3575 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3576 72 B5					.BYTE <?DLDATA, >?DLDATA
   470 = B5C4						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3578 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3579 C4 B5					.BYTE <?DLDATA, >?DLDATA
   470 = B616						?DLDATA += LEVEL_CHAR_SIZE_X
   470 357B 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 357C 16 B6					.BYTE <?DLDATA, >?DLDATA
   470 = B668						?DLDATA += LEVEL_CHAR_SIZE_X
   470 357E 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 357F 68 B6					.BYTE <?DLDATA, >?DLDATA
   470 = B6BA						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3581 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3582 BA B6					.BYTE <?DLDATA, >?DLDATA
   470 = B70C						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3584 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3585 0C B7					.BYTE <?DLDATA, >?DLDATA
   470 = B75E						?DLDATA += LEVEL_CHAR_SIZE_X
   470 3587 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 3588 5E B7					.BYTE <?DLDATA, >?DLDATA
   470 = B7B0						?DLDATA += LEVEL_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   474 					
   475 358A 54					.byte DL_TEXT_4 + DL_LMS + DL_HSCROLL
   476 358B B0 B7				.byte <?dldata, >?dldata
   477 					
   478 358D A0					.byte DL_BLANK_3 + DL_DLI
   479
   480 = 06B0					?dldata = HudMemoryAddr
   481 						.rept 2
   482 							.BYTE DL_TEXT_2 + DL_LMS
   483 							.BYTE <?DLDATA, >?DLDATA
   484 							?DLDATA += WINDOW_CHAR_SIZE_X
   485 						.ENDR	
   485 						.endr	
Source: REPT
   482 358E 42						.BYTE DL_TEXT_2 + DL_LMS
   482 358F B0 06					.BYTE <?DLDATA, >?DLDATA
   482 = 06D8						?DLDATA += WINDOW_CHAR_SIZE_X
   482 3591 42						.BYTE DL_TEXT_2 + DL_LMS
   482 3592 D8 06					.BYTE <?DLDATA, >?DLDATA
   482 = 0700						?DLDATA += WINDOW_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   486 					
   487 3594 41 00 0E				.byte DL_JUMP_VB, <GameDspLstAddr, >GameDspLstAddr
   488
   489 = 0058			GameDLEnd = * - GameDL
   490 							
   350 3597					icl "PlayerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 3597			.array TabAnimationMap [12] .byte
    14  [0000] 00 15 01			$00, $15, $01 			
    15  [0003] 15 15 01			$15, $15, $01
    16  [0006] 2A 15 01			$2A, $15, $01		
    17  [0009] 3F 15 01			$3F, $15, $01	 
    18 				.enda
    19
    20 35A3			.array TabAnimationMiscMap [10] .byte
    21
    22  [0000] A9 36 18 0C 08		<BONUS100, >BONUS100, BONUS100END, $0C, $08
    23  [0005] C1 36 18 0C 08		<CLEARBONUS, >CLEARBONUS, CLEARBONUSEND, $0C, $08
    24 					
    25 				.enda
    26
    27 35AD			TabPlayerShape_01								
    28 					
    29 					; Standing 0
    30 35AD 18				.byte 	%00011000							; ...##...
    31 35AE 3C				.byte 	%00111100                           ; ..####..
    32 35AF FF				.byte 	%11111111                           ; ########
    33 35B0 00				.byte 	%00000000                           ; ........
    34 35B1 00				.byte 	%00000000                           ; ........
    35 35B2 00				.byte 	%00000000                           ; ........
    36 35B3 00				.byte 	%00000000                           ; ........
    37 35B4 00				.byte 	%00000000                           ; ........
    38 35B5 00				.byte 	%00000000                           ; ........
    39 35B6 18				.byte 	%00011000                           ; ...##...
    40 35B7 18				.byte 	%00011000                           ; ...##...
    41 35B8 3C				.byte 	%00111100                           ; ..####..
    42 35B9 6E				.byte 	%01101110                           ; .##.###.
    43 35BA 00				.byte 	%00000000                           ; ........
    44 35BB 00				.byte 	%00000000                           ; ........
    45 35BC 6E				.byte 	%01101110                           ; .## ###.
    46 35BD 76				.byte 	%01110110                           ; .######.
    47 35BE 3C				.byte 	%00111100                           ; ..####..
    48 35BF 00				.byte 	%00000000                           ; ........
    49 35C0 00				.byte 	%00000000                           ; ........
    50 35C1 00				.byte 	%00000000                           ; ........
    51 						
    52 					; Walking 0
    53 35C2 18				.byte 	%00011000							; ...##...
    54 35C3 3C				.byte	%00111100							; ..####..
    55 35C4 FF				.byte	%11111111							; ########
    56 35C5 00				.byte	%00000000							; ........
    57 35C6 00				.byte	%00000000							; ........
    58 35C7 00				.byte 	%00000000							; ........							
    59 35C8 00				.byte 	%00000000							; ........
    60 35C9 00				.byte 	%00000000							; ........		
    61 35CA 00				.byte 	%00000000							; ........
    62 35CB 18				.byte 	%00011000							; ...##...
    63 35CC 18				.byte 	%00011000							; ...##...
    64 35CD 3C				.byte 	%00111100							; ..####..
    65 35CE 6E				.byte 	%01101110							; .##.###.
    66 35CF 00				.byte 	%00000000							; ........
    67 35D0 00				.byte 	%00000000							; ........
    68 35D1 7A				.byte 	%01111010							; .####.#.
    69 35D2 7E				.byte 	%01111110							; .######.
    70 35D3 3C				.byte 	%00111100							; ..####..
    71 35D4 00				.byte 	%00000000							; ........
    72 35D5 00				.byte 	%00000000							; ........
    73 35D6 00				.byte 	%00000000							; ........
    74
    75 					; Walking 1	
    76 35D7 18				.byte 	%00011000							; ...##...  
    77 35D8 3C				.byte 	%00111100							; ..####..  
    78 35D9 FF				.byte 	%11111111                           ; ########  
    79 35DA 00				.byte 	%00000000                           ; ........  
    80 35DB 00				.byte 	%00000000			                ; ........  
    81 35DC 00				.byte 	%00000000                           ; ........	
    82 35DD 00				.byte 	%00000000                           ; ........  
    83 35DE 00				.byte 	%00000000                           ; ........	
    84 35DF 00				.byte 	%00000000                           ; ........  
    85 35E0 18				.byte 	%00011000                           ; ...##...  
    86 35E1 18				.byte 	%00011000                           ; ...##...  
    87 35E2 3C				.byte 	%00111100                           ; ..####..  
    88 35E3 6E				.byte 	%01101110                           ; .##.###.  
    89 35E4 00				.byte 	%00000000                           ; ........  
    90 35E5 00				.byte 	%00000000                           ; ........  
    91 35E6 3E				.byte 	%00111110                           ; ..#####.  
    92 35E7 7E				.byte 	%01111110                           ; .######.  
    93 35E8 3C				.byte 	%00111100                           ; ..####..  
    94 35E9 00				.byte 	%00000000                           ; ........  
    95 35EA 00				.byte 	%00000000                           ; ........  
    96 35EB 00				.byte 	%00000000                           ; ........  
    97
    98 					; Jumping 0
    99 35EC 18				.byte %00011000								;...##...
   100 35ED 3C				.byte %00111100								;..####..
   101 35EE FF				.byte %11111111								;########
   102 35EF 00				.byte %00000000								;........
   103 35F0 00				.byte %00000000								;........
   104 35F1 00				.byte %00000000								;........
   105 35F2 00				.byte %00000000								;........
   106 35F3 00				.byte %00000000								;........
   107 35F4 00				.byte %00000000								;........
   108 35F5 18				.byte %00011000								;...##...
   109 35F6 18				.byte %00011000								;...##...
   110 35F7 3C				.byte %00111100								;..####..
   111 35F8 7E				.byte %01111110								;.######.
   112 35F9 00				.byte %00000000								;........
   113 35FA 00				.byte %00000000								;........
   114 35FB 7E				.byte %01111110								;.######.
   115 35FC 3E				.byte %00111110								;..#####.
   116 35FD 0C				.byte %00001100								;....##..
   117 35FE 00				.byte %00000000								;........
   118 35FF 00				.byte %00000000								;........
   119 3600 00				.byte %00000000								;........
   120 				                                                
   121 3601			TabPlayerShape_01A								
   122 					
   123 					; Standing 0			
   124 3601 18				.byte 	%00011000							; ...##...
   125 3602 3C				.byte 	%00111100                           ; ..####..
   126 3603 FF				.byte 	%11111111                           ; ########
   127 3604 3C				.byte 	%00111100                           ; ..####..
   128 3605 34				.byte 	%00110100                           ; ..##.#..
   129 3606 3E				.byte 	%00111110                           ; ..#####.
   130 3607 34				.byte 	%00110100                           ; ..##.#..
   131 3608 38				.byte 	%00111000                           ; ..###...
   132 3609 1C				.byte 	%00011100                           ; ...###..
   133 360A 00				.byte 	%00000000                           ; ........
   134 360B 00				.byte 	%00000000                           ; ........
   135 360C 00				.byte 	%00000000                           ; ........
   136 360D 00				.byte 	%00000000                           ; ........
   137 360E 6E				.byte 	%01101110                           ; .##.###.
   138 360F 6E				.byte 	%01101110                           ; .##.###.
   139 3610 00				.byte 	%00000000                           ; ........
   140 3611 00				.byte 	%00000000                           ; ........
   141 3612 00				.byte 	%00000000                           ; ........
   142 3613 00				.byte 	%00000000                           ; ........
   143 3614 00				.byte 	%00000000                           ; ........
   144 3615 00				.byte 	%00000000                           ; ........
   145 						
   146 					
   147 					; Walking 0
   148 3616 18				.byte 	%00011000							; ...##...
   149 3617 3C				.byte 	%00111100							; ..####..	
   150 3618 FF				.byte 	%11111111							; ########
   151 3619 3C				.byte 	%00111100							; ..####..
   152 361A 34				.byte 	%00110100							; ..##.#..
   153 361B 3E				.byte 	%00111110							; ..#####.
   154 361C 34				.byte 	%00110100							; ..##.#..
   155 361D 38				.byte 	%00111000							; ..###...
   156 361E 1C				.byte 	%00011100							; ...###..
   157 361F 00				.byte 	%00000000							; ........
   158 3620 00				.byte 	%00000000							; ........
   159 3621 00				.byte 	%00000000							; ........
   160 3622 00				.byte 	%00000000							; ........
   161 3623 6E				.byte 	%01101110							; .##.###.	
   162 3624 76				.byte 	%01110110							; .###.##.
   163 3625 00				.byte 	%00000000							; ........
   164 3626 00				.byte 	%00000000							; ........
   165 3627 00				.byte 	%00000000							; ........
   166 3628 00				.byte 	%00000000							; ........
   167 3629 00				.byte 	%00000000							; ........
   168 362A 00				.byte 	%00000000							; ........
   169
   170 					; Walking 1
   171 362B 18				.byte	%00011000							; ...##... 
   172 362C 3C				.byte	%00111100                           ; ..####.. 
   173 362D FF				.byte	%11111111                           ; ######## 
   174 362E 3C				.byte	%00111100                           ; ..####.. 
   175 362F 34				.byte	%00110100			                ; ..##.#.. 
   176 3630 3E				.byte	%00111110                           ; ..#####. 
   177 3631 34				.byte	%00110100                           ; ..##.#.. 
   178 3632 38				.byte	%00111000                           ; ..###... 
   179 3633 1C				.byte	%00011100                           ; ...###.. 
   180 3634 00				.byte	%00000000                           ; ........ 
   181 3635 00				.byte	%00000000                           ; ........ 
   182 3636 00				.byte	%00000000                           ; ........ 
   183 3637 00				.byte	%00000000                           ; ........ 
   184 3638 6E				.byte	%01101110                           ; .##.###. 
   185 3639 5E				.byte	%01011110                           ; .#.####. 
   186 363A 00				.byte	%00000000                           ; ........ 
   187 363B 00				.byte	%00000000                           ; ........ 
   188 363C 00				.byte	%00000000                           ; ........ 
   189 363D 00				.byte	%00000000                           ; ........ 
   190 363E 00				.byte	%00000000                           ; ........ 
   191 363F 00				.byte	%00000000                           ; ........       
   192 					
   193 					
   194 					; Jumping 1	
   195 3640 18				.byte %00011000								;...##...
   196 3641 3C				.byte %00111100                             ;..####..
   197 3642 FF				.byte %11111111                             ;########
   198 3643 3C				.byte %00111100                             ;..####..
   199 3644 34				.byte %00110100                             ;..##.#..
   200 3645 3E				.byte %00111110                             ;..#####.
   201 3646 34				.byte %00110100                             ;..##.#..
   202 3647 38				.byte %00111000                             ;..###...
   203 3648 1C				.byte %00011100                             ;...###..
   204 3649 00				.byte %00000000                             ;........
   205 364A 00				.byte %00000000                             ;........
   206 364B 00				.byte %00000000                             ;........
   207 364C 00				.byte %00000000                             ;........
   208 364D 7E				.byte %01111110                             ;.######.
   209 364E 7E				.byte %01111110                             ;.######.
   210 364F 00				.byte %00000000                             ;........
   211 3650 00				.byte %00000000                             ;........
   212 3651 00				.byte %00000000                             ;........
   213 3652 00				.byte %00000000                             ;........
   214 3653 00				.byte %00000000                             ;........
   215 3654 00				.byte %00000000                             ;........
   216 					
   217
   218 3655			TabPlayerShape_01B								
   219
   220 					; Standing 0
   221 3655 00				.byte 	%00000000							; ........
   222 3656 00				.byte 	%00000000                           ; ........
   223 3657 00				.byte 	%00000000                           ; ........
   224 3658 00				.byte 	%00000000                           ; ........
   225 3659 00				.byte 	%00000000			                ; ........
   226 365A 00				.byte 	%00000000                           ; ........
   227 365B 00				.byte 	%00000000                           ; ........
   228 365C 00				.byte 	%00000000                           ; ........
   229 365D 00				.byte 	%00000000                           ; ........
   230 365E 00				.byte 	%00000000                           ; ........
   231 365F 00				.byte 	%00000000                           ; ........
   232 3660 00				.byte 	%00000000                           ; ........
   233 3661 10				.byte 	%00010000                           ; ...#....
   234 3662 10				.byte 	%00010000                           ; ...#....
   235 3663 10				.byte 	%00010000                           ; ...#....
   236 3664 10				.byte 	%00010000                           ; ...#....
   237 3665 08				.byte 	%00001000                           ; ........
   238 3666 00				.byte 	%00000000                           ; ........
   239 3667 10				.byte 	%00010000                           ; ...#.#..
   240 3668 10				.byte 	%00010000                           ; ...#.#..
   241 3669 18				.byte 	%00011000                           ; ...####.
   242
   243 					; Walking 0
   244 366A 00				.byte 	%00000000							; ........
   245 366B 00				.byte   %00000000							; ........
   246 366C 00				.byte   %00000000							; ........
   247 366D 00				.byte   %00000000							; ........
   248 366E 00				.byte   %00000000							; ........
   249 366F 00				.byte 	%00000000							; ........
   250 3670 00				.byte   %00000000							; ........
   251 3671 00				.byte   %00000000							; ........
   252 3672 00				.byte   %00000000							; ........
   253 3673 00				.byte   %00000000							; ........
   254 3674 00				.byte 	%00000000							; ........
   255 3675 00				.byte   %00000000							; ........
   256 3676 10				.byte   %00010000							; ...#....
   257 3677 10				.byte   %00010000							; ...#....
   258 3678 08				.byte   %00001000							; ....#...
   259 3679 04				.byte 	%00000100							; .....#..
   260 367A 00				.byte   %00000000							; ........
   261 367B 00				.byte   %00000000							; ........
   262 367C 24				.byte   %00100100							; ..#. #..
   263 367D 24				.byte   %00100100							; ..#. #..
   264 367E 36				.byte   %00110110							; ..## ##.
   265
   266 					; Walking 1	
   267 367F 00				.byte 	%00000000							; ........
   268 3680 00				.byte 	%00000000                           ; ........
   269 3681 00				.byte 	%00000000                           ; ........
   270 3682 00				.byte 	%00000000                           ; ........
   271 3683 00				.byte 	%00000000			                ; ........
   272 3684 00				.byte 	%00000000                           ; ........
   273 3685 00				.byte 	%00000000                           ; ........
   274 3686 00				.byte 	%00000000                           ; ........
   275 3687 00				.byte 	%00000000                           ; ........
   276 3688 00				.byte 	%00000000                           ; ........
   277 3689 00				.byte 	%00000000                           ; ........
   278 368A 00				.byte 	%00000000                           ; ........
   279 368B 10				.byte 	%00010000                           ; ...#....
   280 368C 10				.byte 	%00010000                           ; ...#....
   281 368D 20				.byte 	%00100000                           ; ..#.....
   282 368E 40				.byte 	%01000000                           ; .#......
   283 368F 00				.byte 	%00000000                           ; ........
   284 3690 00				.byte 	%00000000                           ; ........
   285 3691 24				.byte 	%00100100                           ; .#...#..
   286 3692 24				.byte 	%00100100                           ; .#...#..
   287 3693 36				.byte 	%00110110                           ; .##..##.
   288 					
   289 					; Jumping 2
   290 3694 00			    .byte %00000000								;........
   291 3695 00			    .byte %00000000                             ;........
   292 3696 00				.byte %00000000                             ;........
   293 3697 00				.byte %00000000                             ;........
   294 3698 00				.byte %00000000                             ;........
   295 3699 00				.byte %00000000                             ;........
   296 369A 00				.byte %00000000                             ;........
   297 369B 00				.byte %00000000                             ;........
   298 369C 81				.byte %10000001                             ;#......#
   299 369D 42				.byte %01000010                             ;.#....#.
   300 369E 24				.byte %00100100                             ;..#..#..
   301 369F 00				.byte %00000000                             ;........
   302 36A0 00				.byte %00000000                             ;........
   303 36A1 00				.byte %00000000                             ;........
   304 36A2 00				.byte %00000000                             ;........
   305 36A3 10				.byte %00010000                             ;...#....
   306 36A4 14				.byte %00010100                             ;...#.#..
   307 36A5 24				.byte %00100100                             ;..#..#..
   308 36A6 A5				.byte %10100101                             ;#.#..#.#
   309 36A7 42				.byte %01000010                             ;.#....#.
   310 36A8 00				.byte %00000000                             ;........
   311
   312 				;*****	Misc Animations and Graphics
   313 				;
   314 36A9			BONUS100
   315
   316 36A9 00 00 00			.byte %0000,%0000,%0000							;............
   317 36AC 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   318 36AF 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   319 36B2 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   320 36B5 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   321 36B8 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   322 36BB 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   323 36BE 00 00 00			.byte %0000,%0000,%0000							;............
   324
   325 = 0018			BONUS100END = * - BONUS100
   326
   327 36C1			CLEARBONUS
   328
   329 36C1 00 00 00			.byte %0000,%0000,%0000							;............
   330 36C4 00 00 00			.byte %0000,%0000,%0000							;............
   331 36C7 00 00 00			.byte %0000,%0000,%0000							;............
   332 36CA 00 00 00			.byte %0000,%0000,%0000							;............
   333 36CD 00 00 00			.byte %0000,%0000,%0000							;............
   334 36D0 00 00 00			.byte %0000,%0000,%0000							;............
   335 36D3 00 00 00			.byte %0000,%0000,%0000							;............
   336 36D6 00 00 00			.byte %0000,%0000,%0000							;............
   337
   338 = 0018			CLEARBONUSEND = * - CLEARBONUS
   351 						
   352 				.PRINT "Data Size : ", * - DataAddress		
   352 				Data Size : $06D9
   353
   354 				;*****	Game font address
   355 				;
   356 36D9				org GameFontAddress
   357 A800-AFFF> 00 00 00 00 + 	ins "data/scroller.fnt"
   358 				;	
   359 				;*****	Text font address
   360 				;
   361 AC00				org TextFontAddress
   362 AC00 00 00 00 00 00 00 + 	ins "data/atari.fnt"
   363 					
   364 B000				org SoundAddress
   365 					opt h-						;RMT module is standard Atari binary file already
   366 4000 FF FF 00 40 AA 42 + 	ins "Data/sfx.rmt"				;include music RMT module
   367 					opt h+
   368
   369 					
   370 				;*****	HUD Memory Address	
   371 				;
   372 42B1					org HudMemoryAddr							
   373 						 
   374 				.if PAL_VERSION = 0
   375 06B0-06FF> 00 00 27 00 + 		.sb "  G 00    E 00    T 00:00.0  H 00 NTSC  "
   376 				.else
   377 						.sb "  G 00    E 00    T 00:00.0  H 00  PAL  "
   378 				.endif
   379 06D8 00 00 00 00 00 00 + 		.sb "                                        "
   380 					
   381 				;*****	Game Memory Address 
   382 				;
   383 0700				org GameMemoryAddress	
   384 					.rept $1000-LEVEL_CHAR_SIZE_X
   385 						.BYTE $00
   386 					.ENDR
   386 					.endr
Source: REPT
   385 B000-BFFF> 00				.BYTE $00
   385 B001 00					.BYTE $00
   385 B002 00					.BYTE $00
   385 B003 00					.BYTE $00
   385 B004 00					.BYTE $00
   385 B005 00					.BYTE $00
   385 B006 00					.BYTE $00
   385 B007 00					.BYTE $00
   385 B008 00					.BYTE $00
   385 B009 00					.BYTE $00
   385 B00A 00					.BYTE $00
   385 B00B 00					.BYTE $00
   385 B00C 00					.BYTE $00
   385 B00D 00					.BYTE $00
   385 B00E 00					.BYTE $00
   385 B00F 00					.BYTE $00
   385 B010 00					.BYTE $00
   385 B011 00					.BYTE $00
   385 B012 00					.BYTE $00
   385 B013 00					.BYTE $00
   385 B014 00					.BYTE $00
   385 B015 00					.BYTE $00
   385 B016 00					.BYTE $00
   385 B017 00					.BYTE $00
   385 B018 00					.BYTE $00
   385 B019 00					.BYTE $00
   385 B01A 00					.BYTE $00
   385 B01B 00					.BYTE $00
   385 B01C 00					.BYTE $00
   385 B01D 00					.BYTE $00
   385 B01E 00					.BYTE $00
   385 B01F 00					.BYTE $00
   385 B020 00					.BYTE $00
   385 B021 00					.BYTE $00
   385 B022 00					.BYTE $00
   385 B023 00					.BYTE $00
   385 B024 00					.BYTE $00
   385 B025 00					.BYTE $00
   385 B026 00					.BYTE $00
   385 B027 00					.BYTE $00
   385 B028 00					.BYTE $00
   385 B029 00					.BYTE $00
   385 B02A 00					.BYTE $00
   385 B02B 00					.BYTE $00
   385 B02C 00					.BYTE $00
   385 B02D 00					.BYTE $00
   385 B02E 00					.BYTE $00
   385 B02F 00					.BYTE $00
   385 B030 00					.BYTE $00
   385 B031 00					.BYTE $00
   385 B032 00					.BYTE $00
   385 B033 00					.BYTE $00
   385 B034 00					.BYTE $00
   385 B035 00					.BYTE $00
   385 B036 00					.BYTE $00
   385 B037 00					.BYTE $00
   385 B038 00					.BYTE $00
   385 B039 00					.BYTE $00
   385 B03A 00					.BYTE $00
   385 B03B 00					.BYTE $00
   385 B03C 00					.BYTE $00
   385 B03D 00					.BYTE $00
   385 B03E 00					.BYTE $00
   385 B03F 00					.BYTE $00
   385 B040 00					.BYTE $00
   385 B041 00					.BYTE $00
   385 B042 00					.BYTE $00
   385 B043 00					.BYTE $00
   385 B044 00					.BYTE $00
   385 B045 00					.BYTE $00
   385 B046 00					.BYTE $00
   385 B047 00					.BYTE $00
   385 B048 00					.BYTE $00
   385 B049 00					.BYTE $00
   385 B04A 00					.BYTE $00
   385 B04B 00					.BYTE $00
   385 B04C 00					.BYTE $00
   385 B04D 00					.BYTE $00
   385 B04E 00					.BYTE $00
   385 B04F 00					.BYTE $00
   385 B050 00					.BYTE $00
   385 B051 00					.BYTE $00
   385 B052 00					.BYTE $00
   385 B053 00					.BYTE $00
   385 B054 00					.BYTE $00
   385 B055 00					.BYTE $00
   385 B056 00					.BYTE $00
   385 B057 00					.BYTE $00
   385 B058 00					.BYTE $00
   385 B059 00					.BYTE $00
   385 B05A 00					.BYTE $00
   385 B05B 00					.BYTE $00
   385 B05C 00					.BYTE $00
   385 B05D 00					.BYTE $00
   385 B05E 00					.BYTE $00
   385 B05F 00					.BYTE $00
   385 B060 00					.BYTE $00
   385 B061 00					.BYTE $00
   385 B062 00					.BYTE $00
   385 B063 00					.BYTE $00
   385 B064 00					.BYTE $00
   385 B065 00					.BYTE $00
   385 B066 00					.BYTE $00
   385 B067 00					.BYTE $00
   385 B068 00					.BYTE $00
   385 B069 00					.BYTE $00
   385 B06A 00					.BYTE $00
   385 B06B 00					.BYTE $00
   385 B06C 00					.BYTE $00
   385 B06D 00					.BYTE $00
   385 B06E 00					.BYTE $00
   385 B06F 00					.BYTE $00
   385 B070 00					.BYTE $00
   385 B071 00					.BYTE $00
   385 B072 00					.BYTE $00
   385 B073 00					.BYTE $00
   385 B074 00					.BYTE $00
   385 B075 00					.BYTE $00
   385 B076 00					.BYTE $00
   385 B077 00					.BYTE $00
   385 B078 00					.BYTE $00
   385 B079 00					.BYTE $00
   385 B07A 00					.BYTE $00
   385 B07B 00					.BYTE $00
   385 B07C 00					.BYTE $00
   385 B07D 00					.BYTE $00
   385 B07E 00					.BYTE $00
   385 B07F 00					.BYTE $00
   385 B080 00					.BYTE $00
   385 B081 00					.BYTE $00
   385 B082 00					.BYTE $00
   385 B083 00					.BYTE $00
   385 B084 00					.BYTE $00
   385 B085 00					.BYTE $00
   385 B086 00					.BYTE $00
   385 B087 00					.BYTE $00
   385 B088 00					.BYTE $00
   385 B089 00					.BYTE $00
   385 B08A 00					.BYTE $00
   385 B08B 00					.BYTE $00
   385 B08C 00					.BYTE $00
   385 B08D 00					.BYTE $00
   385 B08E 00					.BYTE $00
   385 B08F 00					.BYTE $00
   385 B090 00					.BYTE $00
   385 B091 00					.BYTE $00
   385 B092 00					.BYTE $00
   385 B093 00					.BYTE $00
   385 B094 00					.BYTE $00
   385 B095 00					.BYTE $00
   385 B096 00					.BYTE $00
   385 B097 00					.BYTE $00
   385 B098 00					.BYTE $00
   385 B099 00					.BYTE $00
   385 B09A 00					.BYTE $00
   385 B09B 00					.BYTE $00
   385 B09C 00					.BYTE $00
   385 B09D 00					.BYTE $00
   385 B09E 00					.BYTE $00
   385 B09F 00					.BYTE $00
   385 B0A0 00					.BYTE $00
   385 B0A1 00					.BYTE $00
   385 B0A2 00					.BYTE $00
   385 B0A3 00					.BYTE $00
   385 B0A4 00					.BYTE $00
   385 B0A5 00					.BYTE $00
   385 B0A6 00					.BYTE $00
   385 B0A7 00					.BYTE $00
   385 B0A8 00					.BYTE $00
   385 B0A9 00					.BYTE $00
   385 B0AA 00					.BYTE $00
   385 B0AB 00					.BYTE $00
   385 B0AC 00					.BYTE $00
   385 B0AD 00					.BYTE $00
   385 B0AE 00					.BYTE $00
   385 B0AF 00					.BYTE $00
   385 B0B0 00					.BYTE $00
   385 B0B1 00					.BYTE $00
   385 B0B2 00					.BYTE $00
   385 B0B3 00					.BYTE $00
   385 B0B4 00					.BYTE $00
   385 B0B5 00					.BYTE $00
   385 B0B6 00					.BYTE $00
   385 B0B7 00					.BYTE $00
   385 B0B8 00					.BYTE $00
   385 B0B9 00					.BYTE $00
   385 B0BA 00					.BYTE $00
   385 B0BB 00					.BYTE $00
   385 B0BC 00					.BYTE $00
   385 B0BD 00					.BYTE $00
   385 B0BE 00					.BYTE $00
   385 B0BF 00					.BYTE $00
   385 B0C0 00					.BYTE $00
   385 B0C1 00					.BYTE $00
   385 B0C2 00					.BYTE $00
   385 B0C3 00					.BYTE $00
   385 B0C4 00					.BYTE $00
   385 B0C5 00					.BYTE $00
   385 B0C6 00					.BYTE $00
   385 B0C7 00					.BYTE $00
   385 B0C8 00					.BYTE $00
   385 B0C9 00					.BYTE $00
   385 B0CA 00					.BYTE $00
   385 B0CB 00					.BYTE $00
   385 B0CC 00					.BYTE $00
   385 B0CD 00					.BYTE $00
   385 B0CE 00					.BYTE $00
   385 B0CF 00					.BYTE $00
   385 B0D0 00					.BYTE $00
   385 B0D1 00					.BYTE $00
   385 B0D2 00					.BYTE $00
   385 B0D3 00					.BYTE $00
   385 B0D4 00					.BYTE $00
   385 B0D5 00					.BYTE $00
   385 B0D6 00					.BYTE $00
   385 B0D7 00					.BYTE $00
   385 B0D8 00					.BYTE $00
   385 B0D9 00					.BYTE $00
   385 B0DA 00					.BYTE $00
   385 B0DB 00					.BYTE $00
   385 B0DC 00					.BYTE $00
   385 B0DD 00					.BYTE $00
   385 B0DE 00					.BYTE $00
   385 B0DF 00					.BYTE $00
   385 B0E0 00					.BYTE $00
   385 B0E1 00					.BYTE $00
   385 B0E2 00					.BYTE $00
   385 B0E3 00					.BYTE $00
   385 B0E4 00					.BYTE $00
   385 B0E5 00					.BYTE $00
   385 B0E6 00					.BYTE $00
   385 B0E7 00					.BYTE $00
   385 B0E8 00					.BYTE $00
   385 B0E9 00					.BYTE $00
   385 B0EA 00					.BYTE $00
   385 B0EB 00					.BYTE $00
   385 B0EC 00					.BYTE $00
   385 B0ED 00					.BYTE $00
   385 B0EE 00					.BYTE $00
   385 B0EF 00					.BYTE $00
   385 B0F0 00					.BYTE $00
   385 B0F1 00					.BYTE $00
   385 B0F2 00					.BYTE $00
   385 B0F3 00					.BYTE $00
   385 B0F4 00					.BYTE $00
   385 B0F5 00					.BYTE $00
   385 B0F6 00					.BYTE $00
   385 B0F7 00					.BYTE $00
   385 B0F8 00					.BYTE $00
   385 B0F9 00					.BYTE $00
   385 B0FA 00					.BYTE $00
   385 B0FB 00					.BYTE $00
   385 B0FC 00					.BYTE $00
   385 B0FD 00					.BYTE $00
   385 B0FE 00					.BYTE $00
   385 B0FF 00					.BYTE $00
   385 B100 00					.BYTE $00
   385 B101 00					.BYTE $00
   385 B102 00					.BYTE $00
   385 B103 00					.BYTE $00
   385 B104 00					.BYTE $00
   385 B105 00					.BYTE $00
   385 B106 00					.BYTE $00
   385 B107 00					.BYTE $00
   385 B108 00					.BYTE $00
   385 B109 00					.BYTE $00
   385 B10A 00					.BYTE $00
   385 B10B 00					.BYTE $00
   385 B10C 00					.BYTE $00
   385 B10D 00					.BYTE $00
   385 B10E 00					.BYTE $00
   385 B10F 00					.BYTE $00
   385 B110 00					.BYTE $00
   385 B111 00					.BYTE $00
   385 B112 00					.BYTE $00
   385 B113 00					.BYTE $00
   385 B114 00					.BYTE $00
   385 B115 00					.BYTE $00
   385 B116 00					.BYTE $00
   385 B117 00					.BYTE $00
   385 B118 00					.BYTE $00
   385 B119 00					.BYTE $00
   385 B11A 00					.BYTE $00
   385 B11B 00					.BYTE $00
   385 B11C 00					.BYTE $00
   385 B11D 00					.BYTE $00
   385 B11E 00					.BYTE $00
   385 B11F 00					.BYTE $00
   385 B120 00					.BYTE $00
   385 B121 00					.BYTE $00
   385 B122 00					.BYTE $00
   385 B123 00					.BYTE $00
   385 B124 00					.BYTE $00
   385 B125 00					.BYTE $00
   385 B126 00					.BYTE $00
   385 B127 00					.BYTE $00
   385 B128 00					.BYTE $00
   385 B129 00					.BYTE $00
   385 B12A 00					.BYTE $00
   385 B12B 00					.BYTE $00
   385 B12C 00					.BYTE $00
   385 B12D 00					.BYTE $00
   385 B12E 00					.BYTE $00
   385 B12F 00					.BYTE $00
   385 B130 00					.BYTE $00
   385 B131 00					.BYTE $00
   385 B132 00					.BYTE $00
   385 B133 00					.BYTE $00
   385 B134 00					.BYTE $00
   385 B135 00					.BYTE $00
   385 B136 00					.BYTE $00
   385 B137 00					.BYTE $00
   385 B138 00					.BYTE $00
   385 B139 00					.BYTE $00
   385 B13A 00					.BYTE $00
   385 B13B 00					.BYTE $00
   385 B13C 00					.BYTE $00
   385 B13D 00					.BYTE $00
   385 B13E 00					.BYTE $00
   385 B13F 00					.BYTE $00
   385 B140 00					.BYTE $00
   385 B141 00					.BYTE $00
   385 B142 00					.BYTE $00
   385 B143 00					.BYTE $00
   385 B144 00					.BYTE $00
   385 B145 00					.BYTE $00
   385 B146 00					.BYTE $00
   385 B147 00					.BYTE $00
   385 B148 00					.BYTE $00
   385 B149 00					.BYTE $00
   385 B14A 00					.BYTE $00
   385 B14B 00					.BYTE $00
   385 B14C 00					.BYTE $00
   385 B14D 00					.BYTE $00
   385 B14E 00					.BYTE $00
   385 B14F 00					.BYTE $00
   385 B150 00					.BYTE $00
   385 B151 00					.BYTE $00
   385 B152 00					.BYTE $00
   385 B153 00					.BYTE $00
   385 B154 00					.BYTE $00
   385 B155 00					.BYTE $00
   385 B156 00					.BYTE $00
   385 B157 00					.BYTE $00
   385 B158 00					.BYTE $00
   385 B159 00					.BYTE $00
   385 B15A 00					.BYTE $00
   385 B15B 00					.BYTE $00
   385 B15C 00					.BYTE $00
   385 B15D 00					.BYTE $00
   385 B15E 00					.BYTE $00
   385 B15F 00					.BYTE $00
   385 B160 00					.BYTE $00
   385 B161 00					.BYTE $00
   385 B162 00					.BYTE $00
   385 B163 00					.BYTE $00
   385 B164 00					.BYTE $00
   385 B165 00					.BYTE $00
   385 B166 00					.BYTE $00
   385 B167 00					.BYTE $00
   385 B168 00					.BYTE $00
   385 B169 00					.BYTE $00
   385 B16A 00					.BYTE $00
   385 B16B 00					.BYTE $00
   385 B16C 00					.BYTE $00
   385 B16D 00					.BYTE $00
   385 B16E 00					.BYTE $00
   385 B16F 00					.BYTE $00
   385 B170 00					.BYTE $00
   385 B171 00					.BYTE $00
   385 B172 00					.BYTE $00
   385 B173 00					.BYTE $00
   385 B174 00					.BYTE $00
   385 B175 00					.BYTE $00
   385 B176 00					.BYTE $00
   385 B177 00					.BYTE $00
   385 B178 00					.BYTE $00
   385 B179 00					.BYTE $00
   385 B17A 00					.BYTE $00
   385 B17B 00					.BYTE $00
   385 B17C 00					.BYTE $00
   385 B17D 00					.BYTE $00
   385 B17E 00					.BYTE $00
   385 B17F 00					.BYTE $00
   385 B180 00					.BYTE $00
   385 B181 00					.BYTE $00
   385 B182 00					.BYTE $00
   385 B183 00					.BYTE $00
   385 B184 00					.BYTE $00
   385 B185 00					.BYTE $00
   385 B186 00					.BYTE $00
   385 B187 00					.BYTE $00
   385 B188 00					.BYTE $00
   385 B189 00					.BYTE $00
   385 B18A 00					.BYTE $00
   385 B18B 00					.BYTE $00
   385 B18C 00					.BYTE $00
   385 B18D 00					.BYTE $00
   385 B18E 00					.BYTE $00
   385 B18F 00					.BYTE $00
   385 B190 00					.BYTE $00
   385 B191 00					.BYTE $00
   385 B192 00					.BYTE $00
   385 B193 00					.BYTE $00
   385 B194 00					.BYTE $00
   385 B195 00					.BYTE $00
   385 B196 00					.BYTE $00
   385 B197 00					.BYTE $00
   385 B198 00					.BYTE $00
   385 B199 00					.BYTE $00
   385 B19A 00					.BYTE $00
   385 B19B 00					.BYTE $00
   385 B19C 00					.BYTE $00
   385 B19D 00					.BYTE $00
   385 B19E 00					.BYTE $00
   385 B19F 00					.BYTE $00
   385 B1A0 00					.BYTE $00
   385 B1A1 00					.BYTE $00
   385 B1A2 00					.BYTE $00
   385 B1A3 00					.BYTE $00
   385 B1A4 00					.BYTE $00
   385 B1A5 00					.BYTE $00
   385 B1A6 00					.BYTE $00
   385 B1A7 00					.BYTE $00
   385 B1A8 00					.BYTE $00
   385 B1A9 00					.BYTE $00
   385 B1AA 00					.BYTE $00
   385 B1AB 00					.BYTE $00
   385 B1AC 00					.BYTE $00
   385 B1AD 00					.BYTE $00
   385 B1AE 00					.BYTE $00
   385 B1AF 00					.BYTE $00
   385 B1B0 00					.BYTE $00
   385 B1B1 00					.BYTE $00
   385 B1B2 00					.BYTE $00
   385 B1B3 00					.BYTE $00
   385 B1B4 00					.BYTE $00
   385 B1B5 00					.BYTE $00
   385 B1B6 00					.BYTE $00
   385 B1B7 00					.BYTE $00
   385 B1B8 00					.BYTE $00
   385 B1B9 00					.BYTE $00
   385 B1BA 00					.BYTE $00
   385 B1BB 00					.BYTE $00
   385 B1BC 00					.BYTE $00
   385 B1BD 00					.BYTE $00
   385 B1BE 00					.BYTE $00
   385 B1BF 00					.BYTE $00
   385 B1C0 00					.BYTE $00
   385 B1C1 00					.BYTE $00
   385 B1C2 00					.BYTE $00
   385 B1C3 00					.BYTE $00
   385 B1C4 00					.BYTE $00
   385 B1C5 00					.BYTE $00
   385 B1C6 00					.BYTE $00
   385 B1C7 00					.BYTE $00
   385 B1C8 00					.BYTE $00
   385 B1C9 00					.BYTE $00
   385 B1CA 00					.BYTE $00
   385 B1CB 00					.BYTE $00
   385 B1CC 00					.BYTE $00
   385 B1CD 00					.BYTE $00
   385 B1CE 00					.BYTE $00
   385 B1CF 00					.BYTE $00
   385 B1D0 00					.BYTE $00
   385 B1D1 00					.BYTE $00
   385 B1D2 00					.BYTE $00
   385 B1D3 00					.BYTE $00
   385 B1D4 00					.BYTE $00
   385 B1D5 00					.BYTE $00
   385 B1D6 00					.BYTE $00
   385 B1D7 00					.BYTE $00
   385 B1D8 00					.BYTE $00
   385 B1D9 00					.BYTE $00
   385 B1DA 00					.BYTE $00
   385 B1DB 00					.BYTE $00
   385 B1DC 00					.BYTE $00
   385 B1DD 00					.BYTE $00
   385 B1DE 00					.BYTE $00
   385 B1DF 00					.BYTE $00
   385 B1E0 00					.BYTE $00
   385 B1E1 00					.BYTE $00
   385 B1E2 00					.BYTE $00
   385 B1E3 00					.BYTE $00
   385 B1E4 00					.BYTE $00
   385 B1E5 00					.BYTE $00
   385 B1E6 00					.BYTE $00
   385 B1E7 00					.BYTE $00
   385 B1E8 00					.BYTE $00
   385 B1E9 00					.BYTE $00
   385 B1EA 00					.BYTE $00
   385 B1EB 00					.BYTE $00
   385 B1EC 00					.BYTE $00
   385 B1ED 00					.BYTE $00
   385 B1EE 00					.BYTE $00
   385 B1EF 00					.BYTE $00
   385 B1F0 00					.BYTE $00
   385 B1F1 00					.BYTE $00
   385 B1F2 00					.BYTE $00
   385 B1F3 00					.BYTE $00
   385 B1F4 00					.BYTE $00
   385 B1F5 00					.BYTE $00
   385 B1F6 00					.BYTE $00
   385 B1F7 00					.BYTE $00
   385 B1F8 00					.BYTE $00
   385 B1F9 00					.BYTE $00
   385 B1FA 00					.BYTE $00
   385 B1FB 00					.BYTE $00
   385 B1FC 00					.BYTE $00
   385 B1FD 00					.BYTE $00
   385 B1FE 00					.BYTE $00
   385 B1FF 00					.BYTE $00
   385 B200 00					.BYTE $00
   385 B201 00					.BYTE $00
   385 B202 00					.BYTE $00
   385 B203 00					.BYTE $00
   385 B204 00					.BYTE $00
   385 B205 00					.BYTE $00
   385 B206 00					.BYTE $00
   385 B207 00					.BYTE $00
   385 B208 00					.BYTE $00
   385 B209 00					.BYTE $00
   385 B20A 00					.BYTE $00
   385 B20B 00					.BYTE $00
   385 B20C 00					.BYTE $00
   385 B20D 00					.BYTE $00
   385 B20E 00					.BYTE $00
   385 B20F 00					.BYTE $00
   385 B210 00					.BYTE $00
   385 B211 00					.BYTE $00
   385 B212 00					.BYTE $00
   385 B213 00					.BYTE $00
   385 B214 00					.BYTE $00
   385 B215 00					.BYTE $00
   385 B216 00					.BYTE $00
   385 B217 00					.BYTE $00
   385 B218 00					.BYTE $00
   385 B219 00					.BYTE $00
   385 B21A 00					.BYTE $00
   385 B21B 00					.BYTE $00
   385 B21C 00					.BYTE $00
   385 B21D 00					.BYTE $00
   385 B21E 00					.BYTE $00
   385 B21F 00					.BYTE $00
   385 B220 00					.BYTE $00
   385 B221 00					.BYTE $00
   385 B222 00					.BYTE $00
   385 B223 00					.BYTE $00
   385 B224 00					.BYTE $00
   385 B225 00					.BYTE $00
   385 B226 00					.BYTE $00
   385 B227 00					.BYTE $00
   385 B228 00					.BYTE $00
   385 B229 00					.BYTE $00
   385 B22A 00					.BYTE $00
   385 B22B 00					.BYTE $00
   385 B22C 00					.BYTE $00
   385 B22D 00					.BYTE $00
   385 B22E 00					.BYTE $00
   385 B22F 00					.BYTE $00
   385 B230 00					.BYTE $00
   385 B231 00					.BYTE $00
   385 B232 00					.BYTE $00
   385 B233 00					.BYTE $00
   385 B234 00					.BYTE $00
   385 B235 00					.BYTE $00
   385 B236 00					.BYTE $00
   385 B237 00					.BYTE $00
   385 B238 00					.BYTE $00
   385 B239 00					.BYTE $00
   385 B23A 00					.BYTE $00
   385 B23B 00					.BYTE $00
   385 B23C 00					.BYTE $00
   385 B23D 00					.BYTE $00
   385 B23E 00					.BYTE $00
   385 B23F 00					.BYTE $00
   385 B240 00					.BYTE $00
   385 B241 00					.BYTE $00
   385 B242 00					.BYTE $00
   385 B243 00					.BYTE $00
   385 B244 00					.BYTE $00
   385 B245 00					.BYTE $00
   385 B246 00					.BYTE $00
   385 B247 00					.BYTE $00
   385 B248 00					.BYTE $00
   385 B249 00					.BYTE $00
   385 B24A 00					.BYTE $00
   385 B24B 00					.BYTE $00
   385 B24C 00					.BYTE $00
   385 B24D 00					.BYTE $00
   385 B24E 00					.BYTE $00
   385 B24F 00					.BYTE $00
   385 B250 00					.BYTE $00
   385 B251 00					.BYTE $00
   385 B252 00					.BYTE $00
   385 B253 00					.BYTE $00
   385 B254 00					.BYTE $00
   385 B255 00					.BYTE $00
   385 B256 00					.BYTE $00
   385 B257 00					.BYTE $00
   385 B258 00					.BYTE $00
   385 B259 00					.BYTE $00
   385 B25A 00					.BYTE $00
   385 B25B 00					.BYTE $00
   385 B25C 00					.BYTE $00
   385 B25D 00					.BYTE $00
   385 B25E 00					.BYTE $00
   385 B25F 00					.BYTE $00
   385 B260 00					.BYTE $00
   385 B261 00					.BYTE $00
   385 B262 00					.BYTE $00
   385 B263 00					.BYTE $00
   385 B264 00					.BYTE $00
   385 B265 00					.BYTE $00
   385 B266 00					.BYTE $00
   385 B267 00					.BYTE $00
   385 B268 00					.BYTE $00
   385 B269 00					.BYTE $00
   385 B26A 00					.BYTE $00
   385 B26B 00					.BYTE $00
   385 B26C 00					.BYTE $00
   385 B26D 00					.BYTE $00
   385 B26E 00					.BYTE $00
   385 B26F 00					.BYTE $00
   385 B270 00					.BYTE $00
   385 B271 00					.BYTE $00
   385 B272 00					.BYTE $00
   385 B273 00					.BYTE $00
   385 B274 00					.BYTE $00
   385 B275 00					.BYTE $00
   385 B276 00					.BYTE $00
   385 B277 00					.BYTE $00
   385 B278 00					.BYTE $00
   385 B279 00					.BYTE $00
   385 B27A 00					.BYTE $00
   385 B27B 00					.BYTE $00
   385 B27C 00					.BYTE $00
   385 B27D 00					.BYTE $00
   385 B27E 00					.BYTE $00
   385 B27F 00					.BYTE $00
   385 B280 00					.BYTE $00
   385 B281 00					.BYTE $00
   385 B282 00					.BYTE $00
   385 B283 00					.BYTE $00
   385 B284 00					.BYTE $00
   385 B285 00					.BYTE $00
   385 B286 00					.BYTE $00
   385 B287 00					.BYTE $00
   385 B288 00					.BYTE $00
   385 B289 00					.BYTE $00
   385 B28A 00					.BYTE $00
   385 B28B 00					.BYTE $00
   385 B28C 00					.BYTE $00
   385 B28D 00					.BYTE $00
   385 B28E 00					.BYTE $00
   385 B28F 00					.BYTE $00
   385 B290 00					.BYTE $00
   385 B291 00					.BYTE $00
   385 B292 00					.BYTE $00
   385 B293 00					.BYTE $00
   385 B294 00					.BYTE $00
   385 B295 00					.BYTE $00
   385 B296 00					.BYTE $00
   385 B297 00					.BYTE $00
   385 B298 00					.BYTE $00
   385 B299 00					.BYTE $00
   385 B29A 00					.BYTE $00
   385 B29B 00					.BYTE $00
   385 B29C 00					.BYTE $00
   385 B29D 00					.BYTE $00
   385 B29E 00					.BYTE $00
   385 B29F 00					.BYTE $00
   385 B2A0 00					.BYTE $00
   385 B2A1 00					.BYTE $00
   385 B2A2 00					.BYTE $00
   385 B2A3 00					.BYTE $00
   385 B2A4 00					.BYTE $00
   385 B2A5 00					.BYTE $00
   385 B2A6 00					.BYTE $00
   385 B2A7 00					.BYTE $00
   385 B2A8 00					.BYTE $00
   385 B2A9 00					.BYTE $00
   385 B2AA 00					.BYTE $00
   385 B2AB 00					.BYTE $00
   385 B2AC 00					.BYTE $00
   385 B2AD 00					.BYTE $00
   385 B2AE 00					.BYTE $00
   385 B2AF 00					.BYTE $00
   385 B2B0 00					.BYTE $00
   385 B2B1 00					.BYTE $00
   385 B2B2 00					.BYTE $00
   385 B2B3 00					.BYTE $00
   385 B2B4 00					.BYTE $00
   385 B2B5 00					.BYTE $00
   385 B2B6 00					.BYTE $00
   385 B2B7 00					.BYTE $00
   385 B2B8 00					.BYTE $00
   385 B2B9 00					.BYTE $00
   385 B2BA 00					.BYTE $00
   385 B2BB 00					.BYTE $00
   385 B2BC 00					.BYTE $00
   385 B2BD 00					.BYTE $00
   385 B2BE 00					.BYTE $00
   385 B2BF 00					.BYTE $00
   385 B2C0 00					.BYTE $00
   385 B2C1 00					.BYTE $00
   385 B2C2 00					.BYTE $00
   385 B2C3 00					.BYTE $00
   385 B2C4 00					.BYTE $00
   385 B2C5 00					.BYTE $00
   385 B2C6 00					.BYTE $00
   385 B2C7 00					.BYTE $00
   385 B2C8 00					.BYTE $00
   385 B2C9 00					.BYTE $00
   385 B2CA 00					.BYTE $00
   385 B2CB 00					.BYTE $00
   385 B2CC 00					.BYTE $00
   385 B2CD 00					.BYTE $00
   385 B2CE 00					.BYTE $00
   385 B2CF 00					.BYTE $00
   385 B2D0 00					.BYTE $00
   385 B2D1 00					.BYTE $00
   385 B2D2 00					.BYTE $00
   385 B2D3 00					.BYTE $00
   385 B2D4 00					.BYTE $00
   385 B2D5 00					.BYTE $00
   385 B2D6 00					.BYTE $00
   385 B2D7 00					.BYTE $00
   385 B2D8 00					.BYTE $00
   385 B2D9 00					.BYTE $00
   385 B2DA 00					.BYTE $00
   385 B2DB 00					.BYTE $00
   385 B2DC 00					.BYTE $00
   385 B2DD 00					.BYTE $00
   385 B2DE 00					.BYTE $00
   385 B2DF 00					.BYTE $00
   385 B2E0 00					.BYTE $00
   385 B2E1 00					.BYTE $00
   385 B2E2 00					.BYTE $00
   385 B2E3 00					.BYTE $00
   385 B2E4 00					.BYTE $00
   385 B2E5 00					.BYTE $00
   385 B2E6 00					.BYTE $00
   385 B2E7 00					.BYTE $00
   385 B2E8 00					.BYTE $00
   385 B2E9 00					.BYTE $00
   385 B2EA 00					.BYTE $00
   385 B2EB 00					.BYTE $00
   385 B2EC 00					.BYTE $00
   385 B2ED 00					.BYTE $00
   385 B2EE 00					.BYTE $00
   385 B2EF 00					.BYTE $00
   385 B2F0 00					.BYTE $00
   385 B2F1 00					.BYTE $00
   385 B2F2 00					.BYTE $00
   385 B2F3 00					.BYTE $00
   385 B2F4 00					.BYTE $00
   385 B2F5 00					.BYTE $00
   385 B2F6 00					.BYTE $00
   385 B2F7 00					.BYTE $00
   385 B2F8 00					.BYTE $00
   385 B2F9 00					.BYTE $00
   385 B2FA 00					.BYTE $00
   385 B2FB 00					.BYTE $00
   385 B2FC 00					.BYTE $00
   385 B2FD 00					.BYTE $00
   385 B2FE 00					.BYTE $00
   385 B2FF 00					.BYTE $00
   385 B300 00					.BYTE $00
   385 B301 00					.BYTE $00
   385 B302 00					.BYTE $00
   385 B303 00					.BYTE $00
   385 B304 00					.BYTE $00
   385 B305 00					.BYTE $00
   385 B306 00					.BYTE $00
   385 B307 00					.BYTE $00
   385 B308 00					.BYTE $00
   385 B309 00					.BYTE $00
   385 B30A 00					.BYTE $00
   385 B30B 00					.BYTE $00
   385 B30C 00					.BYTE $00
   385 B30D 00					.BYTE $00
   385 B30E 00					.BYTE $00
   385 B30F 00					.BYTE $00
   385 B310 00					.BYTE $00
   385 B311 00					.BYTE $00
   385 B312 00					.BYTE $00
   385 B313 00					.BYTE $00
   385 B314 00					.BYTE $00
   385 B315 00					.BYTE $00
   385 B316 00					.BYTE $00
   385 B317 00					.BYTE $00
   385 B318 00					.BYTE $00
   385 B319 00					.BYTE $00
   385 B31A 00					.BYTE $00
   385 B31B 00					.BYTE $00
   385 B31C 00					.BYTE $00
   385 B31D 00					.BYTE $00
   385 B31E 00					.BYTE $00
   385 B31F 00					.BYTE $00
   385 B320 00					.BYTE $00
   385 B321 00					.BYTE $00
   385 B322 00					.BYTE $00
   385 B323 00					.BYTE $00
   385 B324 00					.BYTE $00
   385 B325 00					.BYTE $00
   385 B326 00					.BYTE $00
   385 B327 00					.BYTE $00
   385 B328 00					.BYTE $00
   385 B329 00					.BYTE $00
   385 B32A 00					.BYTE $00
   385 B32B 00					.BYTE $00
   385 B32C 00					.BYTE $00
   385 B32D 00					.BYTE $00
   385 B32E 00					.BYTE $00
   385 B32F 00					.BYTE $00
   385 B330 00					.BYTE $00
   385 B331 00					.BYTE $00
   385 B332 00					.BYTE $00
   385 B333 00					.BYTE $00
   385 B334 00					.BYTE $00
   385 B335 00					.BYTE $00
   385 B336 00					.BYTE $00
   385 B337 00					.BYTE $00
   385 B338 00					.BYTE $00
   385 B339 00					.BYTE $00
   385 B33A 00					.BYTE $00
   385 B33B 00					.BYTE $00
   385 B33C 00					.BYTE $00
   385 B33D 00					.BYTE $00
   385 B33E 00					.BYTE $00
   385 B33F 00					.BYTE $00
   385 B340 00					.BYTE $00
   385 B341 00					.BYTE $00
   385 B342 00					.BYTE $00
   385 B343 00					.BYTE $00
   385 B344 00					.BYTE $00
   385 B345 00					.BYTE $00
   385 B346 00					.BYTE $00
   385 B347 00					.BYTE $00
   385 B348 00					.BYTE $00
   385 B349 00					.BYTE $00
   385 B34A 00					.BYTE $00
   385 B34B 00					.BYTE $00
   385 B34C 00					.BYTE $00
   385 B34D 00					.BYTE $00
   385 B34E 00					.BYTE $00
   385 B34F 00					.BYTE $00
   385 B350 00					.BYTE $00
   385 B351 00					.BYTE $00
   385 B352 00					.BYTE $00
   385 B353 00					.BYTE $00
   385 B354 00					.BYTE $00
   385 B355 00					.BYTE $00
   385 B356 00					.BYTE $00
   385 B357 00					.BYTE $00
   385 B358 00					.BYTE $00
   385 B359 00					.BYTE $00
   385 B35A 00					.BYTE $00
   385 B35B 00					.BYTE $00
   385 B35C 00					.BYTE $00
   385 B35D 00					.BYTE $00
   385 B35E 00					.BYTE $00
   385 B35F 00					.BYTE $00
   385 B360 00					.BYTE $00
   385 B361 00					.BYTE $00
   385 B362 00					.BYTE $00
   385 B363 00					.BYTE $00
   385 B364 00					.BYTE $00
   385 B365 00					.BYTE $00
   385 B366 00					.BYTE $00
   385 B367 00					.BYTE $00
   385 B368 00					.BYTE $00
   385 B369 00					.BYTE $00
   385 B36A 00					.BYTE $00
   385 B36B 00					.BYTE $00
   385 B36C 00					.BYTE $00
   385 B36D 00					.BYTE $00
   385 B36E 00					.BYTE $00
   385 B36F 00					.BYTE $00
   385 B370 00					.BYTE $00
   385 B371 00					.BYTE $00
   385 B372 00					.BYTE $00
   385 B373 00					.BYTE $00
   385 B374 00					.BYTE $00
   385 B375 00					.BYTE $00
   385 B376 00					.BYTE $00
   385 B377 00					.BYTE $00
   385 B378 00					.BYTE $00
   385 B379 00					.BYTE $00
   385 B37A 00					.BYTE $00
   385 B37B 00					.BYTE $00
   385 B37C 00					.BYTE $00
   385 B37D 00					.BYTE $00
   385 B37E 00					.BYTE $00
   385 B37F 00					.BYTE $00
   385 B380 00					.BYTE $00
   385 B381 00					.BYTE $00
   385 B382 00					.BYTE $00
   385 B383 00					.BYTE $00
   385 B384 00					.BYTE $00
   385 B385 00					.BYTE $00
   385 B386 00					.BYTE $00
   385 B387 00					.BYTE $00
   385 B388 00					.BYTE $00
   385 B389 00					.BYTE $00
   385 B38A 00					.BYTE $00
   385 B38B 00					.BYTE $00
   385 B38C 00					.BYTE $00
   385 B38D 00					.BYTE $00
   385 B38E 00					.BYTE $00
   385 B38F 00					.BYTE $00
   385 B390 00					.BYTE $00
   385 B391 00					.BYTE $00
   385 B392 00					.BYTE $00
   385 B393 00					.BYTE $00
   385 B394 00					.BYTE $00
   385 B395 00					.BYTE $00
   385 B396 00					.BYTE $00
   385 B397 00					.BYTE $00
   385 B398 00					.BYTE $00
   385 B399 00					.BYTE $00
   385 B39A 00					.BYTE $00
   385 B39B 00					.BYTE $00
   385 B39C 00					.BYTE $00
   385 B39D 00					.BYTE $00
   385 B39E 00					.BYTE $00
   385 B39F 00					.BYTE $00
   385 B3A0 00					.BYTE $00
   385 B3A1 00					.BYTE $00
   385 B3A2 00					.BYTE $00
   385 B3A3 00					.BYTE $00
   385 B3A4 00					.BYTE $00
   385 B3A5 00					.BYTE $00
   385 B3A6 00					.BYTE $00
   385 B3A7 00					.BYTE $00
   385 B3A8 00					.BYTE $00
   385 B3A9 00					.BYTE $00
   385 B3AA 00					.BYTE $00
   385 B3AB 00					.BYTE $00
   385 B3AC 00					.BYTE $00
   385 B3AD 00					.BYTE $00
   385 B3AE 00					.BYTE $00
   385 B3AF 00					.BYTE $00
   385 B3B0 00					.BYTE $00
   385 B3B1 00					.BYTE $00
   385 B3B2 00					.BYTE $00
   385 B3B3 00					.BYTE $00
   385 B3B4 00					.BYTE $00
   385 B3B5 00					.BYTE $00
   385 B3B6 00					.BYTE $00
   385 B3B7 00					.BYTE $00
   385 B3B8 00					.BYTE $00
   385 B3B9 00					.BYTE $00
   385 B3BA 00					.BYTE $00
   385 B3BB 00					.BYTE $00
   385 B3BC 00					.BYTE $00
   385 B3BD 00					.BYTE $00
   385 B3BE 00					.BYTE $00
   385 B3BF 00					.BYTE $00
   385 B3C0 00					.BYTE $00
   385 B3C1 00					.BYTE $00
   385 B3C2 00					.BYTE $00
   385 B3C3 00					.BYTE $00
   385 B3C4 00					.BYTE $00
   385 B3C5 00					.BYTE $00
   385 B3C6 00					.BYTE $00
   385 B3C7 00					.BYTE $00
   385 B3C8 00					.BYTE $00
   385 B3C9 00					.BYTE $00
   385 B3CA 00					.BYTE $00
   385 B3CB 00					.BYTE $00
   385 B3CC 00					.BYTE $00
   385 B3CD 00					.BYTE $00
   385 B3CE 00					.BYTE $00
   385 B3CF 00					.BYTE $00
   385 B3D0 00					.BYTE $00
   385 B3D1 00					.BYTE $00
   385 B3D2 00					.BYTE $00
   385 B3D3 00					.BYTE $00
   385 B3D4 00					.BYTE $00
   385 B3D5 00					.BYTE $00
   385 B3D6 00					.BYTE $00
   385 B3D7 00					.BYTE $00
   385 B3D8 00					.BYTE $00
   385 B3D9 00					.BYTE $00
   385 B3DA 00					.BYTE $00
   385 B3DB 00					.BYTE $00
   385 B3DC 00					.BYTE $00
   385 B3DD 00					.BYTE $00
   385 B3DE 00					.BYTE $00
   385 B3DF 00					.BYTE $00
   385 B3E0 00					.BYTE $00
   385 B3E1 00					.BYTE $00
   385 B3E2 00					.BYTE $00
   385 B3E3 00					.BYTE $00
   385 B3E4 00					.BYTE $00
   385 B3E5 00					.BYTE $00
   385 B3E6 00					.BYTE $00
   385 B3E7 00					.BYTE $00
   385 B3E8 00					.BYTE $00
   385 B3E9 00					.BYTE $00
   385 B3EA 00					.BYTE $00
   385 B3EB 00					.BYTE $00
   385 B3EC 00					.BYTE $00
   385 B3ED 00					.BYTE $00
   385 B3EE 00					.BYTE $00
   385 B3EF 00					.BYTE $00
   385 B3F0 00					.BYTE $00
   385 B3F1 00					.BYTE $00
   385 B3F2 00					.BYTE $00
   385 B3F3 00					.BYTE $00
   385 B3F4 00					.BYTE $00
   385 B3F5 00					.BYTE $00
   385 B3F6 00					.BYTE $00
   385 B3F7 00					.BYTE $00
   385 B3F8 00					.BYTE $00
   385 B3F9 00					.BYTE $00
   385 B3FA 00					.BYTE $00
   385 B3FB 00					.BYTE $00
   385 B3FC 00					.BYTE $00
   385 B3FD 00					.BYTE $00
   385 B3FE 00					.BYTE $00
   385 B3FF 00					.BYTE $00
   385 B400 00					.BYTE $00
   385 B401 00					.BYTE $00
   385 B402 00					.BYTE $00
   385 B403 00					.BYTE $00
   385 B404 00					.BYTE $00
   385 B405 00					.BYTE $00
   385 B406 00					.BYTE $00
   385 B407 00					.BYTE $00
   385 B408 00					.BYTE $00
   385 B409 00					.BYTE $00
   385 B40A 00					.BYTE $00
   385 B40B 00					.BYTE $00
   385 B40C 00					.BYTE $00
   385 B40D 00					.BYTE $00
   385 B40E 00					.BYTE $00
   385 B40F 00					.BYTE $00
   385 B410 00					.BYTE $00
   385 B411 00					.BYTE $00
   385 B412 00					.BYTE $00
   385 B413 00					.BYTE $00
   385 B414 00					.BYTE $00
   385 B415 00					.BYTE $00
   385 B416 00					.BYTE $00
   385 B417 00					.BYTE $00
   385 B418 00					.BYTE $00
   385 B419 00					.BYTE $00
   385 B41A 00					.BYTE $00
   385 B41B 00					.BYTE $00
   385 B41C 00					.BYTE $00
   385 B41D 00					.BYTE $00
   385 B41E 00					.BYTE $00
   385 B41F 00					.BYTE $00
   385 B420 00					.BYTE $00
   385 B421 00					.BYTE $00
   385 B422 00					.BYTE $00
   385 B423 00					.BYTE $00
   385 B424 00					.BYTE $00
   385 B425 00					.BYTE $00
   385 B426 00					.BYTE $00
   385 B427 00					.BYTE $00
   385 B428 00					.BYTE $00
   385 B429 00					.BYTE $00
   385 B42A 00					.BYTE $00
   385 B42B 00					.BYTE $00
   385 B42C 00					.BYTE $00
   385 B42D 00					.BYTE $00
   385 B42E 00					.BYTE $00
   385 B42F 00					.BYTE $00
   385 B430 00					.BYTE $00
   385 B431 00					.BYTE $00
   385 B432 00					.BYTE $00
   385 B433 00					.BYTE $00
   385 B434 00					.BYTE $00
   385 B435 00					.BYTE $00
   385 B436 00					.BYTE $00
   385 B437 00					.BYTE $00
   385 B438 00					.BYTE $00
   385 B439 00					.BYTE $00
   385 B43A 00					.BYTE $00
   385 B43B 00					.BYTE $00
   385 B43C 00					.BYTE $00
   385 B43D 00					.BYTE $00
   385 B43E 00					.BYTE $00
   385 B43F 00					.BYTE $00
   385 B440 00					.BYTE $00
   385 B441 00					.BYTE $00
   385 B442 00					.BYTE $00
   385 B443 00					.BYTE $00
   385 B444 00					.BYTE $00
   385 B445 00					.BYTE $00
   385 B446 00					.BYTE $00
   385 B447 00					.BYTE $00
   385 B448 00					.BYTE $00
   385 B449 00					.BYTE $00
   385 B44A 00					.BYTE $00
   385 B44B 00					.BYTE $00
   385 B44C 00					.BYTE $00
   385 B44D 00					.BYTE $00
   385 B44E 00					.BYTE $00
   385 B44F 00					.BYTE $00
   385 B450 00					.BYTE $00
   385 B451 00					.BYTE $00
   385 B452 00					.BYTE $00
   385 B453 00					.BYTE $00
   385 B454 00					.BYTE $00
   385 B455 00					.BYTE $00
   385 B456 00					.BYTE $00
   385 B457 00					.BYTE $00
   385 B458 00					.BYTE $00
   385 B459 00					.BYTE $00
   385 B45A 00					.BYTE $00
   385 B45B 00					.BYTE $00
   385 B45C 00					.BYTE $00
   385 B45D 00					.BYTE $00
   385 B45E 00					.BYTE $00
   385 B45F 00					.BYTE $00
   385 B460 00					.BYTE $00
   385 B461 00					.BYTE $00
   385 B462 00					.BYTE $00
   385 B463 00					.BYTE $00
   385 B464 00					.BYTE $00
   385 B465 00					.BYTE $00
   385 B466 00					.BYTE $00
   385 B467 00					.BYTE $00
   385 B468 00					.BYTE $00
   385 B469 00					.BYTE $00
   385 B46A 00					.BYTE $00
   385 B46B 00					.BYTE $00
   385 B46C 00					.BYTE $00
   385 B46D 00					.BYTE $00
   385 B46E 00					.BYTE $00
   385 B46F 00					.BYTE $00
   385 B470 00					.BYTE $00
   385 B471 00					.BYTE $00
   385 B472 00					.BYTE $00
   385 B473 00					.BYTE $00
   385 B474 00					.BYTE $00
   385 B475 00					.BYTE $00
   385 B476 00					.BYTE $00
   385 B477 00					.BYTE $00
   385 B478 00					.BYTE $00
   385 B479 00					.BYTE $00
   385 B47A 00					.BYTE $00
   385 B47B 00					.BYTE $00
   385 B47C 00					.BYTE $00
   385 B47D 00					.BYTE $00
   385 B47E 00					.BYTE $00
   385 B47F 00					.BYTE $00
   385 B480 00					.BYTE $00
   385 B481 00					.BYTE $00
   385 B482 00					.BYTE $00
   385 B483 00					.BYTE $00
   385 B484 00					.BYTE $00
   385 B485 00					.BYTE $00
   385 B486 00					.BYTE $00
   385 B487 00					.BYTE $00
   385 B488 00					.BYTE $00
   385 B489 00					.BYTE $00
   385 B48A 00					.BYTE $00
   385 B48B 00					.BYTE $00
   385 B48C 00					.BYTE $00
   385 B48D 00					.BYTE $00
   385 B48E 00					.BYTE $00
   385 B48F 00					.BYTE $00
   385 B490 00					.BYTE $00
   385 B491 00					.BYTE $00
   385 B492 00					.BYTE $00
   385 B493 00					.BYTE $00
   385 B494 00					.BYTE $00
   385 B495 00					.BYTE $00
   385 B496 00					.BYTE $00
   385 B497 00					.BYTE $00
   385 B498 00					.BYTE $00
   385 B499 00					.BYTE $00
   385 B49A 00					.BYTE $00
   385 B49B 00					.BYTE $00
   385 B49C 00					.BYTE $00
   385 B49D 00					.BYTE $00
   385 B49E 00					.BYTE $00
   385 B49F 00					.BYTE $00
   385 B4A0 00					.BYTE $00
   385 B4A1 00					.BYTE $00
   385 B4A2 00					.BYTE $00
   385 B4A3 00					.BYTE $00
   385 B4A4 00					.BYTE $00
   385 B4A5 00					.BYTE $00
   385 B4A6 00					.BYTE $00
   385 B4A7 00					.BYTE $00
   385 B4A8 00					.BYTE $00
   385 B4A9 00					.BYTE $00
   385 B4AA 00					.BYTE $00
   385 B4AB 00					.BYTE $00
   385 B4AC 00					.BYTE $00
   385 B4AD 00					.BYTE $00
   385 B4AE 00					.BYTE $00
   385 B4AF 00					.BYTE $00
   385 B4B0 00					.BYTE $00
   385 B4B1 00					.BYTE $00
   385 B4B2 00					.BYTE $00
   385 B4B3 00					.BYTE $00
   385 B4B4 00					.BYTE $00
   385 B4B5 00					.BYTE $00
   385 B4B6 00					.BYTE $00
   385 B4B7 00					.BYTE $00
   385 B4B8 00					.BYTE $00
   385 B4B9 00					.BYTE $00
   385 B4BA 00					.BYTE $00
   385 B4BB 00					.BYTE $00
   385 B4BC 00					.BYTE $00
   385 B4BD 00					.BYTE $00
   385 B4BE 00					.BYTE $00
   385 B4BF 00					.BYTE $00
   385 B4C0 00					.BYTE $00
   385 B4C1 00					.BYTE $00
   385 B4C2 00					.BYTE $00
   385 B4C3 00					.BYTE $00
   385 B4C4 00					.BYTE $00
   385 B4C5 00					.BYTE $00
   385 B4C6 00					.BYTE $00
   385 B4C7 00					.BYTE $00
   385 B4C8 00					.BYTE $00
   385 B4C9 00					.BYTE $00
   385 B4CA 00					.BYTE $00
   385 B4CB 00					.BYTE $00
   385 B4CC 00					.BYTE $00
   385 B4CD 00					.BYTE $00
   385 B4CE 00					.BYTE $00
   385 B4CF 00					.BYTE $00
   385 B4D0 00					.BYTE $00
   385 B4D1 00					.BYTE $00
   385 B4D2 00					.BYTE $00
   385 B4D3 00					.BYTE $00
   385 B4D4 00					.BYTE $00
   385 B4D5 00					.BYTE $00
   385 B4D6 00					.BYTE $00
   385 B4D7 00					.BYTE $00
   385 B4D8 00					.BYTE $00
   385 B4D9 00					.BYTE $00
   385 B4DA 00					.BYTE $00
   385 B4DB 00					.BYTE $00
   385 B4DC 00					.BYTE $00
   385 B4DD 00					.BYTE $00
   385 B4DE 00					.BYTE $00
   385 B4DF 00					.BYTE $00
   385 B4E0 00					.BYTE $00
   385 B4E1 00					.BYTE $00
   385 B4E2 00					.BYTE $00
   385 B4E3 00					.BYTE $00
   385 B4E4 00					.BYTE $00
   385 B4E5 00					.BYTE $00
   385 B4E6 00					.BYTE $00
   385 B4E7 00					.BYTE $00
   385 B4E8 00					.BYTE $00
   385 B4E9 00					.BYTE $00
   385 B4EA 00					.BYTE $00
   385 B4EB 00					.BYTE $00
   385 B4EC 00					.BYTE $00
   385 B4ED 00					.BYTE $00
   385 B4EE 00					.BYTE $00
   385 B4EF 00					.BYTE $00
   385 B4F0 00					.BYTE $00
   385 B4F1 00					.BYTE $00
   385 B4F2 00					.BYTE $00
   385 B4F3 00					.BYTE $00
   385 B4F4 00					.BYTE $00
   385 B4F5 00					.BYTE $00
   385 B4F6 00					.BYTE $00
   385 B4F7 00					.BYTE $00
   385 B4F8 00					.BYTE $00
   385 B4F9 00					.BYTE $00
   385 B4FA 00					.BYTE $00
   385 B4FB 00					.BYTE $00
   385 B4FC 00					.BYTE $00
   385 B4FD 00					.BYTE $00
   385 B4FE 00					.BYTE $00
   385 B4FF 00					.BYTE $00
   385 B500 00					.BYTE $00
   385 B501 00					.BYTE $00
   385 B502 00					.BYTE $00
   385 B503 00					.BYTE $00
   385 B504 00					.BYTE $00
   385 B505 00					.BYTE $00
   385 B506 00					.BYTE $00
   385 B507 00					.BYTE $00
   385 B508 00					.BYTE $00
   385 B509 00					.BYTE $00
   385 B50A 00					.BYTE $00
   385 B50B 00					.BYTE $00
   385 B50C 00					.BYTE $00
   385 B50D 00					.BYTE $00
   385 B50E 00					.BYTE $00
   385 B50F 00					.BYTE $00
   385 B510 00					.BYTE $00
   385 B511 00					.BYTE $00
   385 B512 00					.BYTE $00
   385 B513 00					.BYTE $00
   385 B514 00					.BYTE $00
   385 B515 00					.BYTE $00
   385 B516 00					.BYTE $00
   385 B517 00					.BYTE $00
   385 B518 00					.BYTE $00
   385 B519 00					.BYTE $00
   385 B51A 00					.BYTE $00
   385 B51B 00					.BYTE $00
   385 B51C 00					.BYTE $00
   385 B51D 00					.BYTE $00
   385 B51E 00					.BYTE $00
   385 B51F 00					.BYTE $00
   385 B520 00					.BYTE $00
   385 B521 00					.BYTE $00
   385 B522 00					.BYTE $00
   385 B523 00					.BYTE $00
   385 B524 00					.BYTE $00
   385 B525 00					.BYTE $00
   385 B526 00					.BYTE $00
   385 B527 00					.BYTE $00
   385 B528 00					.BYTE $00
   385 B529 00					.BYTE $00
   385 B52A 00					.BYTE $00
   385 B52B 00					.BYTE $00
   385 B52C 00					.BYTE $00
   385 B52D 00					.BYTE $00
   385 B52E 00					.BYTE $00
   385 B52F 00					.BYTE $00
   385 B530 00					.BYTE $00
   385 B531 00					.BYTE $00
   385 B532 00					.BYTE $00
   385 B533 00					.BYTE $00
   385 B534 00					.BYTE $00
   385 B535 00					.BYTE $00
   385 B536 00					.BYTE $00
   385 B537 00					.BYTE $00
   385 B538 00					.BYTE $00
   385 B539 00					.BYTE $00
   385 B53A 00					.BYTE $00
   385 B53B 00					.BYTE $00
   385 B53C 00					.BYTE $00
   385 B53D 00					.BYTE $00
   385 B53E 00					.BYTE $00
   385 B53F 00					.BYTE $00
   385 B540 00					.BYTE $00
   385 B541 00					.BYTE $00
   385 B542 00					.BYTE $00
   385 B543 00					.BYTE $00
   385 B544 00					.BYTE $00
   385 B545 00					.BYTE $00
   385 B546 00					.BYTE $00
   385 B547 00					.BYTE $00
   385 B548 00					.BYTE $00
   385 B549 00					.BYTE $00
   385 B54A 00					.BYTE $00
   385 B54B 00					.BYTE $00
   385 B54C 00					.BYTE $00
   385 B54D 00					.BYTE $00
   385 B54E 00					.BYTE $00
   385 B54F 00					.BYTE $00
   385 B550 00					.BYTE $00
   385 B551 00					.BYTE $00
   385 B552 00					.BYTE $00
   385 B553 00					.BYTE $00
   385 B554 00					.BYTE $00
   385 B555 00					.BYTE $00
   385 B556 00					.BYTE $00
   385 B557 00					.BYTE $00
   385 B558 00					.BYTE $00
   385 B559 00					.BYTE $00
   385 B55A 00					.BYTE $00
   385 B55B 00					.BYTE $00
   385 B55C 00					.BYTE $00
   385 B55D 00					.BYTE $00
   385 B55E 00					.BYTE $00
   385 B55F 00					.BYTE $00
   385 B560 00					.BYTE $00
   385 B561 00					.BYTE $00
   385 B562 00					.BYTE $00
   385 B563 00					.BYTE $00
   385 B564 00					.BYTE $00
   385 B565 00					.BYTE $00
   385 B566 00					.BYTE $00
   385 B567 00					.BYTE $00
   385 B568 00					.BYTE $00
   385 B569 00					.BYTE $00
   385 B56A 00					.BYTE $00
   385 B56B 00					.BYTE $00
   385 B56C 00					.BYTE $00
   385 B56D 00					.BYTE $00
   385 B56E 00					.BYTE $00
   385 B56F 00					.BYTE $00
   385 B570 00					.BYTE $00
   385 B571 00					.BYTE $00
   385 B572 00					.BYTE $00
   385 B573 00					.BYTE $00
   385 B574 00					.BYTE $00
   385 B575 00					.BYTE $00
   385 B576 00					.BYTE $00
   385 B577 00					.BYTE $00
   385 B578 00					.BYTE $00
   385 B579 00					.BYTE $00
   385 B57A 00					.BYTE $00
   385 B57B 00					.BYTE $00
   385 B57C 00					.BYTE $00
   385 B57D 00					.BYTE $00
   385 B57E 00					.BYTE $00
   385 B57F 00					.BYTE $00
   385 B580 00					.BYTE $00
   385 B581 00					.BYTE $00
   385 B582 00					.BYTE $00
   385 B583 00					.BYTE $00
   385 B584 00					.BYTE $00
   385 B585 00					.BYTE $00
   385 B586 00					.BYTE $00
   385 B587 00					.BYTE $00
   385 B588 00					.BYTE $00
   385 B589 00					.BYTE $00
   385 B58A 00					.BYTE $00
   385 B58B 00					.BYTE $00
   385 B58C 00					.BYTE $00
   385 B58D 00					.BYTE $00
   385 B58E 00					.BYTE $00
   385 B58F 00					.BYTE $00
   385 B590 00					.BYTE $00
   385 B591 00					.BYTE $00
   385 B592 00					.BYTE $00
   385 B593 00					.BYTE $00
   385 B594 00					.BYTE $00
   385 B595 00					.BYTE $00
   385 B596 00					.BYTE $00
   385 B597 00					.BYTE $00
   385 B598 00					.BYTE $00
   385 B599 00					.BYTE $00
   385 B59A 00					.BYTE $00
   385 B59B 00					.BYTE $00
   385 B59C 00					.BYTE $00
   385 B59D 00					.BYTE $00
   385 B59E 00					.BYTE $00
   385 B59F 00					.BYTE $00
   385 B5A0 00					.BYTE $00
   385 B5A1 00					.BYTE $00
   385 B5A2 00					.BYTE $00
   385 B5A3 00					.BYTE $00
   385 B5A4 00					.BYTE $00
   385 B5A5 00					.BYTE $00
   385 B5A6 00					.BYTE $00
   385 B5A7 00					.BYTE $00
   385 B5A8 00					.BYTE $00
   385 B5A9 00					.BYTE $00
   385 B5AA 00					.BYTE $00
   385 B5AB 00					.BYTE $00
   385 B5AC 00					.BYTE $00
   385 B5AD 00					.BYTE $00
   385 B5AE 00					.BYTE $00
   385 B5AF 00					.BYTE $00
   385 B5B0 00					.BYTE $00
   385 B5B1 00					.BYTE $00
   385 B5B2 00					.BYTE $00
   385 B5B3 00					.BYTE $00
   385 B5B4 00					.BYTE $00
   385 B5B5 00					.BYTE $00
   385 B5B6 00					.BYTE $00
   385 B5B7 00					.BYTE $00
   385 B5B8 00					.BYTE $00
   385 B5B9 00					.BYTE $00
   385 B5BA 00					.BYTE $00
   385 B5BB 00					.BYTE $00
   385 B5BC 00					.BYTE $00
   385 B5BD 00					.BYTE $00
   385 B5BE 00					.BYTE $00
   385 B5BF 00					.BYTE $00
   385 B5C0 00					.BYTE $00
   385 B5C1 00					.BYTE $00
   385 B5C2 00					.BYTE $00
   385 B5C3 00					.BYTE $00
   385 B5C4 00					.BYTE $00
   385 B5C5 00					.BYTE $00
   385 B5C6 00					.BYTE $00
   385 B5C7 00					.BYTE $00
   385 B5C8 00					.BYTE $00
   385 B5C9 00					.BYTE $00
   385 B5CA 00					.BYTE $00
   385 B5CB 00					.BYTE $00
   385 B5CC 00					.BYTE $00
   385 B5CD 00					.BYTE $00
   385 B5CE 00					.BYTE $00
   385 B5CF 00					.BYTE $00
   385 B5D0 00					.BYTE $00
   385 B5D1 00					.BYTE $00
   385 B5D2 00					.BYTE $00
   385 B5D3 00					.BYTE $00
   385 B5D4 00					.BYTE $00
   385 B5D5 00					.BYTE $00
   385 B5D6 00					.BYTE $00
   385 B5D7 00					.BYTE $00
   385 B5D8 00					.BYTE $00
   385 B5D9 00					.BYTE $00
   385 B5DA 00					.BYTE $00
   385 B5DB 00					.BYTE $00
   385 B5DC 00					.BYTE $00
   385 B5DD 00					.BYTE $00
   385 B5DE 00					.BYTE $00
   385 B5DF 00					.BYTE $00
   385 B5E0 00					.BYTE $00
   385 B5E1 00					.BYTE $00
   385 B5E2 00					.BYTE $00
   385 B5E3 00					.BYTE $00
   385 B5E4 00					.BYTE $00
   385 B5E5 00					.BYTE $00
   385 B5E6 00					.BYTE $00
   385 B5E7 00					.BYTE $00
   385 B5E8 00					.BYTE $00
   385 B5E9 00					.BYTE $00
   385 B5EA 00					.BYTE $00
   385 B5EB 00					.BYTE $00
   385 B5EC 00					.BYTE $00
   385 B5ED 00					.BYTE $00
   385 B5EE 00					.BYTE $00
   385 B5EF 00					.BYTE $00
   385 B5F0 00					.BYTE $00
   385 B5F1 00					.BYTE $00
   385 B5F2 00					.BYTE $00
   385 B5F3 00					.BYTE $00
   385 B5F4 00					.BYTE $00
   385 B5F5 00					.BYTE $00
   385 B5F6 00					.BYTE $00
   385 B5F7 00					.BYTE $00
   385 B5F8 00					.BYTE $00
   385 B5F9 00					.BYTE $00
   385 B5FA 00					.BYTE $00
   385 B5FB 00					.BYTE $00
   385 B5FC 00					.BYTE $00
   385 B5FD 00					.BYTE $00
   385 B5FE 00					.BYTE $00
   385 B5FF 00					.BYTE $00
   385 B600 00					.BYTE $00
   385 B601 00					.BYTE $00
   385 B602 00					.BYTE $00
   385 B603 00					.BYTE $00
   385 B604 00					.BYTE $00
   385 B605 00					.BYTE $00
   385 B606 00					.BYTE $00
   385 B607 00					.BYTE $00
   385 B608 00					.BYTE $00
   385 B609 00					.BYTE $00
   385 B60A 00					.BYTE $00
   385 B60B 00					.BYTE $00
   385 B60C 00					.BYTE $00
   385 B60D 00					.BYTE $00
   385 B60E 00					.BYTE $00
   385 B60F 00					.BYTE $00
   385 B610 00					.BYTE $00
   385 B611 00					.BYTE $00
   385 B612 00					.BYTE $00
   385 B613 00					.BYTE $00
   385 B614 00					.BYTE $00
   385 B615 00					.BYTE $00
   385 B616 00					.BYTE $00
   385 B617 00					.BYTE $00
   385 B618 00					.BYTE $00
   385 B619 00					.BYTE $00
   385 B61A 00					.BYTE $00
   385 B61B 00					.BYTE $00
   385 B61C 00					.BYTE $00
   385 B61D 00					.BYTE $00
   385 B61E 00					.BYTE $00
   385 B61F 00					.BYTE $00
   385 B620 00					.BYTE $00
   385 B621 00					.BYTE $00
   385 B622 00					.BYTE $00
   385 B623 00					.BYTE $00
   385 B624 00					.BYTE $00
   385 B625 00					.BYTE $00
   385 B626 00					.BYTE $00
   385 B627 00					.BYTE $00
   385 B628 00					.BYTE $00
   385 B629 00					.BYTE $00
   385 B62A 00					.BYTE $00
   385 B62B 00					.BYTE $00
   385 B62C 00					.BYTE $00
   385 B62D 00					.BYTE $00
   385 B62E 00					.BYTE $00
   385 B62F 00					.BYTE $00
   385 B630 00					.BYTE $00
   385 B631 00					.BYTE $00
   385 B632 00					.BYTE $00
   385 B633 00					.BYTE $00
   385 B634 00					.BYTE $00
   385 B635 00					.BYTE $00
   385 B636 00					.BYTE $00
   385 B637 00					.BYTE $00
   385 B638 00					.BYTE $00
   385 B639 00					.BYTE $00
   385 B63A 00					.BYTE $00
   385 B63B 00					.BYTE $00
   385 B63C 00					.BYTE $00
   385 B63D 00					.BYTE $00
   385 B63E 00					.BYTE $00
   385 B63F 00					.BYTE $00
   385 B640 00					.BYTE $00
   385 B641 00					.BYTE $00
   385 B642 00					.BYTE $00
   385 B643 00					.BYTE $00
   385 B644 00					.BYTE $00
   385 B645 00					.BYTE $00
   385 B646 00					.BYTE $00
   385 B647 00					.BYTE $00
   385 B648 00					.BYTE $00
   385 B649 00					.BYTE $00
   385 B64A 00					.BYTE $00
   385 B64B 00					.BYTE $00
   385 B64C 00					.BYTE $00
   385 B64D 00					.BYTE $00
   385 B64E 00					.BYTE $00
   385 B64F 00					.BYTE $00
   385 B650 00					.BYTE $00
   385 B651 00					.BYTE $00
   385 B652 00					.BYTE $00
   385 B653 00					.BYTE $00
   385 B654 00					.BYTE $00
   385 B655 00					.BYTE $00
   385 B656 00					.BYTE $00
   385 B657 00					.BYTE $00
   385 B658 00					.BYTE $00
   385 B659 00					.BYTE $00
   385 B65A 00					.BYTE $00
   385 B65B 00					.BYTE $00
   385 B65C 00					.BYTE $00
   385 B65D 00					.BYTE $00
   385 B65E 00					.BYTE $00
   385 B65F 00					.BYTE $00
   385 B660 00					.BYTE $00
   385 B661 00					.BYTE $00
   385 B662 00					.BYTE $00
   385 B663 00					.BYTE $00
   385 B664 00					.BYTE $00
   385 B665 00					.BYTE $00
   385 B666 00					.BYTE $00
   385 B667 00					.BYTE $00
   385 B668 00					.BYTE $00
   385 B669 00					.BYTE $00
   385 B66A 00					.BYTE $00
   385 B66B 00					.BYTE $00
   385 B66C 00					.BYTE $00
   385 B66D 00					.BYTE $00
   385 B66E 00					.BYTE $00
   385 B66F 00					.BYTE $00
   385 B670 00					.BYTE $00
   385 B671 00					.BYTE $00
   385 B672 00					.BYTE $00
   385 B673 00					.BYTE $00
   385 B674 00					.BYTE $00
   385 B675 00					.BYTE $00
   385 B676 00					.BYTE $00
   385 B677 00					.BYTE $00
   385 B678 00					.BYTE $00
   385 B679 00					.BYTE $00
   385 B67A 00					.BYTE $00
   385 B67B 00					.BYTE $00
   385 B67C 00					.BYTE $00
   385 B67D 00					.BYTE $00
   385 B67E 00					.BYTE $00
   385 B67F 00					.BYTE $00
   385 B680 00					.BYTE $00
   385 B681 00					.BYTE $00
   385 B682 00					.BYTE $00
   385 B683 00					.BYTE $00
   385 B684 00					.BYTE $00
   385 B685 00					.BYTE $00
   385 B686 00					.BYTE $00
   385 B687 00					.BYTE $00
   385 B688 00					.BYTE $00
   385 B689 00					.BYTE $00
   385 B68A 00					.BYTE $00
   385 B68B 00					.BYTE $00
   385 B68C 00					.BYTE $00
   385 B68D 00					.BYTE $00
   385 B68E 00					.BYTE $00
   385 B68F 00					.BYTE $00
   385 B690 00					.BYTE $00
   385 B691 00					.BYTE $00
   385 B692 00					.BYTE $00
   385 B693 00					.BYTE $00
   385 B694 00					.BYTE $00
   385 B695 00					.BYTE $00
   385 B696 00					.BYTE $00
   385 B697 00					.BYTE $00
   385 B698 00					.BYTE $00
   385 B699 00					.BYTE $00
   385 B69A 00					.BYTE $00
   385 B69B 00					.BYTE $00
   385 B69C 00					.BYTE $00
   385 B69D 00					.BYTE $00
   385 B69E 00					.BYTE $00
   385 B69F 00					.BYTE $00
   385 B6A0 00					.BYTE $00
   385 B6A1 00					.BYTE $00
   385 B6A2 00					.BYTE $00
   385 B6A3 00					.BYTE $00
   385 B6A4 00					.BYTE $00
   385 B6A5 00					.BYTE $00
   385 B6A6 00					.BYTE $00
   385 B6A7 00					.BYTE $00
   385 B6A8 00					.BYTE $00
   385 B6A9 00					.BYTE $00
   385 B6AA 00					.BYTE $00
   385 B6AB 00					.BYTE $00
   385 B6AC 00					.BYTE $00
   385 B6AD 00					.BYTE $00
   385 B6AE 00					.BYTE $00
   385 B6AF 00					.BYTE $00
   385 B6B0 00					.BYTE $00
   385 B6B1 00					.BYTE $00
   385 B6B2 00					.BYTE $00
   385 B6B3 00					.BYTE $00
   385 B6B4 00					.BYTE $00
   385 B6B5 00					.BYTE $00
   385 B6B6 00					.BYTE $00
   385 B6B7 00					.BYTE $00
   385 B6B8 00					.BYTE $00
   385 B6B9 00					.BYTE $00
   385 B6BA 00					.BYTE $00
   385 B6BB 00					.BYTE $00
   385 B6BC 00					.BYTE $00
   385 B6BD 00					.BYTE $00
   385 B6BE 00					.BYTE $00
   385 B6BF 00					.BYTE $00
   385 B6C0 00					.BYTE $00
   385 B6C1 00					.BYTE $00
   385 B6C2 00					.BYTE $00
   385 B6C3 00					.BYTE $00
   385 B6C4 00					.BYTE $00
   385 B6C5 00					.BYTE $00
   385 B6C6 00					.BYTE $00
   385 B6C7 00					.BYTE $00
   385 B6C8 00					.BYTE $00
   385 B6C9 00					.BYTE $00
   385 B6CA 00					.BYTE $00
   385 B6CB 00					.BYTE $00
   385 B6CC 00					.BYTE $00
   385 B6CD 00					.BYTE $00
   385 B6CE 00					.BYTE $00
   385 B6CF 00					.BYTE $00
   385 B6D0 00					.BYTE $00
   385 B6D1 00					.BYTE $00
   385 B6D2 00					.BYTE $00
   385 B6D3 00					.BYTE $00
   385 B6D4 00					.BYTE $00
   385 B6D5 00					.BYTE $00
   385 B6D6 00					.BYTE $00
   385 B6D7 00					.BYTE $00
   385 B6D8 00					.BYTE $00
   385 B6D9 00					.BYTE $00
   385 B6DA 00					.BYTE $00
   385 B6DB 00					.BYTE $00
   385 B6DC 00					.BYTE $00
   385 B6DD 00					.BYTE $00
   385 B6DE 00					.BYTE $00
   385 B6DF 00					.BYTE $00
   385 B6E0 00					.BYTE $00
   385 B6E1 00					.BYTE $00
   385 B6E2 00					.BYTE $00
   385 B6E3 00					.BYTE $00
   385 B6E4 00					.BYTE $00
   385 B6E5 00					.BYTE $00
   385 B6E6 00					.BYTE $00
   385 B6E7 00					.BYTE $00
   385 B6E8 00					.BYTE $00
   385 B6E9 00					.BYTE $00
   385 B6EA 00					.BYTE $00
   385 B6EB 00					.BYTE $00
   385 B6EC 00					.BYTE $00
   385 B6ED 00					.BYTE $00
   385 B6EE 00					.BYTE $00
   385 B6EF 00					.BYTE $00
   385 B6F0 00					.BYTE $00
   385 B6F1 00					.BYTE $00
   385 B6F2 00					.BYTE $00
   385 B6F3 00					.BYTE $00
   385 B6F4 00					.BYTE $00
   385 B6F5 00					.BYTE $00
   385 B6F6 00					.BYTE $00
   385 B6F7 00					.BYTE $00
   385 B6F8 00					.BYTE $00
   385 B6F9 00					.BYTE $00
   385 B6FA 00					.BYTE $00
   385 B6FB 00					.BYTE $00
   385 B6FC 00					.BYTE $00
   385 B6FD 00					.BYTE $00
   385 B6FE 00					.BYTE $00
   385 B6FF 00					.BYTE $00
   385 B700 00					.BYTE $00
   385 B701 00					.BYTE $00
   385 B702 00					.BYTE $00
   385 B703 00					.BYTE $00
   385 B704 00					.BYTE $00
   385 B705 00					.BYTE $00
   385 B706 00					.BYTE $00
   385 B707 00					.BYTE $00
   385 B708 00					.BYTE $00
   385 B709 00					.BYTE $00
   385 B70A 00					.BYTE $00
   385 B70B 00					.BYTE $00
   385 B70C 00					.BYTE $00
   385 B70D 00					.BYTE $00
   385 B70E 00					.BYTE $00
   385 B70F 00					.BYTE $00
   385 B710 00					.BYTE $00
   385 B711 00					.BYTE $00
   385 B712 00					.BYTE $00
   385 B713 00					.BYTE $00
   385 B714 00					.BYTE $00
   385 B715 00					.BYTE $00
   385 B716 00					.BYTE $00
   385 B717 00					.BYTE $00
   385 B718 00					.BYTE $00
   385 B719 00					.BYTE $00
   385 B71A 00					.BYTE $00
   385 B71B 00					.BYTE $00
   385 B71C 00					.BYTE $00
   385 B71D 00					.BYTE $00
   385 B71E 00					.BYTE $00
   385 B71F 00					.BYTE $00
   385 B720 00					.BYTE $00
   385 B721 00					.BYTE $00
   385 B722 00					.BYTE $00
   385 B723 00					.BYTE $00
   385 B724 00					.BYTE $00
   385 B725 00					.BYTE $00
   385 B726 00					.BYTE $00
   385 B727 00					.BYTE $00
   385 B728 00					.BYTE $00
   385 B729 00					.BYTE $00
   385 B72A 00					.BYTE $00
   385 B72B 00					.BYTE $00
   385 B72C 00					.BYTE $00
   385 B72D 00					.BYTE $00
   385 B72E 00					.BYTE $00
   385 B72F 00					.BYTE $00
   385 B730 00					.BYTE $00
   385 B731 00					.BYTE $00
   385 B732 00					.BYTE $00
   385 B733 00					.BYTE $00
   385 B734 00					.BYTE $00
   385 B735 00					.BYTE $00
   385 B736 00					.BYTE $00
   385 B737 00					.BYTE $00
   385 B738 00					.BYTE $00
   385 B739 00					.BYTE $00
   385 B73A 00					.BYTE $00
   385 B73B 00					.BYTE $00
   385 B73C 00					.BYTE $00
   385 B73D 00					.BYTE $00
   385 B73E 00					.BYTE $00
   385 B73F 00					.BYTE $00
   385 B740 00					.BYTE $00
   385 B741 00					.BYTE $00
   385 B742 00					.BYTE $00
   385 B743 00					.BYTE $00
   385 B744 00					.BYTE $00
   385 B745 00					.BYTE $00
   385 B746 00					.BYTE $00
   385 B747 00					.BYTE $00
   385 B748 00					.BYTE $00
   385 B749 00					.BYTE $00
   385 B74A 00					.BYTE $00
   385 B74B 00					.BYTE $00
   385 B74C 00					.BYTE $00
   385 B74D 00					.BYTE $00
   385 B74E 00					.BYTE $00
   385 B74F 00					.BYTE $00
   385 B750 00					.BYTE $00
   385 B751 00					.BYTE $00
   385 B752 00					.BYTE $00
   385 B753 00					.BYTE $00
   385 B754 00					.BYTE $00
   385 B755 00					.BYTE $00
   385 B756 00					.BYTE $00
   385 B757 00					.BYTE $00
   385 B758 00					.BYTE $00
   385 B759 00					.BYTE $00
   385 B75A 00					.BYTE $00
   385 B75B 00					.BYTE $00
   385 B75C 00					.BYTE $00
   385 B75D 00					.BYTE $00
   385 B75E 00					.BYTE $00
   385 B75F 00					.BYTE $00
   385 B760 00					.BYTE $00
   385 B761 00					.BYTE $00
   385 B762 00					.BYTE $00
   385 B763 00					.BYTE $00
   385 B764 00					.BYTE $00
   385 B765 00					.BYTE $00
   385 B766 00					.BYTE $00
   385 B767 00					.BYTE $00
   385 B768 00					.BYTE $00
   385 B769 00					.BYTE $00
   385 B76A 00					.BYTE $00
   385 B76B 00					.BYTE $00
   385 B76C 00					.BYTE $00
   385 B76D 00					.BYTE $00
   385 B76E 00					.BYTE $00
   385 B76F 00					.BYTE $00
   385 B770 00					.BYTE $00
   385 B771 00					.BYTE $00
   385 B772 00					.BYTE $00
   385 B773 00					.BYTE $00
   385 B774 00					.BYTE $00
   385 B775 00					.BYTE $00
   385 B776 00					.BYTE $00
   385 B777 00					.BYTE $00
   385 B778 00					.BYTE $00
   385 B779 00					.BYTE $00
   385 B77A 00					.BYTE $00
   385 B77B 00					.BYTE $00
   385 B77C 00					.BYTE $00
   385 B77D 00					.BYTE $00
   385 B77E 00					.BYTE $00
   385 B77F 00					.BYTE $00
   385 B780 00					.BYTE $00
   385 B781 00					.BYTE $00
   385 B782 00					.BYTE $00
   385 B783 00					.BYTE $00
   385 B784 00					.BYTE $00
   385 B785 00					.BYTE $00
   385 B786 00					.BYTE $00
   385 B787 00					.BYTE $00
   385 B788 00					.BYTE $00
   385 B789 00					.BYTE $00
   385 B78A 00					.BYTE $00
   385 B78B 00					.BYTE $00
   385 B78C 00					.BYTE $00
   385 B78D 00					.BYTE $00
   385 B78E 00					.BYTE $00
   385 B78F 00					.BYTE $00
   385 B790 00					.BYTE $00
   385 B791 00					.BYTE $00
   385 B792 00					.BYTE $00
   385 B793 00					.BYTE $00
   385 B794 00					.BYTE $00
   385 B795 00					.BYTE $00
   385 B796 00					.BYTE $00
   385 B797 00					.BYTE $00
   385 B798 00					.BYTE $00
   385 B799 00					.BYTE $00
   385 B79A 00					.BYTE $00
   385 B79B 00					.BYTE $00
   385 B79C 00					.BYTE $00
   385 B79D 00					.BYTE $00
   385 B79E 00					.BYTE $00
   385 B79F 00					.BYTE $00
   385 B7A0 00					.BYTE $00
   385 B7A1 00					.BYTE $00
   385 B7A2 00					.BYTE $00
   385 B7A3 00					.BYTE $00
   385 B7A4 00					.BYTE $00
   385 B7A5 00					.BYTE $00
   385 B7A6 00					.BYTE $00
   385 B7A7 00					.BYTE $00
   385 B7A8 00					.BYTE $00
   385 B7A9 00					.BYTE $00
   385 B7AA 00					.BYTE $00
   385 B7AB 00					.BYTE $00
   385 B7AC 00					.BYTE $00
   385 B7AD 00					.BYTE $00
   385 B7AE 00					.BYTE $00
   385 B7AF 00					.BYTE $00
   385 B7B0 00					.BYTE $00
   385 B7B1 00					.BYTE $00
   385 B7B2 00					.BYTE $00
   385 B7B3 00					.BYTE $00
   385 B7B4 00					.BYTE $00
   385 B7B5 00					.BYTE $00
   385 B7B6 00					.BYTE $00
   385 B7B7 00					.BYTE $00
   385 B7B8 00					.BYTE $00
   385 B7B9 00					.BYTE $00
   385 B7BA 00					.BYTE $00
   385 B7BB 00					.BYTE $00
   385 B7BC 00					.BYTE $00
   385 B7BD 00					.BYTE $00
   385 B7BE 00					.BYTE $00
   385 B7BF 00					.BYTE $00
   385 B7C0 00					.BYTE $00
   385 B7C1 00					.BYTE $00
   385 B7C2 00					.BYTE $00
   385 B7C3 00					.BYTE $00
   385 B7C4 00					.BYTE $00
   385 B7C5 00					.BYTE $00
   385 B7C6 00					.BYTE $00
   385 B7C7 00					.BYTE $00
   385 B7C8 00					.BYTE $00
   385 B7C9 00					.BYTE $00
   385 B7CA 00					.BYTE $00
   385 B7CB 00					.BYTE $00
   385 B7CC 00					.BYTE $00
   385 B7CD 00					.BYTE $00
   385 B7CE 00					.BYTE $00
   385 B7CF 00					.BYTE $00
   385 B7D0 00					.BYTE $00
   385 B7D1 00					.BYTE $00
   385 B7D2 00					.BYTE $00
   385 B7D3 00					.BYTE $00
   385 B7D4 00					.BYTE $00
   385 B7D5 00					.BYTE $00
   385 B7D6 00					.BYTE $00
   385 B7D7 00					.BYTE $00
   385 B7D8 00					.BYTE $00
   385 B7D9 00					.BYTE $00
   385 B7DA 00					.BYTE $00
   385 B7DB 00					.BYTE $00
   385 B7DC 00					.BYTE $00
   385 B7DD 00					.BYTE $00
   385 B7DE 00					.BYTE $00
   385 B7DF 00					.BYTE $00
   385 B7E0 00					.BYTE $00
   385 B7E1 00					.BYTE $00
   385 B7E2 00					.BYTE $00
   385 B7E3 00					.BYTE $00
   385 B7E4 00					.BYTE $00
   385 B7E5 00					.BYTE $00
   385 B7E6 00					.BYTE $00
   385 B7E7 00					.BYTE $00
   385 B7E8 00					.BYTE $00
   385 B7E9 00					.BYTE $00
   385 B7EA 00					.BYTE $00
   385 B7EB 00					.BYTE $00
   385 B7EC 00					.BYTE $00
   385 B7ED 00					.BYTE $00
   385 B7EE 00					.BYTE $00
   385 B7EF 00					.BYTE $00
   385 B7F0 00					.BYTE $00
   385 B7F1 00					.BYTE $00
   385 B7F2 00					.BYTE $00
   385 B7F3 00					.BYTE $00
   385 B7F4 00					.BYTE $00
   385 B7F5 00					.BYTE $00
   385 B7F6 00					.BYTE $00
   385 B7F7 00					.BYTE $00
   385 B7F8 00					.BYTE $00
   385 B7F9 00					.BYTE $00
   385 B7FA 00					.BYTE $00
   385 B7FB 00					.BYTE $00
   385 B7FC 00					.BYTE $00
   385 B7FD 00					.BYTE $00
   385 B7FE 00					.BYTE $00
   385 B7FF 00					.BYTE $00
   385 B800 00					.BYTE $00
   385 B801 00					.BYTE $00
   385 B802 00					.BYTE $00
   385 B803 00					.BYTE $00
   385 B804 00					.BYTE $00
   385 B805 00					.BYTE $00
   385 B806 00					.BYTE $00
   385 B807 00					.BYTE $00
   385 B808 00					.BYTE $00
   385 B809 00					.BYTE $00
   385 B80A 00					.BYTE $00
   385 B80B 00					.BYTE $00
   385 B80C 00					.BYTE $00
   385 B80D 00					.BYTE $00
   385 B80E 00					.BYTE $00
   385 B80F 00					.BYTE $00
   385 B810 00					.BYTE $00
   385 B811 00					.BYTE $00
   385 B812 00					.BYTE $00
   385 B813 00					.BYTE $00
   385 B814 00					.BYTE $00
   385 B815 00					.BYTE $00
   385 B816 00					.BYTE $00
   385 B817 00					.BYTE $00
   385 B818 00					.BYTE $00
   385 B819 00					.BYTE $00
   385 B81A 00					.BYTE $00
   385 B81B 00					.BYTE $00
   385 B81C 00					.BYTE $00
   385 B81D 00					.BYTE $00
   385 B81E 00					.BYTE $00
   385 B81F 00					.BYTE $00
   385 B820 00					.BYTE $00
   385 B821 00					.BYTE $00
   385 B822 00					.BYTE $00
   385 B823 00					.BYTE $00
   385 B824 00					.BYTE $00
   385 B825 00					.BYTE $00
   385 B826 00					.BYTE $00
   385 B827 00					.BYTE $00
   385 B828 00					.BYTE $00
   385 B829 00					.BYTE $00
   385 B82A 00					.BYTE $00
   385 B82B 00					.BYTE $00
   385 B82C 00					.BYTE $00
   385 B82D 00					.BYTE $00
   385 B82E 00					.BYTE $00
   385 B82F 00					.BYTE $00
   385 B830 00					.BYTE $00
   385 B831 00					.BYTE $00
   385 B832 00					.BYTE $00
   385 B833 00					.BYTE $00
   385 B834 00					.BYTE $00
   385 B835 00					.BYTE $00
   385 B836 00					.BYTE $00
   385 B837 00					.BYTE $00
   385 B838 00					.BYTE $00
   385 B839 00					.BYTE $00
   385 B83A 00					.BYTE $00
   385 B83B 00					.BYTE $00
   385 B83C 00					.BYTE $00
   385 B83D 00					.BYTE $00
   385 B83E 00					.BYTE $00
   385 B83F 00					.BYTE $00
   385 B840 00					.BYTE $00
   385 B841 00					.BYTE $00
   385 B842 00					.BYTE $00
   385 B843 00					.BYTE $00
   385 B844 00					.BYTE $00
   385 B845 00					.BYTE $00
   385 B846 00					.BYTE $00
   385 B847 00					.BYTE $00
   385 B848 00					.BYTE $00
   385 B849 00					.BYTE $00
   385 B84A 00					.BYTE $00
   385 B84B 00					.BYTE $00
   385 B84C 00					.BYTE $00
   385 B84D 00					.BYTE $00
   385 B84E 00					.BYTE $00
   385 B84F 00					.BYTE $00
   385 B850 00					.BYTE $00
   385 B851 00					.BYTE $00
   385 B852 00					.BYTE $00
   385 B853 00					.BYTE $00
   385 B854 00					.BYTE $00
   385 B855 00					.BYTE $00
   385 B856 00					.BYTE $00
   385 B857 00					.BYTE $00
   385 B858 00					.BYTE $00
   385 B859 00					.BYTE $00
   385 B85A 00					.BYTE $00
   385 B85B 00					.BYTE $00
   385 B85C 00					.BYTE $00
   385 B85D 00					.BYTE $00
   385 B85E 00					.BYTE $00
   385 B85F 00					.BYTE $00
   385 B860 00					.BYTE $00
   385 B861 00					.BYTE $00
   385 B862 00					.BYTE $00
   385 B863 00					.BYTE $00
   385 B864 00					.BYTE $00
   385 B865 00					.BYTE $00
   385 B866 00					.BYTE $00
   385 B867 00					.BYTE $00
   385 B868 00					.BYTE $00
   385 B869 00					.BYTE $00
   385 B86A 00					.BYTE $00
   385 B86B 00					.BYTE $00
   385 B86C 00					.BYTE $00
   385 B86D 00					.BYTE $00
   385 B86E 00					.BYTE $00
   385 B86F 00					.BYTE $00
   385 B870 00					.BYTE $00
   385 B871 00					.BYTE $00
   385 B872 00					.BYTE $00
   385 B873 00					.BYTE $00
   385 B874 00					.BYTE $00
   385 B875 00					.BYTE $00
   385 B876 00					.BYTE $00
   385 B877 00					.BYTE $00
   385 B878 00					.BYTE $00
   385 B879 00					.BYTE $00
   385 B87A 00					.BYTE $00
   385 B87B 00					.BYTE $00
   385 B87C 00					.BYTE $00
   385 B87D 00					.BYTE $00
   385 B87E 00					.BYTE $00
   385 B87F 00					.BYTE $00
   385 B880 00					.BYTE $00
   385 B881 00					.BYTE $00
   385 B882 00					.BYTE $00
   385 B883 00					.BYTE $00
   385 B884 00					.BYTE $00
   385 B885 00					.BYTE $00
   385 B886 00					.BYTE $00
   385 B887 00					.BYTE $00
   385 B888 00					.BYTE $00
   385 B889 00					.BYTE $00
   385 B88A 00					.BYTE $00
   385 B88B 00					.BYTE $00
   385 B88C 00					.BYTE $00
   385 B88D 00					.BYTE $00
   385 B88E 00					.BYTE $00
   385 B88F 00					.BYTE $00
   385 B890 00					.BYTE $00
   385 B891 00					.BYTE $00
   385 B892 00					.BYTE $00
   385 B893 00					.BYTE $00
   385 B894 00					.BYTE $00
   385 B895 00					.BYTE $00
   385 B896 00					.BYTE $00
   385 B897 00					.BYTE $00
   385 B898 00					.BYTE $00
   385 B899 00					.BYTE $00
   385 B89A 00					.BYTE $00
   385 B89B 00					.BYTE $00
   385 B89C 00					.BYTE $00
   385 B89D 00					.BYTE $00
   385 B89E 00					.BYTE $00
   385 B89F 00					.BYTE $00
   385 B8A0 00					.BYTE $00
   385 B8A1 00					.BYTE $00
   385 B8A2 00					.BYTE $00
   385 B8A3 00					.BYTE $00
   385 B8A4 00					.BYTE $00
   385 B8A5 00					.BYTE $00
   385 B8A6 00					.BYTE $00
   385 B8A7 00					.BYTE $00
   385 B8A8 00					.BYTE $00
   385 B8A9 00					.BYTE $00
   385 B8AA 00					.BYTE $00
   385 B8AB 00					.BYTE $00
   385 B8AC 00					.BYTE $00
   385 B8AD 00					.BYTE $00
   385 B8AE 00					.BYTE $00
   385 B8AF 00					.BYTE $00
   385 B8B0 00					.BYTE $00
   385 B8B1 00					.BYTE $00
   385 B8B2 00					.BYTE $00
   385 B8B3 00					.BYTE $00
   385 B8B4 00					.BYTE $00
   385 B8B5 00					.BYTE $00
   385 B8B6 00					.BYTE $00
   385 B8B7 00					.BYTE $00
   385 B8B8 00					.BYTE $00
   385 B8B9 00					.BYTE $00
   385 B8BA 00					.BYTE $00
   385 B8BB 00					.BYTE $00
   385 B8BC 00					.BYTE $00
   385 B8BD 00					.BYTE $00
   385 B8BE 00					.BYTE $00
   385 B8BF 00					.BYTE $00
   385 B8C0 00					.BYTE $00
   385 B8C1 00					.BYTE $00
   385 B8C2 00					.BYTE $00
   385 B8C3 00					.BYTE $00
   385 B8C4 00					.BYTE $00
   385 B8C5 00					.BYTE $00
   385 B8C6 00					.BYTE $00
   385 B8C7 00					.BYTE $00
   385 B8C8 00					.BYTE $00
   385 B8C9 00					.BYTE $00
   385 B8CA 00					.BYTE $00
   385 B8CB 00					.BYTE $00
   385 B8CC 00					.BYTE $00
   385 B8CD 00					.BYTE $00
   385 B8CE 00					.BYTE $00
   385 B8CF 00					.BYTE $00
   385 B8D0 00					.BYTE $00
   385 B8D1 00					.BYTE $00
   385 B8D2 00					.BYTE $00
   385 B8D3 00					.BYTE $00
   385 B8D4 00					.BYTE $00
   385 B8D5 00					.BYTE $00
   385 B8D6 00					.BYTE $00
   385 B8D7 00					.BYTE $00
   385 B8D8 00					.BYTE $00
   385 B8D9 00					.BYTE $00
   385 B8DA 00					.BYTE $00
   385 B8DB 00					.BYTE $00
   385 B8DC 00					.BYTE $00
   385 B8DD 00					.BYTE $00
   385 B8DE 00					.BYTE $00
   385 B8DF 00					.BYTE $00
   385 B8E0 00					.BYTE $00
   385 B8E1 00					.BYTE $00
   385 B8E2 00					.BYTE $00
   385 B8E3 00					.BYTE $00
   385 B8E4 00					.BYTE $00
   385 B8E5 00					.BYTE $00
   385 B8E6 00					.BYTE $00
   385 B8E7 00					.BYTE $00
   385 B8E8 00					.BYTE $00
   385 B8E9 00					.BYTE $00
   385 B8EA 00					.BYTE $00
   385 B8EB 00					.BYTE $00
   385 B8EC 00					.BYTE $00
   385 B8ED 00					.BYTE $00
   385 B8EE 00					.BYTE $00
   385 B8EF 00					.BYTE $00
   385 B8F0 00					.BYTE $00
   385 B8F1 00					.BYTE $00
   385 B8F2 00					.BYTE $00
   385 B8F3 00					.BYTE $00
   385 B8F4 00					.BYTE $00
   385 B8F5 00					.BYTE $00
   385 B8F6 00					.BYTE $00
   385 B8F7 00					.BYTE $00
   385 B8F8 00					.BYTE $00
   385 B8F9 00					.BYTE $00
   385 B8FA 00					.BYTE $00
   385 B8FB 00					.BYTE $00
   385 B8FC 00					.BYTE $00
   385 B8FD 00					.BYTE $00
   385 B8FE 00					.BYTE $00
   385 B8FF 00					.BYTE $00
   385 B900 00					.BYTE $00
   385 B901 00					.BYTE $00
   385 B902 00					.BYTE $00
   385 B903 00					.BYTE $00
   385 B904 00					.BYTE $00
   385 B905 00					.BYTE $00
   385 B906 00					.BYTE $00
   385 B907 00					.BYTE $00
   385 B908 00					.BYTE $00
   385 B909 00					.BYTE $00
   385 B90A 00					.BYTE $00
   385 B90B 00					.BYTE $00
   385 B90C 00					.BYTE $00
   385 B90D 00					.BYTE $00
   385 B90E 00					.BYTE $00
   385 B90F 00					.BYTE $00
   385 B910 00					.BYTE $00
   385 B911 00					.BYTE $00
   385 B912 00					.BYTE $00
   385 B913 00					.BYTE $00
   385 B914 00					.BYTE $00
   385 B915 00					.BYTE $00
   385 B916 00					.BYTE $00
   385 B917 00					.BYTE $00
   385 B918 00					.BYTE $00
   385 B919 00					.BYTE $00
   385 B91A 00					.BYTE $00
   385 B91B 00					.BYTE $00
   385 B91C 00					.BYTE $00
   385 B91D 00					.BYTE $00
   385 B91E 00					.BYTE $00
   385 B91F 00					.BYTE $00
   385 B920 00					.BYTE $00
   385 B921 00					.BYTE $00
   385 B922 00					.BYTE $00
   385 B923 00					.BYTE $00
   385 B924 00					.BYTE $00
   385 B925 00					.BYTE $00
   385 B926 00					.BYTE $00
   385 B927 00					.BYTE $00
   385 B928 00					.BYTE $00
   385 B929 00					.BYTE $00
   385 B92A 00					.BYTE $00
   385 B92B 00					.BYTE $00
   385 B92C 00					.BYTE $00
   385 B92D 00					.BYTE $00
   385 B92E 00					.BYTE $00
   385 B92F 00					.BYTE $00
   385 B930 00					.BYTE $00
   385 B931 00					.BYTE $00
   385 B932 00					.BYTE $00
   385 B933 00					.BYTE $00
   385 B934 00					.BYTE $00
   385 B935 00					.BYTE $00
   385 B936 00					.BYTE $00
   385 B937 00					.BYTE $00
   385 B938 00					.BYTE $00
   385 B939 00					.BYTE $00
   385 B93A 00					.BYTE $00
   385 B93B 00					.BYTE $00
   385 B93C 00					.BYTE $00
   385 B93D 00					.BYTE $00
   385 B93E 00					.BYTE $00
   385 B93F 00					.BYTE $00
   385 B940 00					.BYTE $00
   385 B941 00					.BYTE $00
   385 B942 00					.BYTE $00
   385 B943 00					.BYTE $00
   385 B944 00					.BYTE $00
   385 B945 00					.BYTE $00
   385 B946 00					.BYTE $00
   385 B947 00					.BYTE $00
   385 B948 00					.BYTE $00
   385 B949 00					.BYTE $00
   385 B94A 00					.BYTE $00
   385 B94B 00					.BYTE $00
   385 B94C 00					.BYTE $00
   385 B94D 00					.BYTE $00
   385 B94E 00					.BYTE $00
   385 B94F 00					.BYTE $00
   385 B950 00					.BYTE $00
   385 B951 00					.BYTE $00
   385 B952 00					.BYTE $00
   385 B953 00					.BYTE $00
   385 B954 00					.BYTE $00
   385 B955 00					.BYTE $00
   385 B956 00					.BYTE $00
   385 B957 00					.BYTE $00
   385 B958 00					.BYTE $00
   385 B959 00					.BYTE $00
   385 B95A 00					.BYTE $00
   385 B95B 00					.BYTE $00
   385 B95C 00					.BYTE $00
   385 B95D 00					.BYTE $00
   385 B95E 00					.BYTE $00
   385 B95F 00					.BYTE $00
   385 B960 00					.BYTE $00
   385 B961 00					.BYTE $00
   385 B962 00					.BYTE $00
   385 B963 00					.BYTE $00
   385 B964 00					.BYTE $00
   385 B965 00					.BYTE $00
   385 B966 00					.BYTE $00
   385 B967 00					.BYTE $00
   385 B968 00					.BYTE $00
   385 B969 00					.BYTE $00
   385 B96A 00					.BYTE $00
   385 B96B 00					.BYTE $00
   385 B96C 00					.BYTE $00
   385 B96D 00					.BYTE $00
   385 B96E 00					.BYTE $00
   385 B96F 00					.BYTE $00
   385 B970 00					.BYTE $00
   385 B971 00					.BYTE $00
   385 B972 00					.BYTE $00
   385 B973 00					.BYTE $00
   385 B974 00					.BYTE $00
   385 B975 00					.BYTE $00
   385 B976 00					.BYTE $00
   385 B977 00					.BYTE $00
   385 B978 00					.BYTE $00
   385 B979 00					.BYTE $00
   385 B97A 00					.BYTE $00
   385 B97B 00					.BYTE $00
   385 B97C 00					.BYTE $00
   385 B97D 00					.BYTE $00
   385 B97E 00					.BYTE $00
   385 B97F 00					.BYTE $00
   385 B980 00					.BYTE $00
   385 B981 00					.BYTE $00
   385 B982 00					.BYTE $00
   385 B983 00					.BYTE $00
   385 B984 00					.BYTE $00
   385 B985 00					.BYTE $00
   385 B986 00					.BYTE $00
   385 B987 00					.BYTE $00
   385 B988 00					.BYTE $00
   385 B989 00					.BYTE $00
   385 B98A 00					.BYTE $00
   385 B98B 00					.BYTE $00
   385 B98C 00					.BYTE $00
   385 B98D 00					.BYTE $00
   385 B98E 00					.BYTE $00
   385 B98F 00					.BYTE $00
   385 B990 00					.BYTE $00
   385 B991 00					.BYTE $00
   385 B992 00					.BYTE $00
   385 B993 00					.BYTE $00
   385 B994 00					.BYTE $00
   385 B995 00					.BYTE $00
   385 B996 00					.BYTE $00
   385 B997 00					.BYTE $00
   385 B998 00					.BYTE $00
   385 B999 00					.BYTE $00
   385 B99A 00					.BYTE $00
   385 B99B 00					.BYTE $00
   385 B99C 00					.BYTE $00
   385 B99D 00					.BYTE $00
   385 B99E 00					.BYTE $00
   385 B99F 00					.BYTE $00
   385 B9A0 00					.BYTE $00
   385 B9A1 00					.BYTE $00
   385 B9A2 00					.BYTE $00
   385 B9A3 00					.BYTE $00
   385 B9A4 00					.BYTE $00
   385 B9A5 00					.BYTE $00
   385 B9A6 00					.BYTE $00
   385 B9A7 00					.BYTE $00
   385 B9A8 00					.BYTE $00
   385 B9A9 00					.BYTE $00
   385 B9AA 00					.BYTE $00
   385 B9AB 00					.BYTE $00
   385 B9AC 00					.BYTE $00
   385 B9AD 00					.BYTE $00
   385 B9AE 00					.BYTE $00
   385 B9AF 00					.BYTE $00
   385 B9B0 00					.BYTE $00
   385 B9B1 00					.BYTE $00
   385 B9B2 00					.BYTE $00
   385 B9B3 00					.BYTE $00
   385 B9B4 00					.BYTE $00
   385 B9B5 00					.BYTE $00
   385 B9B6 00					.BYTE $00
   385 B9B7 00					.BYTE $00
   385 B9B8 00					.BYTE $00
   385 B9B9 00					.BYTE $00
   385 B9BA 00					.BYTE $00
   385 B9BB 00					.BYTE $00
   385 B9BC 00					.BYTE $00
   385 B9BD 00					.BYTE $00
   385 B9BE 00					.BYTE $00
   385 B9BF 00					.BYTE $00
   385 B9C0 00					.BYTE $00
   385 B9C1 00					.BYTE $00
   385 B9C2 00					.BYTE $00
   385 B9C3 00					.BYTE $00
   385 B9C4 00					.BYTE $00
   385 B9C5 00					.BYTE $00
   385 B9C6 00					.BYTE $00
   385 B9C7 00					.BYTE $00
   385 B9C8 00					.BYTE $00
   385 B9C9 00					.BYTE $00
   385 B9CA 00					.BYTE $00
   385 B9CB 00					.BYTE $00
   385 B9CC 00					.BYTE $00
   385 B9CD 00					.BYTE $00
   385 B9CE 00					.BYTE $00
   385 B9CF 00					.BYTE $00
   385 B9D0 00					.BYTE $00
   385 B9D1 00					.BYTE $00
   385 B9D2 00					.BYTE $00
   385 B9D3 00					.BYTE $00
   385 B9D4 00					.BYTE $00
   385 B9D5 00					.BYTE $00
   385 B9D6 00					.BYTE $00
   385 B9D7 00					.BYTE $00
   385 B9D8 00					.BYTE $00
   385 B9D9 00					.BYTE $00
   385 B9DA 00					.BYTE $00
   385 B9DB 00					.BYTE $00
   385 B9DC 00					.BYTE $00
   385 B9DD 00					.BYTE $00
   385 B9DE 00					.BYTE $00
   385 B9DF 00					.BYTE $00
   385 B9E0 00					.BYTE $00
   385 B9E1 00					.BYTE $00
   385 B9E2 00					.BYTE $00
   385 B9E3 00					.BYTE $00
   385 B9E4 00					.BYTE $00
   385 B9E5 00					.BYTE $00
   385 B9E6 00					.BYTE $00
   385 B9E7 00					.BYTE $00
   385 B9E8 00					.BYTE $00
   385 B9E9 00					.BYTE $00
   385 B9EA 00					.BYTE $00
   385 B9EB 00					.BYTE $00
   385 B9EC 00					.BYTE $00
   385 B9ED 00					.BYTE $00
   385 B9EE 00					.BYTE $00
   385 B9EF 00					.BYTE $00
   385 B9F0 00					.BYTE $00
   385 B9F1 00					.BYTE $00
   385 B9F2 00					.BYTE $00
   385 B9F3 00					.BYTE $00
   385 B9F4 00					.BYTE $00
   385 B9F5 00					.BYTE $00
   385 B9F6 00					.BYTE $00
   385 B9F7 00					.BYTE $00
   385 B9F8 00					.BYTE $00
   385 B9F9 00					.BYTE $00
   385 B9FA 00					.BYTE $00
   385 B9FB 00					.BYTE $00
   385 B9FC 00					.BYTE $00
   385 B9FD 00					.BYTE $00
   385 B9FE 00					.BYTE $00
   385 B9FF 00					.BYTE $00
   385 BA00 00					.BYTE $00
   385 BA01 00					.BYTE $00
   385 BA02 00					.BYTE $00
   385 BA03 00					.BYTE $00
   385 BA04 00					.BYTE $00
   385 BA05 00					.BYTE $00
   385 BA06 00					.BYTE $00
   385 BA07 00					.BYTE $00
   385 BA08 00					.BYTE $00
   385 BA09 00					.BYTE $00
   385 BA0A 00					.BYTE $00
   385 BA0B 00					.BYTE $00
   385 BA0C 00					.BYTE $00
   385 BA0D 00					.BYTE $00
   385 BA0E 00					.BYTE $00
   385 BA0F 00					.BYTE $00
   385 BA10 00					.BYTE $00
   385 BA11 00					.BYTE $00
   385 BA12 00					.BYTE $00
   385 BA13 00					.BYTE $00
   385 BA14 00					.BYTE $00
   385 BA15 00					.BYTE $00
   385 BA16 00					.BYTE $00
   385 BA17 00					.BYTE $00
   385 BA18 00					.BYTE $00
   385 BA19 00					.BYTE $00
   385 BA1A 00					.BYTE $00
   385 BA1B 00					.BYTE $00
   385 BA1C 00					.BYTE $00
   385 BA1D 00					.BYTE $00
   385 BA1E 00					.BYTE $00
   385 BA1F 00					.BYTE $00
   385 BA20 00					.BYTE $00
   385 BA21 00					.BYTE $00
   385 BA22 00					.BYTE $00
   385 BA23 00					.BYTE $00
   385 BA24 00					.BYTE $00
   385 BA25 00					.BYTE $00
   385 BA26 00					.BYTE $00
   385 BA27 00					.BYTE $00
   385 BA28 00					.BYTE $00
   385 BA29 00					.BYTE $00
   385 BA2A 00					.BYTE $00
   385 BA2B 00					.BYTE $00
   385 BA2C 00					.BYTE $00
   385 BA2D 00					.BYTE $00
   385 BA2E 00					.BYTE $00
   385 BA2F 00					.BYTE $00
   385 BA30 00					.BYTE $00
   385 BA31 00					.BYTE $00
   385 BA32 00					.BYTE $00
   385 BA33 00					.BYTE $00
   385 BA34 00					.BYTE $00
   385 BA35 00					.BYTE $00
   385 BA36 00					.BYTE $00
   385 BA37 00					.BYTE $00
   385 BA38 00					.BYTE $00
   385 BA39 00					.BYTE $00
   385 BA3A 00					.BYTE $00
   385 BA3B 00					.BYTE $00
   385 BA3C 00					.BYTE $00
   385 BA3D 00					.BYTE $00
   385 BA3E 00					.BYTE $00
   385 BA3F 00					.BYTE $00
   385 BA40 00					.BYTE $00
   385 BA41 00					.BYTE $00
   385 BA42 00					.BYTE $00
   385 BA43 00					.BYTE $00
   385 BA44 00					.BYTE $00
   385 BA45 00					.BYTE $00
   385 BA46 00					.BYTE $00
   385 BA47 00					.BYTE $00
   385 BA48 00					.BYTE $00
   385 BA49 00					.BYTE $00
   385 BA4A 00					.BYTE $00
   385 BA4B 00					.BYTE $00
   385 BA4C 00					.BYTE $00
   385 BA4D 00					.BYTE $00
   385 BA4E 00					.BYTE $00
   385 BA4F 00					.BYTE $00
   385 BA50 00					.BYTE $00
   385 BA51 00					.BYTE $00
   385 BA52 00					.BYTE $00
   385 BA53 00					.BYTE $00
   385 BA54 00					.BYTE $00
   385 BA55 00					.BYTE $00
   385 BA56 00					.BYTE $00
   385 BA57 00					.BYTE $00
   385 BA58 00					.BYTE $00
   385 BA59 00					.BYTE $00
   385 BA5A 00					.BYTE $00
   385 BA5B 00					.BYTE $00
   385 BA5C 00					.BYTE $00
   385 BA5D 00					.BYTE $00
   385 BA5E 00					.BYTE $00
   385 BA5F 00					.BYTE $00
   385 BA60 00					.BYTE $00
   385 BA61 00					.BYTE $00
   385 BA62 00					.BYTE $00
   385 BA63 00					.BYTE $00
   385 BA64 00					.BYTE $00
   385 BA65 00					.BYTE $00
   385 BA66 00					.BYTE $00
   385 BA67 00					.BYTE $00
   385 BA68 00					.BYTE $00
   385 BA69 00					.BYTE $00
   385 BA6A 00					.BYTE $00
   385 BA6B 00					.BYTE $00
   385 BA6C 00					.BYTE $00
   385 BA6D 00					.BYTE $00
   385 BA6E 00					.BYTE $00
   385 BA6F 00					.BYTE $00
   385 BA70 00					.BYTE $00
   385 BA71 00					.BYTE $00
   385 BA72 00					.BYTE $00
   385 BA73 00					.BYTE $00
   385 BA74 00					.BYTE $00
   385 BA75 00					.BYTE $00
   385 BA76 00					.BYTE $00
   385 BA77 00					.BYTE $00
   385 BA78 00					.BYTE $00
   385 BA79 00					.BYTE $00
   385 BA7A 00					.BYTE $00
   385 BA7B 00					.BYTE $00
   385 BA7C 00					.BYTE $00
   385 BA7D 00					.BYTE $00
   385 BA7E 00					.BYTE $00
   385 BA7F 00					.BYTE $00
   385 BA80 00					.BYTE $00
   385 BA81 00					.BYTE $00
   385 BA82 00					.BYTE $00
   385 BA83 00					.BYTE $00
   385 BA84 00					.BYTE $00
   385 BA85 00					.BYTE $00
   385 BA86 00					.BYTE $00
   385 BA87 00					.BYTE $00
   385 BA88 00					.BYTE $00
   385 BA89 00					.BYTE $00
   385 BA8A 00					.BYTE $00
   385 BA8B 00					.BYTE $00
   385 BA8C 00					.BYTE $00
   385 BA8D 00					.BYTE $00
   385 BA8E 00					.BYTE $00
   385 BA8F 00					.BYTE $00
   385 BA90 00					.BYTE $00
   385 BA91 00					.BYTE $00
   385 BA92 00					.BYTE $00
   385 BA93 00					.BYTE $00
   385 BA94 00					.BYTE $00
   385 BA95 00					.BYTE $00
   385 BA96 00					.BYTE $00
   385 BA97 00					.BYTE $00
   385 BA98 00					.BYTE $00
   385 BA99 00					.BYTE $00
   385 BA9A 00					.BYTE $00
   385 BA9B 00					.BYTE $00
   385 BA9C 00					.BYTE $00
   385 BA9D 00					.BYTE $00
   385 BA9E 00					.BYTE $00
   385 BA9F 00					.BYTE $00
   385 BAA0 00					.BYTE $00
   385 BAA1 00					.BYTE $00
   385 BAA2 00					.BYTE $00
   385 BAA3 00					.BYTE $00
   385 BAA4 00					.BYTE $00
   385 BAA5 00					.BYTE $00
   385 BAA6 00					.BYTE $00
   385 BAA7 00					.BYTE $00
   385 BAA8 00					.BYTE $00
   385 BAA9 00					.BYTE $00
   385 BAAA 00					.BYTE $00
   385 BAAB 00					.BYTE $00
   385 BAAC 00					.BYTE $00
   385 BAAD 00					.BYTE $00
   385 BAAE 00					.BYTE $00
   385 BAAF 00					.BYTE $00
   385 BAB0 00					.BYTE $00
   385 BAB1 00					.BYTE $00
   385 BAB2 00					.BYTE $00
   385 BAB3 00					.BYTE $00
   385 BAB4 00					.BYTE $00
   385 BAB5 00					.BYTE $00
   385 BAB6 00					.BYTE $00
   385 BAB7 00					.BYTE $00
   385 BAB8 00					.BYTE $00
   385 BAB9 00					.BYTE $00
   385 BABA 00					.BYTE $00
   385 BABB 00					.BYTE $00
   385 BABC 00					.BYTE $00
   385 BABD 00					.BYTE $00
   385 BABE 00					.BYTE $00
   385 BABF 00					.BYTE $00
   385 BAC0 00					.BYTE $00
   385 BAC1 00					.BYTE $00
   385 BAC2 00					.BYTE $00
   385 BAC3 00					.BYTE $00
   385 BAC4 00					.BYTE $00
   385 BAC5 00					.BYTE $00
   385 BAC6 00					.BYTE $00
   385 BAC7 00					.BYTE $00
   385 BAC8 00					.BYTE $00
   385 BAC9 00					.BYTE $00
   385 BACA 00					.BYTE $00
   385 BACB 00					.BYTE $00
   385 BACC 00					.BYTE $00
   385 BACD 00					.BYTE $00
   385 BACE 00					.BYTE $00
   385 BACF 00					.BYTE $00
   385 BAD0 00					.BYTE $00
   385 BAD1 00					.BYTE $00
   385 BAD2 00					.BYTE $00
   385 BAD3 00					.BYTE $00
   385 BAD4 00					.BYTE $00
   385 BAD5 00					.BYTE $00
   385 BAD6 00					.BYTE $00
   385 BAD7 00					.BYTE $00
   385 BAD8 00					.BYTE $00
   385 BAD9 00					.BYTE $00
   385 BADA 00					.BYTE $00
   385 BADB 00					.BYTE $00
   385 BADC 00					.BYTE $00
   385 BADD 00					.BYTE $00
   385 BADE 00					.BYTE $00
   385 BADF 00					.BYTE $00
   385 BAE0 00					.BYTE $00
   385 BAE1 00					.BYTE $00
   385 BAE2 00					.BYTE $00
   385 BAE3 00					.BYTE $00
   385 BAE4 00					.BYTE $00
   385 BAE5 00					.BYTE $00
   385 BAE6 00					.BYTE $00
   385 BAE7 00					.BYTE $00
   385 BAE8 00					.BYTE $00
   385 BAE9 00					.BYTE $00
   385 BAEA 00					.BYTE $00
   385 BAEB 00					.BYTE $00
   385 BAEC 00					.BYTE $00
   385 BAED 00					.BYTE $00
   385 BAEE 00					.BYTE $00
   385 BAEF 00					.BYTE $00
   385 BAF0 00					.BYTE $00
   385 BAF1 00					.BYTE $00
   385 BAF2 00					.BYTE $00
   385 BAF3 00					.BYTE $00
   385 BAF4 00					.BYTE $00
   385 BAF5 00					.BYTE $00
   385 BAF6 00					.BYTE $00
   385 BAF7 00					.BYTE $00
   385 BAF8 00					.BYTE $00
   385 BAF9 00					.BYTE $00
   385 BAFA 00					.BYTE $00
   385 BAFB 00					.BYTE $00
   385 BAFC 00					.BYTE $00
   385 BAFD 00					.BYTE $00
   385 BAFE 00					.BYTE $00
   385 BAFF 00					.BYTE $00
   385 BB00 00					.BYTE $00
   385 BB01 00					.BYTE $00
   385 BB02 00					.BYTE $00
   385 BB03 00					.BYTE $00
   385 BB04 00					.BYTE $00
   385 BB05 00					.BYTE $00
   385 BB06 00					.BYTE $00
   385 BB07 00					.BYTE $00
   385 BB08 00					.BYTE $00
   385 BB09 00					.BYTE $00
   385 BB0A 00					.BYTE $00
   385 BB0B 00					.BYTE $00
   385 BB0C 00					.BYTE $00
   385 BB0D 00					.BYTE $00
   385 BB0E 00					.BYTE $00
   385 BB0F 00					.BYTE $00
   385 BB10 00					.BYTE $00
   385 BB11 00					.BYTE $00
   385 BB12 00					.BYTE $00
   385 BB13 00					.BYTE $00
   385 BB14 00					.BYTE $00
   385 BB15 00					.BYTE $00
   385 BB16 00					.BYTE $00
   385 BB17 00					.BYTE $00
   385 BB18 00					.BYTE $00
   385 BB19 00					.BYTE $00
   385 BB1A 00					.BYTE $00
   385 BB1B 00					.BYTE $00
   385 BB1C 00					.BYTE $00
   385 BB1D 00					.BYTE $00
   385 BB1E 00					.BYTE $00
   385 BB1F 00					.BYTE $00
   385 BB20 00					.BYTE $00
   385 BB21 00					.BYTE $00
   385 BB22 00					.BYTE $00
   385 BB23 00					.BYTE $00
   385 BB24 00					.BYTE $00
   385 BB25 00					.BYTE $00
   385 BB26 00					.BYTE $00
   385 BB27 00					.BYTE $00
   385 BB28 00					.BYTE $00
   385 BB29 00					.BYTE $00
   385 BB2A 00					.BYTE $00
   385 BB2B 00					.BYTE $00
   385 BB2C 00					.BYTE $00
   385 BB2D 00					.BYTE $00
   385 BB2E 00					.BYTE $00
   385 BB2F 00					.BYTE $00
   385 BB30 00					.BYTE $00
   385 BB31 00					.BYTE $00
   385 BB32 00					.BYTE $00
   385 BB33 00					.BYTE $00
   385 BB34 00					.BYTE $00
   385 BB35 00					.BYTE $00
   385 BB36 00					.BYTE $00
   385 BB37 00					.BYTE $00
   385 BB38 00					.BYTE $00
   385 BB39 00					.BYTE $00
   385 BB3A 00					.BYTE $00
   385 BB3B 00					.BYTE $00
   385 BB3C 00					.BYTE $00
   385 BB3D 00					.BYTE $00
   385 BB3E 00					.BYTE $00
   385 BB3F 00					.BYTE $00
   385 BB40 00					.BYTE $00
   385 BB41 00					.BYTE $00
   385 BB42 00					.BYTE $00
   385 BB43 00					.BYTE $00
   385 BB44 00					.BYTE $00
   385 BB45 00					.BYTE $00
   385 BB46 00					.BYTE $00
   385 BB47 00					.BYTE $00
   385 BB48 00					.BYTE $00
   385 BB49 00					.BYTE $00
   385 BB4A 00					.BYTE $00
   385 BB4B 00					.BYTE $00
   385 BB4C 00					.BYTE $00
   385 BB4D 00					.BYTE $00
   385 BB4E 00					.BYTE $00
   385 BB4F 00					.BYTE $00
   385 BB50 00					.BYTE $00
   385 BB51 00					.BYTE $00
   385 BB52 00					.BYTE $00
   385 BB53 00					.BYTE $00
   385 BB54 00					.BYTE $00
   385 BB55 00					.BYTE $00
   385 BB56 00					.BYTE $00
   385 BB57 00					.BYTE $00
   385 BB58 00					.BYTE $00
   385 BB59 00					.BYTE $00
   385 BB5A 00					.BYTE $00
   385 BB5B 00					.BYTE $00
   385 BB5C 00					.BYTE $00
   385 BB5D 00					.BYTE $00
   385 BB5E 00					.BYTE $00
   385 BB5F 00					.BYTE $00
   385 BB60 00					.BYTE $00
   385 BB61 00					.BYTE $00
   385 BB62 00					.BYTE $00
   385 BB63 00					.BYTE $00
   385 BB64 00					.BYTE $00
   385 BB65 00					.BYTE $00
   385 BB66 00					.BYTE $00
   385 BB67 00					.BYTE $00
   385 BB68 00					.BYTE $00
   385 BB69 00					.BYTE $00
   385 BB6A 00					.BYTE $00
   385 BB6B 00					.BYTE $00
   385 BB6C 00					.BYTE $00
   385 BB6D 00					.BYTE $00
   385 BB6E 00					.BYTE $00
   385 BB6F 00					.BYTE $00
   385 BB70 00					.BYTE $00
   385 BB71 00					.BYTE $00
   385 BB72 00					.BYTE $00
   385 BB73 00					.BYTE $00
   385 BB74 00					.BYTE $00
   385 BB75 00					.BYTE $00
   385 BB76 00					.BYTE $00
   385 BB77 00					.BYTE $00
   385 BB78 00					.BYTE $00
   385 BB79 00					.BYTE $00
   385 BB7A 00					.BYTE $00
   385 BB7B 00					.BYTE $00
   385 BB7C 00					.BYTE $00
   385 BB7D 00					.BYTE $00
   385 BB7E 00					.BYTE $00
   385 BB7F 00					.BYTE $00
   385 BB80 00					.BYTE $00
   385 BB81 00					.BYTE $00
   385 BB82 00					.BYTE $00
   385 BB83 00					.BYTE $00
   385 BB84 00					.BYTE $00
   385 BB85 00					.BYTE $00
   385 BB86 00					.BYTE $00
   385 BB87 00					.BYTE $00
   385 BB88 00					.BYTE $00
   385 BB89 00					.BYTE $00
   385 BB8A 00					.BYTE $00
   385 BB8B 00					.BYTE $00
   385 BB8C 00					.BYTE $00
   385 BB8D 00					.BYTE $00
   385 BB8E 00					.BYTE $00
   385 BB8F 00					.BYTE $00
   385 BB90 00					.BYTE $00
   385 BB91 00					.BYTE $00
   385 BB92 00					.BYTE $00
   385 BB93 00					.BYTE $00
   385 BB94 00					.BYTE $00
   385 BB95 00					.BYTE $00
   385 BB96 00					.BYTE $00
   385 BB97 00					.BYTE $00
   385 BB98 00					.BYTE $00
   385 BB99 00					.BYTE $00
   385 BB9A 00					.BYTE $00
   385 BB9B 00					.BYTE $00
   385 BB9C 00					.BYTE $00
   385 BB9D 00					.BYTE $00
   385 BB9E 00					.BYTE $00
   385 BB9F 00					.BYTE $00
   385 BBA0 00					.BYTE $00
   385 BBA1 00					.BYTE $00
   385 BBA2 00					.BYTE $00
   385 BBA3 00					.BYTE $00
   385 BBA4 00					.BYTE $00
   385 BBA5 00					.BYTE $00
   385 BBA6 00					.BYTE $00
   385 BBA7 00					.BYTE $00
   385 BBA8 00					.BYTE $00
   385 BBA9 00					.BYTE $00
   385 BBAA 00					.BYTE $00
   385 BBAB 00					.BYTE $00
   385 BBAC 00					.BYTE $00
   385 BBAD 00					.BYTE $00
   385 BBAE 00					.BYTE $00
   385 BBAF 00					.BYTE $00
   385 BBB0 00					.BYTE $00
   385 BBB1 00					.BYTE $00
   385 BBB2 00					.BYTE $00
   385 BBB3 00					.BYTE $00
   385 BBB4 00					.BYTE $00
   385 BBB5 00					.BYTE $00
   385 BBB6 00					.BYTE $00
   385 BBB7 00					.BYTE $00
   385 BBB8 00					.BYTE $00
   385 BBB9 00					.BYTE $00
   385 BBBA 00					.BYTE $00
   385 BBBB 00					.BYTE $00
   385 BBBC 00					.BYTE $00
   385 BBBD 00					.BYTE $00
   385 BBBE 00					.BYTE $00
   385 BBBF 00					.BYTE $00
   385 BBC0 00					.BYTE $00
   385 BBC1 00					.BYTE $00
   385 BBC2 00					.BYTE $00
   385 BBC3 00					.BYTE $00
   385 BBC4 00					.BYTE $00
   385 BBC5 00					.BYTE $00
   385 BBC6 00					.BYTE $00
   385 BBC7 00					.BYTE $00
   385 BBC8 00					.BYTE $00
   385 BBC9 00					.BYTE $00
   385 BBCA 00					.BYTE $00
   385 BBCB 00					.BYTE $00
   385 BBCC 00					.BYTE $00
   385 BBCD 00					.BYTE $00
   385 BBCE 00					.BYTE $00
   385 BBCF 00					.BYTE $00
   385 BBD0 00					.BYTE $00
   385 BBD1 00					.BYTE $00
   385 BBD2 00					.BYTE $00
   385 BBD3 00					.BYTE $00
   385 BBD4 00					.BYTE $00
   385 BBD5 00					.BYTE $00
   385 BBD6 00					.BYTE $00
   385 BBD7 00					.BYTE $00
   385 BBD8 00					.BYTE $00
   385 BBD9 00					.BYTE $00
   385 BBDA 00					.BYTE $00
   385 BBDB 00					.BYTE $00
   385 BBDC 00					.BYTE $00
   385 BBDD 00					.BYTE $00
   385 BBDE 00					.BYTE $00
   385 BBDF 00					.BYTE $00
   385 BBE0 00					.BYTE $00
   385 BBE1 00					.BYTE $00
   385 BBE2 00					.BYTE $00
   385 BBE3 00					.BYTE $00
   385 BBE4 00					.BYTE $00
   385 BBE5 00					.BYTE $00
   385 BBE6 00					.BYTE $00
   385 BBE7 00					.BYTE $00
   385 BBE8 00					.BYTE $00
   385 BBE9 00					.BYTE $00
   385 BBEA 00					.BYTE $00
   385 BBEB 00					.BYTE $00
   385 BBEC 00					.BYTE $00
   385 BBED 00					.BYTE $00
   385 BBEE 00					.BYTE $00
   385 BBEF 00					.BYTE $00
   385 BBF0 00					.BYTE $00
   385 BBF1 00					.BYTE $00
   385 BBF2 00					.BYTE $00
   385 BBF3 00					.BYTE $00
   385 BBF4 00					.BYTE $00
   385 BBF5 00					.BYTE $00
   385 BBF6 00					.BYTE $00
   385 BBF7 00					.BYTE $00
   385 BBF8 00					.BYTE $00
   385 BBF9 00					.BYTE $00
   385 BBFA 00					.BYTE $00
   385 BBFB 00					.BYTE $00
   385 BBFC 00					.BYTE $00
   385 BBFD 00					.BYTE $00
   385 BBFE 00					.BYTE $00
   385 BBFF 00					.BYTE $00
   385 BC00 00					.BYTE $00
   385 BC01 00					.BYTE $00
   385 BC02 00					.BYTE $00
   385 BC03 00					.BYTE $00
   385 BC04 00					.BYTE $00
   385 BC05 00					.BYTE $00
   385 BC06 00					.BYTE $00
   385 BC07 00					.BYTE $00
   385 BC08 00					.BYTE $00
   385 BC09 00					.BYTE $00
   385 BC0A 00					.BYTE $00
   385 BC0B 00					.BYTE $00
   385 BC0C 00					.BYTE $00
   385 BC0D 00					.BYTE $00
   385 BC0E 00					.BYTE $00
   385 BC0F 00					.BYTE $00
   385 BC10 00					.BYTE $00
   385 BC11 00					.BYTE $00
   385 BC12 00					.BYTE $00
   385 BC13 00					.BYTE $00
   385 BC14 00					.BYTE $00
   385 BC15 00					.BYTE $00
   385 BC16 00					.BYTE $00
   385 BC17 00					.BYTE $00
   385 BC18 00					.BYTE $00
   385 BC19 00					.BYTE $00
   385 BC1A 00					.BYTE $00
   385 BC1B 00					.BYTE $00
   385 BC1C 00					.BYTE $00
   385 BC1D 00					.BYTE $00
   385 BC1E 00					.BYTE $00
   385 BC1F 00					.BYTE $00
   385 BC20 00					.BYTE $00
   385 BC21 00					.BYTE $00
   385 BC22 00					.BYTE $00
   385 BC23 00					.BYTE $00
   385 BC24 00					.BYTE $00
   385 BC25 00					.BYTE $00
   385 BC26 00					.BYTE $00
   385 BC27 00					.BYTE $00
   385 BC28 00					.BYTE $00
   385 BC29 00					.BYTE $00
   385 BC2A 00					.BYTE $00
   385 BC2B 00					.BYTE $00
   385 BC2C 00					.BYTE $00
   385 BC2D 00					.BYTE $00
   385 BC2E 00					.BYTE $00
   385 BC2F 00					.BYTE $00
   385 BC30 00					.BYTE $00
   385 BC31 00					.BYTE $00
   385 BC32 00					.BYTE $00
   385 BC33 00					.BYTE $00
   385 BC34 00					.BYTE $00
   385 BC35 00					.BYTE $00
   385 BC36 00					.BYTE $00
   385 BC37 00					.BYTE $00
   385 BC38 00					.BYTE $00
   385 BC39 00					.BYTE $00
   385 BC3A 00					.BYTE $00
   385 BC3B 00					.BYTE $00
   385 BC3C 00					.BYTE $00
   385 BC3D 00					.BYTE $00
   385 BC3E 00					.BYTE $00
   385 BC3F 00					.BYTE $00
   385 BC40 00					.BYTE $00
   385 BC41 00					.BYTE $00
   385 BC42 00					.BYTE $00
   385 BC43 00					.BYTE $00
   385 BC44 00					.BYTE $00
   385 BC45 00					.BYTE $00
   385 BC46 00					.BYTE $00
   385 BC47 00					.BYTE $00
   385 BC48 00					.BYTE $00
   385 BC49 00					.BYTE $00
   385 BC4A 00					.BYTE $00
   385 BC4B 00					.BYTE $00
   385 BC4C 00					.BYTE $00
   385 BC4D 00					.BYTE $00
   385 BC4E 00					.BYTE $00
   385 BC4F 00					.BYTE $00
   385 BC50 00					.BYTE $00
   385 BC51 00					.BYTE $00
   385 BC52 00					.BYTE $00
   385 BC53 00					.BYTE $00
   385 BC54 00					.BYTE $00
   385 BC55 00					.BYTE $00
   385 BC56 00					.BYTE $00
   385 BC57 00					.BYTE $00
   385 BC58 00					.BYTE $00
   385 BC59 00					.BYTE $00
   385 BC5A 00					.BYTE $00
   385 BC5B 00					.BYTE $00
   385 BC5C 00					.BYTE $00
   385 BC5D 00					.BYTE $00
   385 BC5E 00					.BYTE $00
   385 BC5F 00					.BYTE $00
   385 BC60 00					.BYTE $00
   385 BC61 00					.BYTE $00
   385 BC62 00					.BYTE $00
   385 BC63 00					.BYTE $00
   385 BC64 00					.BYTE $00
   385 BC65 00					.BYTE $00
   385 BC66 00					.BYTE $00
   385 BC67 00					.BYTE $00
   385 BC68 00					.BYTE $00
   385 BC69 00					.BYTE $00
   385 BC6A 00					.BYTE $00
   385 BC6B 00					.BYTE $00
   385 BC6C 00					.BYTE $00
   385 BC6D 00					.BYTE $00
   385 BC6E 00					.BYTE $00
   385 BC6F 00					.BYTE $00
   385 BC70 00					.BYTE $00
   385 BC71 00					.BYTE $00
   385 BC72 00					.BYTE $00
   385 BC73 00					.BYTE $00
   385 BC74 00					.BYTE $00
   385 BC75 00					.BYTE $00
   385 BC76 00					.BYTE $00
   385 BC77 00					.BYTE $00
   385 BC78 00					.BYTE $00
   385 BC79 00					.BYTE $00
   385 BC7A 00					.BYTE $00
   385 BC7B 00					.BYTE $00
   385 BC7C 00					.BYTE $00
   385 BC7D 00					.BYTE $00
   385 BC7E 00					.BYTE $00
   385 BC7F 00					.BYTE $00
   385 BC80 00					.BYTE $00
   385 BC81 00					.BYTE $00
   385 BC82 00					.BYTE $00
   385 BC83 00					.BYTE $00
   385 BC84 00					.BYTE $00
   385 BC85 00					.BYTE $00
   385 BC86 00					.BYTE $00
   385 BC87 00					.BYTE $00
   385 BC88 00					.BYTE $00
   385 BC89 00					.BYTE $00
   385 BC8A 00					.BYTE $00
   385 BC8B 00					.BYTE $00
   385 BC8C 00					.BYTE $00
   385 BC8D 00					.BYTE $00
   385 BC8E 00					.BYTE $00
   385 BC8F 00					.BYTE $00
   385 BC90 00					.BYTE $00
   385 BC91 00					.BYTE $00
   385 BC92 00					.BYTE $00
   385 BC93 00					.BYTE $00
   385 BC94 00					.BYTE $00
   385 BC95 00					.BYTE $00
   385 BC96 00					.BYTE $00
   385 BC97 00					.BYTE $00
   385 BC98 00					.BYTE $00
   385 BC99 00					.BYTE $00
   385 BC9A 00					.BYTE $00
   385 BC9B 00					.BYTE $00
   385 BC9C 00					.BYTE $00
   385 BC9D 00					.BYTE $00
   385 BC9E 00					.BYTE $00
   385 BC9F 00					.BYTE $00
   385 BCA0 00					.BYTE $00
   385 BCA1 00					.BYTE $00
   385 BCA2 00					.BYTE $00
   385 BCA3 00					.BYTE $00
   385 BCA4 00					.BYTE $00
   385 BCA5 00					.BYTE $00
   385 BCA6 00					.BYTE $00
   385 BCA7 00					.BYTE $00
   385 BCA8 00					.BYTE $00
   385 BCA9 00					.BYTE $00
   385 BCAA 00					.BYTE $00
   385 BCAB 00					.BYTE $00
   385 BCAC 00					.BYTE $00
   385 BCAD 00					.BYTE $00
   385 BCAE 00					.BYTE $00
   385 BCAF 00					.BYTE $00
   385 BCB0 00					.BYTE $00
   385 BCB1 00					.BYTE $00
   385 BCB2 00					.BYTE $00
   385 BCB3 00					.BYTE $00
   385 BCB4 00					.BYTE $00
   385 BCB5 00					.BYTE $00
   385 BCB6 00					.BYTE $00
   385 BCB7 00					.BYTE $00
   385 BCB8 00					.BYTE $00
   385 BCB9 00					.BYTE $00
   385 BCBA 00					.BYTE $00
   385 BCBB 00					.BYTE $00
   385 BCBC 00					.BYTE $00
   385 BCBD 00					.BYTE $00
   385 BCBE 00					.BYTE $00
   385 BCBF 00					.BYTE $00
   385 BCC0 00					.BYTE $00
   385 BCC1 00					.BYTE $00
   385 BCC2 00					.BYTE $00
   385 BCC3 00					.BYTE $00
   385 BCC4 00					.BYTE $00
   385 BCC5 00					.BYTE $00
   385 BCC6 00					.BYTE $00
   385 BCC7 00					.BYTE $00
   385 BCC8 00					.BYTE $00
   385 BCC9 00					.BYTE $00
   385 BCCA 00					.BYTE $00
   385 BCCB 00					.BYTE $00
   385 BCCC 00					.BYTE $00
   385 BCCD 00					.BYTE $00
   385 BCCE 00					.BYTE $00
   385 BCCF 00					.BYTE $00
   385 BCD0 00					.BYTE $00
   385 BCD1 00					.BYTE $00
   385 BCD2 00					.BYTE $00
   385 BCD3 00					.BYTE $00
   385 BCD4 00					.BYTE $00
   385 BCD5 00					.BYTE $00
   385 BCD6 00					.BYTE $00
   385 BCD7 00					.BYTE $00
   385 BCD8 00					.BYTE $00
   385 BCD9 00					.BYTE $00
   385 BCDA 00					.BYTE $00
   385 BCDB 00					.BYTE $00
   385 BCDC 00					.BYTE $00
   385 BCDD 00					.BYTE $00
   385 BCDE 00					.BYTE $00
   385 BCDF 00					.BYTE $00
   385 BCE0 00					.BYTE $00
   385 BCE1 00					.BYTE $00
   385 BCE2 00					.BYTE $00
   385 BCE3 00					.BYTE $00
   385 BCE4 00					.BYTE $00
   385 BCE5 00					.BYTE $00
   385 BCE6 00					.BYTE $00
   385 BCE7 00					.BYTE $00
   385 BCE8 00					.BYTE $00
   385 BCE9 00					.BYTE $00
   385 BCEA 00					.BYTE $00
   385 BCEB 00					.BYTE $00
   385 BCEC 00					.BYTE $00
   385 BCED 00					.BYTE $00
   385 BCEE 00					.BYTE $00
   385 BCEF 00					.BYTE $00
   385 BCF0 00					.BYTE $00
   385 BCF1 00					.BYTE $00
   385 BCF2 00					.BYTE $00
   385 BCF3 00					.BYTE $00
   385 BCF4 00					.BYTE $00
   385 BCF5 00					.BYTE $00
   385 BCF6 00					.BYTE $00
   385 BCF7 00					.BYTE $00
   385 BCF8 00					.BYTE $00
   385 BCF9 00					.BYTE $00
   385 BCFA 00					.BYTE $00
   385 BCFB 00					.BYTE $00
   385 BCFC 00					.BYTE $00
   385 BCFD 00					.BYTE $00
   385 BCFE 00					.BYTE $00
   385 BCFF 00					.BYTE $00
   385 BD00 00					.BYTE $00
   385 BD01 00					.BYTE $00
   385 BD02 00					.BYTE $00
   385 BD03 00					.BYTE $00
   385 BD04 00					.BYTE $00
   385 BD05 00					.BYTE $00
   385 BD06 00					.BYTE $00
   385 BD07 00					.BYTE $00
   385 BD08 00					.BYTE $00
   385 BD09 00					.BYTE $00
   385 BD0A 00					.BYTE $00
   385 BD0B 00					.BYTE $00
   385 BD0C 00					.BYTE $00
   385 BD0D 00					.BYTE $00
   385 BD0E 00					.BYTE $00
   385 BD0F 00					.BYTE $00
   385 BD10 00					.BYTE $00
   385 BD11 00					.BYTE $00
   385 BD12 00					.BYTE $00
   385 BD13 00					.BYTE $00
   385 BD14 00					.BYTE $00
   385 BD15 00					.BYTE $00
   385 BD16 00					.BYTE $00
   385 BD17 00					.BYTE $00
   385 BD18 00					.BYTE $00
   385 BD19 00					.BYTE $00
   385 BD1A 00					.BYTE $00
   385 BD1B 00					.BYTE $00
   385 BD1C 00					.BYTE $00
   385 BD1D 00					.BYTE $00
   385 BD1E 00					.BYTE $00
   385 BD1F 00					.BYTE $00
   385 BD20 00					.BYTE $00
   385 BD21 00					.BYTE $00
   385 BD22 00					.BYTE $00
   385 BD23 00					.BYTE $00
   385 BD24 00					.BYTE $00
   385 BD25 00					.BYTE $00
   385 BD26 00					.BYTE $00
   385 BD27 00					.BYTE $00
   385 BD28 00					.BYTE $00
   385 BD29 00					.BYTE $00
   385 BD2A 00					.BYTE $00
   385 BD2B 00					.BYTE $00
   385 BD2C 00					.BYTE $00
   385 BD2D 00					.BYTE $00
   385 BD2E 00					.BYTE $00
   385 BD2F 00					.BYTE $00
   385 BD30 00					.BYTE $00
   385 BD31 00					.BYTE $00
   385 BD32 00					.BYTE $00
   385 BD33 00					.BYTE $00
   385 BD34 00					.BYTE $00
   385 BD35 00					.BYTE $00
   385 BD36 00					.BYTE $00
   385 BD37 00					.BYTE $00
   385 BD38 00					.BYTE $00
   385 BD39 00					.BYTE $00
   385 BD3A 00					.BYTE $00
   385 BD3B 00					.BYTE $00
   385 BD3C 00					.BYTE $00
   385 BD3D 00					.BYTE $00
   385 BD3E 00					.BYTE $00
   385 BD3F 00					.BYTE $00
   385 BD40 00					.BYTE $00
   385 BD41 00					.BYTE $00
   385 BD42 00					.BYTE $00
   385 BD43 00					.BYTE $00
   385 BD44 00					.BYTE $00
   385 BD45 00					.BYTE $00
   385 BD46 00					.BYTE $00
   385 BD47 00					.BYTE $00
   385 BD48 00					.BYTE $00
   385 BD49 00					.BYTE $00
   385 BD4A 00					.BYTE $00
   385 BD4B 00					.BYTE $00
   385 BD4C 00					.BYTE $00
   385 BD4D 00					.BYTE $00
   385 BD4E 00					.BYTE $00
   385 BD4F 00					.BYTE $00
   385 BD50 00					.BYTE $00
   385 BD51 00					.BYTE $00
   385 BD52 00					.BYTE $00
   385 BD53 00					.BYTE $00
   385 BD54 00					.BYTE $00
   385 BD55 00					.BYTE $00
   385 BD56 00					.BYTE $00
   385 BD57 00					.BYTE $00
   385 BD58 00					.BYTE $00
   385 BD59 00					.BYTE $00
   385 BD5A 00					.BYTE $00
   385 BD5B 00					.BYTE $00
   385 BD5C 00					.BYTE $00
   385 BD5D 00					.BYTE $00
   385 BD5E 00					.BYTE $00
   385 BD5F 00					.BYTE $00
   385 BD60 00					.BYTE $00
   385 BD61 00					.BYTE $00
   385 BD62 00					.BYTE $00
   385 BD63 00					.BYTE $00
   385 BD64 00					.BYTE $00
   385 BD65 00					.BYTE $00
   385 BD66 00					.BYTE $00
   385 BD67 00					.BYTE $00
   385 BD68 00					.BYTE $00
   385 BD69 00					.BYTE $00
   385 BD6A 00					.BYTE $00
   385 BD6B 00					.BYTE $00
   385 BD6C 00					.BYTE $00
   385 BD6D 00					.BYTE $00
   385 BD6E 00					.BYTE $00
   385 BD6F 00					.BYTE $00
   385 BD70 00					.BYTE $00
   385 BD71 00					.BYTE $00
   385 BD72 00					.BYTE $00
   385 BD73 00					.BYTE $00
   385 BD74 00					.BYTE $00
   385 BD75 00					.BYTE $00
   385 BD76 00					.BYTE $00
   385 BD77 00					.BYTE $00
   385 BD78 00					.BYTE $00
   385 BD79 00					.BYTE $00
   385 BD7A 00					.BYTE $00
   385 BD7B 00					.BYTE $00
   385 BD7C 00					.BYTE $00
   385 BD7D 00					.BYTE $00
   385 BD7E 00					.BYTE $00
   385 BD7F 00					.BYTE $00
   385 BD80 00					.BYTE $00
   385 BD81 00					.BYTE $00
   385 BD82 00					.BYTE $00
   385 BD83 00					.BYTE $00
   385 BD84 00					.BYTE $00
   385 BD85 00					.BYTE $00
   385 BD86 00					.BYTE $00
   385 BD87 00					.BYTE $00
   385 BD88 00					.BYTE $00
   385 BD89 00					.BYTE $00
   385 BD8A 00					.BYTE $00
   385 BD8B 00					.BYTE $00
   385 BD8C 00					.BYTE $00
   385 BD8D 00					.BYTE $00
   385 BD8E 00					.BYTE $00
   385 BD8F 00					.BYTE $00
   385 BD90 00					.BYTE $00
   385 BD91 00					.BYTE $00
   385 BD92 00					.BYTE $00
   385 BD93 00					.BYTE $00
   385 BD94 00					.BYTE $00
   385 BD95 00					.BYTE $00
   385 BD96 00					.BYTE $00
   385 BD97 00					.BYTE $00
   385 BD98 00					.BYTE $00
   385 BD99 00					.BYTE $00
   385 BD9A 00					.BYTE $00
   385 BD9B 00					.BYTE $00
   385 BD9C 00					.BYTE $00
   385 BD9D 00					.BYTE $00
   385 BD9E 00					.BYTE $00
   385 BD9F 00					.BYTE $00
   385 BDA0 00					.BYTE $00
   385 BDA1 00					.BYTE $00
   385 BDA2 00					.BYTE $00
   385 BDA3 00					.BYTE $00
   385 BDA4 00					.BYTE $00
   385 BDA5 00					.BYTE $00
   385 BDA6 00					.BYTE $00
   385 BDA7 00					.BYTE $00
   385 BDA8 00					.BYTE $00
   385 BDA9 00					.BYTE $00
   385 BDAA 00					.BYTE $00
   385 BDAB 00					.BYTE $00
   385 BDAC 00					.BYTE $00
   385 BDAD 00					.BYTE $00
   385 BDAE 00					.BYTE $00
   385 BDAF 00					.BYTE $00
   385 BDB0 00					.BYTE $00
   385 BDB1 00					.BYTE $00
   385 BDB2 00					.BYTE $00
   385 BDB3 00					.BYTE $00
   385 BDB4 00					.BYTE $00
   385 BDB5 00					.BYTE $00
   385 BDB6 00					.BYTE $00
   385 BDB7 00					.BYTE $00
   385 BDB8 00					.BYTE $00
   385 BDB9 00					.BYTE $00
   385 BDBA 00					.BYTE $00
   385 BDBB 00					.BYTE $00
   385 BDBC 00					.BYTE $00
   385 BDBD 00					.BYTE $00
   385 BDBE 00					.BYTE $00
   385 BDBF 00					.BYTE $00
   385 BDC0 00					.BYTE $00
   385 BDC1 00					.BYTE $00
   385 BDC2 00					.BYTE $00
   385 BDC3 00					.BYTE $00
   385 BDC4 00					.BYTE $00
   385 BDC5 00					.BYTE $00
   385 BDC6 00					.BYTE $00
   385 BDC7 00					.BYTE $00
   385 BDC8 00					.BYTE $00
   385 BDC9 00					.BYTE $00
   385 BDCA 00					.BYTE $00
   385 BDCB 00					.BYTE $00
   385 BDCC 00					.BYTE $00
   385 BDCD 00					.BYTE $00
   385 BDCE 00					.BYTE $00
   385 BDCF 00					.BYTE $00
   385 BDD0 00					.BYTE $00
   385 BDD1 00					.BYTE $00
   385 BDD2 00					.BYTE $00
   385 BDD3 00					.BYTE $00
   385 BDD4 00					.BYTE $00
   385 BDD5 00					.BYTE $00
   385 BDD6 00					.BYTE $00
   385 BDD7 00					.BYTE $00
   385 BDD8 00					.BYTE $00
   385 BDD9 00					.BYTE $00
   385 BDDA 00					.BYTE $00
   385 BDDB 00					.BYTE $00
   385 BDDC 00					.BYTE $00
   385 BDDD 00					.BYTE $00
   385 BDDE 00					.BYTE $00
   385 BDDF 00					.BYTE $00
   385 BDE0 00					.BYTE $00
   385 BDE1 00					.BYTE $00
   385 BDE2 00					.BYTE $00
   385 BDE3 00					.BYTE $00
   385 BDE4 00					.BYTE $00
   385 BDE5 00					.BYTE $00
   385 BDE6 00					.BYTE $00
   385 BDE7 00					.BYTE $00
   385 BDE8 00					.BYTE $00
   385 BDE9 00					.BYTE $00
   385 BDEA 00					.BYTE $00
   385 BDEB 00					.BYTE $00
   385 BDEC 00					.BYTE $00
   385 BDED 00					.BYTE $00
   385 BDEE 00					.BYTE $00
   385 BDEF 00					.BYTE $00
   385 BDF0 00					.BYTE $00
   385 BDF1 00					.BYTE $00
   385 BDF2 00					.BYTE $00
   385 BDF3 00					.BYTE $00
   385 BDF4 00					.BYTE $00
   385 BDF5 00					.BYTE $00
   385 BDF6 00					.BYTE $00
   385 BDF7 00					.BYTE $00
   385 BDF8 00					.BYTE $00
   385 BDF9 00					.BYTE $00
   385 BDFA 00					.BYTE $00
   385 BDFB 00					.BYTE $00
   385 BDFC 00					.BYTE $00
   385 BDFD 00					.BYTE $00
   385 BDFE 00					.BYTE $00
   385 BDFF 00					.BYTE $00
   385 BE00 00					.BYTE $00
   385 BE01 00					.BYTE $00
   385 BE02 00					.BYTE $00
   385 BE03 00					.BYTE $00
   385 BE04 00					.BYTE $00
   385 BE05 00					.BYTE $00
   385 BE06 00					.BYTE $00
   385 BE07 00					.BYTE $00
   385 BE08 00					.BYTE $00
   385 BE09 00					.BYTE $00
   385 BE0A 00					.BYTE $00
   385 BE0B 00					.BYTE $00
   385 BE0C 00					.BYTE $00
   385 BE0D 00					.BYTE $00
   385 BE0E 00					.BYTE $00
   385 BE0F 00					.BYTE $00
   385 BE10 00					.BYTE $00
   385 BE11 00					.BYTE $00
   385 BE12 00					.BYTE $00
   385 BE13 00					.BYTE $00
   385 BE14 00					.BYTE $00
   385 BE15 00					.BYTE $00
   385 BE16 00					.BYTE $00
   385 BE17 00					.BYTE $00
   385 BE18 00					.BYTE $00
   385 BE19 00					.BYTE $00
   385 BE1A 00					.BYTE $00
   385 BE1B 00					.BYTE $00
   385 BE1C 00					.BYTE $00
   385 BE1D 00					.BYTE $00
   385 BE1E 00					.BYTE $00
   385 BE1F 00					.BYTE $00
   385 BE20 00					.BYTE $00
   385 BE21 00					.BYTE $00
   385 BE22 00					.BYTE $00
   385 BE23 00					.BYTE $00
   385 BE24 00					.BYTE $00
   385 BE25 00					.BYTE $00
   385 BE26 00					.BYTE $00
   385 BE27 00					.BYTE $00
   385 BE28 00					.BYTE $00
   385 BE29 00					.BYTE $00
   385 BE2A 00					.BYTE $00
   385 BE2B 00					.BYTE $00
   385 BE2C 00					.BYTE $00
   385 BE2D 00					.BYTE $00
   385 BE2E 00					.BYTE $00
   385 BE2F 00					.BYTE $00
   385 BE30 00					.BYTE $00
   385 BE31 00					.BYTE $00
   385 BE32 00					.BYTE $00
   385 BE33 00					.BYTE $00
   385 BE34 00					.BYTE $00
   385 BE35 00					.BYTE $00
   385 BE36 00					.BYTE $00
   385 BE37 00					.BYTE $00
   385 BE38 00					.BYTE $00
   385 BE39 00					.BYTE $00
   385 BE3A 00					.BYTE $00
   385 BE3B 00					.BYTE $00
   385 BE3C 00					.BYTE $00
   385 BE3D 00					.BYTE $00
   385 BE3E 00					.BYTE $00
   385 BE3F 00					.BYTE $00
   385 BE40 00					.BYTE $00
   385 BE41 00					.BYTE $00
   385 BE42 00					.BYTE $00
   385 BE43 00					.BYTE $00
   385 BE44 00					.BYTE $00
   385 BE45 00					.BYTE $00
   385 BE46 00					.BYTE $00
   385 BE47 00					.BYTE $00
   385 BE48 00					.BYTE $00
   385 BE49 00					.BYTE $00
   385 BE4A 00					.BYTE $00
   385 BE4B 00					.BYTE $00
   385 BE4C 00					.BYTE $00
   385 BE4D 00					.BYTE $00
   385 BE4E 00					.BYTE $00
   385 BE4F 00					.BYTE $00
   385 BE50 00					.BYTE $00
   385 BE51 00					.BYTE $00
   385 BE52 00					.BYTE $00
   385 BE53 00					.BYTE $00
   385 BE54 00					.BYTE $00
   385 BE55 00					.BYTE $00
   385 BE56 00					.BYTE $00
   385 BE57 00					.BYTE $00
   385 BE58 00					.BYTE $00
   385 BE59 00					.BYTE $00
   385 BE5A 00					.BYTE $00
   385 BE5B 00					.BYTE $00
   385 BE5C 00					.BYTE $00
   385 BE5D 00					.BYTE $00
   385 BE5E 00					.BYTE $00
   385 BE5F 00					.BYTE $00
   385 BE60 00					.BYTE $00
   385 BE61 00					.BYTE $00
   385 BE62 00					.BYTE $00
   385 BE63 00					.BYTE $00
   385 BE64 00					.BYTE $00
   385 BE65 00					.BYTE $00
   385 BE66 00					.BYTE $00
   385 BE67 00					.BYTE $00
   385 BE68 00					.BYTE $00
   385 BE69 00					.BYTE $00
   385 BE6A 00					.BYTE $00
   385 BE6B 00					.BYTE $00
   385 BE6C 00					.BYTE $00
   385 BE6D 00					.BYTE $00
   385 BE6E 00					.BYTE $00
   385 BE6F 00					.BYTE $00
   385 BE70 00					.BYTE $00
   385 BE71 00					.BYTE $00
   385 BE72 00					.BYTE $00
   385 BE73 00					.BYTE $00
   385 BE74 00					.BYTE $00
   385 BE75 00					.BYTE $00
   385 BE76 00					.BYTE $00
   385 BE77 00					.BYTE $00
   385 BE78 00					.BYTE $00
   385 BE79 00					.BYTE $00
   385 BE7A 00					.BYTE $00
   385 BE7B 00					.BYTE $00
   385 BE7C 00					.BYTE $00
   385 BE7D 00					.BYTE $00
   385 BE7E 00					.BYTE $00
   385 BE7F 00					.BYTE $00
   385 BE80 00					.BYTE $00
   385 BE81 00					.BYTE $00
   385 BE82 00					.BYTE $00
   385 BE83 00					.BYTE $00
   385 BE84 00					.BYTE $00
   385 BE85 00					.BYTE $00
   385 BE86 00					.BYTE $00
   385 BE87 00					.BYTE $00
   385 BE88 00					.BYTE $00
   385 BE89 00					.BYTE $00
   385 BE8A 00					.BYTE $00
   385 BE8B 00					.BYTE $00
   385 BE8C 00					.BYTE $00
   385 BE8D 00					.BYTE $00
   385 BE8E 00					.BYTE $00
   385 BE8F 00					.BYTE $00
   385 BE90 00					.BYTE $00
   385 BE91 00					.BYTE $00
   385 BE92 00					.BYTE $00
   385 BE93 00					.BYTE $00
   385 BE94 00					.BYTE $00
   385 BE95 00					.BYTE $00
   385 BE96 00					.BYTE $00
   385 BE97 00					.BYTE $00
   385 BE98 00					.BYTE $00
   385 BE99 00					.BYTE $00
   385 BE9A 00					.BYTE $00
   385 BE9B 00					.BYTE $00
   385 BE9C 00					.BYTE $00
   385 BE9D 00					.BYTE $00
   385 BE9E 00					.BYTE $00
   385 BE9F 00					.BYTE $00
   385 BEA0 00					.BYTE $00
   385 BEA1 00					.BYTE $00
   385 BEA2 00					.BYTE $00
   385 BEA3 00					.BYTE $00
   385 BEA4 00					.BYTE $00
   385 BEA5 00					.BYTE $00
   385 BEA6 00					.BYTE $00
   385 BEA7 00					.BYTE $00
   385 BEA8 00					.BYTE $00
   385 BEA9 00					.BYTE $00
   385 BEAA 00					.BYTE $00
   385 BEAB 00					.BYTE $00
   385 BEAC 00					.BYTE $00
   385 BEAD 00					.BYTE $00
   385 BEAE 00					.BYTE $00
   385 BEAF 00					.BYTE $00
   385 BEB0 00					.BYTE $00
   385 BEB1 00					.BYTE $00
   385 BEB2 00					.BYTE $00
   385 BEB3 00					.BYTE $00
   385 BEB4 00					.BYTE $00
   385 BEB5 00					.BYTE $00
   385 BEB6 00					.BYTE $00
   385 BEB7 00					.BYTE $00
   385 BEB8 00					.BYTE $00
   385 BEB9 00					.BYTE $00
   385 BEBA 00					.BYTE $00
   385 BEBB 00					.BYTE $00
   385 BEBC 00					.BYTE $00
   385 BEBD 00					.BYTE $00
   385 BEBE 00					.BYTE $00
   385 BEBF 00					.BYTE $00
   385 BEC0 00					.BYTE $00
   385 BEC1 00					.BYTE $00
   385 BEC2 00					.BYTE $00
   385 BEC3 00					.BYTE $00
   385 BEC4 00					.BYTE $00
   385 BEC5 00					.BYTE $00
   385 BEC6 00					.BYTE $00
   385 BEC7 00					.BYTE $00
   385 BEC8 00					.BYTE $00
   385 BEC9 00					.BYTE $00
   385 BECA 00					.BYTE $00
   385 BECB 00					.BYTE $00
   385 BECC 00					.BYTE $00
   385 BECD 00					.BYTE $00
   385 BECE 00					.BYTE $00
   385 BECF 00					.BYTE $00
   385 BED0 00					.BYTE $00
   385 BED1 00					.BYTE $00
   385 BED2 00					.BYTE $00
   385 BED3 00					.BYTE $00
   385 BED4 00					.BYTE $00
   385 BED5 00					.BYTE $00
   385 BED6 00					.BYTE $00
   385 BED7 00					.BYTE $00
   385 BED8 00					.BYTE $00
   385 BED9 00					.BYTE $00
   385 BEDA 00					.BYTE $00
   385 BEDB 00					.BYTE $00
   385 BEDC 00					.BYTE $00
   385 BEDD 00					.BYTE $00
   385 BEDE 00					.BYTE $00
   385 BEDF 00					.BYTE $00
   385 BEE0 00					.BYTE $00
   385 BEE1 00					.BYTE $00
   385 BEE2 00					.BYTE $00
   385 BEE3 00					.BYTE $00
   385 BEE4 00					.BYTE $00
   385 BEE5 00					.BYTE $00
   385 BEE6 00					.BYTE $00
   385 BEE7 00					.BYTE $00
   385 BEE8 00					.BYTE $00
   385 BEE9 00					.BYTE $00
   385 BEEA 00					.BYTE $00
   385 BEEB 00					.BYTE $00
   385 BEEC 00					.BYTE $00
   385 BEED 00					.BYTE $00
   385 BEEE 00					.BYTE $00
   385 BEEF 00					.BYTE $00
   385 BEF0 00					.BYTE $00
   385 BEF1 00					.BYTE $00
   385 BEF2 00					.BYTE $00
   385 BEF3 00					.BYTE $00
   385 BEF4 00					.BYTE $00
   385 BEF5 00					.BYTE $00
   385 BEF6 00					.BYTE $00
   385 BEF7 00					.BYTE $00
   385 BEF8 00					.BYTE $00
   385 BEF9 00					.BYTE $00
   385 BEFA 00					.BYTE $00
   385 BEFB 00					.BYTE $00
   385 BEFC 00					.BYTE $00
   385 BEFD 00					.BYTE $00
   385 BEFE 00					.BYTE $00
   385 BEFF 00					.BYTE $00
   385 BF00 00					.BYTE $00
   385 BF01 00					.BYTE $00
   385 BF02 00					.BYTE $00
   385 BF03 00					.BYTE $00
   385 BF04 00					.BYTE $00
   385 BF05 00					.BYTE $00
   385 BF06 00					.BYTE $00
   385 BF07 00					.BYTE $00
   385 BF08 00					.BYTE $00
   385 BF09 00					.BYTE $00
   385 BF0A 00					.BYTE $00
   385 BF0B 00					.BYTE $00
   385 BF0C 00					.BYTE $00
   385 BF0D 00					.BYTE $00
   385 BF0E 00					.BYTE $00
   385 BF0F 00					.BYTE $00
   385 BF10 00					.BYTE $00
   385 BF11 00					.BYTE $00
   385 BF12 00					.BYTE $00
   385 BF13 00					.BYTE $00
   385 BF14 00					.BYTE $00
   385 BF15 00					.BYTE $00
   385 BF16 00					.BYTE $00
   385 BF17 00					.BYTE $00
   385 BF18 00					.BYTE $00
   385 BF19 00					.BYTE $00
   385 BF1A 00					.BYTE $00
   385 BF1B 00					.BYTE $00
   385 BF1C 00					.BYTE $00
   385 BF1D 00					.BYTE $00
   385 BF1E 00					.BYTE $00
   385 BF1F 00					.BYTE $00
   385 BF20 00					.BYTE $00
   385 BF21 00					.BYTE $00
   385 BF22 00					.BYTE $00
   385 BF23 00					.BYTE $00
   385 BF24 00					.BYTE $00
   385 BF25 00					.BYTE $00
   385 BF26 00					.BYTE $00
   385 BF27 00					.BYTE $00
   385 BF28 00					.BYTE $00
   385 BF29 00					.BYTE $00
   385 BF2A 00					.BYTE $00
   385 BF2B 00					.BYTE $00
   385 BF2C 00					.BYTE $00
   385 BF2D 00					.BYTE $00
   385 BF2E 00					.BYTE $00
   385 BF2F 00					.BYTE $00
   385 BF30 00					.BYTE $00
   385 BF31 00					.BYTE $00
   385 BF32 00					.BYTE $00
   385 BF33 00					.BYTE $00
   385 BF34 00					.BYTE $00
   385 BF35 00					.BYTE $00
   385 BF36 00					.BYTE $00
   385 BF37 00					.BYTE $00
   385 BF38 00					.BYTE $00
   385 BF39 00					.BYTE $00
   385 BF3A 00					.BYTE $00
   385 BF3B 00					.BYTE $00
   385 BF3C 00					.BYTE $00
   385 BF3D 00					.BYTE $00
   385 BF3E 00					.BYTE $00
   385 BF3F 00					.BYTE $00
   385 BF40 00					.BYTE $00
   385 BF41 00					.BYTE $00
   385 BF42 00					.BYTE $00
   385 BF43 00					.BYTE $00
   385 BF44 00					.BYTE $00
   385 BF45 00					.BYTE $00
   385 BF46 00					.BYTE $00
   385 BF47 00					.BYTE $00
   385 BF48 00					.BYTE $00
   385 BF49 00					.BYTE $00
   385 BF4A 00					.BYTE $00
   385 BF4B 00					.BYTE $00
   385 BF4C 00					.BYTE $00
   385 BF4D 00					.BYTE $00
   385 BF4E 00					.BYTE $00
   385 BF4F 00					.BYTE $00
   385 BF50 00					.BYTE $00
   385 BF51 00					.BYTE $00
   385 BF52 00					.BYTE $00
   385 BF53 00					.BYTE $00
   385 BF54 00					.BYTE $00
   385 BF55 00					.BYTE $00
   385 BF56 00					.BYTE $00
   385 BF57 00					.BYTE $00
   385 BF58 00					.BYTE $00
   385 BF59 00					.BYTE $00
   385 BF5A 00					.BYTE $00
   385 BF5B 00					.BYTE $00
   385 BF5C 00					.BYTE $00
   385 BF5D 00					.BYTE $00
   385 BF5E 00					.BYTE $00
   385 BF5F 00					.BYTE $00
   385 BF60 00					.BYTE $00
   385 BF61 00					.BYTE $00
   385 BF62 00					.BYTE $00
   385 BF63 00					.BYTE $00
   385 BF64 00					.BYTE $00
   385 BF65 00					.BYTE $00
   385 BF66 00					.BYTE $00
   385 BF67 00					.BYTE $00
   385 BF68 00					.BYTE $00
   385 BF69 00					.BYTE $00
   385 BF6A 00					.BYTE $00
   385 BF6B 00					.BYTE $00
   385 BF6C 00					.BYTE $00
   385 BF6D 00					.BYTE $00
   385 BF6E 00					.BYTE $00
   385 BF6F 00					.BYTE $00
   385 BF70 00					.BYTE $00
   385 BF71 00					.BYTE $00
   385 BF72 00					.BYTE $00
   385 BF73 00					.BYTE $00
   385 BF74 00					.BYTE $00
   385 BF75 00					.BYTE $00
   385 BF76 00					.BYTE $00
   385 BF77 00					.BYTE $00
   385 BF78 00					.BYTE $00
   385 BF79 00					.BYTE $00
   385 BF7A 00					.BYTE $00
   385 BF7B 00					.BYTE $00
   385 BF7C 00					.BYTE $00
   385 BF7D 00					.BYTE $00
   385 BF7E 00					.BYTE $00
   385 BF7F 00					.BYTE $00
   385 BF80 00					.BYTE $00
   385 BF81 00					.BYTE $00
   385 BF82 00					.BYTE $00
   385 BF83 00					.BYTE $00
   385 BF84 00					.BYTE $00
   385 BF85 00					.BYTE $00
   385 BF86 00					.BYTE $00
   385 BF87 00					.BYTE $00
   385 BF88 00					.BYTE $00
   385 BF89 00					.BYTE $00
   385 BF8A 00					.BYTE $00
   385 BF8B 00					.BYTE $00
   385 BF8C 00					.BYTE $00
   385 BF8D 00					.BYTE $00
   385 BF8E 00					.BYTE $00
   385 BF8F 00					.BYTE $00
   385 BF90 00					.BYTE $00
   385 BF91 00					.BYTE $00
   385 BF92 00					.BYTE $00
   385 BF93 00					.BYTE $00
   385 BF94 00					.BYTE $00
   385 BF95 00					.BYTE $00
   385 BF96 00					.BYTE $00
   385 BF97 00					.BYTE $00
   385 BF98 00					.BYTE $00
   385 BF99 00					.BYTE $00
   385 BF9A 00					.BYTE $00
   385 BF9B 00					.BYTE $00
   385 BF9C 00					.BYTE $00
   385 BF9D 00					.BYTE $00
   385 BF9E 00					.BYTE $00
   385 BF9F 00					.BYTE $00
   385 BFA0 00					.BYTE $00
   385 BFA1 00					.BYTE $00
   385 BFA2 00					.BYTE $00
   385 BFA3 00					.BYTE $00
   385 BFA4 00					.BYTE $00
   385 BFA5 00					.BYTE $00
   385 BFA6 00					.BYTE $00
   385 BFA7 00					.BYTE $00
   385 BFA8 00					.BYTE $00
   385 BFA9 00					.BYTE $00
   385 BFAA 00					.BYTE $00
   385 BFAB 00					.BYTE $00
   385 BFAC 00					.BYTE $00
   385 BFAD 00					.BYTE $00
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   387 					
   388 				; add extra line info to avoid problem with ladder in the last line	
   389 BFAE 61 61 61 61 61 61 + :LEVEL_CHAR_SIZE_X 		.byte $61
   390
   391 				;*****	Run Address
   392 				;
   393 02E0-02E1> 00 48			run InitSystem

mads 2.0.7
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Scroller.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	1 page 				= 256 bytes
    14 				;	1 K	   				= 004 pages - 1024 bytes	 
    15 				;	2 K	   				= 008 pages - 2048 bytes	 
    16 				;	3 K	   				= 012 pages - 3072 bytes	 
    17 				;	4 K	   				= 016 pages - 4096 bytes	 
    18 				;
    19 				;***** Memory Map - Atari 64K
    20 				;
    21 				;	$0000-$007F			zeropage for OS
    22 				;	$0080-$00FF 		zeropage for you
    23 				;	$0100-$01FF 		CPU stack
    24 				;	$0200-$02FF 		OS vector, registers
    25 				;	$0300-$03FF 		OS vector, registers
    26 				;	$0400-$05FF 		OS buffers
    27 				;	$0600-$06FF 		Page 6, object code in BASIC
    28 				;	$0700-$1FFF 		Disk Operating System
    29 				;	$2000-$7FFF 		User Code Area 
    30 				;	$8000-$BFFF 		Cartrige A and B slots
    31 				;	$C000-$CBFF 		OS part 1
    32 				;	$CC00-$CFFF 		OS character set, international
    33 				;	$D000-$D7FF			Hardware registers
    34 				;	$D800-$DFFF			FP Routines
    35 				;	$E000-$E3FF 		OS character set, standard
    36 				;	$E000-$FFFF 		OS part 2
    37 				;
    38 				;***** Include Library Files
    39 				;
    40 						icl "/Lib/AtariEquates.Asm"				; Atari hardware DOS,OS,ANTIC,GITA,POKEY,PIA equates
Source: E:\_8BitProjects\Series\Scroller\\Lib\AtariEquates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AtariEquates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************
    14 				; OS memory and vectors
    15 				;
    16 = 0012			RTCLOK 						= $12 				; and $13, and $14.  
    17 = 0014			RTCLOK60 					= $14 				; incremented every jiffy/frame.
    18
    19 = 004D			ATRACT 						= $4D
    20 = 0200			VDSLST 						= $0200 			; Display List interrupt.
    21
    22 				;
    23 				;**************************************************
    24 				; DOS - Misc values related to DOS and file loading
    25 				;
    26 = 2000			LOMEM_DOS 					= $2000 			; First usable memory after DOS
    27 = 3308			LOMEM_DOS_DUP 				= $3308 			; First usable memory after DOS and DUP 
    28
    29 				;**************************************************	
    30 				; Atari RUN ADDRESS.  
    31 				;
    32 				; 	The binary load file has a segmented structure 
    33 				; 	specifying starting address, and ending address, 
    34 				; 	followed by the bytes to load in that memory range.  
    35 				;
    36 				; 	DOS observes two special addresses when loading data.
    37 				; 	If the contents of the INIT address changes ater loading
    38 				; 	a segment DOS calls that address immediately. If the routine
    39 				; 	returns to DOS cleanly then file loading continues.
    40 				;
    41 				; 	If the contents of the RUN address changes DOS waits until
    42 				; 	all segments from the file are loaded and then calls the RUN
    43 				; 	address target.
    44 				;
    45 = 02E0			DOS_RUN_ADDR 				= $02e0				; Execute here when file loading completes.
    46 = 02E2			DOS_INIT_ADDR 				= $02e2				; Execute here immediately then resume loading.
    47
    48 				;**************************************************	
    49 				; ANTIC - Register List
    50 				;
    51 = D400			DMACTL 						= $D400				; DMA control for display and Player/Missile graphics
    52 = D401			CHACTL 						= $D401				; Character display control
    53 = D402			DLISTL 						= $D402				; Display List Pointer (low)
    54 = D403			DLISTH 						= $D403				; Display List Pointer (high)
    55 = D404			HSCROL 						= $D404				; Horizontal Fine Scroll 0 to 16 color clocks.
    56 = D405			VSCROL 						= $D405				; Vertical Fine Scroll 0 to 16 scanlines.
    57 = D407			PMBASE 						= $D407				; Player/Missile Base Address (high) 
    58 = D409			CHBASE 						= $D409				; Character Set Base Address (high)
    59 = D40A			WSYNC 						= $D40A				; Wait for Horizontal Sync
    60 = D40B			VCOUNT 						= $D40B				; (Read) Vertical Scan Line Counter
    61 = D40C			PENH 						= $D40C				; (Read) Light Pen Horizontal Position
    62 = D40D			PENV 						= $D40D				; (Read) Light Pen Vertical Position
    63 = D40E			NMIEN 						= $D40E				; Non-Maskable Interupt (NMI) Enable
    64 = D40F			NMIRES 						= $D40F				; (Write) Non-Maskable Interrupt (NMI) Reset
    65 = D40F			NMIST 						= $D40F				; (Read)  Non-Maskable Interrupt Status                   	
    66 				                   	;
    67 				;**************************************************
    68 				; Handler vectors:
    69 				;
    70 = FFFA			NMIH_VECTOR					= $FFFA
    71 = FFFC			RESH_VECTOR					= $FFFC
    72 = FFFE			IRQH_VECTOR					= $FFFE
    73
    74 				;**************************************************	
    75 				; Shadow Registers for Hardware Registers
    76 				;
    77 = 022F			SDMCTL 						= $022F 			; DMACTL
    78 = 0230			SDLSTL 						= $0230 			; DLISTL
    79 = 0231			SDLSTH 						= $0231 			; DLISTH
    80 = 02F4			CHBAS 						= $02F4 			; CHBASE
    81 = 02F3			CHART 						= $02F3 			; CHACTL
    82 = 0234			LPENH 						= $0234 			; (Read) PENH
    83 = 0235			LPENV 						= $0235 			; (Read) PENV
    84
    85 				;**************************************************	
    86 				; Important Bit Positions
    87 				;
    88 				;**************************************************
    89 				; DMACTL and SDMCTL - DMA control for display and Player/Missile graphics
    90 				;
    91 = 00DF			MASK_DL_DMA 				= %11011111			; Enable/Disable DMA to read the Display List
    92 = 00EF			MASK_PM_RESOLUTION 			= %11101111			; Set P/M graphics DMA to 1 or 2 scan line per update  
    93 = 00F3			MASK_PM_DMA 				= %11110011			; Enable/Disable DMA for Players/Missiles
    94 = 00FC			MASK_PLAYFIELD_WIDTH 		= %11111100			; Enable playfield display/set playfield width
    95
    96 				;**************************************************	
    97 				; DMACTL and SDMCTL - Enable/Disable DMA to read the Display List
    98 				;
    99 = 0020			ENABLE_DL_DMA 				= %00100000
   100 = 0000			DISABLE_DL_DMA 				= %00000000			; defining this is overkill
   101
   102 				;**************************************************	
   103 				; DMACTL and SDMCTL - Set P/M graphics DMA to 1 or 2 scan line per update  
   104 				;
   105 = 0010			PM_1LINE_RESOLUTION 		= %00010000
   106 = 0000			PM_2LINE_RESOLUTION 		= %00000000
   107
   108 				;**************************************************	
   109 				; DMACTL and SDMCTL - Enable DMA for Players/Missiles
   110 				;
   111 = 0008			ENABLE_PLAYER_DMA 			= %00001000
   112 = 0004			ENABLE_MISSILE_DMA 			= %00000100
   113 = 000C			ENABLE_PM_DMA 				= %00001100
   114
   115 				;**************************************************	
   116 				; DMACTL and SDMCTL - Enable playfield display/set playfield width
   117 				;
   118 = 0000			PLAYFIELD_DISABLE 			= %00000000			; No width is the same as no display
   119 = 0001			PLAYFIELD_WIDTH_NARROW_MASK	= %00000001			; 32 characters/128 color clocks
   120 = 0002			PLAYFIELD_WIDTH_NORMAL_MASK	= %00000010			; 40 characters/160 color clocks
   121 = 0003			PLAYFIELD_WIDTH_WIDE_MASK	= %00000011			; 48 characters/192 color clocks (176 visible)
   122
   123 				;**************************************************	
   124 				; CHACTL - Character display control
   125 				;
   126 = 00FB			MASK_CHACTL_REFLECT 		= %11111011			; Enable/Disable vertical reflect
   127 = 00FD			MASK_CHACTL_INVERSE 		= %11111101			; Enable/Disable characters with high bit set displayed as inverse 
   128 = 00FE			MASK_CHACTL_BLANK 			= %11111110			; Enable/Disable characters with high bit set displayed as blank space
   129
   130 				;**************************************************	
   131 				; CHACTL - Enable character display options
   132 				; 
   133 = 0004			CHACTL_REFLECT 				= %00000100 		; Enable vertical reflect
   134 = 0002			CHACTL_INVERSE 				= %00000010 		; Enable inverse display for characters with high bit set
   135 = 0001			CHACTL_BLANK 				= %00000001 		; Enable blank display for characters with high bit set
   136
   137 				;**************************************************	
   138 				; NMIEN (NMIRES and NMIST) - Non-Maskable Interupt (NMI) Reset and Status
   139 				;
   140 = 007F			MASK_NMI_DLI 				= %01111111 		; Enable/Disable Display List Interrupts
   141 = 00BF			MASK_NMI_VBI 				= %10111111 		; Enable/Disable Vertical Blank Interrupt
   142 = 00DF			MASK_NMI_RESET 				= %11011111 		; Enable/Disable Reset Key Interrupt
   143
   144 				;**************************************************	
   145 				; NMIEN (NMIRES and NMIST) - Enable Non-Maskable Interupts
   146 				;
   147 = 0080			NMI_DLI 					= %10000000 		; Enable Display List Interrupts
   148 = 0040			NMI_VBI 					= %01000000 		; Enable Vertical Blank Interrupt
   149 = 0020			NMI_RESET 					= %00100000 		; Enable Reset Key Interrupt
   150
   151 				;**************************************************	
   152 				; Display List Instructions/Options Mask
   153 				;
   154 = 007F			MASK_DL_DLI 				= %01111111 		; Display List Interrupt on last scan line of graphics line
   155 = 00BF			MASK_DL_LMS 				= %10111111 		; Reload Memory Scan address for this graphics line
   156 = 00DF			MASK_DL_VSCROLL 			= %11011111 		; Vertical scrolling for this graphics line
   157 = 00EF			MASK_DL_HSCROLL 			= %11101111 		; Horizontal scrolling for this graphics line
   158 = 00F0			MASK_DL_MODE 				= %11110000 		; Text/Graphics Modes
   159
   160 				;**************************************************	
   161 				; Display List Instruction Options
   162 				;
   163 = 0080			DL_DLI 						= %10000000 		; Enable Display List Interrupt on last scan line of graphics line
   164 = 0040			DL_LMS 						= %01000000 		; Enable Reload Memory Scan address for this graphics line
   165 = 0020			DL_VSCROLL 					= %00100000 		; Enable Vertical scrolling for this graphics line
   166 = 0010			DL_HSCROLL 					= %00010000 		; Enable Horizontal scrolling for this graphics line
   167 = 000F			DL_MODE 					= %00001111 		; Collection of Text/Graphics Modes
   168
   169 				;**************************************************	
   170 				; Display List Instructions, Jump 
   171 				;
   172 = 0001			DL_JUMP 					= $01				; Display List jump to new address
   173 = 0041			DL_JUMP_VB 					= $41				; Display List jump to address and start Vertical Blank
   174 				                        	
   175 				;**************************************************	
   176 				; Display List Instructions, blank scan lines
   177 				;
   178 				; 	Note: Bit $80 is not part of this, so the
   179 				; 	DL_DLI Instruction Option is available for 
   180 				; 	the blank line instructions.
   181 				;
   182 = 0000			DL_BLANK_1 					= $00 				; 1 Blank Scan line
   183 = 0010			DL_BLANK_2 					= $10 				; 2 Blank Scan lines
   184 = 0020			DL_BLANK_3 					= $20 				; 3 Blank Scan lines
   185 = 0030			DL_BLANK_4 					= $30 				; 4 Blank Scan lines
   186 = 0040			DL_BLANK_5 					= $40 				; 5 Blank Scan lines
   187 = 0050			DL_BLANK_6 					= $50 				; 6 Blank Scan lines
   188 = 0060			DL_BLANK_7 					= $60 				; 7 Blank Scan lines
   189 = 0070			DL_BLANK_8 					= $70 				; 8 Blank Scan lines
   190
   191 				;**************************************************	
   192 				; Display List Instructions, Text Modes
   193 				;
   194 = 0002			DL_TEXT_2 					= $02 				; 1.5 Color, 40 Columns X  8 Scan lines
   195 = 0003			DL_TEXT_3 					= $03 				; 1.5 Color, 40 Columns X 10 Scan lines
   196 = 0004			DL_TEXT_4 					= $04 				; 4/5 Color, 40 Columns X  8 Scan lines
   197 = 0005			DL_TEXT_5 					= $05 				; 4/5 Color, 40 Columns X 16 Scan lines
   198 = 0006			DL_TEXT_6 					= $06 				;   5 Color, 20 Columns X  8 Scan lines
   199 = 0007			DL_TEXT_7 					= $07 				;   5 Color, 20 Columns X 16 Scan lines
   200
   201 				;**************************************************	
   202 				; Display List Instructions, Map Modes
   203 				;
   204 = 0008			DL_MAP_8 					= $08 				;   4 Color,  40 Pixels X   8 Scan Lines
   205 = 0009			DL_MAP_9 					= $09 				;   2 Color,  80 Pixels X   4 Scan Lines
   206 = 000A			DL_MAP_A 					= $0A 				;   4 Color,  80 Pixels X   4 Scan Lines
   207 = 000B			DL_MAP_B 					= $0B 				;   2 Color, 160 Pixels X   2 Scan Lines
   208 = 000C			DL_MAP_C 					= $0C 				;   2 Color, 160 Pixels X   1 Scan Lines
   209 = 000D			DL_MAP_D 					= $0D 				;   4 Color, 160 Pixels X   2 Scan Lines
   210 = 000E			DL_MAP_E 					= $0E 				;   4 Color, 160 Pixels X   1 Scan Lines
   211 = 000F			DL_MAP_F 					= $0F 				; 1.5 Color, 320 Pixels X   1 Scan Lines (and GTIA modes)
   212
   213 				;**************************************************	
   214 				; GTIA - Register List
   215 				;
   216 				;**************************************************	
   217 				; Hardware Registers
   218 				;
   219 = D000			HPOSP0 						= $D000 			; Player 0 Horizontal Position
   220 = D001			HPOSP1 						= $D001 			; Player 1 Horizontal Position
   221 = D002			HPOSP2 						= $D002 			; Player 2 Horizontal Position
   222 = D003			HPOSP3 						= $D003 			; Player 3 Horizontal Position
   223 				                        	
   224 = D004			HPOSM0 						= $D004 			; Missile 0 Horizontal Position
   225 = D005			HPOSM1 						= $D005 			; Missile 1 Horizontal Position
   226 = D006			HPOSM2 						= $D006 			; Missile 2 Horizontal Position
   227 = D007			HPOSM3 						= $D007 			; Missile 3 Horizontal Position
   228 				;;     						        			
   229 = D008			SIZEP0 						= $D008 			; Player 0 Size
   230 = D009			SIZEP1 						= $D009 			; Player 1 Size
   231 = D00A			SIZEP2 						= $D00A 			; Player 2 Size
   232 = D00B			SIZEP3 						= $D00B 			; Player 3 Size
   233 = D00C			SIZEM 						= $D00C 			; Missiles Sizes (2 bits per missile)
   234 				                        	
   235 = D00D			GRAFP0 						= $D00D 			; Player 0 Graphics Pattern
   236 = D00E			GRAFP1 						= $D00E 			; Player 1 Graphics Pattern
   237 = D00F			GRAFP2 						= $D00F 			; Player 2 Graphics Pattern
   238 = D010			GRAFP3 						= $D010 			; Player 3 Graphics Pattern
   239 = D011			GRAFM 						= $D011 			; Missile Graphics Pattern (2 bits per missile)
   240 				                        	
   241 = D000			M0PF 						= $D000 			; (Read) Missile 0 to Playfield collisions
   242 = D001			M1PF 						= $D001 			; (Read) Missile 1 to Playfield collisions
   243 = D002			M2PF 						= $D002 			; (Read) Missile 2 to Playfield collisions
   244 = D003			M3PF 						= $D003 			; (Read) Missile 3 to Playfield collisions
   245 				   					    	    			
   246 = D004			P0PF 						= $D004 			; (Read) Player 0 to Playfield collisions
   247 = D005			P1PF 						= $D005 			; (Read) Player 1 to Playfield collisions
   248 = D006			P2PF 						= $D006 			; (Read) Player 2 to Playfield collisions
   249 = D007			P3PF 						= $D007 			; (Read) Player 3 to Playfield collisions
   250 				   					    	    			
   251 = D008			M0PL 						= $D008 			; (Read) Missile 0 to Player collisions
   252 = D009			M1PL 						= $D009 			; (Read) Missile 1 to Player collisions
   253 = D00A			M2PL 						= $D00A 			; (Read) Missile 2 to Player collisions
   254 = D00B			M3PL 						= $D00B 			; (Read) Missile 3 to Player collisions
   255 				   					    	    			
   256 = D00C			P0PL 						= $D00C 			; (Read) Player 0 to Player collisions
   257 = D00D			P1PL 						= $D00D 			; (Read) Player 1 to Player collisions
   258 = D00E			P2PL 						= $D00E 			; (Read) Player 2 to Player collisions
   259 = D00F			P3PL 						= $D00F 			; (Read) Player 3 to Player collisions
   260 				                        	
   261 = D012			COLPM0 						= $D012 			; Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   262 = D013			COLPM1 						= $D013 			; Player/Missile 1 color, GTIA 9-color playfield color 1
   263 = D014			COLPM2 						= $D014 			; Player/Missile 2 color, GTIA 9-color playfield color 2
   264 = D015			COLPM3 						= $D015 			; Player/Missile 3 color, GTIA 9-color playfield color 3
   265 				       						        			
   266 = D016			COLPF0 						= $D016 			; Playfield 0 color
   267 = D017			COLPF1 						= $D017 			; Playfield 1 color
   268 = D018			COLPF2 						= $D018 			; Playfield 2 color
   269 = D019			COLPF3 						= $D019 			; Playfield 3 color (and fifth Player color)
   270 = D01A			COLBK 						= $D01A 			; Playfield Background color
   271 				                        	
   272 = D010			TRIG0 						= $D010 			; (Read) Joystick 0 trigger
   273 = D011			TRIG1 						= $D011 			; (Read) Joystick 1 trigger
   274 = D012			TRIG2 						= $D012 			; (Read) Joystick 2 trigger
   275 = D013			TRIG3 						= $D013 			; (Read) Joystick 3 trigger
   276 				    						        				
   277 = D014			PAL    						= $D014 			; (Read) PAL Flag
   278 = D01B			PRIOR  						= $D01B 			; Control Priority, Fifth Player and GTIA modes
   279 = D01C			VDELAY 						= $D01C 			; Player Missile Vertical Delay
   280 = D01D			GRACTL 						= $D01D 			; Graphics Control, P/M DMA and joystick trigger latches
   281 = D01E			HITCLR 						= $D01E 			; Clear Player/Missile Collisions
   282 				     						        			
   283 = D01F			CONSOL 						= $D01F 			; (Read) Start, Select, Option console keys.
   284 = D01F			CONSPK 						= $D01F 			; Console speaker.
   285
   286 				;**************************************************	
   287 				; Shadow Registers for Hardware Registers
   288 				;
   289 = 0284			STRIG0 						= $0284				; (Read) TRIG0 - Joystick 0 trigger
   290 = 0285			STRIG1 						= $0285				; (Read) TRIG1 - Joystick 1 trigger
   291 = 0286			STRIG2 						= $0286				; (Read) TRIG2 - Joystick 2 trigger
   292 = 0287			STRIG3 						= $0287				; (Read) TRIG3 - Joystick 3 trigger
   293 				                        	
   294 = 02C0			PCOLOR0 					= $02C0				; COLPM0 - Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   295 = 02C1			PCOLOR1 					= $02C1				; COLPM1 - Player/Missile 1 color, GTIA 9-color playfield color 1
   296 = 02C2			PCOLOR2 					= $02C2				; COLPM2 - Player/Missile 2 color, GTIA 9-color playfield color 2
   297 = 02C3			PCOLOR3 					= $02C3				; COLPM3 - Player/Missile 3 color, GTIA 9-color playfield color 3
   298 				                      	
   299 = 02C4			COLOR0 						= $02C4				; COLPF0 - Playfield 0 color
   300 = 02C5			COLOR1 						= $02C5				; COLPF1 - Playfield 1 color
   301 = 02C6			COLOR2 						= $02C6				; COLPF2 - Playfield 2 color
   302 = 02C7			COLOR3 						= $02C7				; COLPF3 - Playfield 3 color (and fifth Player color)
   303 = 02C8			COLOR4 						= $02C8				; COLBK  - Playfield Background color
   304 				     						        				
   305 = 026F			GPRIOR 						= $026F				; PRIOR - Control Priority, Fifth Player and GTIA modes
   306
   307 				;**************************************************	
   308 				; Important Bit Positions
   309 				;		
   310 				;	SIZEP0 - SIZEP3
   311 				;
   312 = 0003			PLAYER_SIZE_BITS 			= %00000011
   313 = 0000			PM_SIZE_NORMAL 				= %00000000 		; One color clock per Player/Missile pixel
   314 = 0001			PM_SIZE_DOUBLE 				= %00000001 		; Two color clocks per Player/Missile pixel
   315 = 0003			PM_SIZE_QUAD 				= %00000011 		; Fopur color clocks per Player/Missile pixel
   316
   317 				;**************************************************	
   318 				; SIZEM and GRAFM (and missile memory)
   319 				;
   320 = 00FC			MASK_MISSILE0_BITS 			= %11111100
   321 = 00F3			MASK_MISSILE1_BITS 			= %11110011
   322 = 00CF			MASK_MISSILE2_BITS 			= %11001111
   323 = 003F			MASK_MISSILE3_BITS 			= %00111111
   324 				                        	
   325 = 0003			MISSILE0_BITS 				= %00000011
   326 = 000C			MISSILE1_BITS 				= %00001100
   327 = 0030			MISSILE2_BITS 				= %00110000
   328 = 00C0			MISSILE3_BITS 				= %11000000
   329 = 0055			MISSILES_BITS				= %01010101
   330 				 
   331 				;**************************************************	
   332 				; Collisions MxPF, MxPL, PxPF, PxPL
   333 				;
   334 				; 	COLPMx or COLPFx where X is bits 0 through 3
   335 				;
   336 = 00FE			MASK_COLPMF0_BIT 			= %11111110 		; Player or Missile v Player or Playfield color 0
   337 = 00FD			MASK_COLPMF1_BIT 			= %11111101 		; Player or Missile v Player or Playfield color 1
   338 = 00FB			MASK_COLPMF2_BIT 			= %11111011 		; Player or Missile v Player or Playfield color 2
   339 = 00F7			MASK_COLPMF3_BIT 			= %11110111 		; Player or Missile v Player or Playfield color 3
   340 				                      	
   341 = 0001			COLPMF0_BIT 				= %00000001 		; Player or Missile v Player or Playfield color 0
   342 = 0002			COLPMF1_BIT 				= %00000010 		; Player or Missile v Player or Playfield color 1
   343 = 0004			COLPMF2_BIT 				= %00000100 		; Player or Missile v Player or Playfield color 2
   344 = 0008			COLPMF3_BIT 				= %00001000 		; Player or Missile v Player or Playfield color 3
   345
   346 				;**************************************************	
   347 				; Colors Registers
   348 				;
   349 = 00F0			COLOR_BITS 					= %11110000
   350 = 000F			LUMA_BITS 					= %00001111
   351
   352 				;**************************************************	
   353 				; PRIOR and GPRIOR - Control Priority, Fifth Player and GTIA modes
   354 				;
   355 = 00F0			MASK_PRIORITY 				= %11110000 		; Player/Missile, Playfield priority
   356 = 00EF			MASK_F.ifH_PLAYER 			= %11101111 		; Enable/Disable Fifth Player
   357 = 00DF			MASK_MULTICOLOR_PM 			= %11011111 		; Enable/Disable Player color mixing
   358 = 003F			MASK_GTIA_MODE 				= %00111111 		; Enable/Disable GTIA playfield modes
   359 				                        	           
   360 = 0001			PM_PRIORITY_1				= %00000001
   361 = 0002			PM_PRIORITY_2				= %00000010
   362 = 0004			PM_PRIORITY_3				= %00000100
   363 = 0008			PM_PRIORITY_4				= %00001000       
   364 				                 	            		
   365 = 000F			PRIORITY_BITS 				= %00001111 		; Player/Missile, Playfield priority
   366 = 0010			F.ifH_PLAYER 				= %00010000 		; Enable Fifth Player
   367 = 0020			MULTICOLOR_PM 				= %00100000 		; Enable Player color mixing
   368 				                        	            		
   369 = 0000			GTIA_MODE_DEFAULT 			= %00000000 		; Normal CTIA color interpretation
   370 = 0040			GTIA_MODE_16_SHADE 			= %01000000 		; 16 shades of background color (COLBK)
   371 = 0080			GTIA_MODE_9_COLOR 			= %10000000 		; 9 colors from registers, COLPM0 is background
   372 = 00C0			GTIA_MODE_16_COLOR 			= %11000000 		; 16 hues of brigntess of background color (COLBK)
   373
   374 				;**************************************************	
   375 				; VDELAY - Delay PM DMA to render 2 scan line Player data one scan line lower 
   376 				;
   377 = 00FE			MASK_VD_MISSILE0 			= %11111110
   378 = 00FD			MASK_VD_MISSILE1 			= %11111101
   379 = 00FB			MASK_VD_MISSILE2 			= %11111011
   380 = 00F7			MASK_VD_MISSILE3 			= %11110111
   381 = 00EF			MASK_VD_PLAYER0 			= %11101111
   382 = 00DF			MASK_VD_PLAYER1 			= %11011111
   383 = 00BF			MASK_VD_PLAYER2 			= %10111111
   384 = 007F			MASK_VD_PLAYER3 			= %01111111
   385 				                        	
   386 = 0001			VD_MISSILE0 				= %00000001
   387 = 0002			VD_MISSILE1 				= %00000010
   388 = 0004			VD_MISSILE2 				= %00000100
   389 = 0008			VD_MISSILE3 				= %00001000
   390 = 0010			VD_PLAYER0 					= %00010000
   391 = 0020			VD_PLAYER1 					= %00100000
   392 = 0040			VD_PLAYER2 					= %01000000
   393 = 0080			VD_PLAYER3 					= %10000000
   394
   395 				;**************************************************	
   396 				; GRACTL - Enable/Disable Player/Missile DMA to GRAFxx registers. And latch triggers.
   397 				;
   398 = 00FE			MASK_ENABLE_MISSILES 		= %11111110 		; Enable/Disable Missile DMA to GRAFM register
   399 = 00FD			MASK_ENABLE_PLAYERS 		= %11111101 		; Enable/Disable Player DMA to GRAFPx registers
   400 = 00FB			MASK_TRIGGER_LATCH 			= %11111011 		; Enable/Disable jostick trigger latching
   401 				                        	          		
   402 = 0001			ENABLE_MISSILES 			= %00000001 		; Enable Missile DMA to GRAFM register
   403 = 0002			ENABLE_PLAYERS 				= %00000010 		; Enable Player DMA to GRAFPx registers
   404 = 0004			TRIGGER_LATCH 				= %00000100 		; Enable joystick trigger latching
   405
   406 				;**************************************************	                                  			
   407 				; CONSOL and CONSPK - 0 is key pressed
   408 				;
   409 = 00F8			MASK_CONSOLE_KEYS 			= %11111000
   410 = 00FE			MASK_CONSOLE_START 			= %11111110 		; Start button
   411 = 00FD			MASK_CONSOLE_SELECT 		= %11111101 		; Select button
   412 = 00FB			MASK_CONSOLE_OPTION 		= %11111011 		; Option button
   413 = 00F7			MASK_CONSOLE_SPEAKER 		= %11110111 		; (Write) Keyboard speaker
   414 				                        	
   415 = 0001			CONSOLE_START 				= %00000001 		; Start button
   416 = 0002			CONSOLE_SELECT 				= %00000010 		; Select button
   417 = 0004			CONSOLE_OPTION 				= %00000100 		; Option button
   418 = 0008			CONSOLE_SPEAKER 			= %00001000 		; (Wrie) Keyboard speaker
   419
   420 				;**************************************************
   421 				; Other Value Lists 
   422 				;
   423 				; 	Sizes in horizontal color clocks and vertical scan lines
   424 				;
   425 = 0080			PLAYFIELD_WIDTH_NARROW 		= %10000000			; Color Clocks Normal Width = 128
   426 = 00A0			PLAYFIELD_WIDTH_NORMAL 		= %10100000			; Color Clocks Normal Width = 160
   427 = 00B0			PLAYFIELD_WIDTH_WIDE 		= %10110000			; Color Clocks Normal Width = 176
   428
   429 = 0040			PLAYFIELD_LEFT_EDGE_NARROW 	= %01000000 		; First/left-most color clock horizontal position
   430 = 0030			PLAYFIELD_LEFT_EDGE_NORMAL 	= %00110000
   431 = 0028			PLAYFIELD_LEFT_EDGE_WIDE 	= %00101000
   432
   433 = 00BF			PLAYFIELD_RIGHT_EDGE_NARROW = %10111111 		; Last/right-most color clock horizontal position
   434 = 00CF			PLAYFIELD_RIGHT_EDGE_NORMAL = %11001111
   435 = 00D7			PLAYFIELD_RIGHT_EDGE_WIDE 	= %11010111
   436
   437 				;**************************************************	
   438 				; PMBASE offsets to Player or Missile addresses
   439 				;
   440 = 0180			PMADR_2LINE_MISSILES 		= $180 
   441 = 0200			PMADR_2LINE_PLAYER0 		= $200
   442 = 0280			PMADR_2LINE_PLAYER1 		= $280
   443 = 0300			PMADR_2LINE_PLAYER2 		= $300
   444 = 0380			PMADR_2LINE_PLAYER3 		= $380
   445
   446 = 0300			PMADR_1LINE_MISSILES 		= $300
   447 = 0400			PMADR_1LINE_PLAYER0 		= $400
   448 = 0500			PMADR_1LINE_PLAYER1 		= $500
   449 = 0600			PMADR_1LINE_PLAYER2 		= $600
   450 = 0700			PMADR_1LINE_PLAYER3 		= $700
   451
   452 				;**************************************************	
   453 				; Vertical Alignments - screen scanlines are offsets into PMADR memory locations
   454 				;
   455 = 0004			PM_2LINE_OVERSCAN_TOP 		= $04
   456 = 0010			PM_2LINE_NORMAL_TOP 		= $10 				; For default OS 192 scan line display
   457 = 006F			PM_2LINE_NORMAL_BOTTOM 		= $6F 				; For default OS 192 scan line display
   458 = 007B			PM_2LINE_OVERSCAN_BOTTOM 	= $7B
   459
   460 = 0008			PM_1LINE_OVERSCAN_TOP 		= $08
   461 = 0020			PM_1LINE_NORMAL_TOP 		= $20 				; For default OS 192 scan line display
   462 = 00DF			PM_1LINE_NORMAL_BOTTOM 		= $DF 				; For default OS 192 scan line display
   463 = 00F7			PM_1LINE_OVERSCAN_BOTTOM 	= $F7
   464
   465 				;**************************************************	
   466 				; Helpful Colors.  (Many match C64)
   467 				;
   468 = 0000			COLOR_GREY 					= $00
   469 = 0010			COLOR_ORANGE1 				= $10
   470 = 0020			COLOR_ORANGE2 				= $20
   471 = 0030			COLOR_RED_ORANGE 			= $30
   472 = 0040			COLOR_PINK 					= $40
   473 = 0050			COLOR_PURPLE 				= $50
   474 = 0060			COLOR_PURPLE_BLUE 			= $60
   475 = 0070			COLOR_BLUE1 				= $70
   476 = 0080			COLOR_BLUE2 				= $80
   477 = 0090			COLOR_LITE_BLUE 			= $90
   478 = 00A0			COLOR_AQUA 					= $A0
   479 = 00B0			COLOR_BLUE_GREEN 			= $B0
   480 = 00C0			COLOR_GREEN 				= $C0
   481 = 00D0			COLOR_YELLOW_GREEN 			= $D0
   482 = 00E0			COLOR_ORANGE_GREEN 			= $E0
   483 = 00F0			COLOR_LITE_ORANGE 			= $F0
   484 = 0000			COLOR_BLACK 				= $00				; Some like to think of first color value as black.
   485
   486 				;**************************************************
   487 				; PIA  - Register List
   488 				;
   489 				;**************************************************
   490 				; Hardware Registers                                                                                                                                                   
   491 				;                                                                                                                                                                      
   492 = D300			PORTA 						= $D300				; Joystick ports 1 and 2, STICK0 and STICK1                                                                                                               
   493 = D301			PORTB 						= $D301				; Joystick ports 3 and 4, STICK2 and STICK3                                                                                                               
   494 = D302			PACTL 						= $D302				; Port A Control                                                                                                                                          
   495 = D303			PBCTL 						= $D303				; Port B Control                                                                                                                                          
   496
   497 				;**************************************************
   498 				; Shadow Registers for Hardware Registers                                                                                                                              
   499 				;                                                                                                                                                                      
   500 = 0278			STICK0 						= $0278                                                                                                                                                          
   501 = 0279			STICK1 						= $0279                                                                                                                                                          
   502 = 027A			STICK2 						= $027A                                                                                                                                                          
   503 = 027B			STICK3 						= $027B                                                                                                                                                          
   504 				       						                                                                                                                                                               
   505 = 027C			PTRIG0 						= $027C                                                                                                                                                          
   506 = 027D			PTRIG1 						= $027D                                                                                                                                                          
   507 = 027E			PTRIG2 						= $027E                                                                                                                                                          
   508 = 027F			PTRIG3 						= $027F                                                                                                                                                          
   509 = 0280			PTRIG4 						= $0280                                                                                                                                                          
   510 = 0281			PTRIG5 						= $0281                                                                                                                                                          
   511 = 0282			PTRIG6 						= $0282                                                                                                                                                          
   512 = 0283			PTRIG7 						= $0283                                                                                                                                                          
   513
   514 				;**************************************************
   515 				; Important Bit Positions                                                                                                                                              
   516 				;                                                                                                                                                                      
   517 = 000F			MASK_JACK_1_3 				= %00001111 		; Actually the anti-mask.  Keeps bits from first controller in pair.                                                                          
   518 = 00F0			MASK_JACK_2_4 				= %11110000 		; The inverse of mask.  Keeps bits from second controller in pair.                                                                            
   519
   520 				;**************************************************
   521 				; 	Stick's bits in the high nybble should be right shifted into a low nybble for testing.                                                                               
   522 				;  	Or just use the STICKx shadow register as that is its purpose.                                                                                                      
   523 				; 	Bits for STICKx shadow regs below:                                                                                                                                   
   524 				;
   525 = 00F7			MASK_STICK_RIGHT 			= %11110111                                                                                                                                            
   526 = 00FB			MASK_STICK_LEFT 			= %11111011                                                                                                                                            
   527 = 00FD			MASK_STICK_DOWN 			= %11111101                                                                                                                                            
   528 = 00FE			MASK_STICK_UP 				= %11111110                                                                                                                                            
   529 				                                                                                                                                                                      
   530 = 0008			STICK_RIGHT 				= %00001000                                                                                                                                                 
   531 = 0004			STICK_LEFT 					= %00000100                                                                                                                                                 
   532 = 0002			STICK_DOWN 					= %00000010                                                                                                                                                 
   533 = 0001			STICK_UP 					= %00000001                                                                                                                                                 
   534
   535 				;**************************************************                                                                                                                                                                      
   536 				; PACTL and PBCTL                                                                                                                                                      
   537 				;
   538 = 007F			MASK_PORT_SERIAL_IRQ 		= %01111111 		; (Read)                                                                                                                             
   539 = 00F7			MASK_MOTOR_CONTROL 			= %11110111 		; PACTL Peripheral motor control (cassette)                                                                                          
   540 = 00F7			MASK_COMMAND_IDENT 			= %11110111 		; PBCTL Peripheral command identification                                                                                            
   541 = 00FB			MASK_PORT_ADDRESSING 		= %11111011 		; PACTL 0 = Port direction control. 1 = Read port.                                                                                   
   542 = 00FE			MASK_SERIAL_IRQ_ENABLE 		= %11111110                                                                                                                                      
   543 				                                                                                                                                                                      
   544 = 0080			PORT_SERIAL_IRQ 			= %10000000 		; (Read)                                                                                                                                  
   545 = 0008			MOTOR_CONTROL 				= %00001000 		; PACTL                                                                                                                                   
   546 = 0008			COMMAND_IDENT 				= %00001000 		; PBCTL                                                                                                                                   
   547 = 0004			PORT_ADDRESSING 			= %00000100                                                                                                                                           
   548 = 0001			SERIAL_IRQ_ENABLE 			= %00000001                                                                                                                                           
   549 				                                                                                                                                                                      
   550
   551 				;**************************************************                                                                                                                                                                      
   552 				; PBCTL for the XL                                                                                                                                                     
   553 				;
   554 = 00FE			MASK_SELECT_OS_ROM 			= %11111110 		; Turn OS ROM on and off                                                                                                            
   555 = 00FD			MASK_SELECT_BASIC_ROM 		= %11111101 		; Turn BASIC ROM on and off                                                                                                         
   556 = 00FB			MASK_LED_1_KEYBOARD 		= %11111011 		; 1200XL LED 1, enable/disable keyboard                                                                                             
   557 = 00F7			MASK_LED_2_INTL_CHARSET 	= %11110111 		; 1200XL LED 2, enable international character set                                                                                  
   558 = 007F			MASK_SELF_TEST_ROM 			= %01111111 		; Expose Self Test at $5000                                                                                                         
   559 				                                                                                                                                                                      
   560 = 0001			SELECT_OS_ROM 				= %00000001                                                                                                                                          
   561 = 0002			SELECT_BASIC_ROM 			= %00000010                                                                                                                                          
   562 = 0004			LED_1_KEYBOARD 				= %00000100                                                                                                                                          
   563 = 0008			LED_2_INTL_CHARSET 			= %00001000                                                                                                                                          
   564 = 0080			SELF_TEST_ROM 				= %10000000                                                                                                                                          
   565 				                                                
   566 				;**************************************************
   567 				; POKEY  - Register List                             
   568 				;      
   569 				;**************************************************
   570 				; Hardware Registers
   571 				;
   572 = D200			AUDF1 						= $D200 			; Audio channel 1 Frequency
   573 = D202			AUDF2 						= $D202 			; Audio channel 2 Frequency
   574 = D204			AUDF3 						= $D204 			; Audio channel 3 Frequency
   575 = D206			AUDF4 						= $D206 			; Audio channel 4 Frequency
   576 				    						        			
   577 = D201			AUDC1 						= $D201 			; Audio channel 1 Control
   578 = D203			AUDC2 						= $D203 			; Audio channel 2 Control
   579 = D205			AUDC3 						= $D205 			; Audio channel 3 Control
   580 = D207			AUDC4 						= $D207 			; Audio channel 4 Control
   581
   582 = D208			AUDCTL 						= $D208 			; Audio Control
   583
   584 = D200			POT0 						= $D200 			; (Read) Potentiometer (paddle) 0 
   585 = D201			POT1 						= $D201 			; (Read) Potentiometer (paddle) 1 
   586 = D202			POT2 						= $D202 			; (Read) Potentiometer (paddle) 2 
   587 = D203			POT3 						= $D203 			; (Read) Potentiometer (paddle) 3 
   588 = D204			POT4 						= $D204 			; (Read) Potentiometer (paddle) 4 
   589 = D205			POT5 						= $D205 			; (Read) Potentiometer (paddle) 5 
   590 = D206			POT6 						= $D206 			; (Read) Potentiometer (paddle) 6 
   591 = D207			POT7 						= $D207 			; (Read) Potentiometer (paddle) 7 
   592
   593 = D208			ALLPOT 						= $D208 			; (Read) Read 8 line POT port state
   594 = D20B			POTGO  						= $D20B 			; Start the POT scan sequence
   595 				       						        			
   596 = D209			STIMER 						= $D209 			; Start timers
   597 = D209			KBCODE 						= $D209 			; (Read) Keyboard code
   598 = D208			RANDOM 						= $D208 			; (Read) Random number
   599 				       						        			
   600 = D20A			SKREST 						= $D20A 			; Reset Serial Status (SKSTAT)
   601 = D20D			SEROUT 						= $D20D 			; Serial port data output
   602 = D20D			SERIN  						= $D20D 			; (Read) Serial port data input
   603 = D20F			SKCTL  						= $D20F 			; Serial Port Control
   604 = D20F			SKSTAT 						= $D20F 			; (Read) Serial port status
   605 				       						        			
   606 = D20E			IRQEN  						= $D20E 			; Interrupt Request Enable
   607 = D20E			IRQST  						= $D20E 			; (Read) IRQ Status
   608
   609 				;**************************************************
   610 				; Shadow Registers for Hardware Registers
   611 				;
   612 = 0270			PADDL0 						= $0270 			; POT0
   613 = 0270			PADDL1 						= $0270 			; POT1
   614 = 0270			PADDL2 						= $0270 			; POT2
   615 = 0270			PADDL3 						= $0270 			; POT3
   616 = 0270			PADDL4 						= $0270 			; POT4
   617 = 0270			PADDL5 						= $0270 			; POT5
   618 = 0270			PADDL6 						= $0270 			; POT6
   619 = 0270			PADDL7 						= $0270 			; POT7
   620 				       						        			
   621 = 02FC			CH 	   						= $02FC 			; KBCODE       						
   622 = 0010			POKMSK 						= $10 				; IRQEN       						
   623 = 0232			SSKCTL 						= $0232 			; SKCTL
   624
   625 				;**************************************************
   626 				; Important Bit Positions
   627
   628 				;**************************************************
   629 				; AUDC 
   630 				;
   631 = 001F			MASK_AUD_NOISE  			= %00011111
   632 = 00EF			MASK_AUD_FORCE  			= %11101111
   633 = 00F0			MASK_AUD_VOLUME 			= %11110000
   634
   635 = 00E0			AUD_NOISE  					= %11100000
   636 = 0010			AUD_FORCE  					= %00010000
   637 = 000F			AUD_VOLUME 					= %00001111
   638
   639 = 0000			NOISE_5_BIT_17_BIT_POLY 	= %00000000
   640 = 0020			NOISE_5_BIT_POLY 			= %00100000
   641 = 0040			NOISE_5_BIT_4_BIT_POLY 		= %01000000
   642 = 0060			NOISE_5_BIT_POLY_2 			= %01100000 		; Duplicate of "5 bit poly"
   643 = 0080			NOISE_17_BIT_POLY 			= %10000000
   644 = 00A0			NOISE_NO_POLY_PURE 			= %10100000
   645 = 00C0			NOISE_4_BIT_POLY 			= %11000000
   646 = 00E0			NOISE_NO_POLY_PURE_2 		= %11100000 		; Duplicate of "No poly pure"
   647
   648 				;**************************************************
   649 				; AUDCTL
   650 				;
   651 = 007F			MASK_AUDCTL_POLY        	= %01111111 		; 17 or 9 bit poly
   652 = 00BF			MASK_AUDCTL_CH1_SYS     	= %10111111 		; Channel 1, 64KHz or system CPU clock (1.79Mhz NTSC)
   653 = 00DF			MASK_AUDCTL_CH3_SYS     	= %11011111 		; Channel 3, 64KHz or system CPU clock (1.79Mhz NTSC)
   654 = 00EF			MASK_AUDCTL_16_BIT_2_1  	= %11101111 		; Tie channels 2 and 1 for 16-bit resolution
   655 = 00F7			MASK_AUDCTL_16_BIT_4_3  	= %11110111 		; Tie channels 4 and 3 for 16-bit resolution
   656 = 00FB			MASK_AUDCTL_HIPASS_1_3  	= %11111011 		; High pass filter channel 1 by channel 3
   657 = 00FD			MASK_AUDCTL_HIPASS_2_4  	= %11111101 		; High pass filter channel 2 by channel 4
   658 = 00FE			MASK_AUDCTL_64_OR_15KHZ 	= %11111110 		; Use Clock 64Khz or 15Khz
   659
   660 = 0000			AUDCTL_POLY_17 				= %00000000
   661 = 0080			AUDCTL_POLY_9  				= %10000000
   662 = 0000			AUDCTL_CH1_64  				= %00000000
   663 = 0040			AUDCTL_CH1_SYS 				= %01000000
   664 = 0000			AUDCTL_CH3_64  				= %00000000
   665 = 0020			AUDCTL_CH3_SYS 				= %00100000
   666 = 0000			AUDCTL_16_BIT_2_1_OFF 		= %00000000
   667 = 0010			AUDCTL_16_BIT_2_1_ON 		= %00010000
   668 = 0000			AUDCTL_16_BIT_4_3_OFF 		= %00000000
   669 = 0008			AUDCTL_16_BIT_4_3_ON 		= %00001000
   670 = 0000			AUDCTL_HIPASS_1_3_OFF 		= %00000000
   671 = 0004			AUDCTL_HIPASS_1_3_ON 		= %00000100
   672 = 0000			AUDCTL_HIPASS_2_4_OFF 		= %00000000
   673 = 0002			AUDCTL_HIPASS_2_4_ON 		= %00000010
   674 = 0000			AUDCTL_CLOCK_64KHZ 			= %00000000
   675 = 0001			AUDCTL_CLOCK_15KHZ 			= %00000001
   676
   677 				;**************************************************
   678 				; ALLPOT
   679 				;
   680 = 007F			MASK_ALLPOT_PADDLE7 		= %01111111
   681 = 00BF			MASK_ALLPOT_PADDLE6 		= %10111111
   682 = 00DF			MASK_ALLPOT_PADDLE5 		= %11011111
   683 = 00EF			MASK_ALLPOT_PADDLE4 		= %11101111
   684 = 00F7			MASK_ALLPOT_PADDLE3 		= %11110111
   685 = 00FB			MASK_ALLPOT_PADDLE2 		= %11111011
   686 = 00FD			MASK_ALLPOT_PADDLE1 		= %11111101
   687 = 00FE			MASK_ALLPOT_PADDLE0 		= %11111110
   688
   689 = 0080			ALLPOT_PADDLE7 				= %10000000
   690 = 0040			ALLPOT_PADDLE6 				= %01000000
   691 = 0020			ALLPOT_PADDLE5 				= %00100000
   692 = 0010			ALLPOT_PADDLE4 				= %00010000
   693 = 0008			ALLPOT_PADDLE3 				= %00001000
   694 = 0004			ALLPOT_PADDLE2 				= %00000100
   695 = 0002			ALLPOT_PADDLE1 				= %00000010
   696 = 0001			ALLPOT_PADDLE0 				= %00000001
   697
   698 				;**************************************************
   699 				; SKCTL
   700 				;
   701 = 007F			MASK_SERIAL_BREAK 			= %01111111
   702 = 008F			MASK_SERIAL_MODE 			= %10001111
   703 = 00F7			MASK_SERIAL_2TONE 			= %11110111
   704 = 00FB			MASK_FAST_POT_SCAN 			= %11111011
   705 = 00FD			MASK_ENABLE_KB_SCAN 		= %11111101
   706 = 00FE			MASK_KB_DEBOUNCE 			= %11111110
   707
   708 = 0080			SERIAL_BREAK 				= %10000000 		
   709 = 0000			SERIAL_MODE0 				= %00000000 		; Input Clock External.            Output Clock External.          Bidirectional Clock Input.
   710 = 0010			SERIAL_MODE1 				= %00010000 		; Input Clock Channel 3+4 (async). Output Clock External.          Bidirectional Clock Input.
   711 = 0020			SERIAL_MODE2 				= %00100000 		; Input Clock Channel 4.           Output Clock Channel 4.         Bidirectional Clock Output Channel 4.
   712 = 0030			SERIAL_MODE3 				= %00110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   713 = 0040			SERIAL_MODE4 				= %01000000 		; Input Clock External.            Output Clock Channel 4.         Bidirectional Clock Input.
   714 = 0050			SERIAL_MODE5 				= %01010000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   715 = 0060			SERIAL_MODE6 				= %01100000 		; Input Clock Channel 4.           Output Clock Channel 2.         Bidirectional Clock Output Channel 4.
   716 = 0070			SERIAL_MODE7 				= %01110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 2.         Bidirectional Clock Input.
   717
   718 = 0008			SERIAL_2TONE 				= %00001000 		; 1 and 0 bits are audio set by timers 1 and 2
   719
   720 = 0000			FAST_POT_SCAN_OFF 			= %00000000
   721 = 0004			FAST_POT_SCAN_ON  			= %00000100
   722 = 0000			DISABLE_KB_SCAN   			= %00000000
   723 = 0002			ENABLE_KB_SCAN    			= %00000010
   724 = 0000			KB_DEBOUNCE_OFF   			= %00000000
   725 = 0001			KB_DEBOUNCE_ON    			= %00000001
   726
   727 				;**************************************************
   728 				; SKSTAT
   729 				;
   730 = 007F			MASK_SERIAL_FRAME_ERROR 	= %01111111
   731 = 00BF			MASK_SERIAL_INPUT_OVERRUN 	= %10111111
   732 = 00DF			MASK_KEYBOARD_OVERRUN 		= %11011111
   733 = 00EF			MASK_SERIAL_DATA_READY 		= %11101111
   734 = 00F7			MASK_SH.if_KEY_PRESSED 		= %11110111
   735 = 00FB			MASK_LAST_KEY_HELD 			= %11111011
   736 = 00FD			MASK_SERIAL_INPUT_BUSY 		= %11111101
   737
   738 = 0000			SERIAL_FRAME_NO_ERROR 		= %00000000
   739 = 0080			SERIAL_FRAME_ERROR 			= %10000000
   740 = 0000			SERIAL_NO_INPUT_OVERRUN 	= %00000000
   741 = 0040			SERIAL_INPUT_OVERRUN 		= %01000000
   742 = 0000			KEYBOARD_NO_OVERRUN 		= %00000000
   743 = 0020			KEYBOARD_OVERRUN 			= %00100000
   744 = 0000			SERIAL_DATA_NOT_READY 		= %00000000
   745 = 0010			SERIAL_DATA_READY 			= %00010000
   746 = 0000			SH.if_KEY_NOT_PRESSED 		= %00000000
   747 = 0008			SH.if_KEY_PRESSED 			= %00001000
   748 = 0000			LAST_KEY_NOT_HELD 			= %00000000
   749 = 0004			LAST_KEY_HELD 				= %00000100
   750 = 0000			SERIAL_INPUT_NOT_BUSY 		= %00000000
   751 = 0002			SERIAL_INPUT_BUSY 			= %00000010
   752
   753 				;**************************************************
   754 				; IRQEN and IRQST
   755 				;
   756 = 00FE			MASK_IRQ_TIMER1 			= %11111110
   757 = 00FD			MASK_IRQ_TIMER2 			= %11111101
   758 = 00FB			MASK_IRQ_TIMER4 			= %11111011
   759 = 00F7			MASK_IRQ_SERIAL_OUT_DONE 	= %11110111
   760 = 00EF			MASK_IRQ_SERIAL_OUT_READY 	= %11101111
   761 = 00DF			MASK_IRQ_SERIAL_IN_READY 	= %11011111
   762 = 00BF			MASK_IRQ_NORMAL_KEY_PRESS 	= %10111111
   763 = 007F			MASK_IRQ_BREAK_PRESSED 		= %01111111
   764
   765 = 0000			IRQ_TIMER1_OFF 				= %00000000
   766 = 0001			IRQ_TIMER1_ON 				= %00000001
   767 = 0000			IRQ_TIMER2_OFF 				= %00000000
   768 = 0002			IRQ_TIMER2_ON 				= %00000010
   769 = 0000			IRQ_TIMER4_OFF 				= %00000000
   770 = 0004			IRQ_TIMER4_ON 				= %00000100
   771 = 0000			IRQ_SERIAL_OUT_NOT_DONE 	= %00000000
   772 = 0008			IRQ_SERIAL_OUT_DONE 		= %00001000
   773 = 0000			IRQ_SERIAL_OUT_NOT_READY 	= %00000000
   774 = 0010			IRQ_SERIAL_OUT_READY 		= %00010000
   775 = 0000			IRQ_SERIAL_IN_NOT_READY 	= %00000000
   776 = 0020			IRQ_SERIAL_IN_READY 		= %00100000
   777 = 0000			IRQ_NO_KEY_PRESS 			= %00000000
   778 = 0040			IRQ_NORMAL_KEY_PRESS 		= %01000000
   779 = 0000			IRQ_BREAK_NOT_PRESSED 		= %00000000
   780 = 0080			IRQ_BREAK_PRESSED 			= %10000000
   781
   782 				;**************************************************
   783 				; Additional Registers
   784 				;
   785 = 006A			RAMTOP						= $6A
   786 = E45F			SYSVBV 						= $E45F  			; interrupt enabled vector
   787 = E45C			SETVBI 						= $E45C  			; set vertical blank interrupt vector
   788 = E462			XITVBL 						= $E462  			; exit VBI vector
   789
   790 = E45F			XITVB_I						= $e45f
   791 = 0006			VBI_I						= $06
   792 = 0007			VBI_D						= $07
   793 = C0E2			NORMAL_VBI_I				= $c0e2
   794 = C28A			NORMAL_VBI_D				= $c28a
   795 = E45C			SETVBV						= $e45c
   796 = 0222			VVBLKI						= $0222
   797 = 0224			VVBLKD						= $0224
   798 = E462			XITVB						= XITVBL
    41 						icl "/Lib/SysMacros.Asm"				; General purpose macros used by system
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysMacros.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;
    15 				;**************************************************************************************************
    16 				; SaveAXY
    17 				;**************************************************************************************************
    18 				;
    19 				.macro SaveAXY
    20 					pha
    21 					txa
    22 					pha
    23 					tya
    24 					pha
    25 				.endm
    26
    27 				;
    28 				;**************************************************************************************************
    29 				; RestoreRTS
    30 				;**************************************************************************************************
    31 				;
    32 				.macro RestoreRTS
    33 					pla
    34 					tay
    35 					pla
    36 					tax
    37 					pla
    38 					rts
    39 				.endm
    40
    41 				;
    42 				;**************************************************************************************************
    43 				; RestoreRTS
    44 				;**************************************************************************************************
    45 				;
    46 				.macro RestoreRTI
    47 					pla
    48 					tay
    49 					pla
    50 					tax
    51 					pla
    52 					rti
    53 				.endm
    54
    55 				;
    56 				;**************************************************************************************************
    57 				; SetRamTop [pages]
    58 				;**************************************************************************************************
    59 				;
    60 				.macro SetRamTop
    61 					.if :0 <> 1
    62 						.error "SetRamTop error"
    63 				   .else
    64 				   		lda RAMTOP
    65 						sec
    66 						sbc :1
    67 						sta RAMTOP
    68 					.endif
    69 				.endm
    70
    71 				;
    72 				;**************************************************************************************************
    73 				; SetVector [address] [word]
    74 				;**************************************************************************************************
    75 				;
    76 				.macro SetVector
    77 					.if :0 <> 2
    78 						.error "SetVector error"
    79 				   .else
    80 				      	lda #<:2
    81 					    sta :1
    82 					    lda #>:2
    83 					    sta :1+1
    84 					.endif
    85 				.endm
    86
    87 				;
    88 				;**************************************************************************************************
    89 				; SetColor [0..4] [0..255]
    90 				; SetColor [0..4] [0..15] [0..15]
    91 				;**************************************************************************************************
    92 				;
    93 				.macro SetColor
    94 					.if :0 < 2 .or :0 > 3
    95 						.error "SetColor error"
    96 				   	.else
    97 						.if :0 = 2
    98 					    	lda #:2
    99 					        sta COLPF0+:1
   100 						.else
   101 							lda #[:2 * 16 + :3]
   102 							sta COLPF0+:1
   103 						.endif
   104 					.endif
   105 				.endm
   106
   107 				;
   108 				;**************************************************************************************************
   109 				; SetBKColor [0..15] [0..15]
   110 				;**************************************************************************************************
   111 				;
   112 				.macro SetBKColor
   113 					.if :0 < 1 .or :0 > 2
   114 						.error "SetBKColor error"
   115 				   	.else
   116 						.if :0 = 1
   117 					    	lda #:1
   118 					        sta COLBK
   119 						.else
   120 							lda #[:1 * 16 + :2]
   121 					        sta COLBK
   122 						.endif
   123 					.endif
   124 				.endm
   125
   126 				;
   127 				;**************************************************************************************************
   128 				; SetPMColor [0..3] [0..255]
   129 				; SetPMColor [0..3] [0..15] [0..15]
   130 				;**************************************************************************************************
   131 				;
   132 				.macro SetPMColor
   133 					.if :0 < 2 .or :0 > 3
   134 						.error "SetPMColor error"
   135 					.else
   136 						.if :0 = 2
   137 							lda #:2
   138 							sta COLPM0+:1
   139 						.else
   140 							lda #[:2 * 16 + :3]
   141 							sta COLPM0+:1
   142 						.endif
   143 					.endif
   144 				.endm
   145
   146 				;
   147 				;**************************************************************************************************
   148 				; VcountSync [0..130]
   149 				; (maximum limit is different on PAL: 155)
   150 				; (could wait forever if there are interrupts activated!)
   151 				; (or if some other "thread" uses "wsync")
   152 				;**************************************************************************************************
   153 				;
   154 				.macro VcountSync
   155 					.if :0 <> 1
   156 						.error "VcountSync error"
   157 				   	.else
   158 						sta WSYNC
   159 				      	lda #:1
   160 				VSync1	cmp VCOUNT
   161 					    bne VSync1
   162 						lda #:1+1
   163 				VSync2	cmp VCOUNT
   164 					    bne VSync2
   165 				      	sta WSYNC
   166 					.endif
   167 				.endm
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; VcountWait [0..130]
   172 				; (maximum limit is different on PAL: 155)
   173 				;**************************************************************************************************
   174 				;
   175 				.macro VcountWait
   176 					.if :0 <> 1
   177 						.error "VcountWait error"
   178 				   	.else
   179 						lda #:1
   180 				VWait1	cmp VCOUNT
   181 					    bne VWait1
   182 					.endif
   183 				.endm
   184
   185 				;
   186 				;**************************************************************************************************
   187 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   188 				; (maximum limit is different on PAL: 155)
   189 				;**************************************************************************************************
   190 				;
   191 				.macro VcountWaitUntilEnter
   192 					.if :0 <> 2 .or :1 >= :2
   193 						.error "VcountWaitUntilEnter error"
   194 					.else
   195 				VWait1	lda VCOUNT
   196 						cmp #:1
   197 						beq VExit
   198 					    bcc VWait1								; VCOUNT < :1
   199 						cmp #:2
   200 						beq VExit
   201 					    bcs VWait1								; VCOUNT >= :2
   202 				VExit
   203 					.endif
   204 				.endm
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   209 				; (maximum limit is different on PAL: 155)
   210 				;**************************************************************************************************
   211 				;
   212 				.macro VcountWaitUntilExit
   213 					.if :0 <> 2 .or :1 >= :2
   214 						.error "VcountWaitUntilExit error"
   215 					.else
   216 				VWait1	lda VCOUNT
   217 						cmp #:1
   218 						beq VWait1
   219 					    bcc VExit								; VCOUNT < :1
   220 						cmp #:2
   221 					    bcc VWait1								; VCOUNT < :2
   222 						beq VWait1
   223 				VExit
   224 					.endif
   225 				.endm
   226
   227 				;
   228 				;**************************************************************************************************
   229 				; MarkScanLine [0..255] [0..255]
   230 				; (mark the current scan line with a color)
   231 				;**************************************************************************************************
   232 				;
   233 				.macro MarkScanLine
   234 					.if :0 <> 0 .and :0 <> 2
   235 						.error "MarkScanLine error"
   236 					.else
   237 						.if :0 = 0
   238 							sta WSYNC
   239 				  	     	lda #255							; mark color
   240 					  	    sta COLBK
   241 							sta WSYNC
   242 				  	     	lda #0								; restore color
   243 					  	    sta COLBK
   244 						.else
   245 							sta WSYNC
   246 						    lda #:1								; mark color
   247 						    sta COLBK
   248 							sta WSYNC
   249 							lda #:2								; restore color
   250 							sta COLBK
   251 						.endif
   252 					.endif
   253 				.endm
   254
   255 				;
   256 				;**************************************************************************************************
   257 				; MarkScanLineIfConsol [0..255] [0..255]
   258 				; (mark the current scan line with a color, if a consol key is pressed)
   259 				;**************************************************************************************************
   260 				;
   261 				.macro MarkScanLineIfConsol
   262 					.if :0 <> 0 .and :0 <> 2
   263 						.error "MarkScanLineIfConsol error"
   264 					.else
   265 						.if :0 = 0
   266 							lda CONSOL
   267 							and #%111
   268 					     	cmp #%111
   269 						    beq ExitMarkScanLineIfConsol
   270 							sta WSYNC
   271 						    lda #255							; mark color
   272 						    sta COLBK
   273 						    sta WSYNC
   274 						    lda #0								; restore color
   275 					     	sta COLBK
   276 						.else
   277 							lda CONSOL
   278 						    and #%111
   279 					     	cmp #%111
   280 						    beq ExitMarkScanLineIfConsol
   281 							sta WSYNC
   282 					     	lda #:1								; mark color
   283 						    sta COLBK
   284 					      	sta WSYNC
   285 					     	lda #:2								; restore color
   286 						    sta COLBK
   287 						.endif
   288 					.endif
   289 				
   290 				ExitMarkScanLineIfConsol
   291 				.endm
   292
   293 				;
   294 				;**************************************************************************************************
   295 				; MarkCyclesIfConsol [0..255] [0..255]
   296 				; (mark the current scan position with a color, for some cycles)
   297 				;**************************************************************************************************
   298 				;
   299 				.macro MarkCyclesIfConsol
   300 					.if :0 = 0
   301 						lda CONSOL
   302 						and #%111
   303 						cmp #%111
   304 						beq ExitMarkCyclesIfConsol
   305 				
   306 						lda #255								; mark color
   307 						sta COLBK
   308 				
   309 						lda ($00),y								; dummy 5 cycles
   310 						lda ($00),y								; dummy 5 cycles
   311 					    lda ($00),y								; dummy 5 cycles
   312 					    lda ($00),y								; dummy 5 cycles
   313 					    lda ($00),y								; dummy 5 cycles
   314 					    lda ($00),y								; dummy 5 cycles
   315 						lda #0									; restore color
   316 					    sta COLBK
   317 					.elseif :0 = 2
   318 						lda CONSOL
   319 						and #%111
   320 						cmp #%111
   321 						beq ExitMarkCyclesIfConsol
   322 				
   323 						lda #:1									; mark color
   324 						sta COLBK
   325 				
   326 						lda ($00),y								; dummy 5 cycles
   327 					    lda ($00),y								; dummy 5 cycles
   328 					    lda ($00),y								; dummy 5 cycles
   329 					    lda ($00),y								; dummy 5 cycles
   330 					    lda ($00),y								; dummy 5 cycles
   331 					    lda ($00),y								; dummy 5 cycles
   332 				
   333 					    lda #:2									; restore color
   334 					    sta COLBK
   335 					.else
   336 						.error "MarkCyclesIfConsol error"
   337 					.endif
   338 				
   339 				ExitMarkCyclesIfConsol
   340 				.endm
   341
   342 				;
   343 				;**************************************************************************************************
   344 				; SetBasic [0,1]
   345 				;**************************************************************************************************
   346 				;
   347 				.macro SetBasic
   348 					.if :0 <> 1
   349 						.error "SetBasic error"
   350 					.else
   351 						.if :1 = 0
   352 							lda PORTB							; deactivate Basic
   353 					        ora #%00000010
   354 					        sta PORTB
   355 						.else
   356 							lda PORTB							; activate Basic
   357 							and #%11111101
   358 							sta PORTB
   359 						.endif
   360 					.endif
   361 				.endm
   362
   363 				;
   364 				;**************************************************************************************************
   365 				; SetOperatingSystem [0,1]
   366 				;**************************************************************************************************
   367 				;
   368 				.macro SetOperatingSystem
   369 					.if :0 <> 1
   370 						.error "SetOperatingSystem error"
   371 					.else
   372 						.if :1 = 0
   373 							lda PORTB							; deactivate Operative System
   374 							and #%11111110
   375 							sta PORTB
   376 						.else
   377 							lda PORTB							; activate Operative System
   378 							ora #%00000001
   379 							sta PORTB
   380 						.endif
   381 					.endif
   382 				.endm
   383
   384 				;
   385 				;**************************************************************************************************
   386 				; EnableBasic
   387 				;**************************************************************************************************
   388 				;
   389 				.macro EnableBasic
   390 					.if :0 <> 0
   391 						.error "EnableBasic error"
   392 					.else
   393 						SetBasic 1
   394 					.endif
   395 				.endm
   396
   397 				;
   398 				;**************************************************************************************************
   399 				; DisableBasic
   400 				;**************************************************************************************************
   401 				;
   402 				.macro DisableBasic
   403 					.if :0 <> 0
   404 						.error "DisableBasic error"
   405 					.else
   406 						SetBasic 0
   407 					.endif
   408 				.endm
   409
   410 				;
   411 				;**************************************************************************************************
   412 				; EnableOperatingSystem
   413 				;**************************************************************************************************
   414 				;
   415 				.macro EnableOperatingSystem
   416 					.if :0 <> 0
   417 						.error "EnableOperatingSystem error"
   418 					.else
   419 						SetOperatingSystem 1
   420 					.endif
   421 				.endm
   422
   423 				;
   424 				;**************************************************************************************************
   425 				; DisableOperatingSystem
   426 				;**************************************************************************************************
   427 				;
   428 				.macro DisableOperatingSystem
   429 					.if :0 <> 0
   430 						.error "DisableOperatingSystem error"
   431 					.else
   432 						SetOperatingSystem 0
   433 					.endif
   434 				.endm
   435
   436 				;
   437 				;**************************************************************************************************
   438 				; EnableNormalInterrupts
   439 				;**************************************************************************************************
   440 				;
   441 				.macro EnableNormalInterrupts
   442 					.if :0 <> 0
   443 						.error "EnableNormalInterrupts error"
   444 					.else
   445 						cli
   446 						lda #$40								; VBI interrupt
   447 						sta NMIEN
   448 					.endif
   449 				.endm
   450
   451 				;
   452 				;**************************************************************************************************
   453 				; DisableNormalInterrupts
   454 				;**************************************************************************************************
   455 				;
   456 				.macro DisableNormalInterrupts
   457 					.if :0 <> 0
   458 						.error "DisableNormalInterrupts error"
   459 					.else
   460 						sei
   461 						lda #0
   462 						sta IRQEN
   463 						sta NMIEN
   464 					.endif
   465 				.endm
   466
   467 				;
   468 				;**************************************************************************************************
   469 				; ClearSystem
   470 				;**************************************************************************************************
   471 				;
   472 				.macro ClearSystem
   473 					.if :0 <> 0
   474 						.error "ClearSystem error"
   475 					.else
   476 						
   477 						clc
   478 					    cld
   479 						sei
   480 				
   481 					    lda #0									; clear interrupts and screen
   482 					    sta IRQEN	
   483 					    sta NMIEN
   484 					    sta DMACTL
   485 					    sta COLBK
   486 				      	sta GRACTL								; clear P/M
   487 						sta GRAFP0
   488 						sta GRAFP1
   489 						sta GRAFP2
   490 						sta GRAFP3
   491 						sta GRAFM
   492 				
   493 						sta HPOSP0
   494 					    sta HPOSP1
   495 					    sta HPOSP2
   496 					    sta HPOSP3
   497 					    sta HPOSM0
   498 					    sta HPOSM1
   499 					    sta HPOSM2
   500 					    sta HPOSM3
   501 				
   502 					    sta PRIOR								; clear GTIA also
   503 				
   504 					    sta AUDCTL								; clear sound
   505 						sta AUDC1
   506 					    sta AUDC2
   507 					    sta AUDC3
   508 					    sta AUDC4
   509 				
   510 					    lda #3
   511 					    sta SKCTL
   512 					    
   513 					.endif
   514 				.endm
   515
   516 				;
   517 				;**************************************************************************************************
   518 				; SetDisplayListAddress [word]
   519 				; (use when the screen is not being displayed!)
   520 				; (remember to not cross the 1K limit..)
   521 				;**************************************************************************************************
   522 				;
   523 				.macro SetDisplayListAddress
   524 					.if :0 <> 1
   525 						.error "SetDisplayListAddress error"
   526 					.else
   527 						SetVector DLISTL, :1
   528 					.endif
   529 				.endm
   530
   531 				;
   532 				;**************************************************************************************************
   533 				; SetDisplayListInterrupt
   534 				;**************************************************************************************************
   535 				;
   536 				.macro SetDisplayListInterrupt
   537 					.if :0 <> 1
   538 						.error "SetDisplayListInterrupt error"
   539 					.else
   540 						SetVector NMIH_VECTOR, :1
   541 					.endif
   542 				.endm
   543
   544 				;
   545 				;**************************************************************************************************
   546 				; SetFontAddress [word]
   547 				; (remember that this transform to a page a number)
   548 				;**************************************************************************************************
   549 				;
   550 				.macro SetFontAddress
   551 					.if :0 <> 1
   552 						.error "SetFontAddress error"
   553 					.else
   554 						lda #>:1
   555 					    sta CHBASE
   556 					.endif
   557 				.endm
   558
   559 				;
   560 				;**************************************************************************************************
   561 				; SetPMBaseAddress [word]
   562 				; (remember that this transform to a page a number)
   563 				;**************************************************************************************************
   564 				;
   565 				.macro SetPMBaseAddress
   566 				   .if :0 <> 1
   567 				      .error "SetPMBaseAddress error"
   568 				   .else
   569 				      lda #>:1
   570 				      sta PMBASE
   571 				   .endif
   572 				.endm
   573
   574 				;
   575 				;**************************************************************************************************
   576 				; NullZeroPage [zeroPageAddress] [size]
   577 				;**************************************************************************************************
   578 				;
   579 				.macro NullZeroPage
   580 				zpage = $FE
   581 					.if :0 <> 2
   582 						.error "NullZeroPage error"
   583 					.else
   584 						lda #<:1
   585 						sta zpage
   586 						
   587 						ldy :2
   588 						lda #$00
   589 				loop
   590 						sta (zpage),y
   591 						dey
   592 						bne loop		
   593 					.endif	
   594 				.endm
   595
   596 				;
   597 				;**************************************************************************************************
   598 				; SetMemory [address] [bytes] [value]
   599 				;**************************************************************************************************
   600 				;
   601 				.macro SetMemory
   602 				
   603 				; warning, using some page zero memory
   604 				setMemPtr		= $FE
   605 				setMemCounter	= $FC
   606 				
   607 					.if :0 <> 3
   608 						.error "SetMemory error"
   609 					.else
   610 						ldy #0
   611 						lda #<:1
   612 						sta setMemPtr
   613 						lda #>:1
   614 						sta setMemPtr+1
   615 				
   616 						.if :2 < $0100
   617 							lda #:3
   618 				
   619 				setMemLoop1
   620 							sta (setMemPtr),y
   621 							iny
   622 					        cpy #:2
   623 					        bne setMemLoop1
   624 				
   625 						.else
   626 							lda #<:2
   627 							sta setMemCounter
   628 							lda #>:2
   629 							sta setMemCounter+1
   630 				
   631 				setMemLoop2
   632 							lda #:3
   633 							sta (setMemPtr),y
   634 							iny
   635 							bne setMemB1
   636 							inc setMemPtr+1
   637 				
   638 				setMemB1
   639 							lda setMemCounter
   640 							bne setMemB2
   641 							dec setMemCounter+1
   642 				
   643 				setMemB2
   644 							dec setMemCounter
   645 							lda setMemCounter
   646 							ora setMemCounter+1
   647 							bne setMemLoop2
   648 						.endif
   649 					.endif
   650 				.endm
   651
   652 				;
   653 				;**************************************************************************************************
   654 				; SetMemoryRandom [address] [bytes]
   655 				;**************************************************************************************************
   656 				;
   657 				.macro SetMemoryRandom
   658 				
   659 				; warning, using some page zero memory
   660 				setMemRPtr		= $FE
   661 				setMemRCounter	= $FC
   662 				
   663 				   .if :0 <> 2
   664 				      .error "SetMemoryRandom error"
   665 				   .else
   666 				      ldy #0
   667 				      lda #<:1
   668 				      sta setMemRPtr
   669 				      lda #>:1
   670 				      sta setMemRPtr+1
   671 						
   672 						.if :2 < $0100
   673 				
   674 				setMemRLoop1
   675 				         	lda RANDOM
   676 				         	sta (setMemRPtr),y
   677 				         	iny
   678 				         	cpy #:2
   679 				         	bne setMemRLoop1
   680 						.else
   681 				        	lda #<:2
   682 				         	sta setMemRCounter
   683 				         	lda #>:2
   684 				         	sta setMemRCounter+1
   685 				
   686 				setMemRLoop2
   687 				         	lda RANDOM
   688 				         	sta (setMemRPtr),y
   689 				         	iny
   690 				         	bne setMemRB1
   691 				         	inc setMemRPtr+1
   692 				
   693 				setMemRB1
   694 				         	lda setMemRCounter
   695 				         	bne setMemRB2
   696 				         	dec setMemRCounter+1
   697 				
   698 				setMemRB2
   699 				         	dec setMemRCounter
   700 				         	lda setMemRCounter
   701 				         	ora setMemRCounter+1
   702 				         	bne setMemRLoop2
   703 					
   704 						.endif
   705 					.endif
   706 				.endm
   707
   708 				;
   709 				;**************************************************************************************************
   710 				; ClampMemory [address] [bytes] [min value] [max value]
   711 				;**************************************************************************************************
   712 				;
   713 				.macro ClampMemory
   714 				
   715 				; warning, using some page zero memory
   716 				clampMemPtr		= $FE
   717 				clampMemCounter	= $FC
   718 				
   719 					.if :0 <> 4
   720 						.error "ClampMemory error"
   721 					.else
   722 						ldy #0
   723 						lda #<:1
   724 						sta clampMemPtr
   725 						lda #>:1
   726 						sta clampMemPtr+1
   727 				
   728 						.if :2 < $0100
   729 				
   730 				clampMemLoop1
   731 							lda (clampMemPtr),y
   732 					        cmp #:3
   733 					        bcs clampMemB3		; if >= min then continue
   734 					        lda #:3
   735 					        jmp clampMemB4
   736 				
   737 				clampMemB3
   738 					        cmp #:4
   739 					        bcc clampMemB4		; if < max then continue
   740 					        lda #:4
   741 				
   742 				clampMemB4
   743 					        sta (clampMemPtr),y
   744 							iny
   745 					        cpy #:2
   746 					        bne clampMemLoop1
   747 				
   748 						.else
   749 					    
   750 					    	lda #<:2
   751 					        sta clampMemCounter
   752 					        lda #>:2
   753 					        sta clampMemCounter+1
   754 				
   755 				clampMemLoop2
   756 					        lda (clampMemPtr),y
   757 					        cmp #:3
   758 					        bcs clampMemB5		; if >= min then continue
   759 					        lda #:3
   760 					        jmp clampMemB6
   761 				
   762 				clampMemB5
   763 					        cmp #:4
   764 					        bcc clampMemB6		; if < max then continue
   765 					        lda #:4
   766 				
   767 				clampMemB6
   768 					        sta (clampMemPtr),y
   769 					        iny
   770 					        bne clampMemB1
   771 					        inc clampMemPtr+1
   772 				
   773 				clampMemB1
   774 					        lda clampMemCounter
   775 					        bne clampMemB2
   776 					        dec clampMemCounter+1
   777 				
   778 				clampMemB2
   779 					        dec clampMemCounter
   780 				         	lda clampMemCounter
   781 					        ora clampMemCounter+1
   782 					        bne clampMemLoop2
   783 						.endif
   784 					.endif
   785 				.endm
   786
   787 				;
   788 				;**************************************************************************************************
   789 				; AndMemory [address] [bytes] [value]
   790 				;**************************************************************************************************
   791 				.macro AndMemory
   792 				
   793 				; warning, using some page zero memory
   794 				andMemPtr		= $FE
   795 				andMemCounter	= $FC
   796 				
   797 					.if :0 <> 3
   798 						.error "AndMemory error"
   799 				   .else
   800 				      	ldy #0
   801 					    lda #<:1
   802 					    sta andMemPtr
   803 					    lda #>:1
   804 					    sta andMemPtr+1
   805 				
   806 					    .if :2 < 256
   807 				andMemLoop1
   808 					    
   809 					    	lda (andMemPtr),y
   810 					        and #:3
   811 					        sta (andMemPtr),y
   812 					        iny
   813 					        cpy #:2
   814 					        bne andMemLoop1
   815 				
   816 					     .else
   817 					     
   818 					        lda #<:2
   819 					        sta andMemCounter
   820 					        lda #>:2
   821 					        sta andMemCounter+1
   822 				
   823 				andMemLoop2
   824 					        lda (andMemPtr),y
   825 					        and #:3
   826 					        sta (andMemPtr),y
   827 					        iny
   828 					        bne andMemB1
   829 					        inc andMemPtr+1
   830 				andMemB1
   831 					        lda andMemCounter
   832 					        bne andMemB2
   833 					        dec andMemCounter+1
   834 				
   835 				andMemB2
   836 							dec andMemCounter
   837 					        lda andMemCounter
   838 					        ora andMemCounter+1
   839 					        bne andMemLoop2
   840 					  	.endif
   841 					.endif
   842 				.endm
   843
   844 				;
   845 				;**************************************************************************************************
   846 				; CopyMemory [source address] [dest address] [bytes]
   847 				;**************************************************************************************************
   848 				;
   849 				.macro CopyMemory
   850 				
   851 				; warning, using some page zero memory
   852 				copyMemPtr1		= $FE
   853 				copyMemPtr2		= $FC
   854 				copyMemCounter	= $FA
   855 				
   856 				   .if :0 <> 3
   857 						.error "CopyMemory error"
   858 				   .else
   859 					    ldy #0
   860 					    lda #<:1
   861 					    sta copyMemPtr1
   862 					    lda #>:1
   863 					    sta copyMemPtr1+1
   864 				
   865 					    lda #<:2
   866 					    sta copyMemPtr2
   867 					    lda #>:2
   868 					    sta copyMemPtr2+1
   869 					
   870 						.if :3 < $0100
   871 				
   872 				copyMemLoop1
   873 					      	lda (copyMemPtr1),y
   874 					       	sta (copyMemPtr2),y
   875 					       	iny
   876 					       	cpy #:3
   877 					       	bne copyMemLoop1
   878 				
   879 					   	.else
   880 					      	
   881 					       	lda #<:3
   882 					       	sta copyMemCounter
   883 					       	lda #>:3
   884 					       	sta copyMemCounter+1
   885 				
   886 				copyMemLoop2
   887 				        	lda (copyMemPtr1),y
   888 				        	sta (copyMemPtr2),y
   889 				        	iny
   890 				        	bne copyMemB1
   891 				        	inc copyMemPtr1+1
   892 				        	inc copyMemPtr2+1
   893 				copyMemB1
   894 				         	lda copyMemCounter
   895 				         	bne copyMemB2
   896 				         	dec copyMemCounter+1
   897 				
   898 				copyMemB2
   899 				         	dec copyMemCounter
   900 				         	lda copyMemCounter
   901 				         	ora copyMemCounter+1
   902 				         	bne copyMemLoop2
   903 				
   904 				     	.endif
   905 					.endif
   906 				.endm
    42 					
    43 				;***** Include Variable Files
    44 				;
    45 						icl "ZeroPage.Asm"
Source: E:\_8BitProjects\Series\Scroller\ZeroPage.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ZeroPage.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;	
    13 				;**************************************************************************************************
    14 				; Zero Page Variables definitions
    15 				;**************************************************************************************************
    16 				;
    17 						org ZeroPageAddress
    18
    19 				;*****	RMT zero page variables
    20 				;
    21 				p_tis						
    22 				p_instrstable				org *+2
    23 				p_trackslbstable			org *+2
    24 				p_trackshbstable			org *+2
    25 				p_song						org *+2
    26 				ns							org *+2
    27 				nr							org *+2
    28 				nt							org *+2
    29 				reg1						org *+1
    30 				reg2						org *+1
    31 				reg3						org *+1
    32 				tmp							org *+1
    33
    34 				;*****	Platform Engine zero page variables
    35 				;
    36 				m_param00					org *+$01
    37 				m_param01					org *+$01
    38 				m_param02					org *+$01
    39 				m_param03					org *+$01
    40
    41 				m_saveRegA					org *+$01
    42 				m_saveRegX					org *+$01
    43 				m_saveRegY					org *+$01
    44
    45 				m_sfxEffect					org *+$01
    46
    47 				m_animMiscWidth				org *+$01
    48 				m_animMiscHeight			org *+$01
    49
    50 				m_redrawPlayerCounter		org *+$01
    51
    52 				m_missleBaseColor0			org *+$01
    53 				m_playerBaseColor00			org *+$01
    54 				m_playerBaseColor1A			org *+$01
    55 				m_playerBaseColor1B			org *+$01
    56
    57 				m_playerLevelLeftX_H2		org *+$01			; left side coordinate
    58 				m_playerLevelLeftX_H1		org *+$01
    59 				m_playerLevelLeftX_L1		org *+$01
    60
    61 				m_playerLevelRightX_H2		org *+$01			; right side coordinate
    62 				m_playerLevelRightX_H1		org *+$01
    63 				m_playerLevelRightX_L1		org *+$01
    64
    65 				m_playerLevelTopY_H2		org *+$01			; top line coordinate
    66 				m_playerLevelTopY_H1		org *+$01
    67 				m_playerLevelTopY_L1		org *+$01
    68
    69 				m_playerLevelBottomY_H2		org *+$01			; bottom line coordinate
    70 				m_playerLevelBottomY_H1		org *+$01
    71 				m_playerLevelBottomY_L1		org *+$01
    72
    73 				m_playerScreenLeftX			org *+$01
    74 				m_playerScreenTopY			org *+$01
    75
    76 				m_oldPlayerScreenLeftX		org *+$01
    77 				m_oldPlayerScreenTopY		org *+$01
    78
    79 				m_playerSizeX				org *+$01
    80 				m_playerSizeY				org *+$01
    81
    82 				m_playerSizeXMinusOne		org *+$01
    83 				m_playerSizeYMinusOne		org *+$01
    84
    85 				m_playerSideSpeed_H1		org *+$01
    86 				m_playerSideSpeed_L1		org *+$01
    87
    88 				m_playerMaxSideSpeed_H1		org *+$01
    89 				m_playerMaxSideSpeed_L1		org *+$01
    90
    91 				m_playerSideAccel_H1		org *+$01
    92 				m_playerSideAccel_L1		org *+$01
    93
    94 				m_playerSideDeaccel_H1		org *+$01
    95 				m_playerSideDeaccel_L1		org *+$01
    96
    97 				m_playerSpeedY_H1			org *+$01
    98 				m_playerSpeedY_L1			org *+$01
    99
   100 				m_playerJumpSpeed_H1		org *+$01
   101 				m_playerJumpSpeed_L1		org *+$01
   102
   103 				m_playerMaxFallSpeed_H1		org *+$01
   104 				m_playerMaxFallSpeed_L1		org *+$01
   105
   106 				m_playerGravityAccel_H1		org *+$01
   107 				m_playerGravityAccel_L1		org *+$01
   108
   109 				m_playerWaterAccelY_H1		org *+$01
   110 				m_playerWaterAccelY_L1		org *+$01
   111
   112 				m_playerMaxWaterSpeedY_H1	org *+$01
   113 				m_playerMaxWaterSpeedY_L1	org *+$01
   114
   115 				m_playerMoveWaterSpeedY_H1	org *+$01
   116 				m_playerMoveWaterSpeedY_L1	org *+$01
   117
   118 				m_playerNoJumpTimer			org *+$01			; for now this is used to disable the jump for some frames, after entering the water
   119 				m_playerHoldJumpCounter		org *+$01
   120
   121 				m_lastPlayerSideDirection	org *+$01			; 0 - none, 1 - right, 2 - left
   122 				m_lastPlayerShootDirection	org *+$01
   123
   124 				m_playerOverPlatformFlag	org *+$01			; is player over platform
   125 				m_playerTopCollisionFlag	org *+$01			; did player hit top
   126 				m_playerSideCollisionFlag	org *+$01			; did player hit side
   127
   128 				m_playerState				org *+$01			; 0-static, 1-over platform, 2-jumping up, 3-falling, 4-climbing, 5-in water, 6-gravity test
   129
   130 				m_pageZeroTempValue			org *+$01
   131
   132 				m_levelCharSizeX			org *+$01			; char size X goes from 1 to 255 characters, 0 = 256 characters
   133 				m_levelCharSizeY			org *+$01			; char size Y goes from 1 to 255 characters, 0 = 256 characters
   134
   135 				m_levelSizeX_H2				org *+$01
   136 				m_levelSizeX_H1				org *+$01
   137
   138 				m_levelSizeY_H2				org *+$01
   139 				m_levelSizeY_H1				org *+$01
   140
   141 				m_levelWindowX_H2			org *+$01
   142 				m_levelWindowX_H1			org *+$01
   143
   144 				m_levelWindowY_H2			org *+$01
   145 				m_levelWindowY_H1			org *+$01
   146
   147 				m_stick0					org *+$01
   148 				m_oldStick0					org *+$01
   149 				m_oldTrigger0				org *+$01
   150 				m_triggerState				org *+$01			; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
   151 				m_currentTrigger0			org *+$01
   152
   153 				m_paramW01					org *+$02
   154 				m_paramW02					org *+$02
   155
   156 				m_ptrLevelAddr				org *+$02
   157 				m_ptrLevelLine				org *+$02
   158 				m_pageZeroTempPointer		org *+$02
   159 				m_playerMethodPointer		org *+$02
   160 				m_platformLevelPointer		org *+$02
   161
   162 				m_currChar					org *+$01
   163 				m_currLevelNum				org *+$01
   164
   165 				.PRINT "Zero Page Start : ", ZeroPageAddress, " Zero Page Length : ", * - ZeroPageAddress, " Total : ", *  
   165 				Zero Page Start : $0080 Zero Page Length : $0073 Total : $00F3
   166
   167 				.if * - ZeroPageAddress > $79
   168 					.error "Zero Page length address greater than $00FA!"
   169 				.endif
   170
    46 						icl "Constants.Asm"
Source: E:\_8BitProjects\Series\Scroller\Constants.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Constants.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;
    16 				; remember, when going from NTSC to PAL:
    17 				;
    18 				; 	colors - 1 (same lum) .. here only color 7 (water blue) was left equal times multiplied by (5/6)
    19 				; 	speeds and accelerations multiplied by (6/5) .. maybe accelerations requires another adjustment
    20 				; 	some animations speed maybe should not (cannot) be converted, if they are not related to gameplay
    21 				; 		(for example the timing for the laser enabled/disabled states was converted)
    22 				; 	also, one extra precison byte (_L2) could be useful to get a better conversion in some cases
    23 				;
    24 				;**************************************************************************************************
    25 				;
    26 = 0001			DEBUG_ON					= 1
    27
    28 = B000			GAME_MEM					= GameMemoryAddress			; used in Camera.Asm. Must set this for camera to work			
    29 = 0E03			GAME_LMS1					= GameDspLstAddr+3			; used in Camera.Asm. Must set this for camera to work
    30
    31 = 0008			PLR_WIDTH					= 8							; must set this for player to work
    32 = 0015			PLR_HEIGHT					= 21						; must set this for player to work
    33
    34 				;*****	Music and Sound constants 
    35 = 0000			STEREOMODE					= 0
    36
    37 = 0000			MUSIC_MENU 					= 0
    38 = 000B			MUSIC_GAME 					= $0B
    39 = 000E			MUSIC_GAME_OVER 			= $0E
    40 = 0010			MUSIC_DUMMY 				= $10
    41
    42 = 0001			SFX_DIAMOND 				= 1
    43 = 000C			SFX_ALL_PICKED 				= 12
    44 = 000E			SFX_DEATH 					= 14
    45 = 0010			SFX_CONGRATULATIONS 		= 16
    46 = 0001			SFX_JUMP 					= 1
    47
    48 				;*****	Open Plat constants
    49 				;
    50 = 0000			PAL_VERSION					= 0
    51
    52 = 0028			MAX_ROWS					= 40
    53
    54 = 0004			CHAR_PIX.else_X				= 4
    55 = 0008			CHAR_PIX.else_Y				= 8
    56
    57 = 0052			LEVEL_CHAR_SIZE_X			= 82				; max level size now should be 256 x 255 lines	
    58 = 0018			LEVEL_CHAR_SIZE_Y			= 24
    59
    60 = 0028			WINDOW_CHAR_SIZE_X			= 40
    61 = 0018			WINDOW_CHAR_SIZE_Y			= 24
    62
    63 = 0030			PM_BASE_SCREEN_X			= 48
    64 = 0020			PM_BASE_SCREEN_Y			= 32
    65
    66 = 0000			PSD_NONE					= 0					; player side direction
    67 = 0001			PSD_RIGHT					= 1
    68 = 0002			PSD_LEFT					= 2
    69
    70 = 0000			PS_STATIC					= 0					; player states
    71 = 0001			PS_OVER_PLATFORM			= 1
    72 = 0002			PS_JUMPING					= 2
    73 = 0003			PS_FALLING					= 3
    74 = 0004			PS_CLIMBING					= 4
    75 = 0005			PS_IN_WATER					= 5
    76 = 0006			PS_GRAVITY_TEST				= 6
    77 = 0007			PS_LOSE						= 7
    78
    79 = 0000			CT_BLANK					= 0					; character types
    80 = 0001			CT_BLOCK					= 1
    81 = 0002			CT_COLLECTABLE				= 2
    82 = 0003			CT_DANGER					= 3
    83 = 0004			CT_LADDER					= 4
    84 = 0005			CT_WATER					= 5
    85 = 0006			CT_HEALTH					= 6
    86 = 0007			CT_FLOATPLATFORMH			= 7
    87 = 0008			CT_VLASER					= 8
    88 = 0009			CT_FLOATPLATFORMV			= 9
    89 = 000A			CT_HLASER					= 10
    90
    91 = 0000			TS_NOT_PRESSED				= 0					; trigger states
    92 = 0000			TS_JUST_RELEASED			= 0
    93 = 0000			TS_PRESSED					= 0
    94 = 0000			TS_JUST_PRESSED				= 0
    95
    96 = 0020			ENEMY_SHOOT_DELTA_Y			= 32
    97
    98 				;*****	Set these constants depending on TV system
    99 				; 
   100 				.if PAL_VERSION = 0
   101
   102 = 0006				TENTH_OF_SECOND_FRAMES	= 6
   103 = 0001				MINIMUM_CAMERA_STEP		= 1
   104 = 0008				JUMP_HOLD_FRAMES		= 8
   105 = 0040				JUMP_HSPEED_SLOWDOWN	= 64
   106 = 001E				WATER_NO_JUMP_FRAMES	= 30
   107
   108 = 0001				SIDE_SPEED_LAND_H1		= 1					; 001.160 --> 97.5 pixels per second (at 60 fps only!)
   109 = 0001				SIDE_SPEED_LAND_L1		= 1 ;64
   110 					
   111 = 0000				SIDE_ACCEL_LAND_H1		= 0					; 6 frames (at 60 fps only!) or 0.x seconds, to reach max speed
   112 = 0020				SIDE_ACCEL_LAND_L1		= 32
   113 					
   114 = 0000				SIDE_DEACCEL_LAND_H1	= 0					; 3 frames (at 60 fps only!) or 0.x seconds, to reach zero speed
   115 = 0080				SIDE_DEACCEL_LAND_L1	= 128
   116
   117 = 0000				SIDE_SPEED_WATER_H1		= 0
   118 = 0080				SIDE_SPEED_WATER_L1		= 128
   119
   120 = 0000				SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 60 fps only!) or _ seconds, to reach max speed
   121 = 0004				SIDE_ACCEL_WATER_L1		= 4
   122
   123 = 0000				SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 60 fps only!) or _ seconds, to reach zero speed
   124 = 0004				SIDE_DEACCEL_WATER_L1	= 4
   125
   126 = 0001				SIDE_SPEED_AIR_H1		= 1					; 001.120 --> 88.125 pixels per second (at 60 fps only!)
   127 = 0020				SIDE_SPEED_AIR_L1		= 32
   128
   129 = 0000				SIDE_ACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach max speed
   130 = 0010				SIDE_ACCEL_AIR_L1		= 16
   131
   132 = 0000				SIDE_DEACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach zero speed
   133 = 0010				SIDE_DEACCEL_AIR_L1		= 16
   134
   135 = 0000				CLIMB_UP_SPEED_Y_H1		= 0
   136 = 00E0				CLIMB_UP_SPEED_Y_L1		= 224
   137
   138 = 0001				CLIMB_DOWN_SPEED_Y_H1	= 1
   139 = 0080				CLIMB_DOWN_SPEED_Y_L1	= 128
   140
   141 = 0280				PLAYER_MISSILE_SPEED_X	= 2*256+128
   142 = 0200				ENEMY_MISSILE_SPEED_X	= 2*256
   143 = 0078				ENEMY_INIT_TIMER		= 120
   144 = 003C				VLASER_DISABLED_INDEX	= 60
   145
   146 				.else
   147
   148 					TENTH_OF_SECOND_FRAMES	= 5
   149 					MINIMUM_CAMERA_STEP		= 1
   150 					JUMP_HOLD_FRAMES		= 6					; 6.67 for pal
   151 					JUMP_HSPEED_SLOWDOWN	= 77
   152 					WATER_NO_JUMP_FRAMES	= 25
   153
   154 					SIDE_SPEED_LAND_H1		= 1					;  pixels per second (at 50 fps only!)
   155 					SIDE_SPEED_LAND_L1		= 128
   156
   157 					SIDE_ACCEL_LAND_H1		= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach max speed
   158 					SIDE_ACCEL_LAND_L1		= 38
   159
   160 					SIDE_DEACCEL_LAND_H1	= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach zero speed
   161 					SIDE_DEACCEL_LAND_L1	= 154
   162
   163 					SIDE_SPEED_WATER_H1		= 0
   164 					SIDE_SPEED_WATER_L1		= 154
   165
   166 					SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 50 fps only!) or _ seconds, to reach max speed
   167 					SIDE_ACCEL_WATER_L1		= 5
   168
   169 					SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 50 fps only!) or _ seconds, to reach zero speed
   170 					SIDE_DEACCEL_WATER_L1	= 5
   171
   172 					SIDE_SPEED_AIR_H1		= 1					;  pixels per second (at 50 fps only!)
   173 					SIDE_SPEED_AIR_L1		= 90
   174 					
   175 					SIDE_ACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach max speed
   176 					SIDE_ACCEL_AIR_L1		= 19
   177
   178 					SIDE_DEACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach zero speed
   179 					SIDE_DEACCEL_AIR_L1		= 19
   180
   181 					CLIMB_UP_SPEED_Y_H1		= 1
   182 					CLIMB_UP_SPEED_Y_L1		= 13
   183
   184 					CLIMB_DOWN_SPEED_Y_H1	= 1
   185 					CLIMB_DOWN_SPEED_Y_L1	= 205
   186
   187 					PLAYER_MISSILE_SPEED_X	= 3*256
   188 					ENEMY_MISSILE_SPEED_X	= 2*256+104
   189 					ENEMY_INIT_TIMER		= 100
   190 					VLASER_DISABLED_INDEX	= 50
   191
   192 				.endif
   193
   194 				;*****	Register bit settings
   195 				;
   196 = 0003			GRACTL_OPTIONS				= [ENABLE_MISSILES 	| ENABLE_PLAYERS]
   197 = 0031			PRIOR_OPTIONS				= [PM_PRIORITY_1   	| F.ifH_PLAYER        			| MULTICOLOR_PM]	
   198 = 003E			DMACTL_OPTIONS				= [ENABLE_DL_DMA 	| PLAYFIELD_WIDTH_NORMAL_MASK 	| ENABLE_PM_DMA 	| PM_1LINE_RESOLUTION] 
   199
   200 				;*****	Player missle address definitions
   201 				;
   202 = A300			ms_area_1 					= PmgAddress + $0300
   203 = A400			p0_area_1 					= PmgAddress + $0400
   204 = A500			p1_area_1 					= PmgAddress + $0500
   205 = A600			p2_area_1 					= PmgAddress + $0600
   206 = A700			p3_area_1 					= PmgAddress + $0700
   207
    47
    48 				;*****	Memory map
    49 				;
    50 = 0080			ZeroPageAddress				= $80				; 122 bytes zero page ($80 to $F9) 
    51 = 0E00			GameDspLstAddr				= $0E00				; 176 bytes for display list
    52
    53 = 0680			HudMemoryAddr				= $0680				; Heads up display are (80 bytes)
    54
    55 = 2400			SoundPlayerAddress			= $2400
    56 = 3000			DataAddress					= $3000				;  4K (size for data)
    57 = 4800			CodeAddress					= $4800				; 20K (22K zone)
    58
    59 = 4000			SoundAddress				= $4000
    60
    61 = A000			PmgAddress					= $A000				; 40K (2K size - 768 bytes)
    62 = A800			GameFontAddress				= $A800				; 42K (1K size)
    63 = AC00			TextFontAddress				= $AC00				; 39K (1K size)
    64
    65 = B000			GameMemoryAddress			= $B000				; 44K (4K size)
    66
    67 				;
    68 				;**************************************************************************************************
    69 				; InitSystem - Start of code
    70 				;**************************************************************************************************
    71 				;
    72 						org CodeAddress
    73
    74 				InitSystem
    75
    76 FFFF> 4800-6C35> AD 14 + 		lda PAL									; only run in the correct system
    77 4803 29 0E				and #14
    78
    79 				.if PAL_VERSION = 1
    80
    81 				NO_PAL_loop
    82 						bne NO_PAL_loop
    83
    84 				.else
    85
    86 4805			NO_NTSC_loop
    87 4805 F0 FE				beq NO_NTSC_loop
    88
    89 				.endif
    90
    91 4807					ClearSystem								; begin machine setup
Macro: CLEARSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4807 18					clc
     6 4808 D8				    cld
     7 4809 78					sei
     9 480A A9 00			    lda #0									; clear interrupts and screen
    10 480C 8D 0E D2			    sta IRQEN	
    11 480F 8D 0E D4			    sta NMIEN
    12 4812 8D 00 D4			    sta DMACTL
    13 4815 8D 1A D0			    sta COLBK
    14 4818 8D 1D D0		      	sta GRACTL								; clear P/M
    15 481B 8D 0D D0				sta GRAFP0
    16 481E 8D 0E D0				sta GRAFP1
    17 4821 8D 0F D0				sta GRAFP2
    18 4824 8D 10 D0				sta GRAFP3
    19 4827 8D 11 D0				sta GRAFM
    21 482A 8D 00 D0				sta HPOSP0
    22 482D 8D 01 D0			    sta HPOSP1
    23 4830 8D 02 D0			    sta HPOSP2
    24 4833 8D 03 D0			    sta HPOSP3
    25 4836 8D 04 D0			    sta HPOSM0
    26 4839 8D 05 D0			    sta HPOSM1
    27 483C 8D 06 D0			    sta HPOSM2
    28 483F 8D 07 D0			    sta HPOSM3
    30 4842 8D 1B D0			    sta PRIOR								; clear GTIA also
    32 4845 8D 08 D2			    sta AUDCTL								; clear sound
    33 4848 8D 01 D2				sta AUDC1
    34 484B 8D 03 D2			    sta AUDC2
    35 484E 8D 05 D2			    sta AUDC3
    36 4851 8D 07 D2			    sta AUDC4
    38 4854 A9 03			    lda #3
    39 4856 8D 0F D2			    sta SKCTL
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    92 4859					DisableBasic							; disable to use memory
Macro: DISABLEBASIC [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4859 AD 01 D3					lda PORTB							; deactivate Basic
     6 485C 09 02			        ora #%00000010
     7 485E 8D 01 D3			        sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    93 4861					DisableOperatingSystem					; disable to use memory	
Macro: DISABLEOPERATINGSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4861 AD 01 D3					lda PORTB							; deactivate Operative System
     6 4864 29 FE					and #%11111110
     7 4866 8D 01 D3					sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    94 					
    95 4869					SetRamTop #32							; pull memtop down 32 pages
Macro: SETRAMTOP [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4869 A5 6A		   		lda RAMTOP
     5 486B 38					sec
     6 486C E9 20				sbc #32
     7 486E 85 6A				sta RAMTOP
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    96 								
    97 4870					SetDisplayListInterrupt GameDli_01		; set the display list interrupts
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4870 A9 32		      	lda #<GAMEDLI_01
     5 4872 8D FA FF			    sta NMIH_VECTOR
     6 4875 A9 4E			    lda #>GAMEDLI_01
     7 4877 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    98
    99 487A					VcountWait 120							; make sure to wait so the setting take effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 487A A9 78				lda #120
     5 487C CD 0B D4		VWait1	cmp VCOUNT
     6 487F D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   100
   101 4881 A9 58				lda #GameDLEnd							; length of games display list data
   102 4883 85 92				sta m_param00 							; store it for the load routine									
   103 4885					SetVector m_paramW01, GameDL			; source of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4885 A9 76		      	lda #<GAMEDL
     5 4887 85 E3			    sta M_PARAMW01
     6 4889 A9 35			    lda #>GAMEDL
     7 488B 85 E4			    sta M_PARAMW01+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   104 488D					SetVector m_paramW02, GameDspLstAddr	; destination of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 488D A9 00		      	lda #<GAMEDSPLSTADDR
     5 488F 85 E5			    sta M_PARAMW02
     6 4891 A9 0E			    lda #>GAMEDSPLSTADDR
     7 4893 85 E6			    sta M_PARAMW02+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   105 						
   106 4895 20 F4 6A				jsr LoadDisplayListData					; perform the DL data move
   107
   108 				;*****	InitHardware
   109 				;
   110 4898			InitHardware
   111
   112 4898					SetPMBaseAddress PmgAddress				; set the player missile address
Macro: SETPMBASEADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4898 A9 A0		      lda #>PMGADDRESS
     5 489A 8D 07 D4		      sta PMBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   113
   114 489D					SetFontAddress GameFontAddress			; set the starting font address
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 489D A9 A8				lda #>GAMEFONTADDRESS
     5 489F 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   115 48A2					SetDisplayListAddress GameDspLstAddr	; set the display list address	
Macro: SETDISPLAYLISTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48A2 A9 00		      	lda #<GAMEDSPLSTADDR
     5 48A4 8D 02 D4			    sta DLISTL
     6 48A7 A9 0E			    lda #>GAMEDSPLSTADDR
     7 48A9 8D 03 D4			    sta DLISTL+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   116
   117 48AC					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48AC A9 78				lda #120
     5 48AE CD 0B D4		VWait1	cmp VCOUNT
     6 48B1 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   118
   119 48B3 20 0B 6C				jsr SfxOff
   120 48B6 20 19 4B				jsr InitVars							; begin initialization
   121 48B9 20 D5 4B				jsr InitLevelTable						; set up the level table		
   122 								
   123 				;*****	Set the Registers
   124 				;				
   125 48BC A9 00				lda #0									; set the player info
   126 48BE 8D 08 D0				sta SIZEP0
   127
   128 48C1 A9 55				lda #%01010101							; double width for all missiles
   129 48C3 8D 0C D0				sta SIZEM
   130
   131 48C6 A9 0C				lda #12									; set the HSCROL value
   132 48C8 8D 04 D4				sta HSCROL
   133 					
   134 48CB A9 00				lda #0									; set the VSCROL value
   135 48CD 8D 05 D4				sta VSCROL
   136 						
   137 48D0 A9 80				lda #[NMI_DLI]							; enable DLI's (but no VBI's)
   138 48D2 8D 0E D4				sta NMIEN
   139 						
   140 48D5 A9 03				lda #GRACTL_OPTIONS						; apply GRACTL options
   141 48D7 8D 1D D0				sta GRACTL
   142
   143 48DA A9 31				lda #PRIOR_OPTIONS						; apply PRIOR options
   144 48DC 8D 1B D0				sta PRIOR
   145
   146 48DF A9 3E				lda #DMACTL_OPTIONS						; apply DMACTL options
   147 48E1 8D 00 D4				sta DMACTL
   148
   149 48E4 A9 00				lda #0									; clear the hit register
   150 48E6 8D 1E D0				sta HITCLR
   151
   152 				;*****	Load the starting level
   153 				;
   154 48E9 A9 00				lda #$00								; set the starting level
   155 48EB 85 F2				sta m_currLevelNum						; store it off
   156
   157 48ED 85 93				sta m_param01							; store it to the parameter
   158 48EF 20 01 6B				jsr LoadLevel							; load the level
   159
   160 48F2					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48F2 A9 78				lda #120
     5 48F4 CD 0B D4		VWait1	cmp VCOUNT
     6 48F7 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   161
   162 				;*****	Initialize Level
   163 				;
   164 48F9 20 64 4C				jsr InitPlatforms						; initialize floating platforms if any
   165 48FC 20 0E 4C				jsr InitGoldCounter						; gold initialization
   166 48FF 20 F4 4C				jsr InitEnemyManager					; enemy manager initialization
   167 4902 20 37 5D				jsr InitMissileSystem					; missile system initialization
   168
   169 4905					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4905 A9 78				lda #120
     5 4907 CD 0B D4		VWait1	cmp VCOUNT
     6 490A D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   170 						
   171 				;*****	Set player position and draw
   172 				;		
   173 490C A5 F2				lda m_currLevelNum						; grab the current level
   174 490E 85 92				sta m_param00							; store it in the parameter
   175 4910 20 66 54				jsr SetSpawnPos							; set the spawn position for this level
   176 						
   177 4913 20 80 55				jsr SetPlayerScreenPos 					; fill in the players position
   178 4916 20 9F 55				jsr DrawPlayer							; draw the player
   179
   180 4919					VcountWait 120	
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4919 A9 78				lda #120
     5 491B CD 0B D4		VWait1	cmp VCOUNT
     6 491E D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   181 						
   182 				;*****	GameLoop
   183 				;
   184 4920			GameLoop
   185 						
   186 4920 A5 DE				lda m_stick0
   187 4922 29 0F				and #$0F
   188 4924 C9 0F				cmp #$0F
   189 4926 D0 03				bne CheckState
   190 4928 4C 3C 49				jmp CheckUserInput
   191
   192 492B			CheckState
   193 						
   194 492B A5 D2				lda m_playerState
   195 492D C9 02				cmp #$02		
   196 492F F0 07				beq JumpSound
   197
   198 4931 C9 03				cmp #$03
   199 4933 F0 03				beq JumpSound
   200 						
   201 4935 4C 3C 49				jmp CheckUserInput
   202 						
   203 4938			JumpSound
   204 						
   205 4938 A9 01				lda #SFX_JUMP
   206 493A 85 99				sta m_sfxEffect
   207
   208 				;*****	Check User Input
   209 				;		
   210 493C			CheckUserInput
   211
   212 				.if DEBUG_ON = 1
   213
   214 493C AE 0D 32				ldx m_floatPlatformIdx
   215 493F CA					dex
   216 						
   217 4940 A5 D2				lda m_playerState
   218 4942 A0 28				ldy #40
   219 4944 20 BE 4A				jsr DisplayDebugInfoHexFF
   220 						
   221 4947 AD 68 32				lda m_leftBottomChar
   222 494A A0 2B				ldy #43
   223 494C 20 BE 4A				jsr DisplayDebugInfoHexFF
   224 						
   225 494F AD 69 32				lda m_rightBottomChar
   226 4952 A0 2E				ldy #46
   227 4954 20 BE 4A				jsr DisplayDebugInfoHexFF
   228 						
   229 4957 A5 A2				lda m_playerLevelLeftX_H1
   230 4959 A0 31				ldy #49
   231 495B 20 BE 4A				jsr DisplayDebugInfoHexFF	
   232 						
   233 495E A5 A1				lda m_playerLevelLeftX_H2
   234 4960 A0 34				ldy #52
   235 4962 20 BE 4A				jsr DisplayDebugInfoHexFF	
   236 						
   237 4965 BD EF 69				lda PlatformLSB,x
   238 4968 A0 37				ldy #55
   239 496A 20 BE 4A				jsr DisplayDebugInfoHexFF	
   240 						 		
   241 496D BD F7 69				lda PlatformMSB,x
   242 4970 A0 3A				ldy #58
   243 4972 20 BE 4A				jsr DisplayDebugInfoHexFF	
   244 						 		
   245 4975 BD 2B 6A				lda PlatformBaseLSB,x
   246 4978 A0 3D				ldy #61
   247 497A 20 BE 4A				jsr DisplayDebugInfoHexFF	
   248
   249 497D BD 33 6A				lda PlatformBaseMSB,x
   250 4980 A0 40				ldy #64
   251 4982 20 BE 4A				jsr DisplayDebugInfoHexFF	
   252
   253 				.endif
   254 						
   255 4985 20 85 6B				jsr CheckInput
   256 4988 20 2B 4E				jsr UpdateTimers
   257 498B 6C ED 00				jmp (m_playerMethodPointer)
   258 					
   259 				;*****	PlayerMethodReturn
   260 				;
   261 498E			PlayerMethodReturn
   262 498E A5 D2				lda m_playerState
   263 4990 C9 07				cmp #PS_LOSE
   264 4992 F0 2B				beq PlayerEndStates
   265 					
   266 				;*****	PlayerNormalStates	
   267 				;
   268 4994			PlayerNormalStates
   269 4994 20 0F 64				jsr UpdateCameraWindow
   270 4997 20 80 55				jsr SetPlayerScreenPos
   271 499A 20 9F 55				jsr DrawPlayer
   272 							
   273 				;*****	EnemyUpdate
   274 				;
   275 499D			EnemyUpdate
   276 499D 20 31 68				jsr UpdateEnemyManager
   277 					
   278 				;*****	MissilesStep
   279 				;
   280 49A0			MissilesStep
   281 49A0 20 95 5D				jsr UpdateMissileSystem
   282 49A3 20 8A 69				jsr DrawEnemyExplosion
   283 					
   284 				;*****	GameAnimations
   285 				;
   286 49A6			GameAnimations
   287 					
   288 49A6 20 6B 62				jsr DoFontAnimations
   289 49A9 20 AB 62				jsr UpdateCoinAnimations
   290 49AC 20 A7 4D				jsr UpdateInfoLine
   291 49AF 20 21 6C				jsr SfxUpdate
   292 								
   293 49B2					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49B2 A9 78				lda #120
     5 49B4 CD 0B D4		VWait1	cmp VCOUNT
     6 49B7 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   294 						
   295 49B9 20 BE 6B				jsr CheckPMCollisions
   296 49BC 4C 20 49				jmp GameLoop
   297 					
   298 				;*****	PlayerEndStates
   299 				;
   300 49BF			PlayerEndStates
   301 					
   302 49BF 20 02 56				jsr DrawPlayerExplosion
   303 49C2 20 6B 62				jsr DoFontAnimations
   304 49C5 20 AB 62				jsr UpdateCoinAnimations
   305 49C8 20 95 5D				jsr UpdateMissileSystem
   306 49CB 20 8A 69				jsr DrawEnemyExplosion
   307 49CE 20 A7 4D				jsr UpdateInfoLine
   308 49D1 20 66 54				jsr SetSpawnPos
   309 49D4 20 21 6C				jsr SfxUpdate
   310 												
   311 49D7					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49D7 A9 78				lda #120
     5 49D9 CD 0B D4		VWait1	cmp VCOUNT
     6 49DC D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   312 						
   313 49DE A9 00				lda #0
   314 49E0 8D 1E D0				sta HITCLR	
   315 						
   316 49E3 4C 20 49				jmp GameLoop
   317
   318 				;*****	Includes base files
   319 				;
   320 49E6					icl "/Lib/SysProcs.Asm"
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysProcs.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysProcs.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;****	Storage
    15 				;
    16 49E6 00			_productLo		.byte $00 
    17 49E7 00			_productHi		.byte $00 
    18 49E8 00			_multiplier		.byte $00 
    19 49E9 00			_multiplicand	.byte $00 
    20
    21 49EA 00			_divisor		.byte $00						; DIVISOR
    22 49EB 00			_quitient		.byte $00 						; QUOTIENT
    23 49EC 00			_remainder		.byte $00						; REMAINDER 
    24 49ED 00			_dividenLo		.byte $00						; LOW PART OF DIVIDEND
    25 49EE 00			_dividendHi		.byte $00						; HIGH PART OF DIVIDEND 
    26
    27 49EF			TabHexNibbleToScreenDigit
    28 49EF 10 11 12 13 14 15 + 	.sb "0123456789ABCDEF"
    29
    30 49FF			TabBinaryToBCD
    31 49FF 00 01 02 03 04 05 + 	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
    32 4A09 10 11 12 13 14 15 + 	.byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
    33 4A13 20 21 22 23 24 25 + 	.byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
    34 4A1D 30 31 32 33 34 35 + 	.byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
    35 4A27 40 41 42 43 44 45 + 	.byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49
    36 4A31 50 51 52 53 54 55 + 	.byte $50, $51, $52, $53, $54, $55, $56, $57, $58, $59
    37 4A3B 60 61 62 63 64 65 + 	.byte $60, $61, $62, $63, $64, $65, $66, $67, $68, $69
    38 4A45 70 71 72 73 74 75 + 	.byte $70, $71, $72, $73, $74, $75, $76, $77, $78, $79
    39 4A4F 80 81 82 83 84 85 + 	.byte $80, $81, $82, $83, $84, $85, $86, $87, $88, $89
    40 4A59 90 91 92 93 94 95 + 	.byte $90, $91, $92, $93, $94, $95, $96, $97, $98, $99
    41
    42 				;
    43 				;***************************************************************************************************
    44 				; WaitFrame
    45 				;***************************************************************************************************
    46 				;
    47 4A63			.proc WaitFrame
    48 						
    49 4A63 A5 14				lda RTCLOK60							; get frame/jiffy counter
    50
    51 4A65			WaitTick60
    52
    53 4A65 C5 14				cmp RTCLOK60							; Loop until the clock changes
    54 4A67 F0 FC				beq WaitTick60		
    55 4A69 60					rts
    56 				.endp			
    57
    58 				;
    59 				;***************************************************************************************************
    60 				; MultiplyAX
    61 				;***************************************************************************************************
    62 				;
    63 4A6A			.proc MultiplyAX  
    64 4A6A 8D E8 49				sta _multiplier
    65 4A6D 8E E9 49				stx _multiplicand 
    66 4A70 A9 00				lda #0 
    67 4A72 8D E6 49				sta _productLo 
    68 4A75 A2 08				ldx #8 
    69
    70 				;*************************************************
    71 				;		
    72 4A77			Loop
    73 4A77 4E E8 49			 	lsr _multiplier 
    74 4A7A 90 04				bcc NoAdd 
    75 4A7C 18					clc 
    76 4A7D 6D E9 49				adc _multiplicand 
    77
    78 				;*************************************************
    79 				;
    80 4A80			NoAdd
    81 4A80 6A				 	ror 
    82 4A81 6E E6 49				ror _productLo 
    83 4A84 CA					dex 
    84 4A85 D0 F0				bne Loop 
    85 4A87 8D E7 49				sta _productHi 
    86
    87 4A8A 60					rts 
    88 				.endp
    89
    90 				;
    91 				;***************************************************************************************************
    92 				; DivideAXY
    93 				;***************************************************************************************************
    94 				;
    95 4A8B			.proc DivideAXY
    96 						
    97 4A8B 8E EA 49				stx _divisor							; THE DIVISOR
    98 4A8E 8C ED 49				sty _dividenLo								
    99 4A91 8D EE 49				sta _dividendHi							; ACCUMULATOR WILL HOLD DVDH
   100 				 
   101 4A94 A2 08				ldx	#$08 								; FOR AN 8-BIT DIVISOR 
   102 4A96 38					sec 
   103 4A97 ED EA 49				sbc _divisor 
   104
   105 				;************************************************
   106 				;
   107 4A9A 08			DLOOP 	php										; THE LOOP THAT DIVIDES 
   108 4A9B 2E EB 49				rol _quitient 
   109 4A9E 0E ED 49				asl _dividenLo 
   110 4AA1 2A					rol  
   111 4AA2 28					plp 
   112 4AA3 90 06				bcc ADDIT 
   113 4AA5 ED EA 49				sbc _divisor 
   114 4AA8 4C AE 4A				jmp NEXT 
   115
   116 				;************************************************
   117 				;
   118 4AAB 6D EA 49		ADDIT 	adc _divisor 
   119
   120 				;************************************************
   121 				;
   122 4AAE CA			NEXT 	dex 
   123 4AAF D0 E9				bne	DLOOP 
   124 4AB1 B0 04				bcs FINI 
   125 4AB3 6D EA 49				ADC _divisor 
   126 4AB6 18					clc 
   127
   128 				;************************************************
   129 				;		
   130 4AB7 2E EB 49		FINI 	rol _quitient 
   131 4ABA 8D EC 49				sta _remainder 
   132 4ABD 60					rts 									; ENDIT
   133
   134 				.endp		
   135
   136 				;
   137 				;**************************************************************************************************
   138 				; DisplayDebugInfoHexFF
   139 				;
   140 				; 	display 2 digits with values from 00 to FF
   141 				; 	passs the value in A and the line row in Y
   142 				;
   143 				;**************************************************************************************************
   144 				;
   145 4ABE			.proc DisplayDebugInfoHexFF
   146
   147 4ABE 86 97				stx m_saveRegX
   148 4AC0 8D CF 4A				sta Save_Value+1						; place the value in A 1 location pasted the lda.   
   149 					
   150 4AC3 4A					lsr										; display 2 digits (from 0 to F)
   151 4AC4 4A					lsr
   152 4AC5 4A					lsr
   153 4AC6 4A					lsr
   154 4AC7 AA					tax
   155 4AC8 BD EF 49				lda TabHexNibbleToScreenDigit,x
   156 4ACB 99 80 06				sta HudMemoryAddr,y
   157
   158 4ACE			Save_Value
   159
   160 4ACE A9 FF				lda #$FF								; will hold the value in A on entry
   161 4AD0 29 0F				and #15
   162 4AD2 AA					tax
   163 4AD3 BD EF 49				lda TabHexNibbleToScreenDigit,x
   164 4AD6 99 81 06				sta HudMemoryAddr+1,y
   165 4AD9 A6 97				ldx m_saveRegX
   166 4ADB 60					rts
   167 				.endp	
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; DisplayDebugInfoBinary99
   172 				;
   173 				;	display 2 digits with values from 00 to 99
   174 				; 	passs the value in A and the line row in Y
   175 				;
   176 				;**************************************************************************************************
   177 				;
   178 4ADC			.proc DisplayDebugInfoBinary99
   179
   180 4ADC 86 97				stx m_saveRegX
   181 4ADE AA					tax
   182 4ADF E0 64				cpx #100
   183 4AE1 90 02				bcc NoOverflow
   184 4AE3 A2 63				ldx #99
   185
   186 4AE5			NoOverflow
   187 4AE5 BD FF 49				lda TabBinaryToBCD,x
   188 4AE8 AA					tax
   189
   190 4AE9 4A					lsr										; display 2 digits (from 0 to 9)
   191 4AEA 4A					lsr
   192 4AEB 4A					lsr
   193 4AEC 4A					lsr
   194 4AED 09 10				ora #16									; add the "0" character value
   195 4AEF 99 80 06				sta HudMemoryAddr,y
   196
   197 4AF2 8A					txa
   198 4AF3 29 0F				and #15
   199 4AF5 09 10				ora #16									; add the "0" character value
   200 4AF7 99 81 06				sta HudMemoryAddr+1,y
   201
   202 4AFA A6 97				ldx m_saveRegX
   203 4AFC 60					rts
   204 				.endp		
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; DisplayDebugInfoBinary9
   209 				;**************************************************************************************************
   210 				;
   211 4AFD			.proc DisplayDebugInfoBinary9
   212
   213 4AFD C9 0A				cmp #10
   214 4AFF 90 02				bcc NoOverflow2
   215 4B01 A9 09				lda #9
   216
   217 				;*************************************************
   218 				;
   219 4B03			NoOverflow2
   220 					
   221 4B03 09 10				ora #16									; display 1 digit (from 0 to 9) add the "0" character value
   222 4B05 99 80 06				sta HudMemoryAddr,y
   223
   224 4B08 60				rts
   225
   226 				.endp	
   227
   228 				;
   229 				;**************************************************************************************************
   230 				; ClearDebugLineInfo
   231 				;**************************************************************************************************
   232 				;
   233 4B09			.proc ClearDebugLineInfo
   234
   235 4B09 86 97				stx m_saveRegX
   236 4B0B A9 00				lda #0
   237 4B0D AA					tax
   238
   239 4B0E			CDI_loop
   240
   241 4B0E 9D 80 06				sta HudMemoryAddr,x
   242 4B11 E8					inx
   243 4B12 E0 28				cpx #40
   244 4B14 D0 F8				bne CDI_loop
   245 4B16 A6 97				ldx m_saveRegX
   246 						
   247 4B18 60					rts
   248
   249 				.endp
   321
   322 4B19					icl "Initialize.Asm"				
Source: E:\_8BitProjects\Series\Scroller\Initialize.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Initialize.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; InitVars
    15 				;**************************************************************************************************
    16 				;
    17 4B19			.proc InitVars
    18 					
    19 4B19 A9 01				lda #1									; input info
    20 4B1B 85 E2				sta m_currentTrigger0
    21 4B1D 85 E0				sta m_oldTrigger0
    22
    23 4B1F A9 00				lda #0
    24 4B21 85 E1				sta m_triggerState
    25
    26 4B23 A9 0F				lda #15
    27 4B25 85 DE				sta m_stick0
    28 4B27 85 DF				sta m_oldStick0
    29 						
    30 4B29 A9 00				lda #>[CHAR_PIX.else_X]					; level info
    31 4B2B 85 DA				sta m_levelWindowX_H2
    32 						
    33 4B2D A9 04				lda #<[CHAR_PIX.else_X]
    34 4B2F 85 DB				sta m_levelWindowX_H1
    35 						
    36 4B31 A9 00				lda #0
    37 4B33 85 DC				sta m_levelWindowY_H2
    38 						
    39 4B35 A9 00				lda #0
    40 4B37 85 DD				sta m_levelWindowY_H1
    41
    42 4B39 A9 52				lda #LEVEL_CHAR_SIZE_X
    43 4B3B 85 D4				sta m_levelCharSizeX
    44 						
    45 4B3D A9 18				lda #LEVEL_CHAR_SIZE_Y
    46 4B3F 85 D5				sta m_levelCharSizeY
    47
    48 4B41 A9 01				lda #>[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    49 4B43 85 D6				sta m_levelSizeX_H2
    50 						
    51 4B45 A9 48				lda #<[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    52 4B47 85 D7				sta m_levelSizeX_H1
    53
    54 4B49 A9 00				lda #>[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    55 4B4B 85 D8				sta m_levelSizeY_H2
    56 						
    57 4B4D A9 C0				lda #<[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    58 4B4F 85 D9				sta m_levelSizeY_H1
    59
    60 4B51 A9 00				lda #<GameMemoryAddress
    61 4B53 8D 74 32				sta m_currentLineAddress
    62 						
    63 4B56 A9 B0				lda #>GameMemoryAddress
    64 4B58 8D 75 32				sta m_currentLineAddress+1
    65 							
    66 						;************************************************
    67 						;
    68 						; player info
    69 						;
    70 						; 	remember that we don't use any speed over 1 char per frame right now,
    71 						; 	because we don't want to lose collisions (in that case case we should
    72 						; 	use 2 or more steps per frame, or a "sweep" collision method)
    73 						;
    74 						;************************************************
    75 						;
    76
    77 				.if PAL_VERSION = 0
    78 					
    79 4B5B A9 03				lda #3									; air vertical movement 240 pixels per second (at 60 fps only!)
    80 4B5D 85 BF				sta m_playerJumpSpeed_H1
    81 						
    82 4B5F A9 80				lda #128
    83 4B61 85 C0				sta m_playerJumpSpeed_L1
    84
    85 4B63 A9 06				lda #6									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
    86 4B65 85 C1				sta m_playerMaxFallSpeed_H1
    87 					
    88 4B67 A9 AA				lda #170
    89 4B69 85 C2				sta m_playerMaxFallSpeed_L1
    90
    91 4B6B A9 00				lda #0									; 12.8 frames (at 60 fps only!) to reach max speed (from zero)
    92 4B6D 85 C3				sta m_playerGravityAccel_H1
    93 					
    94 4B6F A9 70				lda #112
    95 4B71 85 C4				sta m_playerGravityAccel_L1
    96 								
    97 4B73 A9 00				lda #0									; water vertical movement
    98 4B75 85 C5				sta m_playerWaterAccelY_H1
    99 						
   100 4B77 A9 20				lda #32
   101 4B79 85 C6				sta m_playerWaterAccelY_L1
   102
   103 4B7B A9 00				lda #0
   104 4B7D 85 C7				sta m_playerMaxWaterSpeedY_H1
   105 					
   106 4B7F A9 80				lda #128
   107 4B81 85 C8				sta m_playerMaxWaterSpeedY_L1
   108
   109 4B83 A9 01				lda #1
   110 4B85 85 C9				sta m_playerMoveWaterSpeedY_H1
   111 					
   112 4B87 A9 00				lda #0
   113 4B89 85 CA				sta m_playerMoveWaterSpeedY_L1
   114
   115 				.else
   116
   117 						lda #4									; air vertical movement pixels per second (at 50 fps only!)
   118 						sta m_playerJumpSpeed_H1
   119 					
   120 						lda #51
   121 						sta m_playerJumpSpeed_L1
   122
   123 						lda #7									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
   124 						sta m_playerMaxFallSpeed_H1
   125 					
   126 						lda #255
   127 						sta m_playerMaxFallSpeed_L1
   128
   129 						lda #0									;  frames (at 50 fps only!) to reach max speed (from zero)
   130 						sta m_playerGravityAccel_H1
   131 						
   132 						lda #134
   133 						sta m_playerGravityAccel_L1
   134
   135 						lda #0									; water vertical movement
   136 						sta m_playerWaterAccelY_H1
   137 						
   138 						lda #38
   139 						sta m_playerWaterAccelY_L1
   140
   141 						lda #0
   142 						sta m_playerMaxWaterSpeedY_H1
   143 					
   144 						lda #154
   145 						sta m_playerMaxWaterSpeedY_L1
   146
   147 						lda #1
   148 						sta m_playerMoveWaterSpeedY_H1
   149 					
   150 						lda #51
   151 						sta m_playerMoveWaterSpeedY_L1
   152
   153 				.endif
   154 					
   155 4B8B A2 08				ldx #PLR_WIDTH							; set size in pixels
   156 4B8D 86 B1				stx m_playerSizeX
   157 4B8F CA					dex
   158 4B90 86 B3				stx m_playerSizeXMinusOne
   159 					
   160 4B92 A2 15				ldx #PLR_HEIGHT
   161 4B94 86 B2				stx m_playerSizeY
   162 4B96 CA					dex
   163 4B97 86 B4				stx m_playerSizeYMinusOne
   164 					
   165 4B99 20 9D 4B				jsr InitPlayerInfo
   166 						
   167 4B9C 60					rts
   168 					
   169 				.endp	
   170
   171 				;
   172 				;**************************************************************************************************
   173 				; InitPlayerInfo
   174 				;**************************************************************************************************
   175 				;
   176 4B9D			.proc InitPlayerInfo
   177
   178 4B9D A9 00				lda #0
   179 4B9F 85 CB				sta m_playerNoJumpTimer
   180 4BA1 85 CC				sta m_playerHoldJumpCounter
   181 4BA3 85 CF				sta m_playerOverPlatformFlag
   182 4BA5 85 D0				sta m_playerTopCollisionFlag
   183 4BA7 85 D1				sta m_playerSideCollisionFlag
   184
   185 4BA9 A2 01				ldx #PS_OVER_PLATFORM
   186 4BAB 20 B5 4E				jsr SetPlayerMethod
   187
   188
   189 4BAE A9 00				lda #0
   190 4BB0 85 B5				sta m_playerSideSpeed_H1
   191 4BB2 85 B6				sta m_playerSideSpeed_L1
   192 						
   193 						; set uo spawn position
   194 4BB4 20 66 54				jsr SetSpawnPos
   195 4BB7 A9 02				lda #PSD_LEFT	
   196 4BB9 85 CD				sta m_lastPlayerSideDirection
   197 4BBB 85 CE				sta m_lastPlayerShootDirection
   198 4BBD A9 01				lda #1
   199 4BBF 85 9C				sta m_redrawPlayerCounter
   200 4BC1 20 9F 55				jsr DrawPlayer
   201 						
   202 4BC4 A9 01				lda #PSD_RIGHT	
   203 4BC6 85 CD				sta m_lastPlayerSideDirection
   204 4BC8 85 CE				sta m_lastPlayerShootDirection
   205 4BCA A9 01				lda #1
   206 4BCC 85 9C				sta m_redrawPlayerCounter
   207 4BCE 20 9F 55				jsr DrawPlayer	
   208
   209 4BD1 20 65 55				jsr SetPlayerInfo	
   210 						
   211 4BD4 60					rts
   212
   213 				.endp		
   214
   215 				;
   216 				;**************************************************************************************************
   217 				; InitLevelTable
   218 				;**************************************************************************************************
   219 				;
   220 4BD5			.proc InitLevelTable
   221 						
   222 4BD5 A0 00				ldy #0
   223
   224 				;************************************************
   225 				;
   226 4BD7			ILTL_loop
   227
   228 4BD7 AD 74 32				lda m_currentLineAddress
   229 4BDA 99 76 32				sta TabLevelLineAddressLSB,y
   230 						
   231 4BDD AD 75 32				lda m_currentLineAddress+1
   232 4BE0 99 76 33				sta TabLevelLineAddressMSB,y
   233
   234 4BE3 A5 D4				lda m_levelCharSizeX
   235 4BE5 D0 06				bne ILTL_below_256
   236
   237 4BE7 EE 75 32				inc m_currentLineAddress+1				; if m_levelCharSizeX = 0, then add 256 chars
   238 4BEA 4C FC 4B				jmp ILTL_check_loop
   239
   240 				;************************************************
   241 				;
   242 4BED			ILTL_below_256
   243
   244 4BED 18					clc
   245 4BEE 6D 74 32				adc m_currentLineAddress				; from 1 to 255 chars
   246 4BF1 8D 74 32				sta m_currentLineAddress
   247
   248 4BF4 AD 75 32				lda m_currentLineAddress+1
   249 4BF7 69 00				adc #0
   250 4BF9 8D 75 32				sta m_currentLineAddress+1
   251
   252 				;************************************************
   253 				;
   254 4BFC			ILTL_check_loop
   255
   256 4BFC C8					iny
   257 4BFD C4 D5				cpy m_levelCharSizeY					; from 1 to 255 lines, 0 = 256 lines in this case
   258 4BFF D0 D6				bne ILTL_loop
   259 					
   260 4C01 AD 74 32				lda m_currentLineAddress				; add one more line definition to fix problem of ladders in the last line, but this is not going to work if there are 256 lines!
   261 4C04 99 76 32				sta TabLevelLineAddressLSB,y
   262 					
   263 4C07 AD 75 32				lda m_currentLineAddress+1
   264 4C0A 99 76 33				sta TabLevelLineAddressMSB,y
   265 					
   266 4C0D 60					rts
   267 						
   268 				.endp		
   269
   270 				;
   271 				;**************************************************************************************************
   272 				; InitGoldCounter
   273 				;**************************************************************************************************
   274 				;
   275 4C0E			.proc InitGoldCounter
   276
   277 4C0E A2 00				ldx #0									; line index
   278
   279 				;****	1st Loop
   280 				; 
   281 4C10			IGC_loop1
   282 					
   283 4C10 A0 00				ldy #0									; column index
   284 					
   285 4C12 BD 76 32				lda TabLevelLineAddressLSB,x
   286 4C15 85 E9				sta m_ptrLevelLine
   287 						
   288 4C17 BD 76 33				lda TabLevelLineAddressMSB,x
   289 4C1A 85 EA				sta m_ptrLevelLine+1
   290
   291 				;*****	2nd Loop
   292 				;
   293 4C1C			IGC_loop2
   294
   295 4C1C B1 E9				lda (m_ptrLevelLine),y
   296 4C1E 85 F1				sta m_currChar	
   297 4C20 86 D3				stx m_pageZeroTempValue
   298 4C22 AA					tax
   299 4C23 BD 76 34				lda TabCharDefinition,x
   300 4C26 A6 D3				ldx m_pageZeroTempValue
   301 					
   302 4C28 29 0F				and #15
   303 4C2A C9 02				cmp #CT_COLLECTABLE
   304 4C2C D0 06				bne WaterCheck
   305 					
   306 4C2E EE 12 32				inc m_goldCounter
   307 4C31 4C 59 4C				jmp IGC_no_gold
   308 						
   309 				;*****	Water Check
   310 				;		
   311 4C34			WaterCheck
   312
   313 4C34 C9 05				cmp #CT_WATER
   314 4C36 D0 06				bne HealthCheck
   315 						
   316 4C38 EE 14 32				inc m_waterAvailable
   317 4C3B 4C 59 4C				jmp IGC_no_gold
   318 						
   319 				;*****	Health Check
   320 				;		
   321 4C3E			HealthCheck
   322
   323 4C3E C9 06				cmp #CT_HEALTH
   324 4C40 D0 06				bne VertLaserCheck
   325 						
   326 4C42 EE 13 32				inc m_healthCounter
   327 4C45 4C 59 4C				jmp IGC_no_gold		
   328 						
   329 				;*****	Vertical Check
   330 				;		
   331 4C48			VertLaserCheck
   332
   333 4C48 C9 08				cmp #CT_VLASER
   334 4C4A D0 06				bne HoriLaserCheck
   335 						
   336 4C4C EE 10 32				inc m_verticalLaserOn
   337 4C4F 4C 59 4C				jmp IGC_no_gold
   338
   339 				;*****	Horizontal Check
   340 				;		
   341 4C52			HoriLaserCheck
   342
   343 4C52 C9 0A				cmp #CT_HLASER
   344 4C54 D0 03				bne IGC_no_gold
   345
   346 4C56 EE 11 32				inc m_horizontalLaserOn
   347 							
   348 				;*****	No Gold
   349 				;	
   350 4C59			IGC_no_gold
   351
   352 4C59 C8					iny
   353 4C5A C4 D4				cpy m_levelCharSizeX
   354 4C5C D0 BE				bne IGC_loop2
   355
   356 				;*****	Check Loop Y
   357 				;
   358 4C5E			IGC_check_loop_Y
   359
   360 4C5E E8					inx
   361 4C5F E4 D5				cpx m_levelCharSizeY
   362 4C61 D0 AD				bne IGC_loop1	
   363 4C63 60					rts
   364
   365 				.endp	
   366
   367 				;
   368 				;**************************************************************************************************
   369 				; UpdateInfoLine
   370 				;**************************************************************************************************
   371 				;
   372 4C64			.proc InitPlatforms
   373
   374 4C64 A2 00				ldx #$00
   375 4C66 8E 0B 32				stx m_floatPlatformV
   376 4C69 8E 0C 32				stx m_floatPlatformH
   377 4C6C 8E 0D 32				stx m_floatPlatformIdx		
   378 						
   379 				;*****	Beging loop
   380 				;
   381 4C6F			loop
   382 4C6F A0 00				ldy #0									; column index
   383 					
   384 4C71 BD 76 32				lda TabLevelLineAddressLSB,x		
   385 4C74 85 E9				sta m_ptrLevelLine
   386 						
   387 4C76 BD 76 33				lda TabLevelLineAddressMSB,x
   388 4C79 85 EA				sta m_ptrLevelLine+1
   389
   390 				;*****	Middle loop
   391 				;
   392 4C7B			loop1
   393
   394 4C7B B1 E9				lda (m_ptrLevelLine),y
   395 4C7D 85 F1				sta m_currChar	
   396 4C7F 86 D3				stx m_pageZeroTempValue
   397 4C81 AA					tax
   398 4C82 BD 76 34				lda TabCharDefinition,x
   399 4C85 A6 D3				ldx m_pageZeroTempValue
   400
   401 4C87 29 0F				and #15
   402 4C89 C9 07				cmp #CT_FLOATPLATFORMH
   403 4C8B F0 07				beq loopH
   404 						
   405 4C8D C9 09				cmp #CT_FLOATPLATFORMV
   406 4C8F F0 4F				beq loopV		
   407 4C91 4C E6 4C				jmp loop2	
   408
   409 4C94			loopH
   410 4C94 AD 27 6A				lda PlatformCharH
   411 4C97 C5 F1				cmp m_currChar
   412 4C99 F0 0A				beq StartH
   413
   414 4C9B AD 28 6A				lda PlatformCharH+1
   415 4C9E C5 F1				cmp m_currChar
   416 4CA0 F0 03				beq StartH
   417 4CA2 4C E6 4C				jmp loop2
   418 									
   419 4CA5			StartH	
   420 											 
   421 4CA5 8A					txa										; move x to a
   422 4CA6 48					pha										; store a
   423
   424 4CA7 98					tya										; move y to a
   425 4CA8 48					pha										; store a
   426 						
   427 4CA9 AC 0D 32				ldy m_floatPlatformIdx					; put the current index in y
   428
   429 4CAC 48					pha
   430 4CAD BD 76 32				lda TabLevelLineAddressLSB,x
   431 4CB0 99 2B 6A				sta PlatformBaseLSB,y
   432 4CB3 BD 76 33				lda TabLevelLineAddressMSB,x
   433 4CB6 99 33 6A				sta PlatformBaseMSB,y
   434 						
   435 4CB9 68					pla		
   436 4CBA 18					clc										; clear the carry
   437 4CBB 7D 76 32				adc TabLevelLineAddressLSB,x			; add the lsb screen address		
   438 4CBE 99 EF 69				sta PlatformLSB,y						; store it by index		
   439 						
   440 4CC1 BD 76 33				lda TabLevelLineAddressMSB,x			; get the msb screen address
   441 4CC4 69 00				adc #00									; account for carry
   442 4CC6 99 F7 69				sta PlatformMSB,y						; store it by index
   443 						
   444 4CC9 A9 01				lda #01									; type 01 is horizontal
   445 4CCB 99 07 6A				sta PlatformType,y						; store it by index
   446 						
   447 4CCE A9 00				lda #$00								; initialize the step
   448 4CD0 99 17 6A				sta PlatformStepX,y						; store it by index
   449 								
   450 4CD3 EE 0D 32				inc m_floatPlatformIdx					; increment the index
   451 4CD6 EE 0C 32				inc m_floatPlatformH
   452 						
   453 4CD9 68					pla										; pull y
   454 4CDA A8					tay										; restore y
   455
   456 4CDB 68					pla										; pull x
   457 4CDC AA					tax										; restore x
   458
   459 4CDD 4C E6 4C				jmp loop2
   460 						
   461 4CE0			loopV	
   462 4CE0 BD 76 34				lda TabCharDefinition,x			
   463 4CE3 EE 0B 32				inc m_floatPlatformV
   464 						
   465 				;*****	Loop on X 
   466 				;		
   467 4CE6			loop2	
   468 4CE6 C8					iny
   469 4CE7 C4 D4				cpy m_levelCharSizeX
   470 4CE9 D0 90				bne loop1
   471 						
   472 4CEB E8					inx
   473 4CEC E4 D5				cpx m_levelCharSizeY
   474 4CEE F0 03				beq Exit
   475 4CF0 4C 6F 4C				jmp loop
   476 						
   477 4CF3			Exit		
   478 4CF3 60					rts
   479
   480 				.endp
   481
   482 				;
   483 				;**************************************************************************************************
   484 				; InitEnemyManager
   485 				;
   486 				; parse every type of enemy, init its life, state, char index and position
   487 				; update total and active enemies
   488 				;
   489 				;**************************************************************************************************
   490 				;
   491 4CF4			.proc InitEnemyManager
   492
   493 						; parse enemy type 1 (only one for now)
   494 4CF4 A2 01				ldx #1							; enemy type index
   495 4CF6 BD 2D 68				lda TabEnemyDefBaseChar,x
   496 4CF9 8D 3D 32				sta m_searchEnemyChar
   497 4CFC BD 2B 68				lda TabEnemyDefLife,x
   498 4CFF 8D 3E 32				sta m_defEnemyLife
   499 					
   500 4D02 A6 D4				ldx m_levelCharSizeX
   501 4D04 CA					dex										; we search in a shorter line because this enemy has a width of 2 chars
   502 4D05 8E 3F 32				stx m_numberOfValidRows
   503 					
   504 4D08 A2 00				ldx #0									; line index
   505 				;
   506 				;************************************************
   507 				;
   508 4D0A			IEM_loop1
   509 					
   510 4D0A A0 00				ldy #0									; column index	
   511 4D0C BD 76 32				lda TabLevelLineAddressLSB,x
   512 4D0F 85 E9				sta m_ptrLevelLine
   513 4D11 BD 76 33				lda TabLevelLineAddressMSB,x
   514 4D14 85 EA				sta m_ptrLevelLine+1
   515
   516 				;************************************************
   517 				;
   518 4D16			IEM_loop2
   519 					
   520 4D16 B1 E9				lda (m_ptrLevelLine),y
   521 4D18 CD 3D 32				cmp m_searchEnemyChar
   522 4D1B D0 78				bne IEM_no_enemy
   523
   524 4D1D 8E 40 32				stx m_tempByte
   525 4D20 AE 3B 32				ldx m_totalEnemies
   526
   527 						; init info for this enemy
   528 4D23 A9 01				lda #1
   529 4D25 9D 4B 66				sta TabEnemyType,x
   530 						
   531 4D28 AD 3E 32				lda m_defEnemyLife
   532 4D2B 9D 6B 66				sta TabEnemyLife,x
   533 						
   534 4D2E A9 01				lda #1
   535 4D30 9D 8B 66				sta TabEnemyState,x
   536 						
   537 4D33 A9 78				lda #ENEMY_INIT_TIMER					; dont allow enemy actions for the first 4 seconds
   538 4D35 9D AB 66				sta TabEnemyStateTimer,x
   539 						
   540 4D38 AD 3D 32				lda m_searchEnemyChar
   541 4D3B 9D CB 66				sta TabEnemyBaseCharIndex,x
   542 4D3E 98					tya
   543 4D3F 9D EB 66				sta TabEnemyBaseCharX,x
   544 						
   545 4D42 AD 40 32				lda m_tempByte
   546 4D45 9D 0B 67				sta TabEnemyBaseCharY,x
   547
   548 						; init level position
   549 						; TabEnemyLevelTopY_H2 starts as 0, now multiply by 8 to get the line
   550 4D48 0A					asl
   551 4D49 3E 8B 67				rol TabEnemyLevelTopY_H2,x
   552 4D4C 0A					asl
   553 4D4D 3E 8B 67				rol TabEnemyLevelTopY_H2,x
   554 4D50 0A					asl
   555 4D51 3E 8B 67				rol TabEnemyLevelTopY_H2,x
   556 4D54 9D 6B 67				sta TabEnemyLevelTopY_H1,x
   557 					
   558 						; TabEnemyLevelLeftX_H2 starts as 0, now multiply by 4 to get the horizontal pixel
   559 4D57 98					tya
   560 4D58 0A					asl
   561 4D59 3E 4B 67				rol TabEnemyLevelLeftX_H2,x
   562 4D5C 0A					asl
   563 4D5D 3E 4B 67				rol TabEnemyLevelLeftX_H2,x
   564 4D60 9D 2B 67				sta TabEnemyLevelLeftX_H1,x
   565
   566 						; init shot creation position (offset x: 3, offset y: 1)
   567 4D63 BD 2B 67				lda TabEnemyLevelLeftX_H1,x
   568 4D66 18					clc
   569 4D67 69 03				adc #3
   570 4D69 9D AB 67				sta TabEnemyShotLevelLeftX_H1,x
   571 4D6C BD 4B 67				lda TabEnemyLevelLeftX_H2,x
   572 4D6F 69 00				adc #0
   573 4D71 9D CB 67				sta TabEnemyShotLevelLeftX_H2,x
   574 					
   575 4D74 BD 6B 67				lda TabEnemyLevelTopY_H1,x
   576 4D77 18					clc
   577 4D78 69 01				adc #1
   578 4D7A 9D EB 67				sta TabEnemyShotLevelTopY_H1,x
   579 						
   580 4D7D BD 8B 67				lda TabEnemyLevelTopY_H2,x
   581 4D80 69 00				adc #0
   582 4D82 9D 0B 68				sta TabEnemyShotLevelTopY_H2,x
   583
   584 						; update number of enemies	
   585 4D85 EE 3B 32				inc m_totalEnemies
   586 4D88 EE 3C 32				inc m_activeEnemies
   587
   588 4D8B AD 3B 32				lda m_totalEnemies
   589 4D8E C9 20				cmp #MAX_ENEMIES_PER_LEVEL
   590 4D90 F0 14				beq IEM_exit
   591 					
   592 4D92 AE 40 32				ldx m_tempByte
   593
   594 				;************************************************
   595 				;
   596 4D95			IEM_no_enemy
   597 						
   598 4D95 C8					iny
   599 4D96 CC 3F 32				cpy m_numberOfValidRows
   600 4D99 F0 03				beq IEM_check_loop_Y
   601 4D9B 4C 16 4D				jmp IEM_loop2
   602
   603 				;************************************************
   604 				;
   605 4D9E			IEM_check_loop_Y
   606
   607 4D9E E8					inx
   608 4D9F E4 D5				cpx m_levelCharSizeY
   609 4DA1 F0 03				beq IEM_exit
   610 4DA3 4C 0A 4D				jmp IEM_loop1
   611
   612 				;************************************************
   613 				;
   614 4DA6			IEM_exit
   615 					
   616 4DA6 60					rts
   617 						
   618 				.endp		
   619
   620 				;
   621 				;**************************************************************************************************
   622 				; UpdateInfoLine
   623 				;**************************************************************************************************
   624 				;
   625 4DA7			.proc UpdateInfoLine
   626 					
   627 4DA7 AD 12 32				lda m_goldCounter						; assuming 99 or less
   628 4DAA A0 04				ldy #4
   629 4DAC 20 DC 4A				jsr DisplayDebugInfoBinary99
   630
   631 4DAF AD 3C 32				lda m_activeEnemies
   632 4DB2 A0 0C				ldy #12
   633 4DB4 20 DC 4A				jsr DisplayDebugInfoBinary99
   634
   635 4DB7 AD 13 32				lda m_healthCounter						; assuming 99 or less
   636 4DBA A0 1F				ldy #31
   637 4DBC 20 DC 4A				jsr DisplayDebugInfoBinary99
   638
   639 4DBF AD 15 32				lda m_disableGameTimer					; update the time here also
   640 4DC2 D0 66				bne UIL_exit
   641 					
   642 4DC4 AD 12 32				lda m_goldCounter
   643 4DC7 D0 0A				bne UIL_update_timer
   644 						
   645 4DC9 AD 3C 32				lda m_activeEnemies
   646 4DCC D0 05				bne UIL_update_timer
   647 					
   648 4DCE A9 01				lda #1
   649 4DD0 8D 15 32				sta m_disableGameTimer					; my record? 1:16.1 (NTSC, lost one life)
   650
   651 				;*****	allow the final update..
   652 				;
   653 4DD3			UIL_update_timer
   654 					
   655 4DD3 EE 19 32				inc m_gameTSFrameCounter
   656 4DD6 AD 19 32				lda m_gameTSFrameCounter
   657 4DD9 C9 06				cmp #TENTH_OF_SECOND_FRAMES
   658 4DDB D0 35				bne UIL_draw_timer
   659 					
   660 4DDD A9 00				lda #0
   661 4DDF 8D 19 32				sta m_gameTSFrameCounter
   662 4DE2 EE 18 32				inc m_gameTimerTSeconds
   663 						
   664 4DE5 AD 18 32				lda m_gameTimerTSeconds
   665 4DE8 C9 0A				cmp #10
   666 4DEA D0 26				bne UIL_draw_timer
   667 					
   668 4DEC A9 00				lda #0
   669 4DEE 8D 18 32				sta m_gameTimerTSeconds
   670 4DF1 EE 16 32				inc m_gameTimerSeconds
   671 					
   672 4DF4 AD 16 32				lda m_gameTimerSeconds
   673 4DF7 C9 3C				cmp #60
   674 4DF9 D0 17				bne UIL_draw_timer
   675 					
   676 4DFB A9 00				lda #0
   677 4DFD 8D 16 32				sta m_gameTimerSeconds
   678 4E00 EE 17 32				inc m_gameTimerMinutes
   679
   680 4E03 AD 17 32				lda m_gameTimerMinutes
   681 4E06 C9 64				cmp #100
   682 4E08 D0 08				bne UIL_draw_timer
   683 					
   684 4E0A A9 01				lda #1
   685 4E0C 8D 15 32				sta m_disableGameTimer
   686 4E0F 4C 2A 4E				jmp UIL_exit							; final timer would be 99:99.9 in this case
   687
   688 				;*****	Draw Timer
   689 				;
   690 4E12			UIL_draw_timer
   691 					
   692 4E12 AD 17 32				lda m_gameTimerMinutes
   693 4E15 A0 14				ldy #20
   694 4E17 20 DC 4A				jsr DisplayDebugInfoBinary99
   695 					
   696 4E1A AD 16 32				lda m_gameTimerSeconds
   697 4E1D A0 17				ldy #23
   698 4E1F 20 DC 4A				jsr DisplayDebugInfoBinary99
   699 					
   700 4E22 AD 18 32				lda m_gameTimerTSeconds
   701 4E25 A0 1A				ldy #26
   702 4E27 20 FD 4A				jsr DisplayDebugInfoBinary9
   703
   704 				;*****	Exit
   705 				;
   706 4E2A			UIL_exit
   707 						
   708 				;		lda m_playerScreenLeftX
   709 				;		ldy #40
   710 				;		jsr DisplayDebugInfoHexFF
   711 				;
   712 				;		lda m_playerScreenTopY
   713 				;		ldy #43
   714 				;		jsr DisplayDebugInfoHexFF
   715 				;
   716 				;		lda m_playerState
   717 				;		ldy #46
   718 				;		jsr DisplayDebugInfoHexFF
   719 				;
   720 				;		lda m_lastPlayerSideDirection
   721 				;		ldy #49
   722 				;		jsr DisplayDebugInfoHexFF
   723 				;
   724 				;		lda m_animFrame
   725 				;		ldy #52
   726 				;		jsr DisplayDebugInfoHexFF
   727 				;
   728 				;		lda m_animIndex
   729 				;		ldy #55
   730 				;		jsr DisplayDebugInfoHexFF
   731 								
   732 4E2A 60					rts
   733 					
   734 				.endp	
   735
   736 				;
   737 				;**************************************************************************************************
   738 				; UpdateTimers
   739 				;**************************************************************************************************
   740 				;
   741 4E2B			.proc UpdateTimers
   742 						
   743 4E2B A5 CB				lda m_playerNoJumpTimer
   744 4E2D F0 02				beq UT_end_no_jump
   745 4E2F C6 CB				dec m_playerNoJumpTimer
   746 					
   747 				;************************************************
   748 				;	
   749 4E31			UT_end_no_jump		
   750 						
   751 4E31 60					rts
   752
   753 				.endp	
   754
   323 4E32					icl "DisplayListInterrupts.asm"
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		DisplayListInterrupts.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	Color			Dec			HEX    	Color			Dec				HEX
    14 				;	-------------------------------		-----------------------------------
    15 				;	Black           00,			$00		Medium blue      08,    		$08
    16 				;	Rust            01,			$01		Dark blue        09,    		$09
    17 				;	Red-orange      02,			$02		Blue-grey      	 10,    		$0A
    18 				;	Dark orange     03,			$03		Olive green    	 11,    		$0B
    19 				;	Red             04,			$04		Medium green   	 12,    		$0C
    20 				;	Dk lavender     05,			$05		Dark green     	 13,    		$0D
    21 				;	Cobalt blue     06,			$06		Orange-green   	 14,    		$0E
    22 				;	Ultramarine     07,			$07		Orange         	 15,    		$0F
    23 				;
    24 				;**************************************************************************************************
    25 				; Display list 1 interruptions code
    26 				;**************************************************************************************************
    27 				;
    28 4E32			GameDli_01
    29 						
    30 4E32 48					pha
    31 4E33 98					tya
    32 4E34 48					pha
    33 						
    34 				.if PAL_VERSION = 0
    35
    36 4E35					SetColor $00, $03, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E35 A9 34					lda #[$03 * 16 + $04]
     9 4E37 8D 16 D0					sta COLPF0+$00
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    37 4E3A					SetColor $01, $00, $0F
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E3A A9 0F					lda #[$00 * 16 + $0F]
     9 4E3C 8D 17 D0					sta COLPF0+$01
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    38 4E3F					SetColor $02, $0D, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E3F A9 D4					lda #[$0D * 16 + $04]
     9 4E41 8D 18 D0					sta COLPF0+$02
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    39 4E44					SetColor $03, $0F, $0C		
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E44 A9 FC					lda #[$0F * 16 + $0C]
     9 4E46 8D 19 D0					sta COLPF0+$03
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    40 						
    41 				.else
    42
    43 						SetColor 1, 15, 14		; yellow (collectables)
    44 						SetColor 2, 7, 2		; blue (water)
    45
    46 				.endif
    47 						
    48 4E49 A5 AD				lda m_playerScreenLeftX
    49 4E4B 8D 00 D0				sta HPOSP0
    50 4E4E 8D 01 D0				sta HPOSP1
    51 4E51 8D 02 D0				sta HPOSP2
    52
    53 4E54					SetFontAddress GameFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4E54 A9 A8				lda #>GAMEFONTADDRESS
     5 4E56 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    54 4E59 8D 0A D4		    	sta WSYNC   			; Wait off-screen
    55
    56 						
    57 4E5C					SetDisplayListInterrupt TextDli 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4E5C A9 6A		      	lda #<TEXTDLI
     5 4E5E 8D FA FF			    sta NMIH_VECTOR
     6 4E61 A9 4E			    lda #>TEXTDLI
     7 4E63 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    58
    59 4E66 68					pla
    60 4E67 A8					tay
    61 4E68 68					pla
    62 						
    63 4E69 40					rti
    64 				;
    65 				;**************************************************************************************************
    66 				; Display list 2 interruptions code
    67 				;**************************************************************************************************
    68 				;
    69 4E6A			TextDli
    70
    71 4E6A 48					pha
    72 4E6B 98					tya
    73 4E6C 48					pha
    74 							
    75 				.if PAL_VERSION = 0
    76
    77 4E6D					SetColor 1, $03, $0A
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E6D A9 3A					lda #[$03 * 16 + $0A]
     9 4E6F 8D 17 D0					sta COLPF0+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    78 4E72					SetColor 2, $04, $01			
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E72 A9 41					lda #[$04 * 16 + $01]
     9 4E74 8D 18 D0					sta COLPF0+2
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    79 				.else
    80
    81 						SetColor 1, 15, 14		; yellow (collectables)
    82 						SetColor 2, 7, 2		; blue (water)
    83
    84 				.endif
    85 						
    86 4E77					SetFontAddress TextFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4E77 A9 AC				lda #>TEXTFONTADDRESS
     5 4E79 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    87 4E7C 8D 0A D4				STA WSYNC 				;Wait off-screen
    88
    89 						
    90 4E7F					SetDisplayListInterrupt GameDli_01 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4E7F A9 32		      	lda #<GAMEDLI_01
     5 4E81 8D FA FF			    sta NMIH_VECTOR
     6 4E84 A9 4E			    lda #>GAMEDLI_01
     7 4E86 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    91
    92 4E89 68					pla
    93 4E8A A8					tay
    94 4E8B 68					pla
    95 						
    96 4E8C 40					rti
   324 4E8D					icl "PlayerStates.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerStates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerStates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 4E8D			TabPlayerMethodColor
    18 				.if PAL_VERSION = 0
    19 4E8D 0A BA 9A 9A 1C 78 + 	.byte 10, 11*16+10, 9*16+10, 9*16+10, 1*16+12, 7*16+8, 4, 2*16+6
    20 				.else
    21 					.byte 10, 10*16+10, 8*16+10, 8*16+10, 15*16+12, 7*16+8, 4, 1*16+6
    22 				.endif
    23
    24 4E95			TabPlayerMethodLSB
    25 4E95 83 81			.byte <PlayerMethodStatic, <PlayerMethodOverPlatform
    26 4E97 BB 31			.byte <PlayerMethodJumping, <PlayerMethodFalling
    27 4E99 AA 66			.byte <PlayerMethodClimbing, <PlayerMethodInWater
    28 4E9B 60 63			.byte <PlayerMethodGravityTest, <PlayerMethodLose
    29
    30 4E9D			TabPlayerMethodMSB
    31 4E9D 4F 50			.byte >PlayerMethodStatic, >PlayerMethodOverPlatform
    32 4E9F 51 52			.byte >PlayerMethodJumping, >PlayerMethodFalling
    33 4EA1 52 53			.byte >PlayerMethodClimbing, >PlayerMethodInWater
    34 4EA3 54 54			.byte >PlayerMethodGravityTest, >PlayerMethodLose
    35
    36 4EA5			TabPlayerMethodInitLSB
    37 4EA5 DA DB			.byte <PlayerMethodInitStatic, <PlayerMethodInitOverPlatform
    38 4EA7 FA 1F			.byte <PlayerMethodInitJumping, <PlayerMethodInitFalling
    39 4EA9 38 43			.byte <PlayerMethodInitClimbing, <PlayerMethodInitInWater
    40 4EAB 72 73			.byte <PlayerMethodInitGravityTest, <PlayerMethodInitLose
    41
    42 4EAD			TabPlayerMethodInitMSB
    43 4EAD 4E 4E			.byte >PlayerMethodInitStatic, >PlayerMethodInitOverPlatform
    44 4EAF 4E 4F			.byte >PlayerMethodInitJumping, >PlayerMethodInitFalling
    45 4EB1 4F 4F			.byte >PlayerMethodInitClimbing, >PlayerMethodInitInWater
    46 4EB3 4F 4F			.byte >PlayerMethodInitGravityTest, >PlayerMethodInitLose
    47 				;
    48 				;**************************************************************************************************
    49 				; SetPlayerMethod
    50 				;**************************************************************************************************
    51 				;
    52 4EB5			SetPlayerMethod
    53 4EB5 86 D2			stx m_playerState
    54 					
    55 4EB7 BD 95 4E			lda TabPlayerMethodLSB,x
    56 4EBA 85 ED			sta m_playerMethodPointer
    57 					
    58 4EBC BD 9D 4E			lda TabPlayerMethodMSB,x
    59 4EBF 85 EE			sta m_playerMethodPointer+1
    60
    61 4EC1 A9 8A			lda #$8A
    62 4EC3 85 9E			sta m_playerBaseColor00	
    63 					
    64 4EC5 A9 3A			lda #$3A
    65 4EC7 85 9F			sta m_playerBaseColor1A
    66 						
    67 4EC9 A9 0F			lda #$0F
    68 4ECB 85 A0			sta m_playerBaseColor1B
    69 						
    70 4ECD BD A5 4E			lda TabPlayerMethodInitLSB,x
    71 4ED0 85 EB			sta m_pageZeroTempPointer
    72 					
    73 4ED2 BD AD 4E			lda TabPlayerMethodInitMSB,x
    74 4ED5 85 EC			sta m_pageZeroTempPointer+1
    75 					
    76 4ED7 6C EB 00			jmp (m_pageZeroTempPointer)
    77 				;
    78 				;**************************************************************************************************
    79 				; PlayerMethodInitStatic
    80 				;**************************************************************************************************
    81 				;
    82 4EDA			PlayerMethodInitStatic
    83 4EDA 60				rts
    84 				;
    85 				;**************************************************************************************************
    86 				; PlayerMethodInitOverPlatform
    87 				;**************************************************************************************************
    88 				;
    89 4EDB			PlayerMethodInitOverPlatform
    90 4EDB A9 00			lda #0										; clear player speed in Y
    91 4EDD 85 BD			sta m_playerSpeedY_H1
    92 4EDF 85 BE			sta m_playerSpeedY_L1
    93 					
    94 4EE1 A9 01			lda #SIDE_SPEED_LAND_H1						; init max side speed
    95 4EE3 85 B7			sta m_playerMaxSideSpeed_H1
    96 4EE5 A9 01			lda #SIDE_SPEED_LAND_L1
    97 4EE7 85 B8			sta m_playerMaxSideSpeed_L1
    98 					
    99 4EE9 A9 00			lda #SIDE_ACCEL_LAND_H1						; init side accelerations
   100 4EEB 85 B9			sta m_playerSideAccel_H1
   101 4EED A9 20			lda #SIDE_ACCEL_LAND_L1
   102 4EEF 85 BA			sta m_playerSideAccel_L1
   103
   104 4EF1 A9 00			lda #SIDE_DEACCEL_LAND_H1
   105 4EF3 85 BB			sta m_playerSideDeaccel_H1
   106 4EF5 A9 80			lda #SIDE_DEACCEL_LAND_L1
   107 4EF7 85 BC			sta m_playerSideDeaccel_L1
   108 4EF9 60				rts
   109 				;
   110 				;**************************************************************************************************
   111 				; PlayerMethodInitJumping
   112 				;**************************************************************************************************
   113 				;
   114 4EFA			PlayerMethodInitJumping
   115
   116 4EFA A9 08			lda #JUMP_HOLD_FRAMES						; hold jump for this number of frames, if the button is still pressed
   117 4EFC 85 CC			sta m_playerHoldJumpCounter
   118
   119 4EFE A5 BF			lda m_playerJumpSpeed_H1
   120 4F00 85 BD			sta m_playerSpeedY_H1
   121 4F02 A5 C0			lda m_playerJumpSpeed_L1
   122 4F04 85 BE			sta m_playerSpeedY_L1
   123
   124 4F06 A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   125 4F08 85 B7			sta m_playerMaxSideSpeed_H1
   126 4F0A A9 20			lda #SIDE_SPEED_AIR_L1
   127 4F0C 85 B8			sta m_playerMaxSideSpeed_L1
   128
   129 4F0E A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   130 4F10 85 B9			sta m_playerSideAccel_H1
   131 4F12 A9 10			lda #SIDE_ACCEL_AIR_L1
   132 4F14 85 BA			sta m_playerSideAccel_L1
   133
   134 4F16 A9 00			lda #SIDE_DEACCEL_AIR_H1
   135 4F18 85 BB			sta m_playerSideDeaccel_H1
   136 4F1A A9 10			lda #SIDE_DEACCEL_AIR_L1
   137 4F1C 85 BC			sta m_playerSideDeaccel_L1
   138 4F1E 60				rts
   139 				;
   140 				;**************************************************************************************************
   141 				; PlayerMethodInitFalling
   142 				;**************************************************************************************************
   143 				;
   144 4F1F			PlayerMethodInitFalling
   145
   146 4F1F A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   147 4F21 85 B7			sta m_playerMaxSideSpeed_H1
   148 4F23 A9 20			lda #SIDE_SPEED_AIR_L1
   149 4F25 85 B8			sta m_playerMaxSideSpeed_L1
   150
   151 4F27 A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   152 4F29 85 B9			sta m_playerSideAccel_H1
   153 4F2B A9 10			lda #SIDE_ACCEL_AIR_L1
   154 4F2D 85 BA			sta m_playerSideAccel_L1
   155
   156 4F2F A9 00			lda #SIDE_DEACCEL_AIR_H1
   157 4F31 85 BB			sta m_playerSideDeaccel_H1
   158 4F33 A9 10			lda #SIDE_DEACCEL_AIR_L1
   159 4F35 85 BC			sta m_playerSideDeaccel_L1
   160
   161 4F37 60				rts
   162 				;
   163 				;**************************************************************************************************
   164 				; PlayerMethodInitClimbing
   165 				;**************************************************************************************************
   166 				;
   167 4F38			PlayerMethodInitClimbing
   168
   169 4F38 A9 00			lda #0										; clear player speed in X and Y
   170 4F3A 85 B5			sta m_playerSideSpeed_H1
   171 4F3C 85 B6			sta m_playerSideSpeed_L1
   172 4F3E 85 BD			sta m_playerSpeedY_H1
   173 4F40 85 BE			sta m_playerSpeedY_L1
   174
   175 4F42 60				rts
   176 				;
   177 				;**************************************************************************************************
   178 				; PlayerMethodInitInWater
   179 				;**************************************************************************************************
   180 				;
   181 4F43			PlayerMethodInitInWater
   182
   183 4F43 A9 01			lda #1										; set starting direction going down (0 = going up, 1 = going down)
   184 4F45 8D 6F 32			sta m_waterPlayerDirectionFlag
   185
   186 4F48 A9 00			lda #0
   187 4F4A 8D 70 32			sta m_playerOnWaterSurfaceFlag
   188
   189 4F4D 46 BD			lsr m_playerSpeedY_H1						; reduce in half current falling speed
   190 4F4F 66 BE			ror m_playerSpeedY_L1
   191
   192 4F51 46 B5			lsr m_playerSideSpeed_H1					; reduce in half current side speed
   193 4F53 66 B6			ror m_playerSideSpeed_L1
   194
   195 4F55 A9 00			lda #SIDE_SPEED_WATER_H1					; init max side speed
   196 4F57 85 B7			sta m_playerMaxSideSpeed_H1
   197 4F59 A9 80			lda #SIDE_SPEED_WATER_L1
   198 4F5B 85 B8			sta m_playerMaxSideSpeed_L1
   199
   200 4F5D A9 00			lda #SIDE_ACCEL_WATER_H1					; init side accelerations
   201 4F5F 85 B9			sta m_playerSideAccel_H1
   202 4F61 A9 04			lda #SIDE_ACCEL_WATER_L1
   203 4F63 85 BA			sta m_playerSideAccel_L1
   204
   205 4F65 A9 00			lda #SIDE_DEACCEL_WATER_H1
   206 4F67 85 BB			sta m_playerSideDeaccel_H1
   207 4F69 A9 04			lda #SIDE_DEACCEL_WATER_L1
   208 4F6B 85 BC			sta m_playerSideDeaccel_L1
   209
   210 4F6D A9 1E			lda #WATER_NO_JUMP_FRAMES					; disable jump for some frames
   211 4F6F 85 CB			sta m_playerNoJumpTimer
   212 					
   213 4F71 60				rts
   214 				;
   215 				;**************************************************************************************************
   216 				; PlayerMethodInitGravityTest
   217 				;**************************************************************************************************
   218 				;
   219 4F72			PlayerMethodInitGravityTest
   220 4F72 60				rts
   221 				;
   222 				;**************************************************************************************************
   223 				; PlayerMethodInitLose
   224 				;**************************************************************************************************
   225 				;
   226 4F73			PlayerMethodInitLose
   227 4F73 A5 AE			lda m_playerScreenTopY
   228 4F75 8D 71 32			sta m_playerExplosionScreenTopY_H1
   229 4F78 A9 00			lda #0
   230 4F7A 8D 72 32			sta m_playerExplosionScreenTopY_L1
   231
   232 4F7D A9 01			lda #1
   233 4F7F 8D 6D 32			sta m_playerExplosionStep
   234
   235 4F82 60				rts
   236 				;
   237 				;**************************************************************************************************
   238 				; PlayerMethodInitLose
   239 				;**************************************************************************************************
   240 				;
   241 4F83			PlayerMethodStatic
   242 4F83 4C 8E 49			jmp PlayerMethodReturn
   243
   244 				;
   245 				;**************************************************************************************************
   246 				;
   247 				; 	CheckCollectable
   248 				;
   249 				;**************************************************************************************************
   250 				;
   251 4F86			.proc CheckCollectable
   252
   253 4F86 A9 04			lda #[PLR_WIDTH / 2]						; check middle left center pixel, to see if there is a collectable
   254 4F88 8D 6B 32			sta m_bottomPosOffsetX
   255 					
   256 4F8B A9 0A			lda #[PLR_HEIGHT / 2]
   257 4F8D 8D 6C 32			sta m_bottomPosOffsetY
   258 					
   259 4F90 20 EA 5B			jsr CheckPlayerBottomUpPos
   260
   261 4F93 29 0F			and #15
   262 4F95 C9 02			cmp #CT_COLLECTABLE
   263 4F97 F0 07			beq DecrementCoins
   264 					
   265 4F99 C9 06			cmp	#CT_HEALTH
   266 4F9B F0 0D			beq DecrementHealth
   267 					
   268 				;	lda m_playerLevelLeftX_H1					; check if right side pixel is in other char
   269 				;	and #%11									; "m_playerSizeXMinusOne"
   270 				;	beq CC_exit
   271 				;
   272 				;	iny											; check the right side char then
   273 				;	lda (m_ptrLevelLine),y
   274 				;	tax
   275 				;	lda TabCharDefinition,x
   276 				;	
   277 				;	and #15	
   278 				;	cmp #CT_COLLECTABLE
   279 				;	beq DecrementCoins
   280 				;	
   281 				;	cmp	#CT_HEALTH
   282 				;	beq DecrementHealth
   283 					
   284 				;	inc m_middleBottomCharPosX
   285
   286 4F9D 4C C2 4F			jmp CC_exit
   287 					
   288 				;***** Decrement Coins
   289 				;	
   290 4FA0			DecrementCoins
   291 					
   292 4FA0 CE 12 32			dec m_goldCounter
   293 4FA3 A9 01			lda #SFX_DIAMOND
   294 4FA5 85 99			sta m_sfxEffect
   295 4FA7 4C B1 4F			jmp CC_start_animation
   296 					
   297 				;***** Decrement Health
   298 				;	
   299 4FAA			DecrementHealth	
   300 					
   301 4FAA CE 13 32			dec m_healthCounter
   302 4FAD A9 01			lda #SFX_DIAMOND
   303 4FAF 85 99			sta m_sfxEffect
   304 						
   305 				;*****	Start Animation
   306 				;
   307 4FB1			CC_start_animation								; erase the collectable with the correct animation
   308 4FB1 A5 E9			lda m_ptrLevelLine
   309 4FB3 18				clc
   310 4FB4 6D 6E 32			adc m_middleBottomCharPosX
   311 4FB7 85 EB			sta m_pageZeroTempPointer
   312 4FB9 A5 EA			lda m_ptrLevelLine+1
   313 4FBB 69 00			adc #0
   314 4FBD 85 EC			sta m_pageZeroTempPointer+1
   315
   316 4FBF 20 7B 62			jsr AddCoinAnimation
   317 					
   318 				;*****	Exit Proc
   319 				;
   320 4FC2			CC_exit
   321 						
   322 4FC2 60					rts
   323 						
   324 				.endp
   325 						
   326 				;
   327 				;**************************************************************************************************
   328 				; DoSideMovement
   329 				;**************************************************************************************************
   330 				;
   331 4FC3			DoSideMovement
   332
   333 4FC3 A5 DE			lda m_stick0
   334 4FC5 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   335 4FC7 C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   336 4FC9 D0 1F			bne DSM_check_right							; if one or both are pressed, just continue
   337
   338 				;**************************************************
   339 				;
   340 4FCB			DSM_check_deaccel_right
   341 4FCB A5 CD			lda m_lastPlayerSideDirection
   342 4FCD C9 01			cmp #PSD_RIGHT
   343 4FCF D0 09			bne DSM_check_deaccel_left
   344
   345 4FD1 20 0A 5A			jsr SubstractSideDeaccelToSpeed
   346 4FD4 20 1E 5A			jsr AddSideSpeedToPosition
   347 4FD7 4C 23 50			jmp DSM_exit
   348
   349 				;**************************************************
   350 				;
   351 4FDA			DSM_check_deaccel_left
   352 4FDA C9 02			cmp #PSD_LEFT
   353 4FDC F0 03			beq DSM_cdl1
   354 4FDE 4C 23 50			jmp DSM_exit
   355
   356 				;**************************************************
   357 				;
   358 4FE1			DSM_cdl1
   359 4FE1 20 0A 5A			jsr SubstractSideDeaccelToSpeed
   360 4FE4 20 4A 5A			jsr SubstractSideSpeedToPosition
   361 4FE7 4C 23 50			jmp DSM_exit
   362
   363 				;**************************************************
   364 				;
   365 4FEA			DSM_check_right
   366 4FEA 29 08			and #STICK_RIGHT	; check right
   367 4FEC D0 19			bne DSM_check_left
   368
   369 4FEE A5 CD			lda m_lastPlayerSideDirection
   370 4FF0 C9 02			cmp #PSD_LEFT
   371 4FF2 D0 06			bne DSM_move_to_right
   372
   373 4FF4 A9 00			lda #0
   374 4FF6 85 B5			sta m_playerSideSpeed_H1
   375 4FF8 85 B6			sta m_playerSideSpeed_L1
   376
   377 				;**************************************************
   378 				;
   379 4FFA			DSM_move_to_right
   380 4FFA A9 01			lda #PSD_RIGHT
   381 4FFC 85 CD			sta m_lastPlayerSideDirection
   382 4FFE 20 E8 59			jsr AddSideAccelToSpeed
   383 5001 20 1E 5A			jsr AddSideSpeedToPosition
   384 5004 4C 23 50			jmp DSM_exit
   385
   386 				;**************************************************
   387 				;
   388 5007			DSM_check_left
   389 5007 A5 DE			lda m_stick0
   390 5009 29 04			and #STICK_LEFT						; check left
   391 500B D0 16			bne DSM_exit
   392
   393 500D A5 CD			lda m_lastPlayerSideDirection
   394 500F C9 01			cmp #PSD_RIGHT
   395 5011 D0 06			bne DSM_move_to_left
   396
   397 5013 A9 00			lda #0
   398 5015 85 B5			sta m_playerSideSpeed_H1
   399 5017 85 B6			sta m_playerSideSpeed_L1
   400
   401 				;**************************************************
   402 				;
   403 5019			DSM_move_to_left
   404 5019 A9 02			lda #PSD_LEFT
   405 501B 85 CD			sta m_lastPlayerSideDirection
   406 501D 20 E8 59			jsr AddSideAccelToSpeed
   407 5020 20 4A 5A			jsr SubstractSideSpeedToPosition
   408
   409 				;**************************************************
   410 				;
   411 5023			DSM_exit
   412 5023 60				rts
   413 				;
   414 				;**************************************************************************************************
   415 				; DoSideControl
   416 				;**************************************************************************************************
   417 				;
   418 5024			DoSideControl
   419
   420 5024 A5 DE			lda m_stick0
   421 5026 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   422 5028 C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   423 502A F0 41			beq DSC_check_right							; if neither is pressed, just continue
   424
   425 				;**************************************************
   426 				;
   427 502C			DSC_side_control_right
   428 502C 29 08			and #STICK_RIGHT
   429 502E D0 20			bne DSC_side_control_left
   430 5030 A5 CD			lda m_lastPlayerSideDirection
   431 5032 C9 01			cmp #PSD_RIGHT
   432 5034 D0 06			bne DSC_scr1
   433 5036 20 E8 59			jsr AddSideAccelToSpeed
   434 5039 4C 6D 50			jmp DSC_check_right
   435
   436 				;**************************************************
   437 				;
   438 503C			DSC_scr1
   439 503C C9 02			cmp #PSD_LEFT
   440 503E D0 06			bne DSC_scr2
   441 5040 20 0A 5A			jsr SubstractSideDeaccelToSpeed
   442 5043 4C 6D 50			jmp DSC_check_right
   443
   444 				;**************************************************
   445 				;
   446 5046			DSC_scr2
   447 5046 A9 01			lda #PSD_RIGHT
   448 5048 85 CD			sta m_lastPlayerSideDirection
   449 504A 20 E8 59			jsr AddSideAccelToSpeed
   450 504D 4C 6D 50			jmp DSC_check_right
   451
   452 				;**************************************************
   453 				;
   454 5050			DSC_side_control_left
   455 5050 A5 CD			lda m_lastPlayerSideDirection
   456 5052 C9 02			cmp #PSD_LEFT
   457 5054 D0 06			bne DSC_scl1
   458 5056 20 E8 59			jsr AddSideAccelToSpeed
   459 5059 4C 6D 50			jmp DSC_check_right
   460
   461 				;**************************************************
   462 				;
   463 505C			DSC_scl1
   464 505C C9 01			cmp #PSD_RIGHT
   465 505E D0 06			bne DSC_scl2
   466 5060 20 0A 5A			jsr SubstractSideDeaccelToSpeed
   467 5063 4C 6D 50			jmp DSC_check_right
   468
   469 				;**************************************************
   470 				;
   471 5066			DSC_scl2
   472 5066 A9 02			lda #PSD_LEFT
   473 5068 85 CD			sta m_lastPlayerSideDirection
   474 506A 20 E8 59			jsr AddSideAccelToSpeed
   475
   476 				;**************************************************
   477 				;
   478 506D			DSC_check_right
   479 506D A5 CD			lda m_lastPlayerSideDirection
   480 506F C9 01			cmp #PSD_RIGHT
   481 5071 D0 06			bne DSC_check_left
   482 5073 20 1E 5A			jsr AddSideSpeedToPosition
   483 5076 4C 80 50			jmp DSC_exit
   484
   485 				;**************************************************
   486 				;
   487 5079			DSC_check_left
   488 5079 C9 02			cmp #PSD_LEFT
   489 507B D0 03			bne DSC_exit
   490 507D 20 4A 5A			jsr SubstractSideSpeedToPosition
   491
   492 				;**************************************************
   493 				;
   494 5080			DSC_exit
   495 5080 60				rts
   496 				;
   497 				;**************************************************************************************************
   498 				; Include Files
   499 				;**************************************************************************************************
   500 				;
   501 5081				icl "StateInPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5081			PlayerMethodOverPlatform
    14
    15 5081 20 86 4F				jsr CheckCollectable
    16 5084 20 9C 5C				jsr CheckCreatePlayerMissile
    17 5087 20 C3 4F				jsr DoSideMovement	
    18
    19 				;************************************************
    20 				;
    21 508A			PMGT_check_up
    22 						
    23 508A A5 DE				lda m_stick0
    24 508C 29 01				and #STICK_UP						; check up
    25 508E D0 66				bne PMGT_check_fall
    26
    27 5090 A5 DF				lda m_oldStick0
    28 5092 29 01				and #STICK_UP						; check old up (looking for "just pressed")
    29 5094 F0 60				beq PMGT_check_fall
    30
    31
    32 5096 A9 00				lda #0									; check bottom of a stair (left pixel)
    33 5098 8D 6B 32				sta m_bottomPosOffsetX
    34 					
    35 509B A9 00				lda #0
    36 509D 8D 6C 32				sta m_bottomPosOffsetY
    37 						
    38 50A0 20 9D 5B				jsr CheckPlayerBottomDownPos
    39
    40 50A3 AD 6A 32				lda m_middleBottomChar
    41 50A6 29 0F				and #15
    42 50A8 C9 04				cmp #CT_LADDER
    43 50AA F0 16				beq PMGT_snap_ladder_up
    44
    45 50AC A9 03				lda #3									; check bottom of a stair (right pixel)
    46 50AE 8D 6B 32				sta m_bottomPosOffsetX
    47 						
    48 50B1 A9 00				lda #0
    49 50B3 8D 6C 32				sta m_bottomPosOffsetY
    50 						
    51 50B6 20 9D 5B				jsr CheckPlayerBottomDownPos
    52
    53 50B9 AD 6A 32				lda m_middleBottomChar
    54 50BC 29 0F				and #15
    55 50BE C9 04				cmp #CT_LADDER
    56 50C0 D0 19				bne PMGT_check_jump
    57
    58 				;************************************************
    59 				; snap player to center of the ladder
    60 				;
    61 50C2			PMGT_snap_ladder_up
    62
    63 50C2 A9 00				lda #0
    64 50C4 85 A3				sta m_playerLevelLeftX_L1
    65 50C6 85 A1				sta m_playerLevelLeftX_H2
    66
    67 50C8 AD 6E 32				lda m_middleBottomCharPosX
    68 50CB 0A					asl
    69 50CC 26 A1				rol m_playerLevelLeftX_H2				; x2
    70 50CE 0A					asl
    71 50CF 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
    72 50D1 85 A2				sta m_playerLevelLeftX_H1
    73
    74 50D3 A2 04				ldx #PS_CLIMBING						; start climbing state
    75 50D5 20 B5 4E				jsr SetPlayerMethod
    76
    77 50D8 4C B5 51				jmp PMGT_end
    78
    79 				;************************************************
    80 				; start jumping state
    81 				;
    82 50DB			PMGT_check_jump
    83
    84 50DB A2 02				ldx #PS_JUMPING
    85 50DD 20 B5 4E				jsr SetPlayerMethod
    86
    87 50E0 A5 B6				lda m_playerSideSpeed_L1				; reduce side speed a little
    88 50E2 38					sec
    89 50E3 E9 40				sbc #JUMP_HSPEED_SLOWDOWN
    90 50E5 85 B6				sta m_playerSideSpeed_L1
    91 						
    92 50E7 A5 B5				lda m_playerSideSpeed_H1
    93 50E9 E9 00				sbc #0
    94 50EB B0 04				bcs PMGT_jump_side_speed
    95 						
    96 50ED A9 00				lda #0
    97 50EF 85 B6				sta m_playerSideSpeed_L1
    98
    99 				;************************************************
   100 				;
   101 50F1			PMGT_jump_side_speed
   102 						
   103 50F1 85 B5				sta m_playerSideSpeed_H1
   104 50F3 4C B5 51				jmp PMGT_end
   105
   106 				;************************************************
   107 				;
   108 50F6			PMGT_check_fall
   109
   110 50F6 20 BE 56				jsr CheckHoleBelowPlayer
   111
   112 50F9 A5 CF				lda m_playerOverPlatformFlag
   113 50FB D0 0C				bne CheckPlatformLeft
   114 					
   115 50FD A2 03				ldx #PS_FALLING							; start falling state
   116 50FF 20 B5 4E				jsr SetPlayerMethod
   117
   118 5102 46 B5				lsr m_playerSideSpeed_H1				; divide by 2 the side speed, if there was any movement previous to falling
   119 5104 66 B6				ror m_playerSideSpeed_L1
   120
   121 5106 4C B5 51				jmp PMGT_end
   122
   123 				;*****	Check Platform Left
   124 				;
   125 5109			CheckPlatformLeft
   126 						
   127 5109 AD 68 32				lda m_leftBottomChar					; float Platform check
   128 510C 29 07				and #%00000111
   129 510E C9 07				cmp #CT_FLOATPLATFORMH
   130 5110 D0 03				bne CheckPlatformRight
   131 						
   132 5112 4C 80 51				jmp ClampPlayer
   133
   134 				;*****	Check Platform Right		
   135 5115			CheckPlatformRight		
   136 						
   137 5115 AD 69 32				lda m_rightBottomChar
   138 5118 29 07				and #%00000111
   139 511A C9 07				cmp #CT_FLOATPLATFORMH
   140 511C D0 03				bne PMGT_check_down	
   141
   142 511E 4C 80 51				jmp ClampPlayer
   143 						
   144 				;*****	Check down
   145 				;						
   146 5121			PMGT_check_down		
   147 5121 A5 DE				lda m_stick0
   148 5123 29 02				and #STICK_DOWN	
   149 5125 F0 03				beq SearchLadder
   150 						
   151 5127 4C B5 51				jmp PMGT_end
   152
   153 512A			SearchLadder
   154 512A A9 00				lda #0									; search for a ladder one char below (left pixel)
   155 512C 8D 6B 32				sta m_bottomPosOffsetX
   156 512F A9 09				lda #[CHAR_PIX.else_Y+1]
   157 5131 8D 6C 32				sta m_bottomPosOffsetY
   158 5134 20 9D 5B				jsr CheckPlayerBottomDownPos
   159
   160 5137 AD 6A 32				lda m_middleBottomChar
   161 513A 29 0F				and #15
   162 513C C9 04				cmp #CT_LADDER
   163 513E F0 16				beq PMGT_snap_ladder_down
   164
   165 5140 A9 03				lda #3									; search for a ladder one char below (right pixel)
   166 5142 8D 6B 32				sta m_bottomPosOffsetX
   167 5145 A9 09				lda #[CHAR_PIX.else_Y+1]
   168 5147 8D 6C 32				sta m_bottomPosOffsetY
   169 514A 20 9D 5B				jsr CheckPlayerBottomDownPos
   170
   171 514D AD 6A 32				lda m_middleBottomChar
   172 5150 29 0F				and #15
   173 5152 C9 04				cmp #CT_LADDER
   174 5154 D0 5F				bne PMGT_end
   175
   176 				;************************************************
   177 				; snap player to center of the ladder
   178 				;
   179 5156			PMGT_snap_ladder_down
   180 					
   181 5156 A9 00				lda #0
   182 5158 85 A3				sta m_playerLevelLeftX_L1
   183 515A 85 A1				sta m_playerLevelLeftX_H2
   184
   185 515C AD 6E 32				lda m_middleBottomCharPosX
   186 515F 0A					asl
   187 5160 26 A1				rol m_playerLevelLeftX_H2				; x2
   188 5162 0A					asl
   189 5163 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
   190 5165 85 A2				sta m_playerLevelLeftX_H1
   191
   192 5167 A9 00				lda #0									; put player one line below
   193 5169 85 AC				sta m_playerLevelBottomY_L1
   194 						
   195 516B A5 AB				lda m_playerLevelBottomY_H1
   196 516D 18					clc
   197 516E 69 01				adc #1
   198 5170 85 AB				sta m_playerLevelBottomY_H1
   199 					
   200 5172 A5 AA				lda m_playerLevelBottomY_H2
   201 5174 69 00				adc #0
   202 5176 85 AA				sta m_playerLevelBottomY_H2
   203
   204 5178 A2 04				ldx #PS_CLIMBING						; start climbing state
   205 517A 20 B5 4E				jsr SetPlayerMethod
   206 						
   207 517D 4C B5 51				jmp PMGT_end
   208 						
   209 				;***** Clamp Player to platform
   210 5180			ClampPlayer
   211
   212 5180 A5 DE				lda m_stick0
   213 5182 C9 0F				cmp #$0F
   214 5184 D0 2F				bne PMGT_end
   215 						 
   216 5186 AE 0D 32				ldx m_floatPlatformIdx
   217 5189 CA					dex
   218 						
   219 518A BD FF 69				lda PlatformTime,x
   220 518D C9 06				cmp #FLOAT_PLATFORM_TIMER
   221 518F D0 24				bne PMGT_end
   222 						
   223 5191 BD 0F 6A				lda PlatformDirX,x
   224 5194 C9 00				cmp #00
   225 5196 D0 10				bne ClampLeft
   226 						
   227 5198 18					clc		
   228 						
   229 5199 A5 A2				lda m_playerLevelLeftX_H1	
   230 519B 69 04				adc #$04
   231 519D 85 A2				sta m_playerLevelLeftX_H1
   232 519F A5 A1				lda m_playerLevelLeftX_H2
   233 51A1 69 00				adc #00
   234 51A3 85 A1				sta m_playerLevelLeftX_H2		
   235
   236 51A5 4C B5 51				jmp PMGT_end 
   237 						
   238 51A8			ClampLeft		
   239 51A8 38					sec
   240 51A9 A5 A2				lda m_playerLevelLeftX_H1
   241 51AB E9 04				sbc #$04
   242 51AD 85 A2				sta m_playerLevelLeftX_H1
   243 51AF A5 A1				lda m_playerLevelLeftX_H2
   244 51B1 E9 00				sbc #00
   245 51B3 85 A1				sta m_playerLevelLeftX_H2		
   246 						
   247 				;************************************************
   248 				;
   249 51B5			PMGT_end
   250 						
   251 51B5 20 65 55				jsr SetPlayerInfo
   252 51B8 4C 8E 49				jmp PlayerMethodReturn
   502 51BB				icl "StateJumping.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateJumping.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateJumping.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 51BB			PlayerMethodJumping
    14
    15 51BB 20 86 4F			jsr CheckCollectable
    16
    17 51BE 20 9C 5C			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while jumping
    21 51C1 A5 DE			lda m_stick0
    22 51C3 29 01			and #STICK_UP		; check if up is still pressed
    23 51C5 D0 3B			bne PMJ_air_control
    24
    25 51C7 A5 DE			lda m_stick0
    26 51C9 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 51CB C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 51CD D0 33			bne PMJ_air_control
    29
    30
    31 				;----------------------------------------
    32 51CF			PMJ_check_ladder
    33 				; search for a ladder (middle pixel)
    34 51CF A9 02			lda #2
    35 51D1 8D 6B 32			sta m_bottomPosOffsetX
    36 51D4 A9 00			lda #0
    37 51D6 8D 6C 32			sta m_bottomPosOffsetY
    38 51D9 20 9D 5B			jsr CheckPlayerBottomDownPos
    39
    40 51DC AD 6A 32			lda m_middleBottomChar
    41 51DF 29 0F			and #15
    42 51E1 C9 04			cmp #CT_LADDER
    43 51E3 D0 1D			bne PMJ_air_control
    44
    45 				; snap player to center of the ladder
    46 51E5			PMJ_snap_ladder
    47 51E5 A9 00			lda #0
    48 51E7 85 A3			sta m_playerLevelLeftX_L1
    49 51E9 85 A1			sta m_playerLevelLeftX_H2
    50
    51 51EB AD 6E 32			lda m_middleBottomCharPosX
    52 51EE 0A				asl
    53 51EF 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 51F1 0A				asl
    55 51F2 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 51F4 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; abort jumping state
    59 51F6 A9 00			lda #0
    60 51F8 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    61
    62 				; start climbing state
    63 51FA A2 04			ldx #PS_CLIMBING
    64 51FC 20 B5 4E			jsr SetPlayerMethod
    65
    66 51FF 4C 2E 52			jmp PMJ_exit
    67
    68
    69 				;----------------------------------------
    70 5202			PMJ_air_control
    71 5202 20 24 50			jsr DoSideControl
    72
    73
    74 				;----------------------------------------
    75 5205			PMJ_update_jumping
    76 5205 A5 CC			lda m_playerHoldJumpCounter
    77 5207 F0 0F			beq PMJ_decay_jump_speed
    78
    79 5209 A5 DE			lda m_stick0
    80 520B 29 01			and #STICK_UP		; check if up is still pressed
    81 520D D0 05			bne PMJ_stick_not_up
    82
    83 520F C6 CC			dec m_playerHoldJumpCounter	; update hold jump counter
    84 5211 4C 1B 52			jmp PMJ_hold_jump_speed
    85
    86 5214			PMJ_stick_not_up
    87 5214 A9 00			lda #0
    88 5216 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    89
    90 5218			PMJ_decay_jump_speed
    91 5218 20 9E 5A			jsr SubstractGravityAccelToSpeed
    92
    93 521B			PMJ_hold_jump_speed
    94 521B 20 D4 5A			jsr SubstractSpeedYToPosition
    95
    96 521E 20 65 55			jsr SetPlayerInfo
    97
    98 				; check if the speed in Y is already 0
    99 5221 A5 BD			lda m_playerSpeedY_H1
   100 5223 D0 09			bne PMJ_exit
   101 5225 A5 BE			lda m_playerSpeedY_L1
   102 5227 D0 05			bne PMJ_exit
   103
   104 				; change to the falling state
   105 5229 A2 03			ldx #PS_FALLING
   106 522B 20 B5 4E			jsr SetPlayerMethod
   107
   108 522E			PMJ_exit
   109 522E 4C 8E 49			jmp PlayerMethodReturn
   503 5231				icl "StateFalling.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateFalling.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateFalling.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5231			PlayerMethodFalling
    14
    15 5231 20 86 4F			jsr CheckCollectable
    16
    17 5234 20 9C 5C			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while falling
    21 5237 A5 DE			lda m_stick0
    22 5239 29 01			and #STICK_UP		; check if up is still pressed
    23 523B D0 37			bne PMF_check_restart_jump
    24
    25 523D A5 DE			lda m_stick0
    26 523F 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 5241 C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 5243 D0 2F			bne PMF_check_restart_jump
    29
    30
    31 				;----------------------------------------
    32 5245			PMF_check_ladder
    33 				; search for a ladder (bottom middle pixel)
    34 5245 A9 02			lda #2
    35 5247 8D 6B 32			sta m_bottomPosOffsetX
    36 524A A9 00			lda #0
    37 524C 8D 6C 32			sta m_bottomPosOffsetY
    38 524F 20 9D 5B			jsr CheckPlayerBottomDownPos
    39
    40 5252 AD 6A 32			lda m_middleBottomChar
    41 5255 29 0F			and #15
    42 5257 C9 04			cmp #CT_LADDER
    43 5259 D0 19			bne PMF_check_restart_jump
    44
    45 				; snap player to center of the ladder
    46 525B			PMF_snap_ladder
    47 525B A9 00			lda #0
    48 525D 85 A3			sta m_playerLevelLeftX_L1
    49 525F 85 A1			sta m_playerLevelLeftX_H2
    50
    51 5261 AD 6E 32			lda m_middleBottomCharPosX
    52 5264 0A				asl
    53 5265 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 5267 0A				asl
    55 5268 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 526A 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; start climbing state
    59 526C A2 04			ldx #PS_CLIMBING
    60 526E 20 B5 4E			jsr SetPlayerMethod
    61
    62 5271 4C A7 52			jmp PMF_exit
    63
    64
    65 				;----------------------------------------
    66 5274			PMF_check_restart_jump
    67 				;
    68 				;	; uncomment this to allow infinite jumping
    69 				; 	lda m_stick0
    70 				; 	and #STICK_UP	; check up
    71 				; 	bne PMF_check_in_water
    72 				; 
    73 				; 	lda m_oldStick0
    74 				; 	and #STICK_UP	; check old up (looking for "just pressed")
    75 				; 	beq PMF_check_in_water
    76 				; 
    77 				;	; start jumping state
    78 				; 	ldx #PS_JUMPING
    79 				; 	jsr SetPlayerMethod
    80 				; 
    81 				; 	jmp PMF_exit
    82
    83
    84 				;----------------------------------------
    85 5274			PMF_check_in_water
    86 				; search for water (center pixel)
    87 5274 A9 02			lda #2
    88 5276 8D 6B 32			sta m_bottomPosOffsetX
    89 5279 A9 02			lda #2
    90 527B 8D 6C 32			sta m_bottomPosOffsetY
    91 527E 20 EA 5B			jsr CheckPlayerBottomUpPos
    92
    93 5281 AD 6A 32			lda m_middleBottomChar
    94 5284 29 0F			and #15
    95 5286 C9 05			cmp #CT_WATER
    96 5288 D0 08			bne PMF_air_control
    97
    98 				; start in water state
    99 528A A2 05			ldx #PS_IN_WATER
   100 528C 20 B5 4E			jsr SetPlayerMethod
   101
   102 528F 4C A7 52			jmp PMF_exit
   103
   104
   105 				;----------------------------------------
   106 5292			PMF_air_control
   107 5292 20 24 50			jsr DoSideControl
   108
   109
   110 				;----------------------------------------
   111 5295			PMF_update_falling
   112 5295 20 7C 5A			jsr AddGravityAccelToSpeed
   113
   114 5298 20 B2 5A			jsr AddSpeedYToPosition
   115
   116 529B 20 65 55			jsr SetPlayerInfo
   117
   118 529E A5 CF			lda m_playerOverPlatformFlag
   119 52A0 F0 05			beq PMF_exit
   120
   121
   122 				; change to the over platform state
   123 52A2 A2 01			ldx #PS_OVER_PLATFORM
   124 52A4 20 B5 4E			jsr SetPlayerMethod
   125
   126
   127 52A7			PMF_exit
   128 52A7 4C 8E 49			jmp PlayerMethodReturn
   504 52AA				icl "StateClimbing.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateClimbing.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateClimbing.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; PlayerMethodClimbing
    15 				;**************************************************************************************************
    16 				;
    17 52AA			PlayerMethodClimbing
    18
    19 52AA 20 9C 5C				jsr CheckCreatePlayerMissile
    20
    21 				;************************************************
    22 				;
    23 52AD			PMC_check_up
    24 						
    25 52AD A5 DE				lda m_stick0
    26 52AF 29 01				and #STICK_UP						; check up
    27 52B1 D0 41				bne PMC_check_down
    28
    29 52B3 A9 E0				lda #CLIMB_UP_SPEED_Y_L1
    30 52B5 85 BE				sta m_playerSpeedY_L1
    31 52B7 A9 00				lda #CLIMB_UP_SPEED_Y_H1
    32 52B9 85 BD				sta m_playerSpeedY_H1
    33
    34 						; update player position in Y
    35 52BB A5 AC				lda m_playerLevelBottomY_L1
    36 52BD 38					sec
    37 52BE E5 BE				sbc m_playerSpeedY_L1
    38 52C0 85 AC				sta m_playerLevelBottomY_L1
    39 52C2 A5 AB				lda m_playerLevelBottomY_H1
    40 52C4 E5 BD				sbc m_playerSpeedY_H1
    41 52C6 85 AB				sta m_playerLevelBottomY_H1
    42 52C8 A5 AA				lda m_playerLevelBottomY_H2
    43 52CA E9 00				sbc #0
    44 52CC 85 AA				sta m_playerLevelBottomY_H2
    45
    46 						; search for an empty space at the middle bottom point of the player
    47 52CE A9 06				lda #[PLR_WIDTH/2 + 2]
    48 52D0 8D 6B 32				sta m_bottomPosOffsetX
    49 52D3 A9 00				lda #0
    50 52D5 8D 6C 32				sta m_bottomPosOffsetY
    51 52D8 20 9D 5B				jsr CheckPlayerBottomDownPos
    52
    53 52DB AD 6A 32				lda m_middleBottomChar
    54 52DE 29 0F				and #15
    55 52E0 D0 0F				bne PMC_end_move_up
    56
    57 						; snap to the bottom and go to the platform state
    58 52E2 A5 AB				lda m_playerLevelBottomY_H1
    59 52E4 09 07				ora #[CHAR_PIX.else_Y-1]
    60 52E6 85 AB				sta m_playerLevelBottomY_H1
    61
    62 52E8 A9 00				lda #0
    63 52EA 85 AC				sta m_playerLevelBottomY_L1
    64
    65 52EC A2 01				ldx #PS_OVER_PLATFORM
    66 52EE 20 B5 4E				jsr SetPlayerMethod
    67
    68 				;************************************************
    69 				;
    70 52F1			PMC_end_move_up
    71 52F1 4C 60 53				jmp PMC_exit
    72
    73
    74 				;************************************************
    75 				;
    76 52F4			PMC_check_down
    77
    78 52F4 A5 DE				lda m_stick0
    79 52F6 29 02				and #STICK_DOWN					; check down
    80 52F8 D0 66				bne PMC_exit
    81
    82 52FA A9 80				lda #CLIMB_DOWN_SPEED_Y_L1
    83 52FC 85 BE				sta m_playerSpeedY_L1
    84 52FE A9 01				lda #CLIMB_DOWN_SPEED_Y_H1
    85 5300 85 BD				sta m_playerSpeedY_H1
    86
    87 						; update player position in Y
    88 5302 A5 AC				lda m_playerLevelBottomY_L1
    89 5304 18					clc
    90 5305 65 BE				adc m_playerSpeedY_L1
    91 5307 85 AC				sta m_playerLevelBottomY_L1
    92 5309 A5 AB				lda m_playerLevelBottomY_H1
    93 530B 65 BD				adc m_playerSpeedY_H1
    94 530D 85 AB				sta m_playerLevelBottomY_H1
    95 530F A5 AA				lda m_playerLevelBottomY_H2
    96 5311 69 00				adc #0
    97 5313 85 AA				sta m_playerLevelBottomY_H2
    98
    99 						; special check for the top char of a ladder (that is a platform)
   100 5315 A9 06				lda #[PLR_WIDTH/2 + 2]
   101 5317 8D 6B 32				sta m_bottomPosOffsetX
   102 531A A9 08				lda #CHAR_PIX.else_Y
   103 531C 8D 6C 32				sta m_bottomPosOffsetY
   104 531F 20 9D 5B				jsr CheckPlayerBottomDownPos
   105
   106 5322 AD 6A 32				lda m_middleBottomChar
   107 5325 29 0F				and #15
   108 5327 C9 04				cmp #CT_LADDER
   109 5329 F0 35				beq PMC_exit
   110
   111 						; search for a platform at the middle bottom point of the player
   112 532B A9 06				lda #[PLR_WIDTH/2 + 2]
   113 532D 8D 6B 32				sta m_bottomPosOffsetX
   114 5330 A9 00				lda #0
   115 5332 8D 6C 32				sta m_bottomPosOffsetY
   116 5335 20 9D 5B				jsr CheckPlayerBottomDownPos
   117
   118 5338 AD 6A 32				lda m_middleBottomChar
   119 533B 29 01				and #01
   120 533D C9 01				cmp #CT_BLOCK
   121 533F D0 1F				bne PMC_exit
   122
   123 5341 AD 6A 32				lda m_middleBottomChar
   124 5344 29 10				and #%00010000
   125 5346 F0 18				beq PMC_exit
   126
   127 						; snap to the bottom and go to the platform state
   128 5348 A5 AB				lda m_playerLevelBottomY_H1
   129 534A 29 F8				and #%11111000
   130 534C 38					sec
   131 534D E9 01				sbc #1
   132 534F 85 AB				sta m_playerLevelBottomY_H1
   133 5351 A5 AA				lda m_playerLevelBottomY_H2
   134 5353 E9 00				sbc #0
   135 5355 85 AA				sta m_playerLevelBottomY_H2
   136
   137 5357 A9 00				lda #0
   138 5359 85 AC				sta m_playerLevelBottomY_L1
   139 					
   140 535B A2 01				ldx #PS_OVER_PLATFORM
   141 535D 20 B5 4E				jsr SetPlayerMethod
   142
   143 				;************************************************
   144 				;
   145 5360			PMC_exit
   146
   147 5360 20 65 55				jsr SetPlayerInfo
   148 5363 4C 8E 49				jmp PlayerMethodReturn
   505 5366				icl "StateInWater.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInWater.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInWater.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5366			PlayerMethodInWater
    14
    15 5366 20 86 4F			jsr CheckCollectable		; add collectables in water for this
    16 					
    17 5369 20 9C 5C			jsr CheckCreatePlayerMissile
    18
    19
    20 				;----------------------------------------
    21 				; search for water (top center pixel)
    22 536C A9 02			lda #2
    23 536E 8D 6B 32			sta m_bottomPosOffsetX
    24 5371 A9 07			lda #7
    25 5373 8D 6C 32			sta m_bottomPosOffsetY
    26 5376 20 EA 5B			jsr CheckPlayerBottomUpPos
    27
    28 5379 AD 6A 32			lda m_middleBottomChar
    29 537C 29 0F			and #15
    30 537E C9 05			cmp #CT_WATER
    31 5380 F0 12			beq PMIW_check_water_moves
    32
    33 				; check jump input to go out of the water
    34 5382 A5 DE			lda m_stick0
    35 5384 29 01			and #STICK_UP	; check up
    36 5386 D0 0C			bne PMIW_check_water_moves
    37
    38 					; this doesn't work well..
    39 				 	;lda m_oldStick0
    40 				 	;and #STICK_UP	; check old up
    41 				 	;beq PMIW_check_water_moves
    42
    43 5388 A5 CB			lda m_playerNoJumpTimer
    44 538A D0 08			bne PMIW_check_water_moves
    45 					
    46 				; start jumping state
    47 538C A2 02			ldx #PS_JUMPING
    48 538E 20 B5 4E			jsr SetPlayerMethod
    49
    50 5391 4C 5D 54			jmp PMIW_exit
    51
    52
    53 				;----------------------------------------
    54 5394			PMIW_check_water_moves
    55 5394 AD 70 32			lda m_playerOnWaterSurfaceFlag
    56 5397 F0 03			beq PMIW_check_move_up
    57 5399 4C 1D 54			jmp PMIW_on_surface
    58
    59
    60 				;----------------------------------------
    61 				; check vertical movement
    62
    63 539C			PMIW_check_move_up
    64 539C A5 DE			lda m_stick0
    65 539E 29 01			and #STICK_UP		; check up
    66 53A0 D0 0E			bne PMIW_check_move_down
    67
    68 					;jmp PMIW_under_surface
    69
    70 53A2 AD 6F 32			lda m_waterPlayerDirectionFlag
    71 53A5 D0 06			bne PMIW_move_up_down
    72
    73 53A7			PMIW_move_up_up
    74 53A7 20 4B 5B			jsr AddWaterMoveUpAccelToSpeed
    75 53AA 4C EA 53			jmp PMIW_going_up_speed
    76
    77 53AD			PMIW_move_up_down
    78 53AD 4C 09 54			jmp PMIW_going_down
    79
    80
    81 53B0			PMIW_check_move_down
    82 53B0 A5 DE			lda m_stick0
    83 53B2 29 02			and #STICK_DOWN	; check down
    84 53B4 D0 2C			bne PMIW_under_surface
    85
    86 53B6 AD 6F 32			lda m_waterPlayerDirectionFlag
    87 53B9 D0 14			bne PMIW_move_down_down
    88
    89 53BB			PMIW_move_down_up
    90 53BB 20 37 5B			jsr SubstractWaterAccelToSpeed
    91
    92 53BE 20 D4 5A			jsr SubstractSpeedYToPosition
    93
    94 53C1 A5 BD			lda m_playerSpeedY_H1
    95 53C3 05 BE			ora m_playerSpeedY_L1
    96 53C5 D0 18			bne PMIW_check_move_exit
    97
    98 53C7 A9 01			lda #1
    99 53C9 8D 6F 32			sta m_waterPlayerDirectionFlag
   100
   101 53CC 4C 57 54			jmp PMIW_check_side_moves
   102
   103 53CF			PMIW_move_down_down
   104 53CF 20 6D 5B			jsr AddWaterMoveDownAccelToSpeed
   105
   106 53D2 20 B2 5A			jsr AddSpeedYToPosition
   107
   108 53D5 A5 CF			lda m_playerOverPlatformFlag
   109 53D7 F0 06			beq PMIW_check_move_exit
   110
   111 				; reset speed in Y after a bottom collision
   112 53D9 A9 00			lda #0
   113 53DB 85 BD			sta m_playerSpeedY_H1
   114 53DD 85 BE			sta m_playerSpeedY_L1
   115
   116 53DF			PMIW_check_move_exit
   117 53DF 4C 57 54			jmp PMIW_check_side_moves
   118
   119
   120 				;----------------------------------------
   121 53E2			PMIW_under_surface
   122 53E2 AD 6F 32			lda m_waterPlayerDirectionFlag
   123 53E5 D0 22			bne PMIW_going_down
   124
   125 53E7			PMIW_going_up
   126 53E7 20 15 5B			jsr AddWaterAccelToSpeed
   127
   128 53EA			PMIW_going_up_speed
   129 53EA 20 D4 5A			jsr SubstractSpeedYToPosition
   130
   131 				; check if we are emerging from water (middle height, center pixel)
   132 53ED			PMIW_emerging
   133 53ED A9 02			lda #2
   134 53EF 8D 6B 32			sta m_bottomPosOffsetX
   135 53F2 A9 03			lda #3
   136 53F4 8D 6C 32			sta m_bottomPosOffsetY
   137 53F7 20 EA 5B			jsr CheckPlayerBottomUpPos
   138
   139 53FA AD 6A 32			lda m_middleBottomChar
   140 53FD 29 0F			and #15
   141 53FF D0 56			bne PMIW_check_side_moves
   142
   143 5401 A9 01			lda #1
   144 5403 8D 70 32			sta m_playerOnWaterSurfaceFlag
   145
   146 5406 4C 57 54			jmp PMIW_check_side_moves
   147
   148
   149 5409			PMIW_going_down
   150 5409 20 37 5B			jsr SubstractWaterAccelToSpeed
   151
   152 540C			PMIW_going_down_speed
   153 540C 20 B2 5A			jsr AddSpeedYToPosition
   154
   155 				; 	lda m_playerOverPlatformFlag
   156 				; 	beq PMIW_check_down_speed
   157 				;
   158 				; ; reset speed in Y after a bottom collision
   159 				; 	lda #0
   160 				; 	sta m_playerSpeedY_H1
   161 				; 	sta m_playerSpeedY_L1
   162 				; 	jmp PMIW_change_dir_to_up
   163
   164 540F			PMIW_check_down_speed
   165 540F A5 BD			lda m_playerSpeedY_H1
   166 5411 05 BE			ora m_playerSpeedY_L1
   167 5413 D0 42			bne PMIW_check_side_moves
   168
   169 5415			PMIW_change_dir_to_up
   170 5415 A9 00			lda #0
   171 5417 8D 6F 32			sta m_waterPlayerDirectionFlag
   172
   173 541A 4C 57 54			jmp PMIW_check_side_moves
   174
   175
   176 				;----------------------------------------
   177 541D			PMIW_on_surface
   178
   179 				; check water "buoyancy"
   180 541D AD 6F 32			lda m_waterPlayerDirectionFlag
   181 5420 D0 14			bne PMIW_going_down_surface
   182
   183 5422			PMIW_going_up_surface
   184 5422 20 37 5B			jsr SubstractWaterAccelToSpeed
   185
   186 5425 20 D4 5A			jsr SubstractSpeedYToPosition
   187
   188 5428 A5 BD			lda m_playerSpeedY_H1
   189 542A 05 BE			ora m_playerSpeedY_L1
   190 542C D0 29			bne PMIW_check_side_moves
   191
   192 542E A9 01			lda #1
   193 5430 8D 6F 32			sta m_waterPlayerDirectionFlag
   194
   195 5433 4C 57 54			jmp PMIW_check_side_moves
   196
   197
   198 5436			PMIW_going_down_surface
   199 5436 20 15 5B			jsr AddWaterAccelToSpeed
   200
   201 5439 20 B2 5A			jsr AddSpeedYToPosition
   202
   203 				; search for water (top center pixel)
   204 543C A9 02			lda #2
   205 543E 8D 6B 32			sta m_bottomPosOffsetX
   206 5441 A9 07			lda #7
   207 5443 8D 6C 32			sta m_bottomPosOffsetY
   208 5446 20 EA 5B			jsr CheckPlayerBottomUpPos
   209
   210 5449 AD 6A 32			lda m_middleBottomChar
   211 544C 29 0F			and #15
   212 544E C9 05			cmp #CT_WATER
   213 5450 D0 05			bne PMIW_check_side_moves
   214
   215 5452 A9 00			lda #0
   216 5454 8D 70 32			sta m_playerOnWaterSurfaceFlag
   217
   218
   219 				;----------------------------------------
   220 5457			PMIW_check_side_moves
   221 5457 20 C3 4F			jsr DoSideMovement
   222
   223
   224 				;----------------------------------------
   225 545A			PMIW_update_pos
   226 545A 20 65 55			jsr SetPlayerInfo
   227
   228
   229 545D			PMIW_exit
   230 545D 4C 8E 49			jmp PlayerMethodReturn
   506 				;	
   507 				;**************************************************************************************************
   508 				;
   509 				;**************************************************************************************************
   510 				; PlayerMethodGravityTest
   511 				;**************************************************************************************************
   512 				;
   513 5460			PlayerMethodGravityTest
   514 5460 4C 8E 49			jmp PlayerMethodReturn
   515 				;
   516 				;**************************************************************************************************
   517 				; PlayerMethodLose
   518 				;**************************************************************************************************
   519 				;
   520 5463			PlayerMethodLose
   521 5463 4C 8E 49			jmp PlayerMethodReturn
   325 5466					icl "PlayerMovement.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerMovement.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerMoveent.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				;
    15 				;	SetSpawnPos
    16 				;
    17 				;		Set the initial position of the player.
    18 				;		Uses PARAM00 as the level number.		
    19 				;
    20 				;**************************************************************************************************
    21 				;
    22 5466			.proc SetSpawnPos
    23
    24 						; set spawn position
    25 5466 A6 92				ldx m_param00
    26 						
    27 5468 A9 00				lda #0
    28 546A 85 A1				sta m_playerLevelLeftX_H2
    29 546C BD 00 30				lda LevelsPlayer_X,x
    30 546F 85 A2				sta m_playerLevelLeftX_H1
    31 						
    32 5471 A9 00				lda #0
    33 5473 85 A3				sta m_playerLevelLeftX_L1				; fractional part
    34 5475 85 AA				sta m_playerLevelBottomY_H2
    35 						
    36 5477 A6 F2				ldx m_currLevelNum
    37 5479 BD 01 30				lda LevelsPlayer_Y,x
    38 547C A2 08				ldx #8 
    39 547E 20 6A 4A				jsr MultiplyAX
    40 5481 AD E6 49				lda _productLo
    41 5484 69 07				adc #7		
    42 5486 85 AB				sta m_playerLevelBottomY_H1
    43 						
    44 5488 A9 00				lda #0
    45 548A 85 AC				sta m_playerLevelBottomY_L1				; fractional part
    46
    47 548C 20 65 55				jsr SetPlayerInfo						; Set the players info	
    48 					
    49 548F 60					rts
    50
    51 				.endp	
    52
    53 				;
    54 				;**************************************************************************************************
    55 				; SetAnimationIndex
    56 				;**************************************************************************************************
    57 				;
    58 5490			.proc SetAnimationIndex
    59
    60 5490			CheckState
    61 5490 A5 D2				lda m_playerState
    62 5492 C9 01				cmp #PS_OVER_PLATFORM
    63 5494 F0 19				beq CheckWalking	
    64 5496 C9 00				cmp #PS_STATIC
    65 5498 F0 5B				beq StandingIndex
    66 549A C9 02				cmp #PS_JUMPING
    67 549C F0 52				beq JumpFallIndex
    68 549E C9 03				cmp #PS_FALLING
    69 54A0 F0 4E				beq JumpFallIndex		
    70 54A2 C9 04				cmp #PS_CLIMBING
    71 54A4 F0 4F				beq StandingIndex		
    72 54A6 C9 05				cmp #PS_IN_WATER
    73 54A8 F0 4B				beq StandingIndex		
    74 54AA C9 07				cmp #PS_LOSE
    75 54AC 4C F5 54				jmp StandingIndex		
    76 						 
    77 54AF			CheckWalking
    78 54AF A5 DE				lda m_stick0
    79 54B1 29 0C				and #[STICK_RIGHT | STICK_LEFT]
    80 54B3 C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
    81 54B5 D0 03				bne ProcessFrame
    82 54B7 4C F5 54				jmp StandingIndex
    83 							
    84 54BA			ProcessFrame		
    85 						; Process frame 
    86 54BA AD 61 32				lda m_animFrame
    87 54BD 69 01				adc #$01
    88 54BF 8D 61 32				sta m_animFrame
    89 						
    90 54C2			IsWalking
    91 54C2 29 0C				and #12
    92 54C4 C9 0C				cmp #12
    93 54C6 D0 03				bne check_one
    94 54C8 4C EB 54				jmp WalkingIndex1
    95 						
    96 54CB			check_one
    97 54CB AD 61 32				lda m_animFrame
    98 54CE 29 08				and #8		
    99 54D0 C9 08				cmp #8
   100 54D2 D0 03				bne check_two
   101 54D4 4C F5 54				jmp StandingIndex
   102 						
   103 54D7			check_two
   104 54D7 AD 61 32				lda m_animFrame
   105 54DA 29 04				and #4
   106 54DC C9 04				cmp #4
   107 54DE D0 03				bne check_three		
   108 54E0 4C E6 54				jmp WalkingIndex
   109
   110 54E3			check_three
   111 54E3 4C F5 54				jmp StandingIndex		
   112
   113 54E6			WalkingIndex
   114 54E6 A9 03				lda #$03
   115 54E8 4C F7 54				jmp Return_Exit		
   116
   117 54EB			WalkingIndex1
   118 54EB A9 06				lda #$06
   119 54ED 4C F7 54				jmp Return_Exit		
   120
   121 54F0			JumpFallIndex
   122 54F0 A9 09				lda #$09
   123 54F2 4C F7 54				jmp Return_Exit
   124 						
   125 54F5			StandingIndex
   126 54F5 A9 00				lda #0	
   127 								
   128 54F7			Return_Exit
   129 54F7 8D 62 32				sta m_animIndex
   130 54FA AA					tax	
   131 54FB BD CE 35				lda TabAnimationMap,x
   132 54FE 8D 64 32				sta m_animOffset
   133 5501 BD CF 35				lda TabAnimationMap+1,x
   134 5504 8D 63 32				sta m_animHeight
   135 								
   136 5507 60					rts		
   137 				.endp
   138 				;
   139 				;**************************************************************************************************
   140 				; FlipPlayer
   141 				;**************************************************************************************************
   142 				;
   143 5508			.proc FlipPlayer
   144 					
   145 5508 48					pha
   146 5509 8A					txa
   147 550A 48					pha
   148 550B 98					tya
   149 550C 48					pha	
   150 							
   151 550D BD D0 35				lda TabAnimationMap[0]+2,x	
   152 5510 C5 CD				cmp m_lastplayerSideDirection
   153 5512 F0 38				beq FlipExit
   154
   155 5514 BD CE 35				lda TabAnimationMap[0],x
   156 5517 8D 5F 32				sta m_revOffset
   157 								
   158 551A BD CF 35				lda TabAnimationMap[0]+1,x
   159 551D 8D 5E 32				sta m_revHeight
   160 						
   161 5520 A5 CD				lda m_lastPlayerSideDirection
   162 5522 9D D0 35				sta TabAnimationMap[0]+2,x		
   163 						
   164 5525 A0 00				ldy #0
   165 5527 AE 5F 32				ldx m_revOffset				
   166 552A BD E4 35		Flip	lda TabPlayerShape_01,x
   167 552D 20 52 55				jsr ReverseSprite 
   168 5530 9D E4 35				sta TabPlayerShape_01,x
   169 						
   170 5533 BD 38 36				lda TabPlayerShape_01A,x
   171 5536 20 52 55				jsr ReverseSprite 
   172 5539 9D 38 36				sta TabPlayerShape_01A,x
   173 						
   174 553C BD 8C 36				lda TabPlayerShape_01B,x
   175 553F 20 52 55				jsr ReverseSprite 
   176 5542 9D 8C 36				sta TabPlayerShape_01B,x
   177 5545 E8					inx
   178 5546 C8					iny
   179 5547 CC 5E 32				cpy m_revHeight
   180 554A D0 DE				bne Flip
   181 						
   182 554C			FlipExit
   183 554C 68					pla
   184 554D A8					tay
   185 554E 68					pla
   186 554F AA					tax
   187 5550 68					pla
   188 5551 60					rts
   189 				.endp
   190 				;
   191 				;**************************************************************************************************
   192 				; ReverseSprite
   193 				;**************************************************************************************************
   194 				;
   195 5552			.proc ReverseSprite
   196 5552 8D 59 32				sta m_hldA
   197 5555 8C 5A 32				sty m_hldY
   198 5558 A0 07			 	ldy #$07 
   199 555A 0E 59 32		loop1   asl m_hldA
   200 555D 6A			        ror 
   201 555E 88			        dey 
   202 555F 10 F9		        bpl loop1        
   203 5561 AC 5A 32		        ldy m_hldY
   204 5564 60			        rts
   205 				.endp         	
   206 				;
   207 				;**************************************************************************************************
   208 				; SetPlayerInfo
   209 				;**************************************************************************************************
   210 				;
   211 5565			.proc SetPlayerInfo
   212
   213 5565 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   214 5567 18					clc
   215 5568 65 B3				adc m_playerSizeXMinusOne
   216 556A 85 A5				sta m_playerLevelRightX_H1
   217 556C A5 A1				lda m_playerLevelLeftX_H2
   218 556E 69 00				adc #0
   219 5570 85 A4				sta m_playerLevelRightX_H2
   220
   221 5572 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   222 5574 38					sec
   223 5575 E5 B4				sbc m_playerSizeYMinusOne
   224 5577 85 A8				sta m_playerLevelTopY_H1
   225 5579 A5 AA				lda m_playerLevelBottomY_H2
   226 557B E9 00				sbc #0
   227 557D 85 A7				sta m_playerLevelTopY_H2
   228
   229 557F 60					rts
   230 						
   231 				.endp		
   232 				;
   233 				;**************************************************************************************************
   234 				; SetPlayerScreenPos
   235 				;**************************************************************************************************
   236 				;
   237 5580			.proc SetPlayerScreenPos
   238
   239 5580 A5 AD				lda m_playerScreenLeftX					; save old screen pos
   240 5582 85 AF				sta m_oldPlayerScreenLeftX
   241
   242 5584 A5 AE				lda m_playerScreenTopY
   243 5586 85 B0				sta m_oldPlayerScreenTopY
   244 						;
   245 						; get new screen pos
   246 						;
   247 						; 	(this should use the "_H2" positions if the delta between the player
   248 						; 	and the camera is too big, 64 chars in X, or 32 chars in Y)
   249 						;
   250 5588 A5 A2				lda m_playerLevelLeftX_H1
   251 558A 38					sec
   252 558B E5 DB				sbc m_levelWindowX_H1
   253 558D 18					clc
   254 558E 69 30				adc #PM_BASE_SCREEN_X
   255 5590 85 AD				sta m_playerScreenLeftX
   256
   257 5592 A5 A8				lda m_playerLevelTopY_H1
   258 5594 38					sec
   259 5595 E5 DD				sbc m_levelWindowY_H1
   260 5597 18					clc
   261 5598 69 20				adc #PM_BASE_SCREEN_Y
   262 559A 85 AE				sta m_playerScreenTopY
   263
   264 559C E6 9C				inc m_redrawPlayerCounter				; signal for the DLI to redraw the player
   265
   266 559E 60					rts
   267
   268 				.endp		
   269 				;
   270 				;**************************************************************************************************
   271 				; DrawPlayer
   272 				;**************************************************************************************************
   273 				;
   274 559F			.proc DrawPlayer
   275
   276 559F A5 9E				lda m_playerBaseColor00
   277 55A1 8D 12 D0				sta COLPM0
   278 55A4 A5 9F				lda m_playerBaseColor1A
   279 55A6 8D 13 D0				sta COLPM1
   280 55A9 A5 A0				lda m_playerBaseColor1B
   281 55AB 8D 14 D0				sta COLPM2
   282
   283 55AE A5 9C				lda m_redrawPlayerCounter
   284 55B0 D0 03				bne zdraw		
   285 55B2 4C 01 56				jmp DP_exit				
   286
   287 55B5			zdraw
   288 55B5 A9 00				lda #0
   289 55B7 85 9C				sta m_redrawPlayerCounter
   290 						
   291 55B9 20 90 54				jsr SetAnimationIndex
   292
   293 55BC A9 00				lda #0
   294 55BE A2 00				ldx #0
   295 55C0 A4 B0				ldy m_oldPlayerScreenTopY	
   296 55C2			zfill	
   297 55C2 99 00 A4				sta p0_area_1,y
   298 55C5 99 00 A5				sta p1_area_1,y
   299 55C8 99 00 A6				sta p2_area_1,y
   300 55CB C8					iny
   301 55CC E8					inx
   302 55CD EC 5E 32				cpx m_revHeight
   303 55D0 D0 F0				bne zfill
   304
   305 55D2 AE 62 32				ldx m_animIndex
   306 55D5 20 08 55				jsr FlipPlayer		
   307
   308 55D8 A9 00				lda #$00
   309 55DA 8D 60 32				sta m_animCount
   310 55DD AE 64 32				ldx m_animOffset
   311 55E0 A4 AE				ldy m_playerScreenTopY	
   312 55E2			fill01
   313 55E2 BD E4 35				lda TabPlayerShape_01,x
   314 55E5 99 00 A4				sta p0_area_1,y		
   315 55E8 BD 38 36				lda TabPlayerShape_01A,x
   316 55EB 99 00 A5				sta p1_area_1,y
   317 55EE BD 8C 36				lda TabPlayerShape_01B,x
   318 55F1 99 00 A6				sta p2_area_1,y
   319 55F4 C8					iny
   320 55F5 E8					inx
   321 55F6 EE 60 32				inc m_animCount
   322 55F9 AD 60 32				lda m_animCount
   323 55FC CD 63 32				cmp m_animHeight
   324 55FF 90 E1				bcc fill01
   325
   326 5601			DP_exit
   327 5601 60					rts
   328 				.endp		
   329 				;
   330 				;**************************************************************************************************
   331 				; DrawPlayerExplosion
   332 				;**************************************************************************************************
   333 				;
   334 5602			.proc DrawPlayerExplosion
   335 5602 A5 9D				lda m_missleBaseColor0
   336 5604 8D 15 D0				sta COLPM3
   337
   338 				;************************************************
   339 				;
   340 5607			DPE_erase										; erase previous player explosion frame
   341 5607 A2 00				ldx #0
   342 5609 AC 71 32				ldy m_playerExplosionScreenTopY_H1
   343
   344 				;************************************************
   345 				;
   346 560C			DPE_erase_loop
   347 560C A9 00				lda #0
   348 560E 99 00 A4				sta p0_area_1,y
   349 5611 99 00 A5				sta p1_area_1,y
   350 5614 99 00 A6				sta p2_area_1,y
   351 						
   352 5617 98					tya
   353 5618 18					clc
   354 5619 6D 6D 32				adc m_playerExplosionStep
   355 561C B0 06				bcs DPE_update_frame
   356 561E A8					tay
   357
   358 561F E8					inx
   359 5620 E4 B2				cpx m_playerSizeY
   360 5622 D0 E8				bne DPE_erase_loop
   361
   362 				;************************************************
   363 				; 	update step and explosion starting line
   364 				; 	if step +1 --> line - 3.5
   365 				; 	if step +2 --> line - 7.0
   366 				;
   367 5624			DPE_update_frame
   368 5624 AD 72 32				lda m_playerExplosionScreenTopY_L1
   369 5627 38					sec
   370 5628 E9 80				sbc #$80
   371 562A 8D 72 32				sta m_playerExplosionScreenTopY_L1
   372
   373 562D AD 71 32				lda m_playerExplosionScreenTopY_H1
   374 5630 E9 03				sbc #$03
   375 5632 B0 06				bcs DPE_do_update
   376
   377 5634 20 9D 4B				jsr InitPlayerInfo						; reached top of the screen, end explosion, respawn player
   378 5637 4C 6A 56				jmp DPE_exit
   379 					
   380 				;************************************************
   381 				;
   382 563A			DPE_do_update
   383 563A 8D 71 32				sta m_playerExplosionScreenTopY_H1
   384 563D EE 6D 32				inc m_playerExplosionStep				; step +1
   385
   386 				;************************************************
   387 				; draw new player explosion frame
   388 5640			DPE_draw										
   389 5640 A2 00				ldx #0
   390 5642 AC 71 32				ldy m_playerExplosionScreenTopY_H1
   391
   392 				;************************************************
   393 				;
   394 5645			DPE_draw_loop
   395 5645 BD E4 35				lda TabPlayerShape_01,x
   396 5648 F0 03				beq DPE_draw_p1
   397 564A 99 00 A4				sta p0_area_1,y
   398
   399 				;************************************************
   400 				;
   401 564D			DPE_draw_p1
   402 564D BD 38 36				lda TabPlayerShape_01A,x
   403 5650 F0 03				beq DPE_draw_p2	
   404 5652 99 00 A5				sta p1_area_1,y
   405
   406 				;************************************************
   407 				;
   408 5655			DPE_draw_p2	
   409 5655 BD 8C 36				lda TabPlayerShape_01B,x
   410 5658 F0 03				beq DPE_draw_end
   411 565A 99 00 A6				sta p2_area_1,y
   412
   413 				;************************************************
   414 				;
   415 565D			DPE_draw_end
   416 565D 98					tya
   417 565E 18					clc
   418 565F 6D 6D 32				adc m_playerExplosionStep
   419 5662 B0 06				bcs DPE_exit
   420 5664 A8					tay
   421 5665 E8					inx
   422 5666 E4 B2				cpx m_playerSizeY
   423 5668 D0 DB				bne DPE_draw_loop
   424
   425 				;************************************************
   426 				;
   427 566A			DPE_exit
   428 						
   429 566A 60					rts
   430
   431 				.endp		
   432 				;
   433 				;**************************************************************************************************
   434 				; CheckPlayerInLevelRightLimit
   435 				;**************************************************************************************************
   436 				;
   437 566B			.proc CheckPlayerInLevelRightLimit
   438
   439 566B A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   440 566D 18					clc
   441 566E 65 B3				adc m_playerSizeXMinusOne
   442 5670 85 A5				sta m_playerLevelRightX_H1
   443 5672 A5 A1				lda m_playerLevelLeftX_H2
   444 5674 69 00				adc #0
   445 5676 85 A4				sta m_playerLevelRightX_H2
   446
   447 5678 C5 D6				cmp m_levelSizeX_H2
   448 567A 90 1D				bcc CPILRL_exit
   449 567C D0 06				bne CPILRL_reset_pos
   450
   451 567E A5 A5				lda m_playerLevelRightX_H1
   452 5680 C5 D7				cmp m_levelSizeX_H1
   453 5682 90 15				bcc CPILRL_exit
   454
   455 				;************************************************
   456 				;
   457 5684			CPILRL_reset_pos
   458 5684 A9 00				lda #0
   459 5686 85 A3				sta m_playerLevelLeftX_L1
   460
   461 5688 A5 D7				lda m_levelSizeX_H1
   462 568A 38					sec
   463 568B E5 B1				sbc m_playerSizeX
   464 568D 85 A2				sta m_playerLevelLeftX_H1
   465 568F A5 D6				lda m_levelSizeX_H2
   466 5691 E9 00				sbc #0
   467 5693 85 A1				sta m_playerLevelLeftX_H2
   468
   469 5695 A9 01				lda #1
   470 5697 85 D1				sta m_playerSideCollisionFlag
   471
   472 				;************************************************
   473 				;
   474 5699			CPILRL_exit
   475 					
   476 5699 60				rts
   477 					
   478 				.endp	
   479 				;
   480 				;**************************************************************************************************
   481 				; CheckPlayerInLevelBottomLimit
   482 				;**************************************************************************************************
   483 				;
   484 569A			.proc CheckPlayerInLevelBottomLimit
   485
   486 569A A5 AA				lda m_playerLevelBottomY_H2
   487 569C C5 D8				cmp m_levelSizeY_H2
   488 569E 90 1D				bcc Exit
   489 56A0 D0 06				bne Reset_Pos
   490
   491 56A2 A5 AB				lda m_playerLevelBottomY_H1
   492 56A4 C5 D9				cmp m_levelSizeY_H1
   493 56A6 90 15				bcc Exit
   494
   495 				;************************************************
   496 				;
   497 56A8			Reset_Pos
   498 56A8 A9 00				lda #0
   499 56AA 85 AC				sta m_playerLevelBottomY_L1
   500
   501 56AC A5 D9				lda m_levelSizeY_H1
   502 56AE 38					sec
   503 56AF E9 01				sbc #1
   504 56B1 85 AB				sta m_playerLevelBottomY_H1
   505 56B3 A5 D8				lda m_levelSizeY_H2
   506 56B5 E9 00				sbc #0
   507 56B7 85 AA				sta m_playerLevelBottomY_H2
   508
   509 56B9 A9 01				lda #1
   510 56BB 85 CF				sta m_playerOverPlatformFlag
   511
   512 				;************************************************
   513 				;
   514 56BD			Exit
   515 56BD 60					rts
   516
   517 				.endp		
   518 				;
   519 				;**************************************************************************************************
   520 				; CheckHoleBelowPlayer
   521 				;**************************************************************************************************
   522 				;
   523 56BE			.proc CheckHoleBelowPlayer
   524
   525 						; get bottom char line
   526 56BE A5 AA				lda m_playerLevelBottomY_H2
   527 56C0 8D 67 32				sta m_charBuffer_H2
   528 56C3 A5 AB				lda m_playerLevelBottomY_H1
   529 56C5 18					clc
   530 56C6 69 01				adc #1									; check one pixel below the bottom line of the player
   531 56C8 90 03				bcc CHBP_get_char_line
   532 56CA EE 67 32				inc m_charBuffer_H2
   533
   534 				;************************************************
   535 				;
   536 56CD			CHBP_get_char_line
   537 						
   538 56CD 4E 67 32				lsr m_charBuffer_H2						; /2
   539 56D0 6A					ror
   540 56D1 4E 67 32				lsr m_charBuffer_H2						; /4
   541 56D4 6A					ror
   542 56D5 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   543 56D8 6A					ror
   544
   545 						; check bottom level limit
   546 56D9 C5 D5				cmp m_levelCharSizeY
   547 56DB B0 6F				bcs CHBP_no_hole
   548
   549 56DD			GetLevelLine
   550
   551 56DD AA					tax
   552 56DE BD 76 32				lda TabLevelLineAddressLSB,x
   553 56E1 85 E9				sta m_ptrLevelLine
   554 56E3 BD 76 33				lda TabLevelLineAddressMSB,x
   555 56E6 85 EA				sta m_ptrLevelLine+1
   556
   557 						; update right coordinate
   558 56E8 A5 A2				lda m_playerLevelLeftX_H1
   559 56EA 18					clc
   560 56EB 65 B3				adc m_playerSizeXMinusOne
   561 56ED 85 A5				sta m_playerLevelRightX_H1
   562 56EF A5 A1				lda m_playerLevelLeftX_H2
   563 56F1 69 00				adc #0
   564 56F3 85 A4				sta m_playerLevelRightX_H2
   565
   566 						; get left point char column
   567 56F5 A5 A1				lda m_playerLevelLeftX_H2
   568 56F7 8D 67 32				sta m_charBuffer_H2
   569 56FA A5 A2				lda m_playerLevelLeftX_H1
   570 56FC 4E 67 32				lsr m_charBuffer_H2						; /2
   571 56FF 6A					ror
   572 5700 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   573 5703 6A					ror
   574
   575 5704 A8					tay
   576 5705 B1 E9				lda (m_ptrLevelLine),y
   577 5707 AA					tax
   578 5708 BD 76 34				lda TabCharDefinition,x
   579 570B 8D 68 32				sta m_leftBottomChar
   580
   581 						; get right point char column
   582 570E A5 A4				lda m_playerLevelRightX_H2
   583 5710 8D 67 32				sta m_charBuffer_H2
   584 5713 A5 A5				lda m_playerLevelRightX_H1
   585 5715 4E 67 32				lsr m_charBuffer_H2						; /2
   586 5718 6A					ror
   587 5719 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   588 571C 6A					ror
   589
   590 571D A8					tay
   591 571E B1 E9				lda (m_ptrLevelLine),y
   592 5720 AA					tax
   593 5721 BD 76 34				lda TabCharDefinition,x
   594 5724 8D 69 32				sta m_rightBottomChar
   595 					
   596 						; fast collision check
   597 5727 AD 68 32				lda m_leftBottomChar
   598 572A 29 01				and #01
   599 572C C9 01				cmp #CT_BLOCK
   600 572E D0 07				bne CHBP_check_next_char
   601
   602 5730 AD 68 32				lda m_leftBottomChar
   603 5733 29 10				and #%00010000
   604 5735 D0 15				bne CHBP_no_hole
   605
   606 				;************************************************
   607 				;
   608 5737			CHBP_check_next_char
   609 						
   610 5737 AD 69 32				lda m_rightBottomChar
   611 573A 29 01				and #01
   612 573C C9 01				cmp #CT_BLOCK
   613 573E D0 07				bne CHBP_hole
   614
   615 5740 AD 69 32				lda m_rightBottomChar
   616 5743 29 10				and #%00010000
   617 5745 D0 05				bne CHBP_no_hole
   618
   619 				;************************************************
   620 				;
   621 5747			CHBP_hole
   622
   623 						; need to change the player to the falling state
   624 5747 A9 00				lda #0
   625 5749 85 CF				sta m_playerOverPlatformFlag
   626 574B 60					rts
   627
   628 				;************************************************
   629 				;
   630 574C			CHBP_no_hole
   631
   632 574C A9 01				lda #1
   633 574E 85 CF				sta m_playerOverPlatformFlag
   634 5750 60					rts
   635 				.endp
   636 				;
   637 				;**************************************************************************************************
   638 				; CheckPlayerBottomCollision
   639 				;**************************************************************************************************
   640 				;
   641 5751			.proc CheckPlayerBottomCollision
   642
   643 						; get bottom char line
   644 5751 A5 AA				lda m_playerLevelBottomY_H2
   645 5753 8D 67 32				sta m_charBuffer_H2
   646 5756 A5 AB				lda m_playerLevelBottomY_H1
   647
   648 5758 4E 67 32				lsr m_charBuffer_H2						; /2
   649 575B 6A					ror
   650 575C 4E 67 32				lsr m_charBuffer_H2						; /4
   651 575F 6A					ror
   652 5760 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   653 5763 6A					ror
   654
   655 5764 AA					tax
   656 5765 BD 76 32				lda TabLevelLineAddressLSB,x
   657 5768 85 E9				sta m_ptrLevelLine
   658 576A BD 76 33				lda TabLevelLineAddressMSB,x
   659 576D 85 EA				sta m_ptrLevelLine+1
   660
   661 						; update right coordinate
   662 576F A5 A2				lda m_playerLevelLeftX_H1
   663 5771 18					clc
   664 5772 65 B3				adc m_playerSizeXMinusOne
   665 5774 85 A5				sta m_playerLevelRightX_H1
   666 5776 A5 A1				lda m_playerLevelLeftX_H2
   667 5778 69 00				adc #0
   668 577A 85 A4				sta m_playerLevelRightX_H2
   669
   670 						; get left point char column
   671 577C A5 A1				lda m_playerLevelLeftX_H2
   672 577E 8D 67 32				sta m_charBuffer_H2
   673 5781 A5 A2				lda m_playerLevelLeftX_H1
   674 5783 4E 67 32				lsr m_charBuffer_H2						; /2
   675 5786 6A					ror
   676 5787 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   677 578A 6A					ror
   678
   679 578B A8					tay
   680 578C B1 E9				lda (m_ptrLevelLine),y
   681 578E AA					tax
   682 578F BD 76 34				lda TabCharDefinition,x
   683 5792 8D 68 32				sta m_leftBottomChar
   684
   685 						; get right point char column
   686 5795 A5 A4				lda m_playerLevelRightX_H2
   687 5797 8D 67 32				sta m_charBuffer_H2
   688 579A A5 A5				lda m_playerLevelRightX_H1
   689 579C 4E 67 32				lsr m_charBuffer_H2						; /2
   690 579F 6A					ror
   691 57A0 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   692 57A3 6A					ror
   693
   694 57A4 A8					tay
   695 57A5 B1 E9				lda (m_ptrLevelLine),y
   696 57A7 AA					tax
   697 57A8 BD 76 34				lda TabCharDefinition,x
   698 57AB 8D 69 32				sta m_rightBottomChar
   699
   700 						; fast collision check
   701 57AE AD 68 32				lda m_leftBottomChar
   702 57B1 29 01				and #01
   703 57B3 C9 01				cmp #CT_BLOCK
   704 57B5 D0 07				bne CPBC_check_next_char
   705
   706 57B7 AD 68 32				lda m_leftBottomChar
   707 57BA 29 10				and #%00010000
   708 57BC D0 10				bne CPBC_found_collision
   709
   710 				;************************************************
   711 				;
   712 57BE			CPBC_check_next_char
   713
   714 57BE AD 69 32				lda m_rightBottomChar
   715 57C1 29 01				and #01
   716 57C3 C9 01				cmp #CT_BLOCK
   717 57C5 D0 1E				bne CPBC_exit
   718
   719 57C7 AD 69 32				lda m_rightBottomChar
   720 57CA 29 10				and #%00010000
   721 57CC F0 17				beq CPBC_exit
   722
   723 				;************************************************
   724 				;
   725 57CE			CPBC_found_collision
   726
   727 						; need to move the player up and change to the platform state
   728 57CE A9 01				lda #1
   729 57D0 85 CF				sta m_playerOverPlatformFlag
   730
   731 57D2 A9 00				lda #0
   732 57D4 85 AC				sta m_playerLevelBottomY_L1
   733
   734 57D6 A5 AB				lda m_playerLevelBottomY_H1
   735 57D8 29 F8				and #%11111000		; mask for CHAR_PIX.else_Y
   736 57DA 38					sec
   737 57DB E9 01				sbc #1
   738 57DD 85 AB				sta m_playerLevelBottomY_H1
   739 57DF A5 AA				lda m_playerLevelBottomY_H2
   740 57E1 E9 00				sbc #0
   741 57E3 85 AA				sta m_playerLevelBottomY_H2
   742
   743 				;************************************************
   744 				;
   745 57E5			CPBC_exit
   746 57E5 60					rts
   747
   748 				.endp		
   749 				;
   750 				;**************************************************************************************************
   751 				; CheckPlayerTopCollision
   752 				;**************************************************************************************************
   753 				;
   754 57E6			.proc CheckPlayerTopCollision
   755
   756 57E6 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   757 57E8 38					sec
   758 57E9 E5 B4				sbc m_playerSizeYMinusOne
   759 57EB 85 A8				sta m_playerLevelTopY_H1
   760 						
   761 57ED A5 AA				lda m_playerLevelBottomY_H2
   762 57EF E9 00				sbc #0
   763 57F1 85 A7				sta m_playerLevelTopY_H2
   764
   765 57F3 A5 A7				lda m_playerLevelTopY_H2				; get top char line
   766 57F5 8D 67 32				sta m_charBuffer_H2
   767 57F8 A5 A8				lda m_playerLevelTopY_H1
   768
   769 57FA 4E 67 32				lsr m_charBuffer_H2						; /2
   770 57FD 6A					ror
   771 57FE 4E 67 32				lsr m_charBuffer_H2						; /4
   772 5801 6A					ror
   773 5802 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   774 5805 6A					ror
   775
   776 5806 AA					tax
   777 5807 BD 76 32				lda TabLevelLineAddressLSB,x
   778 580A 85 E9				sta m_ptrLevelLine
   779 						
   780 580C BD 76 33				lda TabLevelLineAddressMSB,x
   781 580F 85 EA				sta m_ptrLevelLine+1
   782
   783 5811 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   784 5813 18					clc
   785 5814 65 B3				adc m_playerSizeXMinusOne
   786 5816 85 A5				sta m_playerLevelRightX_H1
   787 						
   788 5818 A5 A1				lda m_playerLevelLeftX_H2
   789 581A 69 00				adc #0
   790 581C 85 A4				sta m_playerLevelRightX_H2
   791
   792 581E A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   793 5820 8D 67 32				sta m_charBuffer_H2
   794 						
   795 5823 A5 A2				lda m_playerLevelLeftX_H1
   796 5825 4E 67 32				lsr m_charBuffer_H2						; /2
   797 5828 6A					ror
   798 5829 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   799 582C 6A					ror
   800
   801 582D A8					tay
   802 582E B1 E9				lda (m_ptrLevelLine),y
   803 						
   804 5830 AA					tax		
   805 5831 BD 76 34				lda TabCharDefinition,x
   806 5834 8D 65 32				sta m_leftTopChar
   807
   808 5837 A5 A4				lda m_playerLevelRightX_H2				; get right point char column	
   809 5839 8D 67 32				sta m_charBuffer_H2
   810 						
   811 583C A5 A5				lda m_playerLevelRightX_H1
   812 583E 4E 67 32				lsr m_charBuffer_H2						; /2
   813 5841 6A					ror
   814 5842 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   815 5845 6A					ror
   816
   817 5846 A8					tay
   818 5847 B1 E9				lda (m_ptrLevelLine),y
   819 5849 AA					tax
   820 584A BD 76 34				lda TabCharDefinition,x
   821 584D 8D 66 32				sta m_rightTopChar
   822
   823 5850 AD 65 32				lda m_leftTopChar						; fast collision check	
   824 5853 29 01				and #01
   825 5855 C9 01				cmp #CT_BLOCK
   826 5857 D0 07				bne CPTC_check_next_char
   827
   828 5859 AD 65 32				lda m_leftTopChar
   829 585C 29 20				and #%00100000
   830 585E D0 10				bne CPTC_found_collision
   831
   832 				;**************************************************
   833 				;
   834 5860			CPTC_check_next_char
   835 						
   836 5860 AD 66 32				lda m_rightTopChar
   837 5863 29 01				and #01
   838 5865 C9 01				cmp #CT_BLOCK
   839 5867 D0 2B				bne CPTC_exit
   840
   841 5869 AD 66 32				lda m_rightTopChar
   842 586C 29 20				and #%00100000
   843 586E F0 24				beq CPTC_exit
   844
   845 				;**************************************************
   846 				;
   847 5870			CPTC_found_collision
   848
   849 5870 A9 01				lda #1									; need to move the player down
   850 5872 85 D0				sta m_playerTopCollisionFlag
   851
   852 5874 A9 00				lda #0
   853 5876 85 AC				sta m_playerLevelBottomY_L1
   854
   855 5878 A5 A8				lda m_playerLevelTopY_H1
   856 587A 29 F8				and #%11111000							; mask for CHAR_PIX.else_Y
   857 587C 18					clc
   858 587D 69 08				adc #CHAR_PIX.else_Y 						; +m_playerSizeY
   859 587F 85 AB				sta m_playerLevelBottomY_H1
   860 						
   861 5881 A5 A7				lda m_playerLevelTopY_H2
   862 5883 69 00				adc #0
   863 5885 85 AA				sta m_playerLevelBottomY_H2
   864
   865 5887 A5 AB				lda m_playerLevelBottomY_H1
   866 5889 18					clc
   867 588A 65 B4				adc m_playerSizeYMinusOne
   868 588C 85 AB				sta m_playerLevelBottomY_H1
   869 						
   870 588E A5 AA				lda m_playerLevelBottomY_H2
   871 5890 69 00				adc #0
   872 5892 85 AA				sta m_playerLevelBottomY_H2
   873
   874 				;**************************************************
   875 				;
   876 5894			CPTC_exit
   877 5894 60					rts
   878
   879 				.endp		
   880 				;
   881 				;**************************************************************************************************
   882 				; CheckPlayerLeftCollision
   883 				;**************************************************************************************************
   884 				;
   885 5895			.proc CheckPlayerLeftCollision
   886
   887 5895 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   888 5897 38					sec
   889 5898 E5 B4				sbc m_playerSizeYMinusOne
   890 589A 85 A8				sta m_playerLevelTopY_H1
   891 						
   892 589C A5 AA				lda m_playerLevelBottomY_H2
   893 589E E9 00				sbc #0
   894 58A0 85 A7				sta m_playerLevelTopY_H2
   895
   896 58A2 A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   897 58A4 8D 67 32				sta m_charBuffer_H2
   898 58A7 A5 A2				lda m_playerLevelLeftX_H1
   899
   900 58A9 4E 67 32				lsr m_charBuffer_H2						; /2
   901 58AC 6A					ror
   902 58AD 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   903 58B0 6A					ror
   904
   905 58B1 A8					tay
   906 58B2 A5 A7				lda m_playerLevelTopY_H2				; get top char line	
   907 58B4 8D 67 32				sta m_charBuffer_H2
   908 58B7 A5 A8				lda m_playerLevelTopY_H1
   909
   910 58B9 4E 67 32				lsr m_charBuffer_H2						; /2
   911 58BC 6A					ror
   912 58BD 4E 67 32				lsr m_charBuffer_H2						; /4
   913 58C0 6A					ror
   914 58C1 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   915 58C4 6A					ror
   916
   917 58C5 AA					tax
   918 58C6 BD 76 32				lda TabLevelLineAddressLSB,x
   919 58C9 85 E9				sta m_ptrLevelLine
   920 58CB BD 76 33				lda TabLevelLineAddressMSB,x
   921 58CE 85 EA				sta m_ptrLevelLine+1
   922
   923 58D0 B1 E9				lda (m_ptrLevelLine),y
   924 58D2 AA					tax
   925 58D3 BD 76 34				lda TabCharDefinition,x
   926 58D6 8D 65 32				sta m_leftTopChar
   927
   928 58D9 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
   929 58DB 8D 67 32				sta m_charBuffer_H2
   930 58DE A5 AB				lda m_playerLevelBottomY_H1
   931
   932 58E0 4E 67 32				lsr m_charBuffer_H2						; /2
   933 58E3 6A					ror
   934 58E4 4E 67 32				lsr m_charBuffer_H2						; /4
   935 58E7 6A					ror
   936 58E8 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   937 58EB 6A					ror
   938
   939 58EC AA					tax
   940 58ED BD 76 32				lda TabLevelLineAddressLSB,x
   941 58F0 85 E9				sta m_ptrLevelLine
   942 						
   943 58F2 BD 76 33				lda TabLevelLineAddressMSB,x
   944 58F5 85 EA				sta m_ptrLevelLine+1
   945
   946 58F7 B1 E9				lda (m_ptrLevelLine),y
   947 58F9 AA					tax
   948 						
   949 58FA BD 76 34				lda TabCharDefinition,x
   950 58FD 8D 68 32				sta m_leftBottomChar
   951
   952 5900 AD 65 32				lda m_leftTopChar						; fast collision check
   953 5903 29 0F				and #15
   954 5905 C9 01				cmp #CT_BLOCK
   955 5907 D0 07				bne CPLC_check_next_char
   956
   957 5909 AD 65 32				lda m_leftTopChar
   958 590C 29 80				and #%10000000
   959 590E D0 10				bne CPLC_found_collision
   960
   961 				;**************************************************
   962 				;
   963 5910			CPLC_check_next_char
   964
   965 5910 AD 68 32				lda m_leftBottomChar
   966 5913 29 01				and #01
   967 5915 C9 01				cmp #CT_BLOCK
   968 5917 D0 1E				bne CPLC_exit
   969
   970 5919 AD 68 32				lda m_leftBottomChar
   971 591C 29 80				and #%10000000
   972 591E F0 17				beq CPLC_exit
   973
   974 				;**************************************************
   975 				;
   976 5920			CPLC_found_collision
   977
   978 5920 A9 01				lda #1
   979 5922 85 D1				sta m_playerSideCollisionFlag
   980
   981 5924 A9 00				lda #0									; need to move the player to the right
   982 5926 85 A3				sta m_playerLevelLeftX_L1
   983
   984 5928 A5 A2				lda m_playerLevelLeftX_H1
   985 592A 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
   986 592C 18					clc
   987 592D 69 04				adc #CHAR_PIX.else_X
   988 592F 85 A2				sta m_playerLevelLeftX_H1
   989 						
   990 5931 A5 A1				lda m_playerLevelLeftX_H2
   991 5933 69 00				adc #0
   992 5935 85 A1				sta m_playerLevelLeftX_H2
   993
   994 				;**************************************************
   995 				;
   996 5937			CPLC_exit	
   997 5937 60					rts
   998
   999 				.endp	
  1000 				;
  1001 				;**************************************************************************************************
  1002 				; CheckPlayerRightCollision
  1003 				;**************************************************************************************************
  1004 				;
  1005 5938			.proc CheckPlayerRightCollision
  1006
  1007 5938 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1008 593A 38					sec
  1009 593B E5 B4				sbc m_playerSizeYMinusOne
  1010 593D 85 A8				sta m_playerLevelTopY_H1
  1011 					
  1012 593F A5 AA				lda m_playerLevelBottomY_H2
  1013 5941 E9 00				sbc #0
  1014 5943 85 A7				sta m_playerLevelTopY_H2
  1015
  1016 5945 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
  1017 5947 18					clc
  1018 5948 65 B3				adc m_playerSizeXMinusOne
  1019 594A 85 A5				sta m_playerLevelRightX_H1
  1020 					
  1021 594C A5 A1				lda m_playerLevelLeftX_H2
  1022 594E 69 00				adc #0
  1023 5950 85 A4				sta m_playerLevelRightX_H2
  1024
  1025 5952 A5 A4				lda m_playerLevelRightX_H2				; get right point char column
  1026 5954 8D 67 32				sta m_charBuffer_H2
  1027 						
  1028 5957 A5 A5				lda m_playerLevelRightX_H1
  1029 5959 4E 67 32				lsr m_charBuffer_H2						; /2
  1030 595C 6A					ror
  1031 595D 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1032 5960 6A					ror
  1033 5961 A8					tay
  1034
  1035 5962 A5 A7				lda m_playerLevelTopY_H2				; get top char line
  1036 5964 8D 67 32				sta m_charBuffer_H2
  1037 					
  1038 5967 A5 A8				lda m_playerLevelTopY_H1
  1039 5969 4E 67 32				lsr m_charBuffer_H2						; /2
  1040 596C 6A					ror
  1041 596D 4E 67 32				lsr m_charBuffer_H2						; /4
  1042 5970 6A					ror
  1043 5971 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1044 5974 6A					ror	
  1045
  1046 5975 AA					tax
  1047 5976 BD 76 32				lda TabLevelLineAddressLSB,x
  1048 5979 85 E9				sta m_ptrLevelLine
  1049 					
  1050 597B BD 76 33				lda TabLevelLineAddressMSB,x
  1051 597E 85 EA				sta m_ptrLevelLine+1
  1052
  1053 5980 B1 E9				lda (m_ptrLevelLine),y
  1054 5982 AA					tax
  1055 					
  1056 5983 BD 76 34				lda TabCharDefinition,x
  1057 5986 8D 66 32				sta m_rightTopChar
  1058
  1059 5989 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1060 598B 8D 67 32				sta m_charBuffer_H2
  1061 598E A5 AB				lda m_playerLevelBottomY_H1
  1062
  1063 5990 4E 67 32				lsr m_charBuffer_H2						; /2
  1064 5993 6A					ror
  1065 5994 4E 67 32				lsr m_charBuffer_H2						; /4
  1066 5997 6A					ror
  1067 5998 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1068 599B 6A					ror
  1069
  1070 599C AA					tax
  1071 599D BD 76 32				lda TabLevelLineAddressLSB,x
  1072 59A0 85 E9				sta m_ptrLevelLine
  1073 					
  1074 59A2 BD 76 33				lda TabLevelLineAddressMSB,x
  1075 59A5 85 EA				sta m_ptrLevelLine+1
  1076
  1077 59A7 B1 E9				lda (m_ptrLevelLine),y
  1078 59A9 AA					tax	
  1079 59AA BD 76 34				lda TabCharDefinition,x
  1080 59AD 8D 69 32				sta m_rightBottomChar
  1081
  1082 59B0 AD 66 32				lda m_rightTopChar						; fast collision check
  1083 59B3 29 01				and #01
  1084 59B5 C9 01				cmp #CT_BLOCK
  1085 59B7 D0 07				bne CPRC_check_next_char
  1086
  1087 59B9 AD 66 32				lda m_rightTopChar
  1088 59BC 29 40				and #%01000000
  1089 59BE D0 10				bne CPRC_found_collision
  1090
  1091 				;**************************************************
  1092 				;
  1093 59C0			CPRC_check_next_char
  1094 						
  1095 59C0 AD 69 32				lda m_rightBottomChar
  1096 59C3 29 01				and #01
  1097 59C5 C9 01				cmp #CT_BLOCK
  1098 59C7 D0 1E				bne CPRC_exit
  1099
  1100 59C9 AD 69 32				lda m_rightBottomChar
  1101 59CC 29 40				and #%01000000
  1102 59CE F0 17				beq CPRC_exit
  1103
  1104 				;**************************************************
  1105 				;
  1106 59D0			CPRC_found_collision
  1107 59D0 A9 01				lda #1
  1108 59D2 85 D1				sta m_playerSideCollisionFlag
  1109
  1110 59D4 A9 00				lda #0									; need to move the player to the left
  1111 59D6 85 A3				sta m_playerLevelLeftX_L1
  1112 					
  1113 59D8 A5 A5				lda m_playerLevelRightX_H1
  1114 59DA 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
  1115 59DC 38					sec
  1116 59DD E5 B1				sbc m_playerSizeX
  1117 59DF 85 A2				sta m_playerLevelLeftX_H1
  1118 					
  1119 59E1 A5 A4				lda m_playerLevelRightX_H2
  1120 59E3 E9 00				sbc #0
  1121 59E5 85 A1				sta m_playerLevelLeftX_H2
  1122
  1123 				;**************************************************
  1124 				;
  1125 59E7			CPRC_exit
  1126 59E7 60					rts
  1127 						
  1128 				.endp		
  1129 				;
  1130 				;**************************************************************************************************
  1131 				; AddSideAccelToSpeed
  1132 				;**************************************************************************************************
  1133 				;
  1134 59E8			.proc AddSideAccelToSpeed
  1135
  1136 59E8 A5 B6				lda m_playerSideSpeed_L1				; update frame speed with frame accel	
  1137 59EA 18					clc
  1138 59EB 65 BA				adc m_playerSideAccel_L1
  1139 59ED 85 B6				sta m_playerSideSpeed_L1
  1140 						
  1141 59EF A5 B5				lda m_playerSideSpeed_H1
  1142 59F1 65 B9				adc m_playerSideAccel_H1
  1143
  1144 				;**************************************************
  1145 				;
  1146 59F3			ASATS_entry_point
  1147 						
  1148 59F3 85 B5				sta m_playerSideSpeed_H1
  1149 59F5 C5 B7				cmp m_playerMaxSideSpeed_H1				; check max frame speed
  1150 59F7 90 10				bcc ASATS_exit							; lower than max speed
  1151 59F9 D0 06				bne ASATS_max_speed						; greater than max speed
  1152
  1153 59FB A5 B8				lda m_playerMaxSideSpeed_L1				; need to check the low byte
  1154 59FD C5 B6				cmp m_playerSideSpeed_L1
  1155 59FF B0 08				bcs ASATS_exit							; lower or equal to max speed
  1156
  1157 				;**************************************************
  1158 				;
  1159 5A01			ASATS_max_speed									
  1160 						
  1161 5A01 A5 B7				lda m_playerMaxSideSpeed_H1				; is higher than the max speed
  1162 5A03 85 B5				sta m_playerSideSpeed_H1
  1163 						
  1164 5A05 A5 B8				lda m_playerMaxSideSpeed_L1
  1165 5A07 85 B6				sta m_playerSideSpeed_L1
  1166
  1167 				;**************************************************
  1168 				;
  1169 5A09			ASATS_exit		
  1170 5A09 60					rts
  1171
  1172 				.endp
  1173 				;
  1174 				;**************************************************************************************************
  1175 				; SubstractSideDeaccelToSpeed
  1176 				;**************************************************************************************************
  1177 				;
  1178 5A0A			SubstractSideDeaccelToSpeed
  1179
  1180 5A0A A5 B6				lda m_playerSideSpeed_L1					; update frame speed with frame accel
  1181 5A0C 38					sec
  1182 5A0D E5 BC				sbc m_playerSideDeaccel_L1
  1183 5A0F 85 B6				sta m_playerSideSpeed_L1
  1184
  1185 5A11 A5 B5				lda m_playerSideSpeed_H1
  1186 5A13 E5 BB				sbc m_playerSideDeaccel_H1
  1187 5A15 B0 04				bcs SSDTS_dont_reset_speed
  1188
  1189 				;************************************************
  1190 				;
  1191 5A17			SSDTS_reset_speed
  1192 5A17 A9 00				lda #0
  1193 5A19 85 B6				sta m_playerSideSpeed_L1
  1194
  1195 				;************************************************
  1196 				;
  1197 5A1B			SSDTS_dont_reset_speed
  1198 5A1B 85 B5				sta m_playerSideSpeed_H1
  1199
  1200 5A1D 60					rts	
  1201 				;
  1202 				;**************************************************************************************************
  1203 				; AddSideSpeedToPosition
  1204 				;**************************************************************************************************
  1205 				;
  1206 5A1E			.proc AddSideSpeedToPosition
  1207
  1208 5A1E A5 A3				lda m_playerLevelLeftX_L1				; update player side position
  1209 5A20 18					clc
  1210 5A21 65 B6				adc m_playerSideSpeed_L1
  1211 5A23 85 A3				sta m_playerLevelLeftX_L1
  1212 						
  1213 5A25 A5 A2				lda m_playerLevelLeftX_H1		
  1214 5A27 65 B5				adc m_playerSideSpeed_H1
  1215 5A29 85 A2				sta m_playerLevelLeftX_H1
  1216 						
  1217 5A2B A5 A1				lda m_playerLevelLeftX_H2
  1218 5A2D 69 00				adc #0
  1219 5A2F 85 A1				sta m_playerLevelLeftX_H2
  1220
  1221 5A31 A9 00				lda #0									; check collisions for a player moving to the right	
  1222 5A33 85 D1				sta m_playerSideCollisionFlag
  1223
  1224 5A35 20 6B 56				jsr CheckPlayerInLevelRightLimit		; check level right side limit
  1225 					
  1226 5A38 A5 D1				lda m_playerSideCollisionFlag
  1227 5A3A D0 07				bne ASSTP_found_collision
  1228
  1229 5A3C 20 38 59				jsr CheckPlayerRightCollision
  1230
  1231 5A3F A5 D1				lda m_playerSideCollisionFlag
  1232 5A41 F0 06				beq ASSTP_exit
  1233
  1234 				;************************************************
  1235 				;
  1236 5A43			ASSTP_found_collision
  1237 						
  1238 5A43 A9 00				lda #0
  1239 5A45 85 B5				sta m_playerSideSpeed_H1
  1240 5A47 85 B6				sta m_playerSideSpeed_L1
  1241
  1242 				;************************************************
  1243 				;
  1244 5A49			ASSTP_exit
  1245 						
  1246 5A49 60					rts
  1247
  1248 				.endp
  1249 				;
  1250 				;**************************************************************************************************
  1251 				; SubstractSideSpeedToPosition
  1252 				;**************************************************************************************************
  1253 				;
  1254 5A4A			.proc SubstractSideSpeedToPosition
  1255
  1256 5A4A A5 A3				lda m_playerLevelLeftX_L1	; update player side position
  1257 5A4C 38					sec
  1258 5A4D E5 B6				sbc m_playerSideSpeed_L1
  1259 5A4F 85 A3				sta m_playerLevelLeftX_L1
  1260 						
  1261 5A51 A5 A2				lda m_playerLevelLeftX_H1
  1262 5A53 E5 B5				sbc m_playerSideSpeed_H1
  1263 5A55 85 A2				sta m_playerLevelLeftX_H1
  1264 						
  1265 5A57 A5 A1				lda m_playerLevelLeftX_H2
  1266 5A59 E9 00				sbc #0
  1267 5A5B 85 A1				sta m_playerLevelLeftX_H2
  1268
  1269 						; check collisions for a player moving to the left
  1270 5A5D B0 0B				bcs SSSTP_check_left_collision			; check level left side limit
  1271 5A5F A9 00				lda #0
  1272 5A61 85 A1				sta m_playerLevelLeftX_H2
  1273 5A63 85 A2				sta m_playerLevelLeftX_H1
  1274 5A65 85 A3				sta m_playerLevelLeftX_L1
  1275 5A67 4C 75 5A				jmp SSSTP_found_collision
  1276
  1277 				;************************************************
  1278 				;
  1279 5A6A			SSSTP_check_left_collision
  1280 						
  1281 5A6A A9 00				lda #0
  1282 5A6C 85 D1				sta m_playerSideCollisionFlag
  1283
  1284 5A6E 20 95 58				jsr CheckPlayerLeftCollision
  1285
  1286 5A71 A5 D1				lda m_playerSideCollisionFlag
  1287 5A73 F0 06				beq SSSTP_exit
  1288
  1289 				;************************************************
  1290 				;
  1291 5A75			SSSTP_found_collision
  1292 						
  1293 5A75 A9 00				lda #0
  1294 5A77 85 B5				sta m_playerSideSpeed_H1
  1295 5A79 85 B6				sta m_playerSideSpeed_L1
  1296
  1297 5A7B			SSSTP_exit
  1298 5A7B 60					rts
  1299 						
  1300 				.endp		
  1301 				;
  1302 				;**************************************************************************************************
  1303 				; AddGravityAccelToSpeed
  1304 				;**************************************************************************************************
  1305 				;
  1306 5A7C			.proc AddGravityAccelToSpeed
  1307
  1308 5A7C A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1309 5A7E 18					clc
  1310 5A7F 65 C4				adc m_playerGravityAccel_L1
  1311 5A81 85 BE				sta m_playerSpeedY_L1
  1312 						
  1313 5A83 A5 BD				lda m_playerSpeedY_H1
  1314 5A85 65 C3				adc m_playerGravityAccel_H1
  1315 5A87 85 BD				sta m_playerSpeedY_H1
  1316
  1317 5A89 C5 C1				cmp m_playerMaxFallSpeed_H1				; check max frame speed
  1318 5A8B 90 10				bcc AGATS_exit							; lower than max speed
  1319 5A8D D0 06				bne AGATS_max_speed						; greater than max speed
  1320
  1321 5A8F A5 C2				lda m_playerMaxFallSpeed_L1				; need to check the low byte
  1322 5A91 C5 BE				cmp m_playerSpeedY_L1
  1323 5A93 B0 08				bcs AGATS_exit							; lower or equal to max speed
  1324
  1325 				;************************************************
  1326 				;
  1327 5A95			AGATS_max_speed			
  1328
  1329 5A95 A5 C1				lda m_playerMaxFallSpeed_H1				; is higher than the max speed
  1330 5A97 85 BD				sta m_playerSpeedY_H1
  1331 						
  1332 5A99 A5 C2				lda m_playerMaxFallSpeed_L1
  1333 5A9B 85 BE				sta m_playerSpeedY_L1
  1334
  1335 				;************************************************
  1336 				;
  1337 5A9D			AGATS_exit
  1338 5A9D 60					rts
  1339 						
  1340 				.endp		
  1341 				;
  1342 				;**************************************************************************************************
  1343 				; SubstractGravityAccelToSpeed
  1344 				;**************************************************************************************************
  1345 				;
  1346 5A9E			.proc SubstractGravityAccelToSpeed
  1347 						
  1348 5A9E A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1349 5AA0 38					sec
  1350 5AA1 E5 C4				sbc m_playerGravityAccel_L1
  1351 5AA3 85 BE				sta m_playerSpeedY_L1
  1352 						
  1353 5AA5 A5 BD				lda m_playerSpeedY_H1
  1354 5AA7 E5 C3				sbc m_playerGravityAccel_H1
  1355 5AA9 B0 04				bcs SGATS_dont_reset_speed
  1356
  1357 				;************************************************
  1358 				;
  1359 5AAB			SGATS_reset_speed
  1360 5AAB A9 00				lda #0
  1361 5AAD 85 BE				sta m_playerSpeedY_L1
  1362
  1363 				;************************************************
  1364 				;
  1365 5AAF			SGATS_dont_reset_speed
  1366 5AAF 85 BD				sta m_playerSpeedY_H1
  1367 5AB1 60					rts
  1368
  1369 				.endp
  1370 				;
  1371 				;**************************************************************************************************
  1372 				; AddSpeedYToPosition
  1373 				;**************************************************************************************************
  1374 				;
  1375 5AB2			.proc AddSpeedYToPosition
  1376
  1377 5AB2 A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1378 5AB4 18					clc
  1379 5AB5 65 BE				adc m_playerSpeedY_L1
  1380 5AB7 85 AC				sta m_playerLevelBottomY_L1
  1381 						
  1382 5AB9 A5 AB				lda m_playerLevelBottomY_H1
  1383 5ABB 65 BD				adc m_playerSpeedY_H1
  1384 5ABD 85 AB				sta m_playerLevelBottomY_H1
  1385 						
  1386 5ABF A5 AA				lda m_playerLevelBottomY_H2
  1387 5AC1 69 00				adc #0
  1388 5AC3 85 AA				sta m_playerLevelBottomY_H2
  1389
  1390 5AC5 A9 00				lda #0									; check collisions for a player moving down
  1391 5AC7 85 CF				sta m_playerOverPlatformFlag
  1392
  1393 5AC9 20 9A 56				jsr CheckPlayerInLevelBottomLimit		; check level bottom limit collision
  1394
  1395 5ACC A5 CF				lda m_playerOverPlatformFlag
  1396 5ACE D0 03				bne ASYTP_exit
  1397
  1398 5AD0 20 51 57				jsr CheckPlayerBottomCollision			; check collision with the top of a platform
  1399
  1400 				;************************************************
  1401 				;
  1402 5AD3			ASYTP_exit
  1403 5AD3 60					rts
  1404 						
  1405 				.endp		
  1406 				;
  1407 				;**************************************************************************************************
  1408 				; SubstractSpeedYToPosition
  1409 				;**************************************************************************************************
  1410 				;
  1411 5AD4			.proc SubstractSpeedYToPosition
  1412
  1413 5AD4 A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1414 5AD6 38					sec
  1415 5AD7 E5 BE				sbc m_playerSpeedY_L1
  1416 5AD9 85 AC				sta m_playerLevelBottomY_L1
  1417 5ADB A5 AB				lda m_playerLevelBottomY_H1
  1418 5ADD E5 BD				sbc m_playerSpeedY_H1
  1419 5ADF 85 AB				sta m_playerLevelBottomY_H1
  1420 5AE1 A5 AA				lda m_playerLevelBottomY_H2
  1421 5AE3 E9 00				sbc #0
  1422 5AE5 85 AA				sta m_playerLevelBottomY_H2
  1423
  1424 5AE7 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1425 5AE9 38					sec
  1426 5AEA E5 B4				sbc m_playerSizeYMinusOne
  1427 5AEC 85 A8				sta m_playerLevelTopY_H1
  1428 5AEE A5 AA				lda m_playerLevelBottomY_H2
  1429 5AF0 E9 00				sbc #0
  1430 5AF2 85 A7				sta m_playerLevelTopY_H2
  1431
  1432 5AF4 B0 0D				bcs SSYTP_check_platform_bottom			; check collisions for a player moving up check level top limit collision
  1433
  1434 5AF6 A9 00				lda #0
  1435 5AF8 85 AC				sta m_playerLevelBottomY_L1
  1436 5AFA 85 AA				sta m_playerLevelBottomY_H2
  1437
  1438 5AFC A5 B4				lda m_playerSizeYMinusOne
  1439 5AFE 85 AB				sta m_playerLevelBottomY_H1
  1440
  1441 5B00 4C 0E 5B				jmp SSYTP_found_collision
  1442
  1443 5B03			SSYTP_check_platform_bottom
  1444 					
  1445 5B03 A9 00				lda #0									; check collision with the bottom of a platform
  1446 5B05 85 D0				sta m_playerTopCollisionFlag
  1447
  1448 5B07 20 E6 57				jsr CheckPlayerTopCollision
  1449
  1450 5B0A A5 D0				lda m_playerTopCollisionFlag
  1451 5B0C F0 06				beq SSYTP_exit
  1452
  1453 5B0E			SSYTP_found_collision
  1454 5B0E A9 00				lda #0
  1455 5B10 85 BD				sta m_playerSpeedY_H1
  1456 5B12 85 BE				sta m_playerSpeedY_L1
  1457
  1458 5B14			SSYTP_exit
  1459 5B14 60					rts
  1460
  1461 				.endp		
  1462 				;
  1463 				;**************************************************************************************************
  1464 				; AddWaterAccelToSpeed
  1465 				;**************************************************************************************************
  1466 				;
  1467 5B15			.proc AddWaterAccelToSpeed
  1468
  1469 5B15 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1470 5B17 18					clc
  1471 5B18 65 C6				adc m_playerWaterAccelY_L1
  1472 5B1A 85 BE				sta m_playerSpeedY_L1
  1473 5B1C A5 BD				lda m_playerSpeedY_H1
  1474 5B1E 65 C5				adc m_playerWaterAccelY_H1
  1475 5B20 85 BD				sta m_playerSpeedY_H1
  1476
  1477
  1478 5B22 C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1479 5B24 90 10				bcc AWATS_exit							; lower than max speed
  1480 5B26 D0 06				bne AWATS_max_speed						; greater than max speed
  1481
  1482 					
  1483 5B28 A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1484 5B2A C5 BE				cmp m_playerSpeedY_L1
  1485 5B2C B0 08				bcs AWATS_exit							; lower or equal to max speed
  1486
  1487 				;************************************************
  1488 				;
  1489 5B2E			AWATS_max_speed			
  1490
  1491 5B2E A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1492 5B30 85 BD				sta m_playerSpeedY_H1
  1493 5B32 A5 C8				lda m_playerMaxWaterSpeedY_L1
  1494 5B34 85 BE				sta m_playerSpeedY_L1
  1495
  1496 				;************************************************
  1497 				;
  1498 5B36			AWATS_exit
  1499 5B36 60					rts
  1500 					
  1501 				.endp	
  1502 				;
  1503 				;**************************************************************************************************
  1504 				; SubstractWaterAccelToSpeed
  1505 				;**************************************************************************************************
  1506 				;
  1507 5B37			.proc SubstractWaterAccelToSpeed
  1508
  1509 5B37 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1510 5B39 38					sec
  1511 5B3A E5 C6				sbc m_playerWaterAccelY_L1
  1512 5B3C 85 BE				sta m_playerSpeedY_L1
  1513 5B3E A5 BD				lda m_playerSpeedY_H1
  1514 5B40 E5 C5				sbc m_playerWaterAccelY_H1
  1515 5B42 B0 04				bcs SWATS_dont_reset_speed
  1516
  1517 				;************************************************
  1518 				;
  1519 5B44			SWATS_reset_speed
  1520 5B44 A9 00				lda #0
  1521 5B46 85 BE				sta m_playerSpeedY_L1
  1522
  1523 				;************************************************
  1524 				;
  1525 5B48			SWATS_dont_reset_speed
  1526 5B48 85 BD				sta m_playerSpeedY_H1
  1527
  1528 5B4A 60					rts
  1529 						
  1530 				.endp		
  1531 				;
  1532 				;**************************************************************************************************
  1533 				; AddWaterMoveUpAccelToSpeed
  1534 				;**************************************************************************************************
  1535 				;
  1536 5B4B			.proc AddWaterMoveUpAccelToSpeed
  1537
  1538 5B4B A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1539 5B4D 18					clc
  1540 5B4E 65 C6				adc m_playerWaterAccelY_L1
  1541 5B50 85 BE				sta m_playerSpeedY_L1
  1542 5B52 A5 BD				lda m_playerSpeedY_H1
  1543 5B54 65 C5				adc m_playerWaterAccelY_H1
  1544 5B56 85 BD				sta m_playerSpeedY_H1
  1545
  1546 5B58 C5 C9				cmp m_playerMoveWaterSpeedY_H1			; check max frame speed
  1547 5B5A 90 10				bcc AWMUATS_exit						; lower than max speed
  1548 5B5C D0 06				bne AWMUATS_max_speed					; greater than max speed
  1549
  1550 5B5E A5 CA				lda m_playerMoveWaterSpeedY_L1			; need to check the low byte
  1551 5B60 C5 BE				cmp m_playerSpeedY_L1
  1552 5B62 B0 08				bcs AWMUATS_exit						; lower or equal to max speed
  1553
  1554 				;************************************************
  1555 				;
  1556 5B64			AWMUATS_max_speed								; is higher than the max speed
  1557 						
  1558 5B64 A5 C9				lda m_playerMoveWaterSpeedY_H1
  1559 5B66 85 BD				sta m_playerSpeedY_H1
  1560 5B68 A5 CA				lda m_playerMoveWaterSpeedY_L1
  1561 5B6A 85 BE				sta m_playerSpeedY_L1
  1562
  1563 				;************************************************
  1564 				;
  1565 5B6C			AWMUATS_exit
  1566 5B6C 60					rts
  1567
  1568 				.endp	
  1569 				;
  1570 				;**************************************************************************************************
  1571 				; AddWaterMoveDownAccelToSpeed
  1572 				;**************************************************************************************************
  1573 				;
  1574 5B6D			.proc AddWaterMoveDownAccelToSpeed
  1575
  1576 5B6D A5 C7				lda m_playerMaxWaterSpeedY_H1			; check max frame speed
  1577 5B6F C5 BD				cmp m_playerSpeedY_H1
  1578 5B71 90 29				bcc AWMAATS_exit						; greater than max speed, exit
  1579 5B73 D0 06				bne AWMAATS_add							; lower than the max, continue with the add
  1580
  1581 5B75 A5 BE				lda m_playerSpeedY_L1					; need to check the low byte
  1582 5B77 C5 C8				cmp m_playerMaxWaterSpeedY_L1
  1583 5B79 B0 21				bcs AWMAATS_exit						; greater or equal to max speed, exit
  1584
  1585 				;************************************************
  1586 				;
  1587 5B7B			AWMAATS_add
  1588
  1589 5B7B A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1590 5B7D 18					clc
  1591 5B7E 65 C6				adc m_playerWaterAccelY_L1
  1592 5B80 85 BE				sta m_playerSpeedY_L1
  1593 5B82 A5 BD				lda m_playerSpeedY_H1
  1594 5B84 65 C5				adc m_playerWaterAccelY_H1
  1595 5B86 85 BD				sta m_playerSpeedY_H1
  1596
  1597 5B88 C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1598 5B8A 90 10				bcc AWMAATS_exit						; lower than max speed
  1599 5B8C D0 06				bne AWMAATS_max_speed					; greater than max speed
  1600
  1601 5B8E A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1602 5B90 C5 BE				cmp m_playerSpeedY_L1
  1603 5B92 B0 08				bcs AWMAATS_exit						; lower or equal to max speed
  1604
  1605 				;************************************************
  1606 				;
  1607 5B94			AWMAATS_max_speed			
  1608 5B94 A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1609 5B96 85 BD				sta m_playerSpeedY_H1
  1610 5B98 A5 C8				lda m_playerMaxWaterSpeedY_L1
  1611 5B9A 85 BE				sta m_playerSpeedY_L1
  1612
  1613 				;************************************************
  1614 				;
  1615 5B9C			AWMAATS_exit
  1616 						
  1617 5B9C 60					rts
  1618 					
  1619 				.endp	
  1620 				;
  1621 				;**************************************************************************************************
  1622 				; CheckPlayerBottomDownPos
  1623 				;**************************************************************************************************
  1624 				;
  1625 5B9D			.proc CheckPlayerBottomDownPos
  1626
  1627 5B9D A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1628 5B9F 8D 67 32				sta m_charBuffer_H2
  1629
  1630 5BA2 A5 AB				lda m_playerLevelBottomY_H1
  1631 5BA4 18					clc
  1632 5BA5 6D 6C 32				adc m_bottomPosOffsetY
  1633 5BA8 90 03				bcc CPBDP_offset_no_carry
  1634 5BAA EE 67 32				inc m_charBuffer_H2
  1635
  1636 				;************************************************
  1637 				;
  1638 5BAD			CPBDP_offset_no_carry
  1639 5BAD 4E 67 32				lsr m_charBuffer_H2						; /2
  1640 5BB0 6A					ror
  1641 5BB1 4E 67 32				lsr m_charBuffer_H2						; /4
  1642 5BB4 6A					ror
  1643 5BB5 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1644 5BB8 6A					ror
  1645
  1646 5BB9 AA					tax
  1647 5BBA BD 76 32				lda TabLevelLineAddressLSB,x
  1648 5BBD 85 E9				sta m_ptrLevelLine
  1649 						
  1650 5BBF BD 76 33				lda TabLevelLineAddressMSB,x
  1651 5BC2 85 EA				sta m_ptrLevelLine+1
  1652 					
  1653 5BC4 A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1654 5BC6 8D 67 32				sta m_charBuffer_H2
  1655
  1656 5BC9 A5 A2				lda m_playerLevelLeftX_H1
  1657 5BCB 18					clc
  1658 5BCC 6D 6B 32				adc m_bottomPosOffsetX
  1659 5BCF 90 03				bcc CPBDP_no_carry
  1660 5BD1 EE 67 32				inc m_charBuffer_H2
  1661 					
  1662 				;************************************************
  1663 				;
  1664 5BD4			CPBDP_no_carry
  1665
  1666 5BD4 4E 67 32				lsr m_charBuffer_H2						; /2
  1667 5BD7 6A					ror
  1668 5BD8 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1669 5BDB 6A					ror
  1670
  1671 5BDC A8					tay
  1672 5BDD 8C 6E 32				sty m_middleBottomCharPosX
  1673 5BE0 B1 E9				lda (m_ptrLevelLine),y
  1674 5BE2 AA					tax
  1675 5BE3 BD 76 34				lda TabCharDefinition,x
  1676 5BE6 8D 6A 32				sta m_middleBottomChar
  1677
  1678 5BE9 60					rts
  1679 					
  1680 				.endp	
  1681 				;
  1682 				;**************************************************************************************************
  1683 				; CheckPlayerBottomUpPos
  1684 				;**************************************************************************************************
  1685 				;
  1686 5BEA			.proc CheckPlayerBottomUpPos
  1687
  1688 5BEA A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1689 5BEC 8D 67 32				sta m_charBuffer_H2
  1690
  1691 5BEF A5 AB				lda m_playerLevelBottomY_H1
  1692 5BF1 38					sec
  1693 5BF2 ED 6C 32				sbc m_bottomPosOffsetY
  1694 5BF5 B0 03				bcs CPBUP_offset_no_carry
  1695 5BF7 CE 67 32				dec m_charBuffer_H2
  1696
  1697 				;************************************************
  1698 				;
  1699 5BFA			CPBUP_offset_no_carry
  1700
  1701 5BFA 4E 67 32				lsr m_charBuffer_H2						; /2
  1702 5BFD 6A					ror
  1703 5BFE 4E 67 32				lsr m_charBuffer_H2						; /4
  1704 5C01 6A					ror
  1705 5C02 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1706 5C05 6A					ror
  1707
  1708 5C06 AA					tax
  1709 5C07 BD 76 32				lda TabLevelLineAddressLSB,x
  1710 5C0A 85 E9				sta m_ptrLevelLine
  1711 					
  1712 5C0C BD 76 33				lda TabLevelLineAddressMSB,x
  1713 5C0F 85 EA				sta m_ptrLevelLine+1
  1714
  1715 5C11 A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1716 5C13 8D 67 32				sta m_charBuffer_H2
  1717
  1718 5C16 A5 A2				lda m_playerLevelLeftX_H1
  1719 5C18 18					clc
  1720 5C19 6D 6B 32				adc m_bottomPosOffsetX
  1721 5C1C 90 03				bcc CPBUP_no_carry
  1722 5C1E EE 67 32				inc m_charBuffer_H2
  1723
  1724 				;************************************************
  1725 				;
  1726 5C21			CPBUP_no_carry
  1727
  1728 5C21 4E 67 32				lsr m_charBuffer_H2						; /2
  1729 5C24 6A					ror
  1730 5C25 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1731 5C28 6A					ror
  1732
  1733 5C29 A8					tay
  1734 5C2A 8C 6E 32				sty m_middleBottomCharPosX
  1735 5C2D B1 E9				lda (m_ptrLevelLine),y
  1736 5C2F AA					tax
  1737 5C30 BD 76 34				lda TabCharDefinition,x
  1738 5C33 8D 6A 32				sta m_middleBottomChar
  1739
  1740 5C36 60					rts
  1741
  1742 				.endp	
   326 5C37					icl "MissileSystem.Asm"	
Source: E:\_8BitProjects\Series\Scroller\MissileSystem.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		MissileSystem.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Missle Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 00FC			CLEAR_MASK_M0 				= %11111100
    18 = 00F3			CLEAR_MASK_M1 				= %11110011
    19 = 00CF			CLEAR_MASK_M2 				= %11001111
    20 = 003F			CLEAR_MASK_M3 				= %00111111
    21
    22 = 0003			SET_MASK_M0 				= %00000011
    23 = 000C			SET_MASK_M1 				= %00001100
    24 = 0030			SET_MASK_M2 				= %00110000
    25 = 00C0			SET_MASK_M3 				= %11000000
    26
    27 = 0002			SET_MASK_M0_R_L1 			= %00000010
    28 = 0001			SET_MASK_M0_R_L2 			= %00000001
    29 = 0002			SET_MASK_M0_R_L3 			= %00000010
    30 = 0001			SET_MASK_M0_L_L1 			= %00000001
    31 = 0002			SET_MASK_M0_L_L2 			= %00000010
    32 = 0001			SET_MASK_M0_L_L3 			= %00000001
    33
    34 = 0008			SET_MASK_M1_R_L1 			= %00001000
    35 = 0004			SET_MASK_M1_R_L2 			= %00000100
    36 = 0008			SET_MASK_M1_R_L3 			= %00001000
    37 = 0004			SET_MASK_M1_L_L1 			= %00000100
    38 = 0008			SET_MASK_M1_L_L2 			= %00001000
    39 = 0004			SET_MASK_M1_L_L3 			= %00000100
    40
    41 = 0020			SET_MASK_M2_R_L1 			= %00100000
    42 = 0010			SET_MASK_M2_R_L2 			= %00010000
    43 = 0020			SET_MASK_M2_R_L3 			= %00100000
    44 = 0010			SET_MASK_M2_L_L1 			= %00010000
    45 = 0020			SET_MASK_M2_L_L2 			= %00100000
    46 = 0010			SET_MASK_M2_L_L3 			= %00010000
    47
    48 = 0080			SET_MASK_M3_R_L1 			= %10000000
    49 = 0040			SET_MASK_M3_R_L2 			= %01000000
    50 = 0080			SET_MASK_M3_R_L3 			= %10000000
    51 = 0040			SET_MASK_M3_L_L1 			= %01000000
    52 = 0080			SET_MASK_M3_L_L2 			= %10000000
    53 = 0040			SET_MASK_M3_L_L3 			= %01000000
    54
    55 5C37			TabClearMissileMask
    56 5C37 FC F3 CF 3F			.byte CLEAR_MASK_M0, CLEAR_MASK_M1, CLEAR_MASK_M2, CLEAR_MASK_M3
    57
    58 5C3B			TabSetMissileToRightMaskL1
    59 5C3B 02 08 20 80			.byte SET_MASK_M0_R_L1, SET_MASK_M1_R_L1, SET_MASK_M2_R_L1, SET_MASK_M3_R_L1
    60
    61 5C3F			TabSetMissileToRightMaskL2
    62 5C3F 01 04 10 40			.byte SET_MASK_M0_R_L2, SET_MASK_M1_R_L2, SET_MASK_M2_R_L2, SET_MASK_M3_R_L2
    63
    64 5C43			TabSetMissileToRightMaskL3
    65 5C43 02 08 20 80			.byte SET_MASK_M0_R_L3, SET_MASK_M1_R_L3, SET_MASK_M2_R_L3, SET_MASK_M3_R_L3
    66
    67 5C47			TabSetMissileToLeftMaskL1
    68 5C47 01 04 10 40			.byte SET_MASK_M0_L_L1, SET_MASK_M1_L_L1, SET_MASK_M2_L_L1, SET_MASK_M3_L_L1
    69
    70 5C4B			TabSetMissileToLeftMaskL2
    71 5C4B 02 08 20 80			.byte SET_MASK_M0_L_L2, SET_MASK_M1_L_L2, SET_MASK_M2_L_L2, SET_MASK_M3_L_L2
    72
    73 5C4F			TabSetMissileToLeftMaskL3
    74 5C4F 01 04 10 40			.byte SET_MASK_M0_L_L3, SET_MASK_M1_L_L3, SET_MASK_M2_L_L3, SET_MASK_M3_L_L3
    75
    76 5C53			TabDrawMissileMethodLSB
    77 5C53 02 1E 3B 78			.byte <DrawMissileM0, <DrawMissileM1, <DrawMissileM2, <DrawMissileM3
    78
    79 5C57			TabDrawMissileMethodMSB
    80 5C57 5F 5F 5F 5F			.byte >DrawMissileM0, >DrawMissileM1, >DrawMissileM2, >DrawMissileM3
    81
    82 				; virtual missiles tables
    83 = 0004			MAX_VIRTUAL_MISSILES = 4
    84
    85 5C5B 00			m_currentVirtualMissiles .byte 0
    86
    87 5C5C 00 00 00 00		TabMissileScreenLeftX			:MAX_VIRTUAL_MISSILES .byte 0
    88
    89 5C60 00 00 00 00		TabMissileScreenTopY			:MAX_VIRTUAL_MISSILES .byte 0
    90
    91 5C64 00 00 00 00		TabOldMissileScreenLeftX		:MAX_VIRTUAL_MISSILES .byte 0
    92
    93 5C68 00 00 00 00		TabOldMissileScreenTopY			:MAX_VIRTUAL_MISSILES .byte 0
    94
    95 5C6C 00 00 00 00		TabMissileLevelLeftX_H2			:MAX_VIRTUAL_MISSILES .byte 0
    96
    97 5C70 00 00 00 00		TabMissileLevelLeftX_H1			:MAX_VIRTUAL_MISSILES .byte 0
    98
    99 5C74 00 00 00 00		TabMissileLevelLeftX_L1			:MAX_VIRTUAL_MISSILES .byte 0
   100
   101 5C78 00 00 00 00		TabMissileLevelTopY_H2			:MAX_VIRTUAL_MISSILES .byte 0
   102
   103 5C7C 00 00 00 00		TabMissileLevelTopY_H1			:MAX_VIRTUAL_MISSILES .byte 0
   104
   105 5C80 00 00 00 00		TabMissileLevelTopY_L1			:MAX_VIRTUAL_MISSILES .byte 0
   106
   107 5C84 00 00 00 00		TabMissileSpeedX_H1				:MAX_VIRTUAL_MISSILES .byte 0
   108
   109 5C88 00 00 00 00		TabMissileSpeedX_L1				:MAX_VIRTUAL_MISSILES .byte 0
   110
   111 5C8C 00 00 00 00		TabMissileDirection				:MAX_VIRTUAL_MISSILES .byte 0
   112
   113 5C90 00 00 00 00		TabMissileFrameCounter_H2		:MAX_VIRTUAL_MISSILES .byte 0
   114
   115 5C94 00 00 00 00		TabMissileFrameCounter_H1		:MAX_VIRTUAL_MISSILES .byte 0
   116
   117 5C98 00 00 00 00		TabMissileOwner					:MAX_VIRTUAL_MISSILES .byte 0
   118
   119 				;
   120 				;**************************************************************************************************
   121 				; CheckCreatePlayerMissile
   122 				;**************************************************************************************************
   123 				;
   124 5C9C			.proc CheckCreatePlayerMissile
   125
   126 5C9C A5 E1				lda m_triggerState
   127 5C9E C9 02				cmp #2									; check just pressed
   128 5CA0 D0 4D				bne CCPM_exit
   129 5CA2 20 74 5D				jsr GetFreeMissileIndex
   130 						
   131 5CA5 E0 02				cpx #2									; only use index 0 and 1 for the player missiles
   132 5CA7 B0 46				bcs CCPM_exit
   133 					
   134 5CA9 A9 02				lda #>[PLAYER_MISSILE_SPEED_X]
   135 5CAB 9D 84 5C				sta TabMissileSpeedX_H1,x
   136 						
   137 5CAE A9 80				lda #<[PLAYER_MISSILE_SPEED_X]
   138 5CB0 9D 88 5C				sta TabMissileSpeedX_L1,x
   139
   140 5CB3 A5 CE				lda m_lastPlayerShootDirection
   141 5CB5 C9 01				cmp #PSD_RIGHT
   142 5CB7 F0 08				beq CCPM_shoot_right
   143 					
   144 				;************************************************
   145 				;
   146 5CB9			CCPM_shoot_left
   147 					
   148 5CB9 A9 02				lda #2
   149 5CBB 9D 8C 5C				sta TabMissileDirection,x
   150 5CBE 4C C6 5C				jmp CCPM_init_position
   151 					
   152 				;************************************************
   153 				;
   154 5CC1			CCPM_shoot_right
   155 					
   156 5CC1 A9 01				lda #1
   157 5CC3 9D 8C 5C				sta TabMissileDirection,x
   158 					
   159 				;************************************************
   160 				;
   161 5CC6			CCPM_init_position
   162 					
   163 5CC6 A5 A2				lda m_playerLevelLeftX_H1
   164 5CC8 9D 70 5C				sta TabMissileLevelLeftX_H1,x
   165 						
   166 5CCB A5 A1				lda m_playerLevelLeftX_H2
   167 5CCD 9D 6C 5C				sta TabMissileLevelLeftX_H2,x
   168 						
   169 5CD0 A5 A8				lda m_playerLevelTopY_H1
   170 5CD2 18					clc
   171 5CD3 69 0C				adc #[PLR_HEIGHT/2]+2
   172 5CD5 9D 7C 5C				sta TabMissileLevelTopY_H1,x
   173 						
   174 5CD8 A5 A7				lda m_playerLevelTopY_H2
   175 5CDA 69 00				adc #0
   176 5CDC 9D 78 5C				sta TabMissileLevelTopY_H2,x
   177
   178 5CDF A9 00				lda #0
   179 5CE1 9D 74 5C				sta TabMissileLevelLeftX_L1,x
   180 5CE4 9D 80 5C				sta TabMissileLevelTopY_L1,x
   181
   182 5CE7 A9 01				lda #1									; player owner
   183 5CE9 9D 98 5C				sta TabMissileOwner,x
   184
   185 5CEC 20 83 5D				jsr CreateMissile						; before this, call GetFreeMissileIndex and then init..
   186 					
   187 				;************************************************
   188 				;
   189 5CEF			CCPM_exit		
   190 5CEF 60					rts
   191 					
   192 				.endp	
   193 				;	
   194 				;**************************************************************************************************
   195 				; CheckCreateEnemyMissile
   196 				;**************************************************************************************************
   197 				;
   198 5CF0			.proc CheckCreateEnemyMissile
   199 					
   200 						; check for a free missile index
   201 5CF0 A2 02				ldx #2
   202 5CF2 BD 98 5C				lda TabMissileOwner,x
   203 5CF5 F0 07				beq CCEM_found_one_free
   204 					
   205 5CF7 A2 03				ldx #3
   206 5CF9 BD 98 5C				lda TabMissileOwner,x
   207 5CFC D0 38				bne CCEM_exit
   208 					
   209 5CFE			CCEM_found_one_free
   210 					
   211 5CFE A9 02				lda #>[ENEMY_MISSILE_SPEED_X]
   212 5D00 9D 84 5C				sta TabMissileSpeedX_H1,x
   213 5D03 A9 00				lda #<[ENEMY_MISSILE_SPEED_X]
   214 5D05 9D 88 5C				sta TabMissileSpeedX_L1,x
   215 					
   216 5D08 AD 43 32				lda m_enemyShootDirection
   217 5D0B 9D 8C 5C				sta TabMissileDirection,x
   218
   219 						; init position
   220 5D0E AD 44 32				lda m_enemyShotLevelLeftX_H1
   221 5D11 9D 70 5C				sta TabMissileLevelLeftX_H1,x
   222 5D14 AD 45 32				lda m_enemyShotLevelLeftX_H2
   223 5D17 9D 6C 5C				sta TabMissileLevelLeftX_H2,x
   224
   225 5D1A AD 46 32				lda m_enemyShotLevelTopY_H1
   226 5D1D 9D 7C 5C				sta TabMissileLevelTopY_H1,x
   227 5D20 AD 47 32				lda m_enemyShotLevelTopY_H2
   228 5D23 9D 78 5C				sta TabMissileLevelTopY_H2,x
   229
   230 5D26 A9 00				lda #0
   231 5D28 9D 74 5C				sta TabMissileLevelLeftX_L1,x
   232 5D2B 9D 80 5C				sta TabMissileLevelTopY_L1,x
   233
   234 5D2E A9 02				lda #2					; enemy owner
   235 5D30 9D 98 5C				sta TabMissileOwner,x
   236
   237 5D33 20 83 5D				jsr CreateMissile
   238
   239 5D36			CCEM_exit
   240
   241 5D36 60					rts
   242
   243 				.endp	
   244
   245 				;
   246 				;**************************************************************************************************
   247 				; InitMissileSystem
   248 				;	
   249 				; 	Right now, the missile system is using a 1-on-1 relationship between
   250 				; 	a virtual missile and a hardware missile, so we have a max of 4 virtual
   251 				; 	missiles. If we want more virtual missiles we can only draw 4 every frame,
   252 				; 	so some of them can lose hardware collisions and they are going to flicker
   253 				;
   254 				;**************************************************************************************************
   255 				;
   256 5D37			.proc InitMissileSystem
   257
   258 5D37 A9 00				lda #0
   259 5D39 8D 5B 5C				sta m_currentVirtualMissiles
   260
   261 5D3C A2 00				ldx #0
   262
   263 5D3E			IMS_loop
   264 5D3E 9D 5C 5C				sta TabMissileScreenLeftX,x
   265 5D41 9D 60 5C				sta TabMissileScreenTopY,x
   266 5D44 9D 64 5C				sta TabOldMissileScreenLeftX,x
   267 5D47 9D 68 5C				sta TabOldMissileScreenTopY,x
   268
   269 5D4A 9D 6C 5C				sta TabMissileLevelLeftX_H2,x
   270 5D4D 9D 70 5C				sta TabMissileLevelLeftX_H1,x
   271 5D50 9D 74 5C				sta TabMissileLevelLeftX_L1,x
   272 5D53 9D 78 5C				sta TabMissileLevelTopY_H2,x
   273 5D56 9D 7C 5C				sta TabMissileLevelTopY_H1,x
   274 5D59 9D 80 5C				sta TabMissileLevelTopY_L1,x
   275
   276 5D5C 9D 84 5C				sta TabMissileSpeedX_H1,x
   277 5D5F 9D 88 5C				sta TabMissileSpeedX_L1,x
   278
   279 5D62 9D 8C 5C				sta TabMissileDirection,x
   280
   281 5D65 9D 90 5C				sta TabMissileFrameCounter_H2,x
   282 5D68 9D 94 5C				sta TabMissileFrameCounter_H1,x
   283
   284 5D6B 9D 98 5C				sta TabMissileOwner,x
   285
   286 5D6E E8					inx
   287 5D6F E0 04				cpx #MAX_VIRTUAL_MISSILES
   288 5D71 D0 CB				bne IMS_loop
   289
   290 5D73 60					rts
   291
   292 				.endp	
   293 					
   294 				;
   295 				;**************************************************************************************************
   296 				; GetFreeMissileIndex
   297 				;**************************************************************************************************
   298 				;
   299 5D74			.proc GetFreeMissileIndex
   300
   301 						; return in X the index of the free virtual missile
   302 5D74 A2 00				ldx #0
   303
   304 5D76			GFMI_loop
   305 					
   306 5D76 BD 98 5C				lda TabMissileOwner,x	; if the owner is 0, the slot is free
   307 5D79 F0 07				beq GFMI_exit
   308
   309 5D7B E8					inx
   310 5D7C E0 04				cpx #MAX_VIRTUAL_MISSILES
   311 5D7E D0 F6				bne GFMI_loop
   312
   313 5D80 A2 FF				ldx #255		; value for: "there is no free index"
   314
   315 5D82			GFMI_exit
   316 						
   317 5D82 60					rts
   318
   319 				.endp	
   320 					
   321 				;	
   322 				;**************************************************************************************************
   323 				; CreateMissile
   324 				;
   325 				; 	before this, call GetFreeMissileIndex and then init:
   326 				; 	TabMissileLevelLeftX_H2/H1/L1, TabMissileLevelTopY_H2/H1/L1,
   327 				; 	TabMissileSpeedX_H1/L1 (negative if going to the left)
   328 				; 	and TabMissileOwner (different than 0)
   329 				;
   330 				;**************************************************************************************************
   331 				;
   332 5D83			.proc CreateMissile
   333 					
   334 5D83 A9 00				lda #0
   335 5D85 9D 90 5C				sta TabMissileFrameCounter_H2,x
   336 5D88 9D 94 5C				sta TabMissileFrameCounter_H1,x
   337 5D8B 20 9D 5E				jsr SetMissileScreenPos
   338
   339 						; maybe should check screen position before creating the missile
   340 5D8E 20 F5 5E				jsr DrawMissileMX
   341 5D91 EE 5B 5C				inc m_currentVirtualMissiles
   342
   343 5D94 60					rts
   344
   345 				.endp
   346 						
   347 				;	
   348 				;**************************************************************************************************
   349 				; UpdateMissileSystem
   350 				;
   351 				; 	should call this every frame, before calling CreateMissile in that frame (?)
   352 				;
   353 				;**************************************************************************************************
   354 				;
   355 5D95			.proc UpdateMissileSystem
   356
   357 						; should call this every frame, before calling CreateMissile in that frame (?)
   358 5D95 A2 00				ldx #0
   359
   360 5D97			UMS_loop
   361 5D97 BD 98 5C				lda TabMissileOwner,x					; if the owner is 0, the slot is free
   362 5D9A D0 03				bne UMS_update
   363 5D9C 4C 94 5E				jmp UMS_next
   364
   365 				;*****	update frame counter (life time)
   366 				;
   367 5D9F			UMS_update
   368 						
   369 5D9F FE 94 5C				inc TabMissileFrameCounter_H1,x
   370 5DA2 D0 03				bne UMS_check_collision
   371 5DA4 FE 90 5C				inc TabMissileFrameCounter_H2,x
   372
   373 				;*****	check if we need to destroy the missile by a hardware collision
   374 				;
   375 5DA7			UMS_check_collision
   376
   377 5DA7 20 1F 60				jsr GetPlayerMissileFrontChar
   378 5DAA BD 98 5C				lda TabMissileOwner,x
   379 5DAD C9 01				cmp #1
   380 5DAF F0 0C				beq UMS_player_owner
   381
   382 				;*****	the collision check is a lot simpler for enemies
   383 				;
   384 5DB1			UMS_enemy_owner			
   385 					
   386 5DB1 AD 55 32				lda m_charDef
   387 5DB4 29 0F				and #15
   388 5DB6 C9 01				cmp #CT_BLOCK
   389 5DB8 D0 5A				bne UMS_update_position
   390 5DBA 4C 70 5E				jmp UMS_destroy
   391 					
   392 5DBD			UMS_player_owner
   393 					
   394 5DBD AD 55 32				lda m_charDef
   395 5DC0 29 0F				and #15
   396
   397 5DC2			UMS_check_block
   398 					
   399 5DC2 C9 01				cmp #CT_BLOCK
   400 5DC4 D0 05				bne UMS_check_danger
   401 5DC6 A9 04				lda #4									; gray color
   402 5DC8 4C 0E 5E				jmp TEST_B1
   403
   404 5DCB			UMS_check_danger
   405
   406 5DCB C9 03				cmp #CT_DANGER
   407 5DCD D0 45				bne UMS_update_position
   408
   409 				;*****	check for a disabed vertical laser
   410 				;
   411 5DCF			UMS_check_vlaser
   412
   413 5DCF AD 54 32				lda m_charRaw
   414 5DD2 C9 90				cmp #[128+16]		; danger plus vertical laser char index
   415 5DD4 D0 0A				bne UMS_check_enemy1_left
   416 					
   417 5DD6 AD 21 32				lda m_animLaserCurrentFrame
   418 5DD9 C9 3C				cmp #VLASER_DISABLED_INDEX				; disabled state index
   419 5DDB F0 37				beq UMS_update_position
   420 5DDD 4C 0C 5E				jmp UMS_danger
   421
   422 				;*****	danger plus enemy 1 left char index
   423 				;
   424 5DE0			UMS_check_enemy1_left
   425
   426 5DE0 C9 C0				cmp #[128+64]		
   427 5DE2 D0 12				bne UMS_check_enemy1_right
   428 					
   429 5DE4 AD 50 32				lda m_charPositionX
   430 5DE7 8D 36 32				sta m_enemyCharPosX
   431 5DEA AD 51 32				lda m_charPositionY
   432 5DED 8D 37 32				sta m_enemyCharPosY
   433 					
   434 5DF0 20 D7 68				jsr HitEnemy
   435 					
   436 5DF3 4C 0C 5E				jmp UMS_danger
   437 					
   438 				;*****	danger plus enemy 1 right char index
   439 				;	
   440 5DF6			UMS_check_enemy1_right
   441 					
   442 5DF6 C9 C1				cmp #[128+65]		
   443 5DF8 D0 12				bne UMS_danger
   444 					
   445 5DFA AD 50 32				lda m_charPositionX
   446 5DFD 8D 36 32				sta m_enemyCharPosX
   447 5E00 CE 36 32				dec m_enemyCharPosX
   448 5E03 AD 51 32				lda m_charPositionY
   449 5E06 8D 37 32				sta m_enemyCharPosY
   450 					
   451 5E09 20 D7 68				jsr HitEnemy	
   452 						
   453 5E0C			UMS_danger
   454 				.if PAL_VERSION = 0
   455 5E0C A9 24				lda #[32+4]		; red color, change for pal
   456 				.else
   457 						lda #[16+4]
   458 				.endif
   459
   460 5E0E			TEST_B1
   461 5E0E 8D 58 32				sta m_playerBaseColor
   462 5E11 4C 70 5E				jmp UMS_destroy
   463
   464 				;*****	update position using the missile speed
   465 				;
   466 5E14			UMS_update_position
   467 					
   468 5E14 BD 8C 5C				lda TabMissileDirection,x
   469 5E17 C9 01				cmp #1
   470 5E19 D0 21				bne UMS_move_left
   471
   472 5E1B			UMS_move_right
   473
   474 5E1B BD 74 5C				lda TabMissileLevelLeftX_L1,x
   475 5E1E 18					clc
   476 5E1F 7D 88 5C				adc TabMissileSpeedX_L1,x
   477 5E22 9D 74 5C				sta TabMissileLevelLeftX_L1,x
   478
   479 5E25 BD 70 5C				lda TabMissileLevelLeftX_H1,x
   480 5E28 7D 84 5C				adc TabMissileSpeedX_H1,x
   481 5E2B 9D 70 5C				sta TabMissileLevelLeftX_H1,x
   482
   483 5E2E BD 6C 5C				lda TabMissileLevelLeftX_H2,x
   484 5E31 69 00				adc #0
   485 5E33 9D 6C 5C				sta TabMissileLevelLeftX_H2,x
   486
   487 5E36 20 9D 5E				jsr SetMissileScreenPos
   488
   489 5E39 4C 5A 5E				jmp UMS_check_screen_limits
   490
   491 5E3C			UMS_move_left
   492 					
   493 5E3C BD 74 5C				lda TabMissileLevelLeftX_L1,x
   494 5E3F 38					sec
   495 5E40 FD 88 5C				sbc TabMissileSpeedX_L1,x
   496 5E43 9D 74 5C				sta TabMissileLevelLeftX_L1,x
   497
   498 5E46 BD 70 5C				lda TabMissileLevelLeftX_H1,x
   499 5E49 FD 84 5C				sbc TabMissileSpeedX_H1,x
   500 5E4C 9D 70 5C				sta TabMissileLevelLeftX_H1,x
   501
   502 5E4F BD 6C 5C				lda TabMissileLevelLeftX_H2,x
   503 5E52 E9 00				sbc #0
   504 5E54 9D 6C 5C				sta TabMissileLevelLeftX_H2,x
   505
   506 5E57 20 9D 5E				jsr SetMissileScreenPos
   507
   508 				;*****	check outside screen position, to destroy the missile
   509 				;
   510 5E5A			UMS_check_screen_limits
   511 					
   512 5E5A BD 5C 5C				lda TabMissileScreenLeftX,x
   513 5E5D C9 30				cmp #[PM_BASE_SCREEN_X]					; screen left limit
   514 5E5F 90 0F				bcc UMS_destroy
   515 5E61 C9 CD				cmp #[PM_BASE_SCREEN_X+160-3]			; screen right limit (minus width of the missile)
   516 5E63 B0 0B				bcs UMS_destroy
   517
   518 5E65 BD 60 5C				lda TabMissileScreenTopY,x
   519 5E68 C9 20				cmp #[PM_BASE_SCREEN_Y]					; screen top limit
   520 5E6A 90 04				bcc UMS_destroy
   521 5E6C C9 DE				cmp #[PM_BASE_SCREEN_Y+192-2]			; screen bottom limit (minus height of the missile)
   522 					
   523 5E6E 90 21				bcc UMS_draw
   524
   525 5E70			UMS_destroy
   526 					
   527 5E70 BD 98 5C				lda TabMissileOwner,x
   528 5E73 C9 02				cmp #2
   529 5E75 D0 03				bne UMS_not_from_enemy
   530 5E77 CE 42 32				dec m_enemyMissilesActive
   531 					
   532 5E7A			UMS_not_from_enemy
   533 						
   534 5E7A A9 00				lda #0
   535 5E7C 9D 98 5C				sta TabMissileOwner,x
   536
   537 5E7F BC 68 5C				ldy TabOldMissileScreenTopY,x
   538 5E82 20 ED 5F				jsr ClearMissileLines
   539
   540 5E85 BC 60 5C				ldy TabMissileScreenTopY,x
   541 5E88 20 ED 5F				jsr ClearMissileLines
   542
   543 5E8B CE 5B 5C				dec m_currentVirtualMissiles
   544
   545 5E8E 4C 94 5E				jmp UMS_next
   546
   547
   548 				;*****	draw the missile
   549 				;
   550 5E91			UMS_draw
   551 						
   552 5E91 20 F5 5E				jsr DrawMissileMX
   553
   554 5E94			UMS_next
   555 						
   556 5E94 E8					inx
   557 5E95 E0 04				cpx #MAX_VIRTUAL_MISSILES
   558 5E97 F0 03				beq UMS_exit
   559 5E99 4C 97 5D				jmp UMS_loop
   560
   561 5E9C			UMS_exit
   562 						
   563 5E9C 60					rts
   564
   565 				.endp
   566
   567 				;
   568 				;**************************************************************************************************
   569 				; SetMissileScreenPos
   570 				;
   571 				; 	use X as a parameter (the index of the virtual missile)
   572 				;
   573 				;**************************************************************************************************
   574 				;
   575 5E9D			.proc SetMissileScreenPos
   576 					
   577 						; save old screen pos
   578 5E9D BD 5C 5C				lda TabMissileScreenLeftX,x
   579 5EA0 9D 64 5C				sta TabOldMissileScreenLeftX,x
   580 5EA3 BD 60 5C				lda TabMissileScreenTopY,x
   581 5EA6 9D 68 5C				sta TabOldMissileScreenTopY,x
   582
   583 						; get new screen pos
   584 						; this must use the "_H2" positions 
   585 						; for when the delta between the missile 
   586 						; and the camera is too big (64 chars in X, or 32 chars in Y)
   587 						;
   588 5EA9 BD 70 5C				lda TabMissileLevelLeftX_H1,x
   589 5EAC 38					sec
   590 5EAD E5 DB				sbc m_levelWindowX_H1
   591 5EAF 8D 57 32				sta m_screenDelta_H1
   592 5EB2 BD 6C 5C				lda TabMissileLevelLeftX_H2,x
   593 5EB5 E5 DA				sbc m_levelWindowX_H2
   594 5EB7 90 33				bcc SMSP_set_outside					; this is not totally correct, because it doesn't use the width of the missile
   595 5EB9 8D 56 32				sta m_screenDelta_H2					; (but if we do it correctly we should clip the missile graphics)
   596
   597 5EBC D0 2E				bne SMSP_set_outside					; could remove the bcc and only use this..
   598 5EBE AD 57 32				lda m_screenDelta_H1
   599 5EC1 C9 9F				cmp #[160-1]							; 40 chars x 4 pixels, minus (missile width - 1)
   600 5EC3 B0 27				bcs SMSP_set_outside
   601 					
   602 5EC5 69 30				adc #PM_BASE_SCREEN_X
   603 5EC7 9D 5C 5C				sta TabMissileScreenLeftX,x	
   604
   605 5ECA BD 7C 5C				lda TabMissileLevelTopY_H1,x
   606 5ECD 38					sec
   607 5ECE E5 DD				sbc m_levelWindowY_H1
   608 5ED0 8D 57 32				sta m_screenDelta_H1
   609 5ED3 BD 78 5C				lda TabMissileLevelTopY_H2,x
   610 5ED6 E5 DC				sbc m_levelWindowY_H2
   611 5ED8 90 12				bcc SMSP_set_outside					; this is not totally correct, because it doesn't use the height of the missile
   612 5EDA 8D 56 32				sta m_screenDelta_H2					; (but if we do it correctly we should clip the missile graphics)
   613
   614 5EDD D0 0D				bne SMSP_set_outside					; could remove the bcc and only use this..
   615 5EDF AD 57 32				lda m_screenDelta_H1
   616 5EE2 C9 BF				cmp #[193-2]							; 24 chars x 8 scan lines, plus one extra scan line, minus (missile height - 1)
   617 5EE4 B0 06				bcs SMSP_set_outside
   618 					
   619 5EE6 69 20				adc #PM_BASE_SCREEN_Y
   620 5EE8 9D 60 5C				sta TabMissileScreenTopY,x
   621
   622 5EEB 60					rts
   623 					
   624 						; if outside the visible range in X or Y, 
   625 						; just set it out of the screen (for a p/m 
   626 						; the screen coordinate 0 is outside the visible range)
   627 						;
   628 5EEC			SMSP_set_outside
   629 					
   630 5EEC A9 00				lda #0
   631 5EEE 9D 5C 5C				sta TabMissileScreenLeftX,x
   632 5EF1 9D 60 5C				sta TabMissileScreenTopY,x
   633 					
   634 5EF4 60					rts
   635 						
   636 				.endp	
   637 				;
   638 				;**************************************************************************************************
   639 				; DrawMissileMX
   640 				;
   641 				; 	draw missiles, use X as a parameter (the index of the virtual missile)
   642 				;
   643 				;**************************************************************************************************
   644 				;
   645 5EF5			DrawMissileMX
   646 5EF5 BD 53 5C			lda TabDrawMissileMethodLSB,x
   647 5EF8 85 EB			sta m_pageZeroTempPointer
   648 5EFA BD 57 5C			lda TabDrawMissileMethodMSB,x
   649 5EFD 85 EC			sta m_pageZeroTempPointer+1
   650
   651 5EFF 6C EB 00			jmp (m_pageZeroTempPointer)
   652 					
   653 				;
   654 				;**************************************************************************************************
   655 				; DrawMissileM0
   656 				;**************************************************************************************************
   657 				;
   658 5F02			DrawMissileM0
   659 5F02 BD 5C 5C			lda TabMissileScreenLeftX,x
   660 5F05 8D 04 D0			sta HPOSM0
   661
   662 					; clear old position first
   663 5F08 BC 68 5C			ldy TabOldMissileScreenTopY,x
   664
   665 5F0B 20 ED 5F			jsr ClearMissileLines
   666
   667 					; draw shape in new position
   668 5F0E BC 60 5C			ldy TabMissileScreenTopY,x
   669
   670 5F11 BD 8C 5C			lda TabMissileDirection,x
   671 5F14 C9 01			cmp #1
   672 5F16 D0 03			bne DMM0_left
   673
   674 5F18 4C B5 5F			jmp SetMissileToRightLines
   675 				;
   676 				;**************************************************************************************************
   677 				; DMM0_left
   678 				;**************************************************************************************************
   679 				;
   680 5F1B			DMM0_left
   681 5F1B 4C D1 5F			jmp SetMissileToLeftLines
   682 				;
   683 				;**************************************************************************************************
   684 				; DrawMissileM1
   685 				;**************************************************************************************************
   686 				;
   687 5F1E			DrawMissileM1
   688 5F1E BD 5C 5C			lda TabMissileScreenLeftX,x
   689 5F21 8D 05 D0			sta HPOSM1
   690 					; clear old position first
   691 5F24 BC 68 5C			ldy TabOldMissileScreenTopY,x
   692 5F27 20 ED 5F			jsr ClearMissileLines
   693
   694 					; draw shape in new position
   695 5F2A BC 60 5C			ldy TabMissileScreenTopY,x
   696
   697 5F2D BD 8C 5C			lda TabMissileDirection,x
   698 5F30 C9 01			cmp #1
   699 5F32 D0 03			bne DMM1_left
   700
   701 5F34 4C B5 5F			jmp SetMissileToRightLines
   702 				;
   703 				;**************************************************************************************************
   704 				;
   705 5F37			DMM1_left
   706 5F37 4C D1 5F			jmp SetMissileToLeftLines
   707 5F3A 60				rts
   708 				;
   709 				;**************************************************************************************************
   710 				; DrawMissileM2
   711 				;**************************************************************************************************
   712 				;
   713 5F3B			DrawMissileM2
   714 5F3B BD 5C 5C			lda TabMissileScreenLeftX,x
   715 5F3E 8D 06 D0			sta HPOSM2
   716
   717 					; clear old position first
   718 5F41 BC 68 5C			ldy TabOldMissileScreenTopY,x
   719
   720 5F44 B9 00 A3			lda ms_area_1,y
   721 5F47 29 CF			and #CLEAR_MASK_M2
   722 5F49 99 00 A3			sta ms_area_1,y
   723 5F4C B9 01 A3			lda ms_area_1+1,y
   724 5F4F 29 CF			and #CLEAR_MASK_M2
   725 5F51 99 01 A3			sta ms_area_1+1,y
   726 5F54 B9 02 A3			lda ms_area_1+2,y
   727 5F57 29 CF			and #CLEAR_MASK_M2
   728 5F59 99 02 A3			sta ms_area_1+2,y
   729
   730 					; draw shape in new position
   731 5F5C BC 60 5C			ldy TabMissileScreenTopY,x
   732
   733 5F5F B9 00 A3			lda ms_area_1,y
   734 5F62 09 30			ora #SET_MASK_M2
   735 5F64 99 00 A3			sta ms_area_1,y
   736 5F67 B9 01 A3			lda ms_area_1+1,y
   737 5F6A 09 30			ora #SET_MASK_M2
   738 5F6C 99 01 A3			sta ms_area_1+1,y
   739 5F6F B9 02 A3			lda ms_area_1+2,y
   740 5F72 09 30			ora #SET_MASK_M2
   741 5F74 99 02 A3			sta ms_area_1+2,y
   742 5F77 60				rts
   743 				;
   744 				;**************************************************************************************************
   745 				; DrawMissileM3
   746 				;**************************************************************************************************
   747 				;
   748 5F78			DrawMissileM3
   749 5F78 BD 5C 5C			lda TabMissileScreenLeftX,x
   750 5F7B 8D 07 D0			sta HPOSM3
   751
   752 					; clear old position first
   753 5F7E BC 68 5C			ldy TabOldMissileScreenTopY,x
   754
   755 5F81 B9 00 A3			lda ms_area_1,y
   756 5F84 29 3F			and #CLEAR_MASK_M3
   757 5F86 99 00 A3			sta ms_area_1,y
   758 5F89 B9 01 A3			lda ms_area_1+1,y
   759 5F8C 29 3F			and #CLEAR_MASK_M3
   760 5F8E 99 01 A3			sta ms_area_1+1,y
   761 5F91 B9 02 A3			lda ms_area_1+2,y
   762 5F94 29 3F			and #CLEAR_MASK_M3
   763 5F96 99 02 A3			sta ms_area_1+2,y
   764
   765 					; draw shape in new position
   766 5F99 BC 60 5C			ldy TabMissileScreenTopY,x
   767
   768 5F9C B9 00 A3			lda ms_area_1,y
   769 5F9F 09 C0			ora #SET_MASK_M3
   770 5FA1 99 00 A3			sta ms_area_1,y
   771 5FA4 B9 01 A3			lda ms_area_1+1,y
   772 5FA7 09 C0			ora #SET_MASK_M3
   773 5FA9 99 01 A3			sta ms_area_1+1,y
   774 5FAC B9 02 A3			lda ms_area_1+2,y
   775 5FAF 09 C0			ora #SET_MASK_M3
   776 5FB1 99 02 A3			sta ms_area_1+2,y
   777
   778 5FB4 60				rts
   779 				;
   780 				;**************************************************************************************************
   781 				; SetMissileToRightLines
   782 				;**************************************************************************************************
   783 				;
   784 5FB5			SetMissileToRightLines
   785 5FB5 B9 00 A3			lda ms_area_1,y
   786 5FB8 1D 3B 5C			ora TabSetMissileToRightMaskL1,x			; this "x" should be a hardware missile index
   787 5FBB 99 00 A3			sta ms_area_1,y
   788 5FBE B9 01 A3			lda ms_area_1+1,y
   789 5FC1 1D 3F 5C			ora TabSetMissileToRightMaskL2,x			; this "x" should be a hardware missile index
   790 5FC4 99 01 A3			sta ms_area_1+1,y
   791 5FC7 B9 02 A3			lda ms_area_1+2,y
   792 5FCA 1D 43 5C			ora TabSetMissileToRightMaskL3,x			; this "x" should be a hardware missile index
   793 5FCD 99 02 A3			sta ms_area_1+2,y
   794
   795 5FD0 60				rts
   796 				;
   797 				;**************************************************************************************************
   798 				; SetMissileToLeftLines
   799 				;**************************************************************************************************
   800 				;
   801 5FD1			SetMissileToLeftLines
   802 5FD1 B9 00 A3			lda ms_area_1,y
   803 5FD4 1D 47 5C			ora TabSetMissileToLeftMaskL1,x				; this "x" should be a hardware missile index
   804 5FD7 99 00 A3			sta ms_area_1,y
   805 5FDA B9 01 A3			lda ms_area_1+1,y
   806 5FDD 1D 4B 5C			ora TabSetMissileToLeftMaskL2,x				; this "x" should be a hardware missile index
   807 5FE0 99 01 A3			sta ms_area_1+1,y
   808 5FE3 B9 02 A3			lda ms_area_1+2,y
   809 5FE6 1D 4F 5C			ora TabSetMissileToLeftMaskL3,x				; this "x" should be a hardware missile index
   810 5FE9 99 02 A3			sta ms_area_1+2,y
   811 5FEC 60				rts
   812 				;
   813 				;**************************************************************************************************
   814 				; ClearMissileLines
   815 				;**************************************************************************************************
   816 				;
   817 5FED			ClearMissileLines
   818 5FED B9 00 A3			lda ms_area_1,y
   819 5FF0 3D 37 5C			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   820 5FF3 99 00 A3			sta ms_area_1,y
   821 5FF6 B9 01 A3			lda ms_area_1+1,y
   822 5FF9 3D 37 5C			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   823 5FFC 99 01 A3			sta ms_area_1+1,y
   824 5FFF B9 02 A3			lda ms_area_1+2,y
   825 6002 3D 37 5C			and TabClearMissileMask,x					; this "x" should be a hardware missile index
   826 6005 99 02 A3			sta ms_area_1+2,y
   827 6008 60				rts
   828 				;
   829 				;**************************************************************************************************
   830 				; ClearAllMissiles
   831 				;**************************************************************************************************
   832 				;
   833 6009			.proc ClearAllMissiles
   834 					
   835 6009 A2 00				ldx #0
   836 600B A9 00				lda #0
   837
   838 				;************************************************
   839 				;
   840 600D			CAM_loop
   841 600D BC 60 5C				ldy TabMissileScreenTopY,x
   842 6010 99 00 A3				sta ms_area_1,y
   843 6013 99 01 A3				sta ms_area_1+1,y
   844 6016 99 02 A3				sta ms_area_1+2,y
   845
   846 6019 E8					inx
   847 601A E0 04				cpx #MAX_VIRTUAL_MISSILES
   848 601C D0 EF				bne CAM_loop
   849
   850 601E 60					rts
   851 						
   852 				.endp		
   853
   854 				;
   855 				;**************************************************************************************************
   856 				; GetPlayerMissileFrontChar
   857 				;
   858 				; 	use X as a parameter (the index of the virtual missile)
   859 				; 	return in A the character definition value
   860 				;
   861 				;**************************************************************************************************
   862 				;
   863 601F			.proc GetPlayerMissileFrontChar	
   864
   865 601F BD 8C 5C				lda TabMissileDirection,x				; get front point char column
   866 6022 C9 01				cmp #1
   867 6024 D0 14				bne GMFC_left
   868
   869 				;*****	Right
   870 				;
   871 6026			GMFC_right										; moving to the right, use right side pixel
   872 6026 BD 70 5C				lda TabMissileLevelLeftX_H1,x
   873 6029 18					clc
   874 602A 69 03				adc #3									; missile X size minus one
   875 602C 8D 4D 32				sta m_pixelPositionX_H1
   876 602F BD 6C 5C				lda TabMissileLevelLeftX_H2,x
   877 6032 69 00				adc #0
   878 6034 8D 4C 32				sta m_pixelPositionX_H2
   879 6037 4C 46 60				jmp GMFC_middle_line
   880
   881 				;*****	Left
   882 				;
   883 603A			GMFC_left										
   884 603A BD 70 5C				lda TabMissileLevelLeftX_H1,x			; moving to the left, use left side pixel
   885 603D 8D 4D 32				sta m_pixelPositionX_H1
   886 6040 BD 6C 5C				lda TabMissileLevelLeftX_H2,x
   887 6043 8D 4C 32				sta m_pixelPositionX_H2
   888
   889 				;***** 	Middle Line
   890 				;
   891 6046			GMFC_middle_line
   892 												
   893 6046 BD 7C 5C				lda TabMissileLevelTopY_H1,x			; get middle char line
   894 6049 18					clc
   895 604A 69 01				adc #1									; because the height is 3 lines
   896 604C 8D 4F 32				sta m_pixelPositionY_H1
   897 604F BD 78 5C				lda TabMissileLevelTopY_H2,x
   898 6052 69 00				adc #0
   899 6054 8D 4E 32				sta m_pixelPositionY_H2
   900 6057 20 5B 60				jsr GetCharDefinitionFromPixelPos
   901 					
   902 605A 60					rts
   903 					
   904 				.endp
   905 					
   906 				;
   907 				;**************************************************************************************************
   908 				; GetCharDefinitionFromPixelPos
   909 				;
   910 				; 	put coord "x" in m_pixelPositionX_H2/_H1 and coord "y" in m_pixelPositionY_H2/_H1
   911 				; 	return in A the character definition value (and also use the Y register)
   912 				; 	(this assume that there no more than 256 chars in x or in y, in a room)
   913 				;
   914 				;**************************************************************************************************
   915 				;
   916 605B			.proc GetCharDefinitionFromPixelPos
   917
   918 605B AD 4E 32				lda m_pixelPositionY_H2					; get char line, divide by 8 (put in Y)
   919 605E 8D 67 32				sta m_charBuffer_H2
   920 						
   921 6061 AD 4F 32				lda m_pixelPositionY_H1
   922 6064 4E 67 32				lsr m_charBuffer_H2						; /2
   923 6067 6A					ror
   924 6068 4E 67 32				lsr m_charBuffer_H2						; /4
   925 606B 6A					ror
   926 606C 4E 67 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   927 606F 6A					ror
   928 6070 8D 51 32				sta m_charPositionY
   929 						
   930 6073 A8					tay
   931 6074 B9 76 32				lda TabLevelLineAddressLSB,y			; init pointer to char
   932 6077 8D 9C 60				sta GCDFPP_pointer+1
   933 607A 8D 52 32				sta m_lineAddressLSB
   934 					
   935 607D B9 76 33				lda TabLevelLineAddressMSB,y
   936 6080 8D 9D 60				sta GCDFPP_pointer+2
   937 6083 8D 53 32				sta m_lineAddressMSB
   938
   939 6086 AD 4C 32				lda m_pixelPositionX_H2					; get char column, divide by 4 (put in Y)
   940 6089 8D 67 32				sta m_charBuffer_H2
   941 608C AD 4D 32				lda m_pixelPositionX_H1
   942 608F 4E 67 32				lsr m_charBuffer_H2						; /2
   943 6092 6A					ror
   944 6093 4E 67 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   945 6096 6A					ror
   946 6097 8D 50 32				sta m_charPositionX
   947 						
   948 609A A8					tay
   949
   950 				;************************************************
   951 				;
   952 609B			GCDFPP_pointer
   953 						
   954 609B B9 FF FF				lda $FFFF,y
   955 609E 8D 54 32				sta m_charRaw
   956 60A1 A8					tay
   957 60A2 B9 76 34				lda TabCharDefinition,y
   958 60A5 8D 55 32				sta m_charDef
   959 60A8 60					rts
   960
   961 				.endp		
   327 60A9					icl "AnimationsLogic.Asm"	
Source: E:\_8BitProjects\Series\Scroller\AnimationsLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AnimationsLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;*****	Local to Animations Logic
    14 				;
    15 = 000A			ANIM_COIN_CHAR1 			= $0A
    16 = 0006			ANIM_COIN_FRAMES 			= $06
    17 = 0008			ANIM_COIN_MAX_NUMBER 		= $08
    18
    19 = 0004			ANIM_MISC_FRAME_TIME		= $04
    20 = 0004			ANIM_SEA_TOP_FRAME_TIME 	= $04
    21
    22 60A9 00 00 00 00 00 00 + TabCoinAnimFrame			.byte $00, $00, $00, $00, $00, $00, $00, $00
    23
    24 60B1 00 00 00 00 00 00 + TabCoinAnimTimer			.byte $00, $00, $00, $00, $00, $00, $00, $00
    25
    26 60B9 02 02 02 02 02 02	TabCoinAnimCharTime			.byte $02, $02, $02, $02, $02, $02
    27
    28 60BF 00 00 00 00 00 00 + TabCoinAnimAddressLSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    29 60C7 00 00 00 00 00 00 + TabCoinAnimAddressMSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    30
    31 				; vertical line, dither (red)
    32 60CF 30 0C 30 0C 30 0C + TabAnimLaserFrame_01		.byte %00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100
    33 60D7 0C 30 0C 30 0C 30 + TabAnimLaserFrame_02		.byte %00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000
    34 60DF 00 00 00 00 00 00 + TabAnimLaserFrame_03		.byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
    35
    36 				; hoizontal line, dither (red)
    37 60E7 33 CC 33		TabAnimHLaserFrame_01		.byte %00110011, %11001100, %00110011
    38 60EA CC 33 CC		TabAnimHLaserFrame_02		.byte %11001100, %00110011, %11001100
    39 60ED 00 00 00 00 00 00 + TabAnimHLaserFrame_03		.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
    40
    41 				; sea top (blue)
    42 60F5 0F			TabAnimSeaTopLeftFrame_01	.byte %00001111
    43 60F6 3F										.byte %00111111
    44 60F7 FF										.byte %11111111
    45 60F8 FF										.byte %11111111
    46
    47 60F9 00			TabAnimSeaTopRightFrame_01	.byte %00000000
    48 60FA C0										.byte %11000000
    49 60FB F0										.byte %11110000
    50 60FC FF										.byte %11111111
    51
    52 				.if PAL_VERSION = 0
    53 					
    54 = 003D				ANIM_LASER_FRAMES 		= $3D
    55 = 003D				ANIM_HLASER_FRAMES 		= $3D
    56 					
    57 60FD CF D7 CF D7 CF D7 + TabAnimLaserFrameAddressLSB		:30 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    58 6139 DF												.byte <TabAnimLaserFrame_03
    59 										
    60 613A 60 60 60 60 60 60 + TabAnimLaserFrameAddressMSB		:30 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    61 6176 60												.byte >TabAnimLaserFrame_03
    62
    63 6177 E7 EA E7 EA E7 EA + TabAnimHLaserFrameAddressLSB	:30 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    64 61B3 ED												.byte <TabAnimHLaserFrame_03
    65
    66 61B4 60 60 60 60 60 60 + TabAnimHLaserFrameAddressMSB	:30 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    67 61F0 60												.byte >TabAnimHLaserFrame_03
    68
    69 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    70 61F1 01 01 01 01 01 01 + TabAnimHLaserFrameTime			:30 .byte $01, $01
    71 622D 5A												.byte $5A
    72
    73 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    74 622E 01 01 01 01 01 01 + TabAnimLaserFrameTime			:30 .byte $01, $01
    75 626A 3C												.byte $3C
    76
    77 				.else
    78
    79 					ANIM_LASER_FRAMES 		= $33
    80 					ANIM_HLASER_FRAMES 		= $33
    81
    82 				TabAnimLaserFrameAddressLSB		:25 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    83 													.byte <TabAnimLaserFrame_03
    84 											
    85 				TabAnimLaserFrameAddressMSB		:25 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    86 													.byte >TabAnimLaserFrame_03
    87
    88 				TabAnimHLaserFrameAddressLSB	:25 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    89 													.byte <TabAnimHLaserFrame_03
    90
    91 				TabAnimHLaserFrameAddressMSB	:25 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    92 													.byte >TabAnimHLaserFrame_03
    93
    94 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    95 				TabAnimHLaserFrameTime			:25 .byte $01, $01
    96 													.byte $4B
    97
    98 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    99 				TabAnimLaserFrameTime			:25 .byte $01, $01
   100 													.byte $32
   101
   102 				.endif
   103
   104 				;
   105 				;**************************************************************************************************
   106 				; DoFontAnimations	
   107 				;**************************************************************************************************
   108 				;
   109 626B			.proc DoFontAnimations
   110 					
   111 626B 20 04 63				jsr AnimateWater
   112 626E 20 44 63				jsr AnimateVerticalLaser
   113 6271 20 79 63				jsr AnimateHorizontalLaser
   114 6274 20 AE 63				jsr AnimateMisc		
   115 6277 20 3B 6A				jsr PlatformControlH
   116 						
   117 627A 60					rts
   118 						
   119 				.endp
   120
   121 				;
   122 				;**************************************************************************************************
   123 				;
   124 				;	AddCoinAnimation
   125 				;
   126 				;		the word "m_pageZeroTempPointer" has the address of the char to animate
   127 				;	
   128 				;**************************************************************************************************
   129 				;
   130 627B			.proc AddCoinAnimation
   131 					
   132 627B AD 1D 32				lda m_currentCoinAnimations					
   133 627E C9 08				cmp #ANIM_COIN_MAX_NUMBER
   134 6280 F0 28				beq Exit
   135 						
   136 6282 EE 1D 32				inc m_currentCoinAnimations
   137 6285 AE 1C 32				ldx m_emptyCoinAnimIndex
   138 					
   139 6288 A5 EB				lda m_pageZeroTempPointer
   140 628A 9D BF 60				sta TabCoinAnimAddressLSB,x
   141 						
   142 628D A5 EC				lda m_pageZeroTempPointer+1
   143 628F 9D C7 60				sta TabCoinAnimAddressMSB,x
   144
   145 6292 A9 00				lda #0										; use first frame
   146 6294 9D A9 60				sta TabCoinAnimFrame,x
   147 					
   148 6297 AD B9 60				lda TabCoinAnimCharTime						; use first element of the table
   149 629A 9D B1 60				sta TabCoinAnimTimer,x
   150
   151 629D A0 00				ldy #0
   152 629F A9 0A				lda #ANIM_COIN_CHAR1
   153 62A1 91 EB				sta (m_pageZeroTempPointer),y				; update screen
   154
   155 62A3 E8					inx
   156 62A4 8A					txa
   157 62A5 29 07				and #%111
   158 62A7 8D 1C 32				sta m_emptyCoinAnimIndex
   159
   160 				;*****	Add Coin Animation Exit
   161 				;
   162 62AA			Exit
   163 62AA 60					rts
   164
   165 				.endp
   166 					
   167 				;
   168 				;**************************************************************************************************
   169 				; UpdateCoinAnimations	
   170 				;**************************************************************************************************
   171 				;
   172 62AB			UpdateCoinAnimations
   173
   174 62AB AD 1D 32			lda m_currentCoinAnimations					; update coin animations every frame	
   175 62AE F0 53			beq UCA_exit
   176 62B0 AE 1B 32			ldx m_firstCoinAnimIndex
   177
   178 				;**************************************************
   179 				;
   180 62B3			UCA_loop
   181 62B3 DE B1 60			dec TabCoinAnimTimer,x
   182 62B6 D0 41			bne UCA_check_loop
   183
   184 62B8 FE A9 60			inc TabCoinAnimFrame,x
   185 62BB BD A9 60			lda TabCoinAnimFrame,x
   186 62BE C9 06			cmp #ANIM_COIN_FRAMES
   187 62C0 F0 19			beq UCA_clear_anim
   188
   189 				;**************************************************
   190 				;
   191 62C2			UCA_update_anim
   192 62C2 A8				tay
   193 62C3 B9 B9 60			lda TabCoinAnimCharTime,y					; #ANIM_COIN_TIME
   194 62C6 9D B1 60			sta TabCoinAnimTimer,x
   195
   196 62C9 BD BF 60			lda TabCoinAnimAddressLSB,x
   197 62CC 8D D6 62			sta UCA_char_pointer+1
   198 62CF BD C7 60			lda TabCoinAnimAddressMSB,x
   199 62D2 8D D7 62			sta UCA_char_pointer+2
   200
   201 				;**************************************************
   202 				;
   203 62D5			UCA_char_pointer
   204 62D5 EE FF FF			inc $FFFF									; update the animation frame, increment the char on screen
   205 62D8 4C F9 62			jmp UCA_check_loop
   206
   207 				;**************************************************
   208 				;
   209 62DB			UCA_clear_anim
   210 62DB BD BF 60			lda TabCoinAnimAddressLSB,x
   211 62DE 8D EA 62			sta UCA_clear_char_pointer+1
   212 62E1 BD C7 60			lda TabCoinAnimAddressMSB,x
   213 62E4 8D EB 62			sta UCA_clear_char_pointer+2
   214 62E7 A9 00			lda #0
   215
   216 				;**************************************************
   217 				;
   218 62E9			UCA_clear_char_pointer
   219 62E9 8D FF FF			sta $FFFF									; clear the char on screen
   220 62EC CE 1D 32			dec m_currentCoinAnimations
   221 62EF AC 1B 32			ldy m_firstCoinAnimIndex
   222 62F2 C8				iny
   223 62F3 98				tya
   224 62F4 29 07			and #%111
   225 62F6 8D 1B 32			sta m_firstCoinAnimIndex
   226
   227 				;**************************************************
   228 				;
   229 62F9			UCA_check_loop
   230 62F9 E8				inx
   231 62FA 8A				txa
   232 62FB 29 07			and #%111
   233 62FD AA				tax
   234 62FE EC 1C 32			cpx m_emptyCoinAnimIndex
   235 6301 D0 B0			bne UCA_loop
   236
   237 				;**************************************************
   238 				;
   239 6303			UCA_exit
   240 6303 60				rts
   241
   242 				;
   243 				;***************************************************************************************************
   244 				;	
   245 				;	AnimateWater
   246 				;	
   247 				; 		do sea top animation (chars 70, 71)
   248 				; 
   249 				;***************************************************************************************************
   250 				;	
   251 6304			.proc AnimateWater
   252
   253 6304 AD 14 32			lda m_waterAvailable
   254 6307 F0 3A			beq Exit
   255 					
   256 6309 CE 1A 32			dec m_animSeaTopTimer
   257 630C D0 35			bne Exit
   258
   259 630E A9 04			lda #ANIM_SEA_TOP_FRAME_TIME
   260 6310 8D 1A 32			sta m_animSeaTopTimer
   261
   262 6313 AD 38 AA			lda GameFontAddress+8*71
   263 6316 4A				lsr											; put left bit in the carry
   264 6317 6E 30 AA			ror GameFontAddress+8*70
   265 631A 6E 38 AA			ror GameFontAddress+8*71
   266 631D 6E 30 AA			ror GameFontAddress+8*70
   267 6320 6E 38 AA			ror GameFontAddress+8*71
   268
   269 6323 AD 39 AA			lda GameFontAddress+8*71+1
   270 6326 4A				lsr											; put left bit in the carry
   271 6327 6E 31 AA			ror GameFontAddress+8*70+1
   272 632A 6E 39 AA			ror GameFontAddress+8*71+1
   273 632D 6E 31 AA			ror GameFontAddress+8*70+1
   274 6330 6E 39 AA			ror GameFontAddress+8*71+1
   275
   276 6333 AD 3A AA			lda GameFontAddress+8*71+2
   277 6336 4A				lsr											; put left bit in the carry
   278 6337 6E 32 AA			ror GameFontAddress+8*70+2
   279 633A 6E 3A AA			ror GameFontAddress+8*71+2
   280 633D 6E 32 AA			ror GameFontAddress+8*70+2
   281 6340 6E 3A AA			ror GameFontAddress+8*71+2
   282
   283 				;*****	Exit
   284 				;
   285 6343			Exit
   286
   287 6343 60					rts
   288 				.endp	
   289
   290 				;
   291 				;***************************************************************************************************
   292 				;	
   293 				;	AnimateVerticalLaser
   294 				;	
   295 				; 		do vertical line dither, laser animation (char 20, 21, 22)
   296 				; 
   297 				;***************************************************************************************************
   298 				;	
   299 6344			.proc AnimateVerticalLaser
   300
   301 6344 AD 10 32				lda m_verticalLaserOn
   302 6347 F0 2F				beq Exit
   303 						
   304 6349 CE 20 32				dec m_animLaserTimer						
   305 634C D0 2A				bne Exit
   306
   307 634E AE 21 32				ldx m_animLaserCurrentFrame
   308 6351 E8					inx
   309 6352 E0 3D				cpx #ANIM_LASER_FRAMES
   310 6354 D0 02				bne NextFrame
   311 						
   312 6356 A2 00				ldx #0
   313
   314 				;*****	Animate Vertical Laser Next Frame
   315 				;
   316 6358			NextFrame
   317
   318 6358 8E 21 32				stx m_animLaserCurrentFrame
   319
   320 635B BD 2E 62				lda TabAnimLaserFrameTime,x
   321 635E 8D 20 32				sta m_animLaserTimer
   322
   323 6361 BD FD 60				lda TabAnimLaserFrameAddressLSB,x
   324 6364 8D 70 63				sta CopyFrame+1
   325
   326 6367 BD 3A 61				lda TabAnimLaserFrameAddressMSB,x
   327 636A 8D 71 63				sta CopyFrame+2
   328
   329 636D A0 07				ldy #7
   330 					
   331 				;*****	Animate Vertical Laser Copy Frame
   332 				;
   333 636F			CopyFrame
   334 					
   335 636F B9 FF FF				lda $FFFF,y
   336 6372 99 A8 A8				sta GameFontAddress+8*21,y
   337 6375 88					dey
   338 6376 10 F7				bpl CopyFrame
   339
   340 				;*****	Animate Vertical Laser End
   341 				;
   342 6378			Exit
   343 						
   344 6378 60					rts
   345
   346 				.endp
   347
   348 				;
   349 				;***************************************************************************************************
   350 				;	
   351 				;	AnimateHorizontalLaser
   352 				;	
   353 				; 		do horizontal line dither, laser animation (char 23, 24, 25)
   354 				; 
   355 				;***************************************************************************************************
   356 				;	
   357 6379			.proc AnimateHorizontalLaser
   358
   359 6379 AD 11 32				lda m_horizontalLaserOn
   360 637C F0 2F				beq Exit
   361
   362 637E CE 1E 32				dec m_animHLaserTimer						
   363 6381 D0 2A				bne Exit
   364
   365 6383 AE 1F 32				ldx m_animHLaserCurrentFrame
   366 6386 E8					inx
   367 6387 E0 3D				cpx #ANIM_HLASER_FRAMES
   368 6389 D0 02				bne NextFrame
   369 						
   370 638B A2 00				ldx #0
   371
   372 				;******	Animate Horizontal Laser Next Frame
   373 				;
   374 638D			NextFrame
   375 						
   376 638D 8E 1F 32				stx m_animHLaserCurrentFrame
   377 6390 BD F1 61				lda TabAnimHLaserFrameTime,x
   378 6393 8D 1E 32				sta m_animHLaserTimer
   379
   380 6396 BD 77 61				lda TabAnimHLaserFrameAddressLSB,x
   381 6399 8D A5 63				sta CopyFrame+1
   382 						
   383 639C BD B4 61				lda TabAnimHLaserFrameAddressMSB,x
   384 639F 8D A6 63				sta CopyFrame+2
   385
   386 63A2 A0 02				ldy #2
   387
   388 				;*****	Animate Horizontal Laser Copy Frame
   389 				;
   390 63A4			CopyFrame
   391 					
   392 63A4 B9 FF FF				lda $FFFF,y
   393 63A7 99 CA A8				sta GameFontAddress+8*25+2,y
   394 63AA 88					dey
   395 63AB 10 F7				bpl CopyFrame
   396
   397 				;*****	Animate Horizontal Laser Exit
   398 				;
   399 63AD			Exit
   400 63AD 60					rts
   401
   402 				.endp
   403
   404 				;
   405 				;***************************************************************************************************
   406 				;	
   407 				;	AnimateMisc
   408 				;	
   409 				; 		do misc animation
   410 				; 
   411 				;***************************************************************************************************
   412 				;	
   413 63AE			.proc AnimateMisc
   414
   415 63AE A2 00				ldx #$00
   416
   417 63B0 BD DA 35				lda TabAnimationMiscMap[0], x
   418 63B3 85 E3				sta m_paramW01
   419
   420 63B5 BD DB 35				lda TabAnimationMiscMap[0]+1, x
   421 63B8 85 E4				sta m_paramW01+1
   422 						
   423 63BA BD DD 35				lda TabAnimationMiscMap[0]+3, x
   424 63BD 85 9A				sta m_animMiscWidth
   425
   426 63BF BD DE 35				lda TabAnimationMiscMap[0]+4, x
   427 63C2 85 9B				sta m_animMiscHeight
   428 					
   429 63C4 A5 AE				lda m_playerScreenTopY
   430 63C6 A4 9B				ldy m_animMiscHeight		
   431 63C8			Sub1
   432 63C8 38					sec
   433 63C9 E9 01				sbc #$01
   434 63CB 88					dey
   435 63CC D0 FA				bne Sub1
   436 						
   437 								 
   438 						
   439 63CE			Loop
   440 								
   441
   442 				;*****	Exit Method
   443 63CE			Exit
   444
   445 63CE 60					rts
   446
   447 				.endp
   328 63CF					icl "CameraLogic.Asm"
Source: E:\_8BitProjects\Series\Scroller\CameraLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		CameraLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 63CF 0C 0B 0A 09		TabOffsetForHSCROL			.byte 12,11,10,9
    18 63D3 00 01 02 03 04 05 + TabOffsetForVSCROL			.byte 0,1,2,3,4,5,6,7
    19
    20 63DB			TabMultiply82_LSB			
    21 63DB 00 52 A4 F6 48 9A + 	:26 .byte <[#*LEVEL_CHAR_SIZE_X]
    22
    23 63F5			TabMultiply82_MSB
    24 63F5 00 00 00 00 01 01 + 	:26 .byte >[#*LEVEL_CHAR_SIZE_X]
    25 				;
    26 				;**************************************************************************************************
    27 				; UpdateCameraWindow
    28 				;
    29 				; 	update target window pos (m_windowTargetPos*_*), using the player level position,
    30 				; 	correct (clamp) target window pos with level limits if necessary
    31 				;
    32 				;**************************************************************************************************
    33 				;
    34 640F			.proc UpdateCameraWindow
    35
    36 				;************************************************
    37 				;
    38 640F			UCW_check_left_limit
    39 					
    40 						; check left limit (clamp to the left)
    41 640F A5 A1				lda m_playerLevelLeftX_H2				
    42 6411 C9 00				cmp #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    43 6413 90 08				bcc UCW_force_left_limit
    44 6415 D0 13				bne UCW_check_right_limit
    45 						
    46 6417 A5 A2				lda m_playerLevelLeftX_H1
    47 6419 C9 52				cmp #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    48 641B B0 0D				bcs UCW_check_right_limit
    49
    50 				;************************************************
    51 				;
    52 641D			UCW_force_left_limit
    53 						
    54 641D A9 00				lda #>[CHAR_PIX.else_X]
    55 641F 8D 27 32				sta m_windowTargetPosX_H2
    56 						
    57 6422 A9 04				lda #<[CHAR_PIX.else_X]
    58 6424 8D 26 32				sta m_windowTargetPosX_H1
    59 						
    60 6427 4C 54 64				jmp UCW_check_top_limit
    61
    62 				;************************************************
    63 				;
    64 642A			UCW_check_right_limit
    65 					
    66 						; check right limit (clamp to the right)
    67 642A A9 00				lda #>[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    68 																											; [[[ 62 ] * 4 - 4] + 1]
    69 																											; [ 244 + 1] = 245	
    70 642C C5 A4				cmp m_playerLevelRightX_H2	
    71 642E 90 08				bcc UCW_force_right_limit
    72 6430 D0 13				bne UCW_set_target_x
    73 						
    74 6432 A9 F5				lda #<[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    75 																											; [[[ 62 ] * 4 - 4] + 1]
    76 																											; [ 244 + 1] = 245	
    77 6434 C5 A5				cmp m_playerLevelRightX_H1
    78 6436 B0 0D				bcs UCW_set_target_x
    79
    80 				;************************************************
    81 				;
    82 6438			UCW_force_right_limit
    83 					
    84 6438 A9 00				lda #>[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    85 643A 8D 27 32				sta m_windowTargetPosX_H2
    86 					
    87 643D A9 A4				lda #<[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    88 643F 8D 26 32				sta m_windowTargetPosX_H1
    89 					
    90 6442 4C 54 64				jmp UCW_check_top_limit
    91
    92 				;************************************************
    93 				; no clamp, use current player X position 
    94 				; and substract half the window size
    95 				;
    96 6445			UCW_set_target_x
    97 					
    98 6445 A5 A2				lda m_playerLevelLeftX_H1
    99 6447 38					sec
   100 6448 E9 4E				sbc #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   101 644A 8D 26 32				sta m_windowTargetPosX_H1
   102 					
   103 644D A5 A1				lda m_playerLevelLeftX_H2
   104 644F E9 00				sbc #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   105 6451 8D 27 32				sta m_windowTargetPosX_H2
   106
   107 				;************************************************
   108 				; check top limit (clamp to the top)
   109 				; 
   110 6454			UCW_check_top_limit
   111 						
   112 6454 A5 A7				lda m_playerLevelTopY_H2
   113 6456 C9 00				cmp #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   114 6458 90 08				bcc UCW_force_top_limit
   115 645A D0 13				bne UCW_check_bottom_limit
   116 						
   117 645C A5 A8				lda m_playerLevelTopY_H1
   118 645E C9 5C				cmp #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   119 6460 B0 0D				bcs UCW_check_bottom_limit
   120
   121 				;************************************************
   122 				;
   123 6462			UCW_force_top_limit
   124 						
   125 6462 A9 00				lda #>[0]
   126 6464 8D 29 32				sta m_windowTargetPosY_H2
   127 					
   128 6467 A9 00				lda #<[0]
   129 6469 8D 28 32				sta m_windowTargetPosY_H1
   130 					
   131 646C 4C 99 64				jmp UCW_get_deltas
   132
   133 				;************************************************
   134 				; check bottom limit (clamp to the bottom)
   135 				;
   136 646F			UCW_check_bottom_limit
   137 						
   138 646F A9 00				lda #>[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   139 6471 C5 AA				cmp m_playerLevelBottomY_H2
   140 6473 90 08				bcc UCW_force_bottom_limit
   141 6475 D0 13				bne UCW_set_target_y
   142 						
   143 6477 A9 63				lda #<[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   144 6479 C5 AB				cmp m_playerLevelBottomY_H1
   145 647B B0 0D				bcs UCW_set_target_y
   146
   147 				;************************************************
   148 				;
   149 647D			UCW_force_bottom_limit
   150 					
   151 647D A9 00				lda #>[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   152 647F 8D 29 32				sta m_windowTargetPosY_H2
   153 					
   154 6482 A9 00				lda #<[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   155 6484 8D 28 32				sta m_windowTargetPosY_H1
   156 						
   157 6487 4C 99 64				jmp UCW_get_deltas
   158
   159 				;************************************************
   160 				; no clamp, use current player Y position and substract half the window size
   161 				;
   162 648A			UCW_set_target_y
   163 					
   164 648A A5 A8				lda m_playerLevelTopY_H1
   165 648C 38					sec		
   166 648D E9 5C				sbc #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   167 648F 8D 28 32				sta m_windowTargetPosY_H1
   168 					
   169 6492 A5 A7				lda m_playerLevelTopY_H2
   170 6494 E9 00				sbc #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   171 6496 8D 29 32				sta m_windowTargetPosY_H2
   172
   173 				;************************************************
   174 				; calculate deltas in X and Y for the current and
   175 				; the target window pos, update the current window
   176 				; pos according to the distance to the target
   177 				; (compare the level window with the target pos, 
   178 				; get the delta and divide it by 8, so the movement 
   179 				; speed is proportional to the distance, with a minimum step of 1)
   180 				;
   181 6499			UCW_get_deltas
   182
   183 				;************************************************
   184 				;
   185 6499			UCW_check_deltaX								
   186 						
   187 6499 A5 DA				lda m_levelWindowX_H2					; compare target X and current X
   188 649B CD 27 32				cmp m_windowTargetPosX_H2
   189 649E 90 4D				bcc UCW_deltaX_positive
   190 64A0 D0 0C				bne UCW_deltaX_negative
   191 					
   192 64A2 A5 DB				lda m_levelWindowX_H1
   193 64A4 CD 26 32				cmp m_windowTargetPosX_H1
   194 												
   195 64A7 90 44				bcc UCW_deltaX_positive					; target X equal to current X
   196 64A9 D0 03				bne UCW_deltaX_negative
   197 64AB 4C 29 65				jmp UCW_deltaX_exit						; target X equal to current X
   198
   199 				;************************************************
   200 				;
   201 64AE			UCW_deltaX_negative								
   202 64AE A5 DB				lda m_levelWindowX_H1 					; target X lower than current X
   203 64B0 38					sec
   204 64B1 ED 26 32				sbc m_windowTargetPosX_H1
   205 64B4 8D 2A 32				sta m_windowTargetDeltaX_H1
   206 					
   207 64B7 A5 DA				lda m_levelWindowX_H2
   208 64B9 ED 27 32				sbc m_windowTargetPosX_H2
   209 64BC 8D 2B 32				sta m_windowTargetDeltaX_H2
   210
   211 				;************************************************
   212 				;
   213 64BF			UCW_dxn_divide
   214
   215 64BF AD 2B 32				lda m_windowTargetDeltaX_H2
   216 64C2 4A					lsr
   217 64C3 6E 2A 32				ror m_windowTargetDeltaX_H1				; /2
   218 64C6 4A					lsr
   219 64C7 6E 2A 32				ror m_windowTargetDeltaX_H1				; /4
   220 64CA 4A					lsr
   221 64CB 6E 2A 32				ror m_windowTargetDeltaX_H1				; /8
   222 64CE 8D 2B 32				sta m_windowTargetDeltaX_H2
   223
   224 64D1 0D 2A 32				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   225 64D4 D0 05				bne UCW_apply_negative_deltaX
   226 						
   227 64D6 A9 01				lda #MINIMUM_CAMERA_STEP
   228 64D8 8D 2A 32				sta m_windowTargetDeltaX_H1
   229 					
   230 				;************************************************
   231 				;
   232 64DB			UCW_apply_negative_deltaX
   233 					
   234 64DB A5 DB				lda m_levelWindowX_H1
   235 64DD 38					sec
   236 64DE ED 2A 32				sbc m_windowTargetDeltaX_H1
   237 64E1 85 DB				sta m_levelWindowX_H1
   238 64E3 A5 DA				lda m_levelWindowX_H2
   239 64E5 ED 2B 32				sbc m_windowTargetDeltaX_H2
   240 64E8 85 DA				sta m_levelWindowX_H2
   241
   242 				;************************************************
   243 				;
   244 64EA			UCW_deltaX_exit_jmp
   245 					
   246 64EA 4C 29 65				jmp UCW_deltaX_exit
   247
   248 				;************************************************
   249 				;
   250 64ED			UCW_deltaX_positive								
   251 						
   252 64ED AD 26 32				lda m_windowTargetPosX_H1				; target X greater than current X
   253 64F0 38					sec
   254 64F1 E5 DB				sbc m_levelWindowX_H1
   255 64F3 8D 2A 32				sta m_windowTargetDeltaX_H1
   256 					
   257 64F6 AD 27 32				lda m_windowTargetPosX_H2
   258 64F9 E5 DA				sbc m_levelWindowX_H2
   259 64FB 8D 2B 32				sta m_windowTargetDeltaX_H2
   260
   261 				;************************************************
   262 				;
   263 64FE			UCW_dxp_divide
   264 						
   265 64FE AD 2B 32				lda m_windowTargetDeltaX_H2
   266 6501 4A					lsr
   267 6502 6E 2A 32				ror m_windowTargetDeltaX_H1				; /2
   268 6505 4A					lsr
   269 6506 6E 2A 32				ror m_windowTargetDeltaX_H1				; /4
   270 6509 4A					lsr
   271 650A 6E 2A 32				ror m_windowTargetDeltaX_H1				; /8
   272 650D 8D 2B 32				sta m_windowTargetDeltaX_H2
   273
   274 6510 0D 2A 32				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   275 6513 D0 05				bne UCW_apply_positive_deltaX
   276 						
   277 6515 A9 01				lda #MINIMUM_CAMERA_STEP
   278 6517 8D 2A 32				sta m_windowTargetDeltaX_H1
   279
   280 				;************************************************
   281 				;
   282 651A			UCW_apply_positive_deltaX
   283 						
   284 651A A5 DB				lda m_levelWindowX_H1
   285 651C 18					clc
   286 651D 6D 2A 32				adc m_windowTargetDeltaX_H1
   287 6520 85 DB				sta m_levelWindowX_H1
   288 						
   289 6522 A5 DA				lda m_levelWindowX_H2
   290 6524 6D 2B 32				adc m_windowTargetDeltaX_H2
   291 6527 85 DA				sta m_levelWindowX_H2
   292
   293 				;************************************************
   294 				;
   295 6529			UCW_deltaX_exit
   296
   297 				;************************************************
   298 				;
   299 6529			UCW_check_deltaY								
   300 						
   301 6529 A5 DC				lda m_levelWindowY_H2					; compare target Y and current Y	
   302 652B CD 29 32				cmp m_windowTargetPosY_H2
   303 652E 90 44				bcc UCW_deltaY_positive
   304 6530 D0 09				bne UCW_deltaY_negative
   305 					
   306 6532 A5 DD				lda m_levelWindowY_H1
   307 6534 CD 28 32				cmp m_windowTargetPosY_H1
   308 6537 F0 71				beq UCW_deltaY_exit						; target Y equal to current Y
   309 6539 90 39				bcc UCW_deltaY_positive
   310
   311 				;************************************************
   312 				;
   313 653B			UCW_deltaY_negative								
   314 						
   315 653B A5 DD				lda m_levelWindowY_H1					; target Y lower than current Y
   316 653D 38					sec
   317 653E ED 28 32				sbc m_windowTargetPosY_H1
   318 6541 8D 2C 32				sta m_windowTargetDeltaY_H1
   319 						
   320 6544 A5 DC				lda m_levelWindowY_H2
   321 6546 ED 29 32				sbc m_windowTargetPosY_H2
   322
   323 6549 4A					lsr
   324 654A 6E 2C 32				ror m_windowTargetDeltaY_H1				; /2
   325 654D 4A					lsr
   326 654E 6E 2C 32				ror m_windowTargetDeltaY_H1				; /4
   327 6551 4A					lsr
   328 6552 6E 2C 32				ror m_windowTargetDeltaY_H1				; /8
   329 6555 8D 2D 32				sta m_windowTargetDeltaY_H2
   330
   331 6558 0D 2C 32				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   332 655B D0 05				bne UCW_apply_negative_deltaY
   333 						
   334 655D A9 01				lda #MINIMUM_CAMERA_STEP
   335 655F 8D 2C 32				sta m_windowTargetDeltaY_H1
   336 				;
   337 				;**************************************************************************************************
   338 				;
   339 6562			UCW_apply_negative_deltaY
   340 						
   341 6562 A5 DD				lda m_levelWindowY_H1
   342 6564 38					sec
   343 6565 ED 2C 32				sbc m_windowTargetDeltaY_H1
   344 6568 85 DD				sta m_levelWindowY_H1
   345 						
   346 656A A5 DC				lda m_levelWindowY_H2
   347 656C ED 2D 32				sbc m_windowTargetDeltaY_H2
   348 656F 85 DC				sta m_levelWindowY_H2
   349
   350 6571 4C AA 65				jmp UCW_deltaY_exit
   351 				;
   352 				;**************************************************************************************************
   353 				;
   354 6574			UCW_deltaY_positive								
   355 						
   356 6574 AD 28 32				lda m_windowTargetPosY_H1				; target Y greater than current Y
   357 6577 38					sec
   358 6578 E5 DD				sbc m_levelWindowY_H1
   359 657A 8D 2C 32				sta m_windowTargetDeltaY_H1
   360 						
   361 657D AD 29 32				lda m_windowTargetPosY_H2
   362 6580 E5 DC				sbc m_levelWindowY_H2
   363
   364 6582 4A					lsr
   365 6583 6E 2C 32				ror m_windowTargetDeltaY_H1				; /2
   366 6586 4A					lsr
   367 6587 6E 2C 32				ror m_windowTargetDeltaY_H1				; /4
   368 658A 4A					lsr
   369 658B 6E 2C 32				ror m_windowTargetDeltaY_H1				; /8
   370 658E 8D 2D 32				sta m_windowTargetDeltaY_H2
   371
   372 6591 0D 2C 32				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   373 6594 D0 05				bne UCW_apply_positive_deltaY
   374 						
   375 6596 A9 01				lda #MINIMUM_CAMERA_STEP
   376 6598 8D 2C 32				sta m_windowTargetDeltaY_H1
   377
   378 				;************************************************
   379 				;
   380 659B			UCW_apply_positive_deltaY
   381 						
   382 659B A5 DD				lda m_levelWindowY_H1
   383 659D 18					clc
   384 659E 6D 2C 32				adc m_windowTargetDeltaY_H1
   385 65A1 85 DD				sta m_levelWindowY_H1
   386 						
   387 65A3 A5 DC				lda m_levelWindowY_H2
   388 65A5 6D 2D 32				adc m_windowTargetDeltaY_H2
   389 65A8 85 DC				sta m_levelWindowY_H2
   390
   391 				;************************************************
   392 				;
   393 65AA			UCW_deltaY_exit
   394
   395 				;************************************************
   396 				; update all LMS in the display list
   397 				;
   398 65AA			UCW_update_LMS
   399 						
   400 65AA A5 DA				lda m_levelWindowX_H2
   401 65AC 8D 23 32				sta m_screenBaseAddress1+1
   402 						
   403 65AF A5 DB				lda m_levelWindowX_H1
   404 65B1 4E 23 32				lsr m_screenBaseAddress1+1
   405 65B4 6A					ror										; /2
   406 65B5 4E 23 32				lsr m_screenBaseAddress1+1
   407 65B8 6A					ror										; /4 == CHAR_PIX.else_X
   408
   409 65B9 18					clc
   410 65BA 69 FF				adc #<[GAME_MEM-1]
   411 65BC 8D 24 32				sta m_screenBaseAddress2
   412 						
   413 65BF AD 23 32				lda m_screenBaseAddress1+1
   414 65C2 69 AF				adc #>[GAME_MEM-1]
   415 65C4 8D 25 32				sta m_screenBaseAddress2+1
   416
   417
   418 65C7 A5 DC				lda m_levelWindowY_H2
   419 65C9 8D 23 32				sta m_screenBaseAddress1+1
   420 65CC A5 DD				lda m_levelWindowY_H1
   421
   422 65CE 4E 23 32				lsr m_screenBaseAddress1+1
   423 65D1 6A					ror										; /2
   424 65D2 4E 23 32				lsr m_screenBaseAddress1+1
   425 65D5 6A					ror										; /4
   426 65D6 4E 23 32				lsr m_screenBaseAddress1+1
   427 65D9 6A					ror										; /8 == CHAR_PIX.else_Y
   428
   429 65DA AA					tax
   430 65DB BD DB 63				lda TabMultiply82_LSB,x
   431 65DE 18					clc
   432 65DF 6D 24 32				adc m_screenBaseAddress2
   433 65E2 8D 24 32				sta m_screenBaseAddress2
   434 					
   435 65E5 BD F5 63				lda TabMultiply82_MSB,x
   436 65E8 6D 25 32				adc m_screenBaseAddress2+1
   437 65EB 8D 25 32				sta m_screenBaseAddress2+1
   438
   439 65EE A2 00				ldx #0
   440
   441 				;************************************************
   442 				;
   443 65F0			UCW_update_LMS_loop
   444
   445 65F0 AD 24 32				lda m_screenBaseAddress2
   446 65F3 9D 04 0E				sta GAME_LMS1+1,x						; should update this outside the screen zone!
   447 						
   448 65F6 AD 25 32				lda m_screenBaseAddress2+1
   449 65F9 9D 05 0E				sta GAME_LMS1+2,x						; should update this outside the screen zone!
   450
   451 65FC AD 24 32				lda m_screenBaseAddress2
   452 65FF 18					clc
   453 6600 69 52				adc #LEVEL_CHAR_SIZE_X
   454 6602 8D 24 32				sta m_screenBaseAddress2
   455 						
   456 6605 AD 25 32				lda m_screenBaseAddress2+1
   457 6608 69 00				adc #0
   458 660A 8D 25 32				sta m_screenBaseAddress2+1
   459
   460 660D E8					inx
   461 660E E8					inx
   462 660F E8					inx
   463 6610 E0 4B				cpx #[[WINDOW_CHAR_SIZE_Y+1]*3]
   464 6612 D0 DC				bne UCW_update_LMS_loop
   465
   466 				;************************************************
   467 				; update HSCROL and VSCROL with the offsets of the window pos
   468 				;
   469 6614 A5 DB				lda m_levelWindowX_H1
   470 6616 29 03				and #[CHAR_PIX.else_X-1]
   471 6618 AA					tax
   472 						
   473 6619 BD CF 63				lda TabOffsetForHSCROL,x
   474 661C 8D 04 D4				sta HSCROL								; should update this outside the screen zone!
   475
   476 661F A5 DD				lda m_levelWindowY_H1
   477 6621 29 07				and #[CHAR_PIX.else_Y-1]
   478 6623 AA					tax
   479 					
   480 6624 BD D3 63				lda TabOffsetForVSCROL,x
   481 6627 8D 05 D4				sta VSCROL								; should update this outside the screen zone!
   482 						
   483 662A 60					rts
   484 					
   485 				.endp	
   329 662B					icl "EnemyManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\EnemyManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		EnemyManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17
    18 = 0020			MAX_ENEMIES_PER_LEVEL 			= 32
    19 = 0002			MAX_ENEMY_MISSILES 				= 2
    20 = 0016			MAX_EXPLOSION_STEPS 			= 22
    21
    22 				.if PAL_VERSION = 0
    23 = 002A			ENEMY_EXPLOSION_COLOR 			= 32+10
    24 				.else
    25 				ENEMY_EXPLOSION_COLOR 			= 16+10
    26 				.endif
    27
    28 662B			TabEnemyExplosionColor
    29 				.if PAL_VERSION = 0
    30 662B 20 0E 0E 0E 0C 0C + 								.byte +32, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    31 				.else
    32 												.byte +16, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    33 				.endif
    34
    35 6642 08			TabEnemyShapeSizeY				.byte 8
    36
    37 6643			TabEnemyShape_01
    38 6643 3C											.byte %00111100
    39 6644 E7											.byte %11100111
    40 6645 18											.byte %00011000
    41 6646 E7											.byte %11100111
    42 6647 3C											.byte %00111100
    43 6648 00											.byte %00000000
    44 6649 3C											.byte %00111100
    45 664A 7E											.byte %01111110
    46
    47
    48 664B 00 00 00 00 00 00 + TabEnemyType					:MAX_ENEMIES_PER_LEVEL .byte $00
    49 					
    50
    51 				; this table could be per level, if we can go back to the same screen
    52 666B 00 00 00 00 00 00 + TabEnemyLife					:MAX_ENEMIES_PER_LEVEL .byte $00
    53 					                        	
    54 				                            	
    55 668B 00 00 00 00 00 00 + TabEnemyState					:MAX_ENEMIES_PER_LEVEL .byte $00
    56 					                        	
    57 66AB 00 00 00 00 00 00 + TabEnemyStateTimer				:MAX_ENEMIES_PER_LEVEL .byte $00
    58 					                        	
    59 				                            	
    60 66CB 00 00 00 00 00 00 + TabEnemyBaseCharIndex			:MAX_ENEMIES_PER_LEVEL .byte $00	
    61 					
    62 66EB 00 00 00 00 00 00 + TabEnemyBaseCharX				:MAX_ENEMIES_PER_LEVEL .byte $00
    63 670B 00 00 00 00 00 00 + TabEnemyBaseCharY				:MAX_ENEMIES_PER_LEVEL .byte $00
    64
    65 672B 00 00 00 00 00 00 + TabEnemyLevelLeftX_H1			:MAX_ENEMIES_PER_LEVEL .byte $00
    66 674B 00 00 00 00 00 00 + TabEnemyLevelLeftX_H2			:MAX_ENEMIES_PER_LEVEL .byte $00
    67 676B 00 00 00 00 00 00 + TabEnemyLevelTopY_H1			:MAX_ENEMIES_PER_LEVEL .byte $00
    68 678B 00 00 00 00 00 00 + TabEnemyLevelTopY_H2			:MAX_ENEMIES_PER_LEVEL .byte $00
    69
    70 67AB 00 00 00 00 00 00 + TabEnemyShotLevelLeftX_H1		:MAX_ENEMIES_PER_LEVEL .byte $00
    71 67CB 00 00 00 00 00 00 + TabEnemyShotLevelLeftX_H2		:MAX_ENEMIES_PER_LEVEL .byte $00
    72 67EB 00 00 00 00 00 00 + TabEnemyShotLevelTopY_H1		:MAX_ENEMIES_PER_LEVEL .byte $00
    73 680B 00 00 00 00 00 00 + TabEnemyShotLevelTopY_H2		:MAX_ENEMIES_PER_LEVEL .byte $00
    74
    75
    76 				; enemy definition tables (index or type 0 is not used)
    77 682B 00 01		TabEnemyDefLife					.byte $00, $01
    78
    79 682D 00 C0		TabEnemyDefBaseChar				.byte $00, $C0
    80
    81 682F			TabEnemyDefShootCooldown		
    82 				.if PAL_VERSION = 0
    83 682F 00 78										.byte $00, $78
    84 				.else
    85 												.byte $00, $64
    86 				.endif
    87
    88 				;	
    89 				;***************************************************************************************************
    90 				;	UpdateEnemyManager
    91 				;***************************************************************************************************
    92 				;
    93 6831			.proc UpdateEnemyManager
    94
    95 						; update one enemy per frame, rotate through all active enemies
    96 6831 AD 3C 32				lda m_activeEnemies
    97 6834 D0 03				bne UEM_active_enemies
    98 6836 4C D6 68				jmp UEM_exit
    99
   100 6839			UEM_active_enemies
   101 					
   102 6839 A2 00				ldx #0									; update state timer for all enemies (if we don't want to do this, we should use a general time stamp system)
   103
   104 683B			UEM_loop1
   105
   106 683B BD AB 66				lda TabEnemyStateTimer,x
   107 683E F0 03				beq UEM_next_timer
   108 6840 DE AB 66				dec TabEnemyStateTimer,x
   109 						
   110 6843			UEM_next_timer
   111
   112 6843 E8					inx
   113 6844 EC 3B 32				cpx m_totalEnemies
   114 6847 D0 F2				bne UEM_loop1
   115
   116
   117 6849 AE 41 32				ldx m_lastEnemyIndexUpdated				; iterate until we find the next active enemy
   118 					
   119 684C			UEM_loop2
   120
   121 684C E8					inx
   122 684D EC 3B 32				cpx m_totalEnemies
   123 6850 D0 02				bne UEM_no_loop_back
   124 6852 A2 00				ldx #0
   125
   126 6854			UEM_no_loop_back
   127
   128 6854 BD 8B 66				lda TabEnemyState,x						; state 0 implies a disabled enemy
   129 6857 F0 F3				beq UEM_loop2
   130 6859 8E 41 32				stx m_lastEnemyIndexUpdated
   131
   132 						; should use the enemy type to jump to the correct update for that type
   133 						; check state timer, update state if is 0
   134 						;
   135 685C BD AB 66				lda TabEnemyStateTimer,x
   136 685F D0 75				bne UEM_exit
   137
   138 						; timer is 0, check if the player is near enough to shoot, in what direction, and if there are missiles available
   139 						; (maybe check against the maximum number of enemy missiles possible)
   140 6861			UEM_check_shoot
   141
   142 6861 AD 42 32				lda m_enemyMissilesActive
   143 6864 C9 02				cmp #MAX_ENEMY_MISSILES
   144 6866 F0 6E				beq UEM_exit
   145 					
   146 						; check delta Y between the player and the enemy
   147 6868 A5 A8				lda m_playerLevelTopY_H1
   148 686A 38					sec
   149 686B FD 6B 67				sbc TabEnemyLevelTopY_H1,x
   150 686E 85 EB				sta m_pageZeroTempPointer
   151 6870 A5 A7				lda m_playerLevelTopY_H2
   152 6872 FD 8B 67				sbc TabEnemyLevelTopY_H2,x
   153 6875 85 EC				sta m_pageZeroTempPointer+1
   154
   155 6877 A5 EB				lda m_pageZeroTempPointer
   156 6879 18					clc
   157 687A 69 20				adc #ENEMY_SHOOT_DELTA_Y
   158 687C 85 EB				sta m_pageZeroTempPointer
   159 687E A5 EC				lda m_pageZeroTempPointer+1
   160 6880 69 00				adc #0
   161 6882 85 EC				sta m_pageZeroTempPointer+1
   162 6884 D0 50				bne UEM_exit							; abort if the high byte is already greater than 0
   163
   164 						; this works for a delta Y lower than 128 (lines)
   165 6886 A5 EB				lda m_pageZeroTempPointer
   166 6888 C9 40				cmp #[ENEMY_SHOOT_DELTA_Y*2]
   167 688A B0 4A				bcs UEM_exit
   168 					
   169 688C			UEM_shot
   170 						
   171 688C BC 4B 66				ldy TabEnemyType,x
   172 688F B9 2F 68				lda TabEnemyDefShootCooldown,y
   173 6892 9D AB 66				sta TabEnemyStateTimer,x				; set shoot cooldown
   174
   175 						; update m_enemyShootDirection (1 - right, 2 - left)
   176 						; player width = 4 pixels, enemy1 width = 8 pixels
   177 						; compare to see if: px + (pw/2) == ex + (ew/2) (the center of the player and the enemy)
   178 						; if player info is equal or greater, then player is to the right of the enemy
   179 						;
   180 6895 A5 A2				lda m_playerLevelLeftX_H1
   181 6897 38					sec
   182 6898 E9 04				sbc #4
   183 689A 85 D3				sta m_pageZeroTempValue
   184 689C A5 A1				lda m_playerLevelLeftX_H2
   185 689E E9 00				sbc #0
   186
   187 68A0 DD 4B 67				cmp TabEnemyLevelLeftX_H2,x
   188 68A3 90 0E				bcc UEM_shoot_left
   189 68A5 D0 07				bne UEM_shoot_right
   190 					
   191 68A7 A5 D3				lda m_pageZeroTempValue
   192 68A9 DD 2B 67				cmp TabEnemyLevelLeftX_H1,x
   193 68AC 90 05				bcc UEM_shoot_left
   194 					
   195 68AE			UEM_shoot_right
   196
   197 68AE A9 01				lda #1
   198 68B0 4C B5 68				jmp UEM_just_shoot
   199 					
   200 68B3			UEM_shoot_left
   201 68B3 A9 02				lda #2
   202 					
   203 68B5			UEM_just_shoot
   204 68B5 8D 43 32				sta m_enemyShootDirection
   205
   206 						; update shot creation pos (assuming left and right pos are the same in this case)
   207 68B8 BD AB 67				lda TabEnemyShotLevelLeftX_H1,x
   208 68BB 8D 44 32				sta m_enemyShotLevelLeftX_H1
   209 68BE BD CB 67				lda TabEnemyShotLevelLeftX_H2,x
   210 68C1 8D 45 32				sta m_enemyShotLevelLeftX_H2
   211 					
   212 68C4 BD EB 67				lda TabEnemyShotLevelTopY_H1,x
   213 68C7 8D 46 32				sta m_enemyShotLevelTopY_H1
   214 68CA BD 0B 68				lda TabEnemyShotLevelTopY_H2,x
   215 68CD 8D 47 32				sta m_enemyShotLevelTopY_H2
   216
   217 68D0 20 F0 5C				jsr CheckCreateEnemyMissile
   218 					
   219 68D3 EE 42 32				inc m_enemyMissilesActive
   220 					
   221 68D6			UEM_exit
   222
   223 68D6 60					rts
   224
   225 				.endp		
   226
   227 				;	
   228 				;***************************************************************************************************
   229 				;	HitEnemy
   230 				;***************************************************************************************************
   231 				;
   232 68D7			.proc HitEnemy
   233
   234 						; should not use x register
   235 68D7 8E 39 32				stx m_hitEnemySaveX
   236
   237 						; pass parameters in m_enemyCharPosX and m_enemyCharPosY
   238 						; get address of that char (clear it and the next one) --> comes in m_lineAddressLSB, m_lineAddressMSB
   239 						; get pixel xpos for pm hpos, get pixel ypos for explosion start line
   240 						; search for enemy index at the left char position
   241 						;
   242 68DA A2 00				ldx #0
   243
   244 68DC			HE_loop	
   245
   246 68DC BD EB 66				lda TabEnemyBaseCharX,x
   247 68DF CD 36 32				cmp m_enemyCharPosX
   248 68E2 D0 1A				bne HE_next_enemy
   249 68E4 BD 0B 67				lda TabEnemyBaseCharY,x
   250 68E7 CD 37 32				cmp m_enemyCharPosY
   251 68EA D0 12				bne HE_next_enemy
   252
   253 68EC			HE_found_pos
   254
   255 68EC BD 8B 66				lda TabEnemyState,x
   256 68EF F0 66				beq HE_exit								; already disabled
   257 					
   258 68F1 BD 6B 66				lda TabEnemyLife,x
   259 68F4 F0 61				beq HE_exit								; already destroyed
   260
   261 68F6 DE 6B 66				dec TabEnemyLife,x
   262 68F9 F0 0C				beq HE_destroy_enemy					; life reached 0
   263 					
   264 68FB 4C 57 69				jmp HE_exit								; still alive (no feedback for now?)
   265
   266 68FE			HE_next_enemy
   267 					
   268 68FE E8					inx
   269 68FF EC 3B 32				cpx m_totalEnemies
   270 6902 D0 D8				bne HE_loop
   271 6904 4C 57 69				jmp HE_exit
   272 					
   273 6907			HE_destroy_enemy
   274 					
   275 6907 A9 00				lda #0
   276 6909 9D 8B 66				sta TabEnemyState,x
   277 					
   278 690C CE 3C 32				dec m_activeEnemies
   279 					
   280 690F AD 52 32				lda m_lineAddressLSB
   281 6912 85 E9				sta m_ptrLevelLine
   282 6914 AD 53 32				lda m_lineAddressMSB
   283 6917 85 EA				sta m_ptrLevelLine+1
   284 					
   285 6919 AC 36 32				ldy m_enemyCharPosX
   286 691C A9 00				lda #0
   287 691E 91 E9				sta (m_ptrLevelLine),y
   288 6920 C8					iny
   289 6921 91 E9				sta (m_ptrLevelLine),y
   290
   291 						; init explosion info (clear previous explosion if there was one active)
   292 6923 AD 3A 32				lda m_numEnemyExplosions
   293 6926 F0 03				beq HE_no_explosions
   294 					
   295 6928 20 5B 69				jsr EraseExplosionFrame
   296
   297 692B			HE_no_explosions
   298
   299 692B BD 4B 67				lda TabEnemyLevelLeftX_H2,x
   300 692E 8D 2F 32				sta m_enemyExplosionLevelLeftX_H2
   301 6931 BD 2B 67				lda TabEnemyLevelLeftX_H1,x
   302 6934 8D 2E 32				sta m_enemyExplosionLevelLeftX_H1
   303 					
   304 6937 BD 8B 67				lda TabEnemyLevelTopY_H2,x
   305 693A 8D 31 32				sta m_enemyExplosionLevelTopY_H2
   306 693D BD 6B 67				lda TabEnemyLevelTopY_H1,x
   307 6940 8D 30 32				sta m_enemyExplosionLevelTopY_H1
   308 6943 A9 00				lda #0
   309 6945 8D 32 32				sta m_enemyExplosionLevelTopY_L1
   310
   311 6948 A9 01				lda #1
   312 694A 8D 35 32				sta m_enemyExplosionStep
   313 694D A9 00				lda #0
   314 694F 8D 38 32				sta m_enemyExplosionStepIndex
   315
   316 6952 A9 01				lda #1
   317 6954 8D 3A 32				sta m_numEnemyExplosions		; 1 max for now
   318
   319 6957			HE_exit
   320
   321 6957 AE 39 32				ldx m_hitEnemySaveX
   322 					
   323 695A 60					rts
   324
   325 				.endp
   326
   327 				;	
   328 				;***************************************************************************************************
   329 				;	EraseExplosionFrame
   330 				;
   331 				;		also clear enemy explosion if the player respawns
   332 				;		also clear enemy missiles and m_enemyMissilesActive
   333 				;
   334 				;***************************************************************************************************
   335 				;
   336 695B			.proc EraseExplosionFrame
   337 						
   338 695B A2 00				ldx #0
   339 695D AC 33 32				ldy m_enemyExplosionScreenTopY_H1
   340
   341 6960			EEF_loop
   342 					
   343 6960 A9 00				lda #0
   344 6962 99 00 A7				sta p3_area_1,y
   345
   346 6965 98					tya
   347 6966 18					clc
   348 6967 6D 35 32				adc m_enemyExplosionStep
   349 696A A8					tay
   350
   351 696B E8					inx
   352 696C EC 42 66				cpx TabEnemyShapeSizeY					; should use and index here, if there is more than one enemy explosion
   353 696F D0 EF				bne EEF_loop
   354
   355 6971			EEF_exit
   356
   357 6971 60					rts
   358 						
   359 				.endp
   360
   361 				;	
   362 				;***************************************************************************************************
   363 				;	DrawExplosionFrame
   364 				;***************************************************************************************************
   365 				;
   366 6972			.proc DrawExplosionFrame
   367
   368 6972 A2 00				ldx #0
   369 6974 AC 33 32				ldy m_enemyExplosionScreenTopY_H1
   370
   371 6977			DEF_loop
   372
   373 6977 BD 43 66				lda TabEnemyShape_01,x
   374 697A 99 00 A7				sta p3_area_1,y
   375
   376 697D 98					tya
   377 697E 18					clc
   378 697F 6D 35 32				adc m_enemyExplosionStep
   379 6982 A8					tay
   380
   381 6983 E8					inx
   382 6984 EC 42 66				cpx TabEnemyShapeSizeY					; should use and index here, if there is more than one enemy explosion
   383 6987 D0 EE				bne DEF_loop
   384
   385 6989			DEF_exit
   386 						
   387 6989 60					rts
   388 						
   389 				.endp		
   390
   391 				;	
   392 				;***************************************************************************************************
   393 				;	DrawEnemyExplosion
   394 				;***************************************************************************************************
   395 				;
   396 698A			.proc DrawEnemyExplosion
   397
   398 698A AD 3A 32				lda m_numEnemyExplosions
   399 698D D0 03				bne DEE_erase
   400 698F 4C E8 69				jmp DEE_exit
   401 					
   402 				;*****	erase previous enemy explosion frame
   403 				;
   404 6992			DEE_erase
   405 					
   406 6992 20 5B 69				jsr EraseExplosionFrame
   407
   408 6995			DEE_update_frame
   409 					
   410 6995 EE 38 32				inc m_enemyExplosionStepIndex
   411 6998 AE 38 32				ldx m_enemyExplosionStepIndex
   412 699B E0 16				cpx #MAX_EXPLOSION_STEPS
   413 699D 90 08				bcc DEE_do_update
   414 					
   415 						; reached end of the explosion
   416 						;
   417 699F A9 00				lda #0
   418 69A1 8D 3A 32				sta m_numEnemyExplosions
   419
   420 69A4 4C E8 69				jmp DEE_exit
   421
   422 69A7			DEE_do_update
   423 					
   424 69A7 BD 2B 66				lda TabEnemyExplosionColor,x
   425 69AA 8D 15 D0				sta COLPM3
   426
   427 						; update step and explosion starting line
   428 						; if step +1 --> line - 3.5
   429 						; if step +2 --> line - 7.0
   430 						;
   431 69AD AD 32 32				lda m_enemyExplosionLevelTopY_L1
   432 69B0 38					sec
   433 69B1 E9 80				sbc #128
   434 69B3 8D 32 32				sta m_enemyExplosionLevelTopY_L1
   435
   436 69B6 AD 30 32				lda m_enemyExplosionLevelTopY_H1
   437 69B9 E9 03				sbc #3
   438 69BB 8D 30 32				sta m_enemyExplosionLevelTopY_H1
   439
   440 69BE AD 31 32				lda m_enemyExplosionLevelTopY_H2
   441 69C1 E9 00				sbc #0
   442 69C3 8D 31 32				sta m_enemyExplosionLevelTopY_H2
   443
   444 69C6 EE 35 32				inc m_enemyExplosionStep				; step +1 (delta between every explosion line, in this frame)
   445
   446 						; get new screen pos for the explosion
   447 						; this must use the "_H2" positions for 
   448 						; when the delta between the explosion and 
   449 						; the camera is too big (64 chars in X, or 32 chars in Y)
   450 						;
   451 69C9 AD 2E 32				lda m_enemyExplosionLevelLeftX_H1
   452 69CC 38					sec
   453 69CD E5 DB				sbc m_levelWindowX_H1
   454
   455 69CF 69 20				adc #PM_BASE_SCREEN_Y
   456 69D1 8D 33 32				sta m_enemyExplosionScreenTopY_H1
   457
   458 69D4 4C DF 69				jmp DEE_update_hpos
   459
   460
   461 				;*****	if outside the visible range in X or Y, just set it out of the screen (for a p/m the screen coordinate 0 is outside the visible range)
   462 				;
   463 69D7			DEE_set_outside
   464
   465 69D7 A9 00				lda #0
   466 69D9 8D 34 32				sta m_enemyExplosionScreenLeftX_H1
   467 69DC 8D 33 32				sta m_enemyExplosionScreenTopY_H1
   468
   469
   470 69DF			DEE_update_hpos
   471 					
   472 69DF AD 34 32				lda m_enemyExplosionScreenLeftX_H1
   473 69E2 8D 01 D0				sta HPOSP1
   474
   475 				;*****	draw new enemy explosion frame
   476 69E5			DEE_draw
   477 					
   478 69E5 20 72 69				jsr DrawExplosionFrame
   479
   480 69E8			DEE_exit
   481 					
   482 69E8 60					rts
   483 						
   484 				.endp		
   485
   330 69E9					icl "FloatPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\FloatPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		FloatPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 0006			FLOAT_PLATFORM_CHR_X    = 6
    18
    19 = 000F			FLOAT_PLATFORM_MAX_X	= 15
    20
    21 = 0005			FLOAT_PLATFORM_MAX_Y	= 5
    22
    23 = 0006			FLOAT_PLATFORM_TIMER	= 6
    24
    25 69E9 00 26 27 28 29 00	PlatformCharX			.byte $00, $26, $27, $28, $29, $00
    26
    27 69EF 00 00 00 00 00 00 + PlatformLSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    28
    29 69F7 00 00 00 00 00 00 + PlatformMSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    30
    31 69FF 00 00 00 00 00 00 + PlatformTime 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    32
    33 6A07 00 00 00 00 00 00 + PlatformType 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    34
    35 6A0F 00 00 00 00 00 00 + PlatformDirX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    36
    37 6A17 00 00 00 00 00 00 + PlatformStepX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    38
    39 6A1F 00 00 00 00 00 00 + PlatformStepY			.byte $00, $00, $00, $00, $00, $00, $00, $00
    40
    41 6A27 26 A6		PlatformCharH			.byte $26, $A6
    42
    43 6A29 00 00		PlatformCharY			.byte $00, $00
    44
    45 6A2B 00 00 00 00 00 00 + PlatformBaseLSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    46
    47 6A33 00 00 00 00 00 00 + PlatformBaseMSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    48
    49 				;
    50 				;**************************************************************************************************
    51 				; PlatformControlH
    52 				;**************************************************************************************************
    53 6A3B			.proc PlatformControlH
    54
    55 6A3B 85 96				sta m_SaveRegA
    56 6A3D 86 97				stx m_SaveRegX
    57 6A3F 84 98				sty m_SaveRegY
    58 					
    59 6A41 AD 0C 32				lda m_floatPlatformH
    60 6A44 D0 03				bne LoadIndex
    61 6A46 4C ED 6A				jmp Exit 
    62 					
    63 6A49			LoadIndex
    64 				 
    65 6A49 AE 0D 32				ldx m_floatPlatformIdx
    66 6A4C CA					dex 
    67 6A4D 86 92				stx m_param00
    68 					
    69 6A4F BD FF 69				lda PlatformTime, x
    70 6A52 C9 06				cmp #FLOAT_PLATFORM_TIMER
    71 6A54 F0 09				beq PerformAnimation
    72 					
    73 6A56 18					clc
    74 6A57 69 01				adc #01
    75 6A59 9D FF 69				sta PlatformTime, x
    76
    77 6A5C 4C ED 6A				jmp Exit
    78 					
    79 6A5F			PerformAnimation
    80 					
    81 6A5F BD EF 69				lda PlatformLSB,x
    82 6A62 85 EF				sta m_platformLevelPointer
    83 						
    84 6A64 BD F7 69				lda PlatformMSB,x
    85 6A67 85 F0				sta m_platformLevelPointer+1
    86
    87 6A69 BD 0F 6A				lda PlatformDirX, x
    88 6A6C C9 00				cmp #$00
    89 6A6E F0 07				beq MoveForward
    90 					
    91 6A70 C5 01				cmp $01
    92 6A72 F0 35				beq MoveBack 		
    93 					
    94 6A74 4C ED 6A				jmp Exit
    95 						
    96 6A77			MoveForward
    97 					
    98 6A77 A0 00				ldy #$00	
    99 6A79 A2 00				ldx #$00	
   100
   101 6A7B			moveF
   102 					
   103 6A7B BD E9 69				lda PlatformCharX, x
   104 6A7E 91 EF				sta (m_platformLevelPointer), y
   105 6A80 C8					iny
   106 6A81 E8					inx
   107 6A82 E0 06				cpx #FLOAT_PLATFORM_CHR_X
   108 6A84 D0 F5				bne moveF
   109
   110 6A86 A6 92				ldx m_param00		
   111
   112 6A88 18					clc
   113 6A89 BD 17 6A				lda PlatformStepX, x
   114 6A8C 69 01				adc #$01		
   115 6A8E 9D 17 6A				sta PlatformStepX, x
   116 6A91 C9 0F				cmp #FLOAT_PLATFORM_MAX_X	
   117 6A93 F0 46				beq SetBackDir	
   118 					
   119 6A95 18					clc
   120 6A96 BD EF 69				lda PlatformLSB,x
   121 6A99 69 01				adc #$01
   122 6A9B 9D EF 69				sta PlatformLSB,x
   123 6A9E BD F7 69				lda PlatformMSB,x
   124 6AA1 69 00				adc #$00
   125 6AA3 9D F7 69				sta PlatformMSB,x
   126 					
   127 6AA6 4C E8 6A				jmp ResetTime
   128 								 	
   129 6AA9			MoveBack
   130 					
   131 6AA9 A0 05				ldy #FLOAT_PLATFORM_CHR_X - 1	
   132 6AAB A2 05				ldx #FLOAT_PLATFORM_CHR_X - 1
   133 					
   134 6AAD			moveB
   135 					
   136 6AAD BD E9 69				lda PlatformCharX, x
   137 6AB0 91 EF				sta (m_platformLevelPointer), y
   138 6AB2 88					dey
   139 6AB3 CA					dex
   140 6AB4 E0 00				cpx #$00
   141 6AB6 D0 F5				bne moveB
   142 					
   143 6AB8 A6 92				ldx m_param00	
   144 					
   145 6ABA 38					sec
   146 6ABB BD 17 6A				lda PlatformStepX, x
   147 6ABE E9 01				sbc #$01
   148 6AC0 9D 17 6A				sta PlatformStepX, x
   149 6AC3 C9 00				cmp #$00
   150 6AC5 F0 1C				beq SetForwardDir	
   151 						
   152 6AC7 38					sec
   153 6AC8 BD EF 69				lda PlatformLSB,x
   154 6ACB E9 01				sbc #$01
   155 6ACD 9D EF 69				sta PlatformLSB,x
   156 6AD0 BD F7 69				lda PlatformMSB,x	
   157 6AD3 E9 00				sbc #0
   158 6AD5 9D F7 69				sta PlatformMSB,x
   159 						
   160 6AD8 4C E8 6A				jmp ResetTime
   161
   162 6ADB			SetBackDir
   163 					
   164 6ADB A9 01				lda #$01
   165 6ADD 9D 0F 6A				sta PlatformDirX, x
   166 6AE0 4C E8 6A				jmp ResetTime
   167
   168 6AE3			SetForwardDir
   169 					
   170 6AE3 A9 00				lda #$00
   171 6AE5 9D 0F 6A				sta PlatformDirX, x
   172 					
   173 6AE8			ResetTime
   174
   175 6AE8 A9 00				lda #00
   176 6AEA 9D FF 69				sta PlatformTime, x
   177 					
   178
   179 				;*****	Exit
   180 				;
   181 6AED			Exit
   182
   183 6AED A5 96				lda m_SaveRegA
   184 6AEF A6 97				ldx m_SaveRegX
   185 6AF1 A4 98				ldy m_SaveRegY
   186 					
   187 6AF3 60					rts
   188
   189 				.endp	
   331 6AF4					icl "LevelLoader.Asm"
Source: E:\_8BitProjects\Series\Scroller\LevelLoader.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		LevelLoader.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;**************************************************************************************************
    16 				;
    17 = 00FD			LN_BRK				= $FD
    18 = 00FE			LN_CRG				= $FE
    19 = 00FF			LN_EOD				= $FF
    20
    21 				;
    22 				;**************************************************************************************************
    23 				; 	LoadDisplayListData
    24 				;
    25 				;		Routine to load the desired display list data to Atari's LISTL and LISTH location.
    26 				;
    27 				;		Parameters:		m_param00	-	Length of data
    28 				;						m_paramW01	-	Source of data
    29 				;						m_paramW02	-	Destination of data
    30 				;
    31 				;		Destroy's A, X, and Y registers 
    32 				;
    33 				;**************************************************************************************************
    34 6AF4			.proc LoadDisplayListData
    35
    36 6AF4 A6 92				ldx m_param00
    37 6AF6 A0 00				ldy #$00
    38
    39 				;*****	Loop until data length is reached	
    40 6AF8			loop
    41 6AF8 B1 E3				lda (m_paramW01), y
    42 6AFA 91 E5				sta (m_paramW02), y
    43 6AFC C8					iny
    44 6AFD CA					dex
    45 6AFE D0 F8				bne loop
    46 						
    47 6B00 60					rts
    48
    49 				.endp
    50
    51 				;
    52 				;**************************************************************************************************
    53 				; LoadLevel
    54 				;
    55 				;	Level index is passed in zero page PARAM01
    56 				;
    57 				;**************************************************************************************************
    58 6B01			.proc LoadLevel
    59
    60 6B01 A6 93				ldx m_param01
    61 								
    62 6B03 BD 02 30				lda LevelsAddr_LSB,x					; get the LSB for the requested levels data
    63 6B06 85 E7				sta m_ptrLevelAddr						; store it in our zero page pointer
    64 6B08 BD 03 30				lda LevelsAddr_MSB,x					; get the MSB for the requested levels data
    65 6B0B 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
    66 						
    67 6B0D A9 00				lda #$00								; initialize the counters
    68 6B0F 8D 4A 32				sta m_scrYCount		
    69 6B12 8D 4B 32				sta m_datYCount
    70 						
    71 6B15 A8					tay										; begin with the Y register set
    72
    73 				;************************************************
    74 				;
    75 6B16			GetNextRowCol		
    76 						
    77 6B16 AC 4B 32				ldy m_datYCount		
    78 6B19 B1 E7				lda (m_ptrLevelAddr), y					; make sure this level is valid (while not EOD)
    79 6B1B C9 FF				cmp #LN_EOD								; check for eof of level data
    80 6B1D F0 65				beq ExitLoadLevel						; true jump to exit
    81
    82 6B1F			StoreRow
    83 						
    84 6B1F 8D 48 32				sta	m_currRow							; save off the first byte the current row
    85
    86 6B22 EE 4B 32				inc m_datYCount							; increment for COLS value
    87 6B25 AC 4B 32				ldy m_datYCount							; use it
    88 6B28 B1 E7				lda (m_ptrLevelAddr),y					; make sure this level is valid
    89 6B2A 8D 49 32				sta m_currCol							; now we have the current column
    90 						
    91 6B2D AE 49 32				ldx m_currCol
    92 6B30 BD 76 32				lda TabLevelLineAddressLSB,x			; get the low part of the screen address by row
    93 6B33 18					clc
    94 6B34 6D 48 32				adc m_currRow		
    95 6B37 85 E9				sta m_ptrLevelLine						; save it off to the current line address		
    96 6B39 BD 76 33				lda TabLevelLineAddressMSB,x			; get the low part of the screen address by row
    97 6B3C 69 00				adc #$00
    98 6B3E 85 EA				sta m_ptrLevelLine + 1					; save it off to the current line address
    99
   100 				;************************************************
   101 				;
   102 6B40			SetCharacter
   103 				  		
   104 6B40 EE 4B 32		  		inc m_datYCount							; increment for next COLS value
   105 6B43 AC 4B 32				ldy m_datYCount							; use the value
   106
   107 6B46 B1 E7				lda (m_ptrLevelAddr),y					; check for line break
   108 6B48 C9 FD				cmp #LN_BRK								; did we hit it 
   109 6B4A F0 0B				beq GetNextDataLine						; go reset the counters and test for carriage return  
   110
   111 				;		sta mm_currChar							; hold the maps character		
   112 				;		lda mm_currChar							; get the character back
   113
   114 6B4C AC 4A 32				ldy m_scrYCount
   115 6B4F 91 E9				sta (m_ptrLevelLine),y					; store it at location
   116 6B51 EE 4A 32				inc m_scrYCount
   117 						
   118 6B54 4C 40 6B				jmp SetCharacter						; do the process all over
   119 						
   120 				;************************************************
   121 				;
   122 6B57			GetNextDataLine
   123 						
   124 6B57 A9 00				lda #$00
   125 6B59 8D 4A 32				sta m_scrYCount
   126 						
   127 6B5C EE 4B 32		  		inc m_datYCount							; increment for next COLS value
   128 6B5F AC 4B 32				ldy m_datYCount							; use the value
   129 6B62 B1 E7				lda (m_ptrLevelAddr), y					; load up the next level data item
   130 						
   131 6B64 C9 FE				cmp #LN_CRG								; check for carraige return
   132 6B66 F0 03				beq SetNextRowCol						; true get the next row of data
   133 						
   134 6B68 4C 1F 6B				jmp StoreRow		
   135
   136 6B6B			SetNextRowCol
   137 6B6B EE 4B 32				inc m_datYCount		
   138 						
   139 6B6E 18					clc
   140 6B6F A5 E7				lda m_ptrLevelAddr					; get the LSB for the requested levels data
   141 6B71 6D 4B 32				adc m_datYCount
   142 6B74 85 E7				sta m_ptrLevelAddr
   143 6B76 A5 E8				lda m_ptrLevelAddr + 1
   144 6B78 69 00				adc #$00
   145 6B7A 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
   146
   147 6B7C A9 00				lda #$00
   148 6B7E 8D 4B 32				sta m_datYCount
   149
   150 6B81 4C 16 6B				jmp GetNextRowCol			
   151 				 
   152 				;************************************************
   153 				;
   154 6B84			ExitLoadLevel
   155
   156 6B84 60					rts
   157 					
   158 				.endp			
   332 6B85					icl "JoyKeyAndCollision.Asm"
Source: E:\_8BitProjects\Series\Scroller\JoyKeyAndCollision.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		JoyKeyAndCollision.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; CheckInput
    15 				;**************************************************************************************************
    16 				;
    17 6B85			.proc CheckInput
    18
    19 				;*****	Check Stick
    20 				;
    21 6B85			CI_check_stick
    22 						
    23 6B85 A5 DE				lda m_stick0
    24 6B87 85 DF				sta m_oldStick0
    25
    26 6B89 AD 00 D3				lda PORTA
    27 6B8C 29 0F				and #15
    28 6B8E 85 DE				sta m_stick0
    29
    30 				;*****	Check Shoot Right
    31 				;
    32 6B90			CI_check_shoot_right
    33 						
    34 6B90 C9 08				cmp #%1000								; right
    35 6B92 B0 07				bcs CI_check_shoot_left
    36 						
    37 6B94 A9 01				lda #PSD_RIGHT
    38 6B96 85 CE				sta m_lastPlayerShootDirection
    39 6B98 4C A3 6B				jmp CI_check_trigger
    40
    41 				;*****	Check Shoot Left
    42 				;
    43 6B9B			CI_check_shoot_left
    44 						
    45 6B9B 29 04				and #%0100								; left
    46 6B9D D0 04				bne CI_check_trigger
    47 					
    48 6B9F A9 02				lda #PSD_LEFT
    49 6BA1 85 CE				sta m_lastPlayerShootDirection
    50
    51 				;*****	Check Trigger
    52 				;
    53 6BA3			CI_check_trigger
    54 					
    55 6BA3 A5 E2				lda m_currentTrigger0
    56 6BA5 85 E0				sta m_oldTrigger0
    57
    58 6BA7 AD 10 D0				lda TRIG0								; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
    59 6BAA 85 E2				sta m_currentTrigger0	
    60 6BAC 0A					asl
    61 6BAD 05 E0				ora m_oldTrigger0
    62 6BAF 49 03				eor #%11
    63 6BB1 85 E1				sta m_triggerState
    64 							
    65 6BB3 A9 03				lda #0+GRACTL_OPTIONS					; reset trigger latches	
    66 6BB5 8D 1D D0				sta GRACTL								; reset triggers latch mode
    67 					
    68 6BB8 A9 07				lda #4+GRACTL_OPTIONS
    69 6BBA 8D 1D D0				sta GRACTL								; set triggers latch mode
    70
    71 6BBD 60					rts
    72 						
    73 				.endp	
    74 					
    75 				;
    76 				;**************************************************************************************************
    77 				; CheckPMCollisions
    78 				;**************************************************************************************************
    79 				;
    80 6BBE			.proc CheckPMCollisions
    81 					
    82 				;*****	Check Player 0 Playfield 3
    83 				;
    84 6BBE AD 0A D0				lda M2PL
    85 6BC1 29 0B				and #%1011
    86 6BC3 F0 08				beq check_p0_pf3
    87 								
    88 6BC5 A2 07				ldx #PS_LOSE
    89 6BC7 20 B5 4E				jsr SetPlayerMethod
    90 6BCA 4C F7 6B				jmp CPMC_check_m0_pf0_3
    91
    92 				;*****	Check Player 0 Playfield 3
    93 				;
    94 6BCD			check_p0_pf3
    95 						
    96 6BCD AD 04 D0				lda P0PF
    97 6BD0 29 08				and #%1000
    98 6BD2 F0 08				beq CPMC_check_m2_pl0
    99
   100 6BD4 A2 07				ldx #PS_LOSE
   101 6BD6 20 B5 4E				jsr SetPlayerMethod
   102 6BD9 4C F7 6B				jmp CPMC_check_m0_pf0_3
   103 						
   104 				;*****	Check Missile 2 Player 0
   105 				;
   106 6BDC			CPMC_check_m2_pl0
   107 					
   108 6BDC AD 0A D0				lda M2PL
   109 6BDF 29 01				and #%0001
   110 6BE1 F0 08				beq CPMC_check_m3_pl0
   111
   112 6BE3 A2 07				ldx #PS_LOSE
   113 6BE5 20 B5 4E				jsr SetPlayerMethod
   114 6BE8 4C F7 6B				jmp CPMC_check_m0_pf0_3
   115
   116 				;*****	Check Missile 3 Player 0
   117 				;
   118 6BEB			CPMC_check_m3_pl0
   119
   120 6BEB AD 0B D0				lda M3PL
   121 6BEE 29 01				and #%0001
   122 6BF0 F0 05				beq CPMC_check_m0_pf0_3
   123
   124 6BF2 A2 07				ldx #PS_LOSE
   125 6BF4 20 B5 4E				jsr SetPlayerMethod
   126
   127 				;*****	Check Missile 0 Player 0-3
   128 				;
   129 6BF7			CPMC_check_m0_pf0_3
   130 					
   131 6BF7 AD 00 D0				lda M0PF
   132 6BFA 29 09				and #%1001
   133 6BFC F0 00				beq CPMC_check_m1_pf0_3
   134
   135 				;*****	Check Missile 1 Player 0-3
   136 				;
   137 6BFE			CPMC_check_m1_pf0_3
   138 					
   139 6BFE AD 01 D0				lda M1PF
   140 6C01 29 09				and #%1001
   141 6C03 F0 00				beq ClearPMCollisions
   142
   143 				;*****	Check PM Collisions
   144 				;
   145 6C05			ClearPMCollisions
   146
   147 6C05 A9 00				lda #0
   148 6C07 8D 1E D0				sta HITCLR		
   149 						
   150 6C0A 60					rts
   151
   152 				.endp		
   153
   333 6C0B					icl "AudioManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\AudioManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AudioManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 6C0B			.proc	SfxOff
    15
    16 6C0B A9 F0			lda #$f0					;initial value
    17 6C0D 8D 4E 25			sta RMTSFXVOLUME			;sfx note volume * 16 (0,16,32,...,240)
    18 				;
    19 6C10 A9 FF			lda #$ff					;initial value
    20 6C12 85 99			sta m_sfxEffect
    21 				;
    22 6C14 A2 00			ldx #<SoundAddress					;low byte of RMT module to X reg
    23 6C16 A0 40			ldy #>SoundAddress					;hi byte of RMT module to Y reg
    24 6C18 A9 02			lda #$02						;starting song line 0-255 to A reg
    25 6C1A 20 00 24			jsr RASTERMUSICTRACKER		;Init
    26
    27 				; 		 lda #0             ; silence sound output
    28 				;	     sta m_sfxBusy
    29 				;         sta m_sfxLEFT
    30 				;         sta m_sfxRIGHT
    31 				;         
    32 				;         sta AUDCTL								; clear sound
    33 				;		 
    34 				;		 sta AUDC1
    35 				;	     sta AUDC2
    36 				;	     sta AUDC3
    37 				;	     sta AUDF4
    38 				;		 
    39 				;		 sta AUDF1
    40 				;	     sta AUDF2
    41 				;	     sta AUDF3
    42 				;	     sta AUDF4
    43 					     
    44 6C1D 60			         rts
    45 				.endp
    46
    47 6C1E			.proc SfxTrigger
    48 						 
    49 				;		 lda m_sfxBusy
    50 				;		 cmp #$01
    51 				;	 	 bne seteffect
    52 				;		 
    53 				;		 rts
    54 				;		 
    55 6C1E			seteffect
    56 				;         ldx m_sfxLEFT       ; test left channel
    57 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle 
    58 				;         bne leftnotfree   ; if not 0 then skip ahead
    59 				;         sty m_sfxLEFT       ; channel is idle, use it
    60 				;		 lda #$01
    61 				;		 sta m_sfxBusy
    62 				;         rts                ; all done
    63 				;
    64 6C1E			leftnotfree 
    65 				;         ldx m_sfxRIGHT      ; test right channel
    66 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle
    67 				;         bne rightnotfree  ; if not 0 then skip ahead
    68 				;         sty m_sfxRIGHT      ; channel is idle, use it
    69 				;		 lda #$01
    70 				;		 sta m_sfxBusy
    71 6C1E 60			         rts                ; all done
    72
    73 6C1F			rightnotfree
    74 				;         cpy m_sfxLEFT       ; test sfx priority with left channel
    75 				;         bcc leftnotlower  ; skip ahead if new sfx has lower priority than active sfx
    76 				;         sty m_sfxLEFT       ; new sfx has higher priority so use left channel
    77 				;		 lda #$01
    78 				;		 sta m_sfxBusy
    79 6C1F 60			         rts                ; all done
    80
    81 6C20			leftnotlower 
    82 				;         cpy m_sfxRIGHT      ; test sfx with right channel
    83 				;         bcc rightnotlower ; skip ahead if new sfx has lower priority than active sfx
    84 				;         sty m_sfxRIGHT      ; new sfx has higher priority so use right channel
    85 				; 		 lda #$01
    86 				;		 sta m_sfxBusy
    87 						 
    88 6C20			rightnotlower
    89 						
    90 						
    91 6C20 60			        rts
    92
    93 				.endp
    94
    95
    96 6C21			.proc SfxUpdate
    97 6C21 A5 99			lda m_sfxEffect
    98 6C23 30 0D			bmi lab2
    99 6C25 0A				asl 						; * 2
   100 6C26 A8				tay							;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   101 6C27 A2 03			ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   102 6C29 A9 0C			lda #12						;A = 12			note (0..60)
   103 6C2B 20 0F 24			jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   104 				;
   105 6C2E A9 FF			lda #$ff
   106 6C30 85 99			sta m_sfxEffect				;reinit value
   107 				;
   108 6C32			lab2
   109 6C32 20 03 24			jsr RASTERMUSICTRACKER+3	;1 play
   110 6C35 60				rts
   111 					
   112 				;	lda #%11101010
   113 				;	sta AUDCTL
   114 				;	ldx m_sfxLEFT       ; get the pointer for the left channel
   115 				;    lda SFX_F,x         ; get the Frequency value
   116 				;    sta AUDF1          ; update the Frequency register
   117 				;    lda SFX_CV,x        ; get the combined Control and Volume value
   118 				;    sta AUDC1          ; update the Volume register
   119 				;    lsr                ; prep the Control value,
   120 				;    lsr                ;   it's stored in the upper nybble
   121 				;	lsr                ;   but must be in the lower nybble
   122 				;	lsr                ;   when Control is updated
   123 				;	sta AUDC1          ; update the Control register
   124 				;	beq skipleftdec   ; skip ahead if Control = 0
   125 				;	dec m_sfxLEFT       ; update pointer for left channel
   126 				;skipleftdec 
   127 				;	ldx m_sfxRIGHT      ; get the pointer for the right channel
   128 				;	lda SFX_F,x         ; get the Frequency value
   129 				;	sta AUDF2          ; update the Frequency register
   130 				;	lda SFX_CV,x        ; get the combined Control and Volume value
   131 				;    sta AUDC2          ; update the Volume register
   132 				;    lsr                ; prep the Control value,
   133 				;    lsr                ;   it's stored in the upper nybble
   134 				;    lsr                ;   but must be in the lower nybble
   135 				;    lsr                ;   when Control is updated
   136 				;    sta AUDC2         ; update the Control register
   137 				;	beq skiprightdec  ; skip ahead if Control = 0
   138 				;    dec m_sfxRIGHT      ; update pointer for right channel
   139 				;skiprightdec
   140 				;	lda m_sfxLeft
   141 				;	cmp #$00
   142 				;	bne noreset
   143 				;	sta m_sfxBusy
   144 				;noreset	
   145 				;    rts                ; all done
   146 				.endp
   147
   334 6C36					icl "rmtplayr.asm"
Source: E:\_8BitProjects\Series\Scroller\rmtplayr.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 					IFT STEREOMODE==1
    25 				TRACKS		equ 8
    26 					ELS
    27 = 0004			TRACKS		equ 4
    28 					EIF
    29 				;*
    30 = 2400			PLAYER		equ SoundPlayerAddress
    31 				;*
    32 				;* RMT FEATures definitions file
    33 				;* For optimizations of RMT player routine to concrete RMT modul only!
    34 6C36				icl "rmt_feat.asm"
Source: E:\_8BitProjects\Series\Scroller\rmt_feat.asm
     1 				;*
     2 				;* RMT FEATures definitions
     3 				;*
     4 				;* For optimizations of RMT player routine to concrete RMT modul only!
     5 				;* --------BEGIN--------
     6 				;* asm_src/sfx/sfx.rmt
     7 = 0001			FEAT_SFX		equ 1
     8 = 0000			FEAT_GLOBALVOLUMEFADE	equ 0		;RMTGLOBALVOLUMEFADE variable
     9 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
    10 = 0001			FEAT_INSTRSPEED		equ 1
    11 = 0009			FEAT_CONSTANTSPEED		equ 9		;(0 times)
    12 = 0001			FEAT_COMMAND1		equ 1		;(96 times)
    13 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
    14 = 0001			FEAT_COMMAND3		equ 1		;(1 times)
    15 = 0001			FEAT_COMMAND4		equ 1		;(1 times)
    16 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    17 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    18 = 0001			FEAT_COMMAND7SETNOTE		equ 1		;(1 times)
    19 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    20 = 0000			FEAT_PORTAMENTO		equ 0		;(0 times)
    21 = 0000			FEAT_FILTER		equ 0		;(0 times)
    22 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    23 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    24 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    25 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    26 = 0000			FEAT_BASS16		equ 0		;(0 times)
    27 = 0000			FEAT_BASS16G1L		equ 0		;(0 times)
    28 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    29 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    30 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    32 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    33 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    34 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    35 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    36 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    37 = 0000			FEAT_TABLETYPE		equ 0		;(0 times)
    38 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    39 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    40 = 0000			FEAT_AUDCTLMANUALSET		equ 0		;(0 times)
    41 = 0000			FEAT_VOLUMEMIN		equ 0		;(0 times)
    42 = 0000			FEAT_EFFECTVIBRATO		equ 0		;(0 times)
    43 = 0000			FEAT_EFFECTFSHIFT		equ 0		;(0 times)
    44 				;* --------END--------
    35 				;*
    36 				;* RMT ZeroPage addresses
    37 					;org $80
    38 					IFT FEAT_COMMAND2
    39 				frqaddcmd2					org *+1
    40 					EIF
    41
    42 					IFT TRACKS>4
    43 					org PLAYER-$400+$40
    44 					ELS
    45 6C36				org PLAYER-$400+$e0
    46 					EIF
    47 					
    48 20E0			track_variables
    49 20E0			trackn_db	org *+TRACKS
    50 20E4			trackn_hb	org *+TRACKS
    51 20E8			trackn_idx	org *+TRACKS
    52 20EC			trackn_pause	org *+TRACKS
    53 20F0			trackn_note	org *+TRACKS
    54 20F4			trackn_volume	org *+TRACKS
    55 20F8			trackn_distor 	org *+TRACKS
    56 20FC			trackn_shiftfrq	org *+TRACKS
    57 					IFT FEAT_PORTAMENTO
    58 				trackn_portafrqc org *+TRACKS
    59 				trackn_portafrqa org *+TRACKS
    60 				trackn_portaspeed org *+TRACKS
    61 				trackn_portaspeeda org *+TRACKS
    62 				trackn_portadepth org *+TRACKS
    63 					EIF
    64 2100			trackn_instrx2	org *+TRACKS
    65 2104			trackn_instrdb	org *+TRACKS
    66 2108			trackn_instrhb	org *+TRACKS
    67 210C			trackn_instridx	org *+TRACKS
    68 2110			trackn_instrlen	org *+TRACKS
    69 2114			trackn_instrlop	org *+TRACKS
    70 2118			trackn_instrreachend	org *+TRACKS
    71 211C			trackn_volumeslidedepth org *+TRACKS
    72 2120			trackn_volumeslidevalue org *+TRACKS
    73 					IFT FEAT_VOLUMEMIN
    74 				trackn_volumemin		org *+TRACKS
    75 					EIF
    76 = 0000			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    77 					IFT FEAT_EFFECTS
    78 				trackn_effdelay			org *+TRACKS
    79 					EIF
    80 					IFT FEAT_EFFECTVIBRATO
    81 				trackn_effvibratoa		org *+TRACKS
    82 					EIF
    83 					IFT FEAT_EFFECTFSHIFT
    84 				trackn_effshift		org *+TRACKS
    85 					EIF
    86 2124			trackn_tabletypespeed org *+TRACKS
    87 					IFT FEAT_TABLEMODE
    88 				trackn_tablemode	org *+TRACKS
    89 					EIF
    90 2128			trackn_tablenote	org *+TRACKS
    91 212C			trackn_tablea		org *+TRACKS
    92 2130			trackn_tableend		org *+TRACKS
    93 					IFT FEAT_TABLEGO
    94 				trackn_tablelop		org *+TRACKS
    95 					EIF
    96 2134			trackn_tablespeeda	org *+TRACKS
    97 					IFT FEAT_FILTER||FEAT_BASS16
    98 				trackn_command		org *+TRACKS
    99 					EIF
   100 					IFT FEAT_BASS16
   101 				trackn_outnote		org *+TRACKS
   102 					EIF
   103 					IFT FEAT_FILTER
   104 				trackn_filter		org *+TRACKS
   105 					EIF
   106 2138			trackn_audf	org *+TRACKS
   107 213C			trackn_audc	org *+TRACKS
   108 					IFT FEAT_AUDCTLMANUALSET
   109 				trackn_audctl	org *+TRACKS
   110 					EIF
   111 2140			v_aspeed		org *+1
   112 2141			track_endvariables
   113 2141					org PLAYER-$100-$140-$40+2
   114 = 000C			INSTRPAR	equ 12
   115 2182			tabbeganddistor
   116 2182-2191> 80 00		 dta frqtabpure-frqtab,$00
   117 2184 80 20		 dta frqtabpure-frqtab,$20
   118 2186 80 40		 dta frqtabpure-frqtab,$40
   119 2188 00 C0		 dta frqtabbass1-frqtab,$c0
   120 218A 80 80		 dta frqtabpure-frqtab,$80
   121 218C 80 A0		 dta frqtabpure-frqtab,$a0
   122 218E 00 C0		 dta frqtabbass1-frqtab,$c0
   123 2190 40 C0		 dta frqtabbass2-frqtab,$c0
   124 						IFT FEAT_EFFECTVIBRATO
   125 				vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   126 				vib0	dta 0
   127 				vib1	dta 1,-1,-1,1
   128 				vib2	dta 1,0,-1,-1,0,1
   129 				vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   130 				vibtabnext
   131 						dta vib0-vib0+0
   132 						dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   133 						dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   134 						dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   135 						EIF
   136 2192					org PLAYER-$100-$140
   137 					IFT FEAT_BASS16
   138 				frqtabbasslo
   139 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   140 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   141 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   142 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   143 					EIF
   144 21C0					org PLAYER-$100-$100
   145 2200			frqtab
   146 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   147 2200			frqtabbass1
   148 2200-22BF> BF B6 AA A1 + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   149 2210 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   150 2220 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   151 2230 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   152 2240			frqtabbass2
   153 2240 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   154 2250 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   155 2260 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   156 2270 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   157 2280			frqtabpure
   158 2280 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   159 2290 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   160 22A0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   161 22B0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   162 					IFT FEAT_BASS16
   163 				frqtabbasshi
   164 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   165 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   166 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   167 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   168 					EIF
   169 22C0					org PLAYER-$0100
   170 2300			volumetab
   171 2300-271F> 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   172 2310 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   173 2320 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   174 2330 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   175 2340 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   176 2350 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   177 2360 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   178 2370 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   179 2380 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   180 2390 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   181 23A0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   182 23B0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   183 23C0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   184 23D0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   185 23E0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   186 23F0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   187 2400				org PLAYER
   188 				;*
   189 				;* Set of RMT main vectors:
   190 				;*
   191 2400			RASTERMUSICTRACKER
   192 2400 4C 12 24			jmp rmt_init
   193 2403 4C A4 25			jmp rmt_play
   194 2406 4C BE 25			jmp rmt_p3
   195 2409 4C 4D 24			jmp rmt_silence
   196 240C 4C EA 26			jmp SetPokey
   197 					IFT FEAT_SFX
   198 240F 4C 4A 25			jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   199 					EIF
   200 2412			rmt_init
   201 2412 86 88			stx ns
   202 2414 84 89			sty ns+1
   203 					IFT FEAT_NOSTARTINGSONGLINE==0
   204 2416 48				pha
   205 					EIF
   206 					IFT track_endvariables-track_variables>255
   207 					ldy #0
   208 					tya
   209 				ri0	sta track_variables,y
   210 					sta track_endvariables-$100,y
   211 					iny
   212 					bne ri0
   213 					ELS
   214 2417 A0 61			ldy #track_endvariables-track_variables
   215 2419 A9 00			lda #0
   216 241B 99 DF 20		ri0	sta track_variables-1,y
   217 241E 88				dey
   218 241F D0 FA			bne ri0
   219 					EIF
   220 2421 A0 04			ldy #4
   221 2423 B1 88			lda (ns),y
   222 2425 8D B2 25			sta v_maxtracklen
   223 2428 C8				iny
   224 					IFT FEAT_CONSTANTSPEED==0
   225 					lda (ns),y
   226 					sta v_speed
   227 					EIF
   228 					IFT FEAT_INSTRSPEED==0
   229 					iny
   230 					lda (ns),y
   231 					sta v_instrspeed
   232 					sta v_ainstrspeed
   233 					ELI FEAT_INSTRSPEED>1
   234 					lda #FEAT_INSTRSPEED
   235 					sta v_ainstrspeed
   236 					EIF
   237 2429 A0 08			ldy #8
   238 242B B1 88		ri1	lda (ns),y
   239 242D 99 78 00			sta p_tis-8,y
   240 2430 C8				iny
   241 2431 C0 10			cpy #8+8
   242 2433 D0 F6			bne ri1
   243 					IFT FEAT_NOSTARTINGSONGLINE==0
   244 2435 68				pla
   245 2436 48				pha
   246 					IFT TRACKS>4
   247 					asl @
   248 					asl @
   249 					asl @
   250 					clc
   251 					adc p_song
   252 					sta p_song
   253 					pla
   254 					php
   255 					and #$e0
   256 					asl @
   257 					rol @
   258 					rol @
   259 					rol @
   260 					ELS
   261 2437 0A				asl @
   262 2438 0A				asl @
   263 2439 18				clc
   264 243A 65 86			adc p_song
   265 243C 85 86			sta p_song
   266 243E 68				pla
   267 243F 08				php
   268 2440 29 C0			and #$c0
   269 2442 0A				asl @
   270 2443 2A				rol @
   271 2444 2A				rol @
   272 					EIF
   273 2445 28				plp
   274 2446 65 87			adc p_song+1
   275 2448 85 87			sta p_song+1
   276 					EIF
   277 244A 20 62 24			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   278 244D			rmt_silence
   279 					IFT STEREOMODE>0
   280 					lda #0
   281 					sta $d208
   282 					sta $d218
   283 					ldy #3
   284 					sty $d20f
   285 					sty $d21f
   286 					ldy #8
   287 				si1	sta $d200,y
   288 					sta $d210,y
   289 					dey
   290 					bpl si1
   291 					ELS
   292 244D A9 00			lda #0
   293 244F 8D 08 D2			sta $d208
   294 2452 A0 03			ldy #3
   295 2454 8C 0F D2			sty $d20f
   296 2457 A0 08			ldy #8
   297 2459 99 00 D2		si1	sta $d200,y
   298 245C 88				dey
   299 245D 10 FA			bpl si1
   300 					EIF
   301 					IFT FEAT_INSTRSPEED==0
   302 					lda v_instrspeed
   303 					ELS
   304 245F A9 01			lda #FEAT_INSTRSPEED
   305 					EIF
   306 2461 60				rts
   307 2462			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   308 2462			GetSongLine
   309 2462 A2 00			ldx #0
   310 2464 8E B0 25			stx v_abeat
   311 2467			nn0
   312 2467 8A			nn1	txa
   313 2468 A8				tay
   314 2469 B1 86			lda (p_song),y
   315 246B C9 FE			cmp #$fe
   316 246D B0 2D			bcs nn2
   317 246F A8				tay
   318 2470 B1 82			lda (p_trackslbstable),y
   319 2472 9D E0 20			sta trackn_db,x
   320 2475 B1 84			lda (p_trackshbstable),y
   321 2477 9D E4 20		nn1a sta trackn_hb,x
   322 247A A9 00			lda #0
   323 247C 9D E8 20			sta trackn_idx,x
   324 247F A9 01			lda #1
   325 2481 9D EC 20		nn1a2 sta trackn_pause,x
   326 2484 A9 80			lda #$80
   327 2486 9D 00 21			sta trackn_instrx2,x
   328 2489 E8				inx
   329 248A E0 04		xtracks01	cpx #TRACKS
   330 248C D0 D9			bne nn1
   331 248E A5 86			lda p_song
   332 2490 18				clc
   333 2491 69 04		xtracks02	adc #TRACKS
   334 2493 85 86			sta p_song
   335 2495 90 1B			bcc GetTrackLine
   336 2497 E6 87			inc p_song+1
   337 2499			nn1b
   338 2499 4C B2 24			jmp GetTrackLine
   339 249C			nn2
   340 249C F0 04			beq nn3
   341 249E			nn2a
   342 249E A9 00			lda #0
   343 24A0 F0 DF			beq nn1a2
   344 24A2			nn3
   345 24A2 A0 02			ldy #2
   346 24A4 B1 86			lda (p_song),y
   347 24A6 AA				tax
   348 24A7 C8				iny
   349 24A8 B1 86			lda (p_song),y
   350 24AA 85 87			sta p_song+1
   351 24AC 86 86			stx p_song
   352 24AE A2 00			ldx #0
   353 24B0 F0 B5			beq nn0
   354 24B2			GetTrackLine
   355 24B2			oo0
   356 24B2			oo0a
   357 					IFT FEAT_CONSTANTSPEED==0
   358 					lda #$ff
   359 				v_speed equ *-1
   360 					sta v_bspeed
   361 					EIF
   362 24B2 A2 FF			ldx #-1
   363 24B4			oo1
   364 24B4 E8				inx
   365 24B5 DE EC 20			dec trackn_pause,x
   366 24B8 D0 42			bne oo1x
   367 24BA			oo1b
   368 24BA BD E0 20			lda trackn_db,x
   369 24BD 85 88			sta ns
   370 24BF BD E4 20			lda trackn_hb,x
   371 24C2 85 89			sta ns+1
   372 24C4			oo1i
   373 24C4 BC E8 20			ldy trackn_idx,x
   374 24C7 FE E8 20			inc trackn_idx,x
   375 24CA B1 88			lda (ns),y
   376 24CC 85 8E			sta reg1
   377 24CE 29 3F			and #$3f
   378 24D0 C9 3D			cmp #61
   379 24D2 F0 0E			beq oo1a
   380 24D4 B0 32			bcs oo2
   381 24D6 9D F0 20			sta trackn_note,x
   382 					IFT FEAT_BASS16
   383 					sta trackn_outnote,x
   384 					EIF
   385 24D9 C8				iny
   386 24DA B1 88			lda (ns),y
   387 24DC 4A				lsr @
   388 24DD 29 7E			and #$3f*2
   389 24DF 9D 00 21			sta trackn_instrx2,x
   390 24E2			oo1a
   391 24E2 A9 01			lda #1
   392 24E4 9D EC 20			sta trackn_pause,x
   393 24E7 BC E8 20			ldy trackn_idx,x
   394 24EA FE E8 20			inc trackn_idx,x
   395 24ED B1 88			lda (ns),y
   396 24EF 4A				lsr @
   397 24F0 66 8E			ror reg1
   398 24F2 4A				lsr @
   399 24F3 66 8E			ror reg1
   400 24F5 A5 8E			lda reg1
   401 					IFT FEAT_GLOBALVOLUMEFADE
   402 					sec
   403 					sbc #$00
   404 				RMTGLOBALVOLUMEFADE equ *-1
   405 					bcs voig
   406 					lda #0
   407 				voig
   408 					EIF
   409 24F7 29 F0			and #$f0
   410 24F9 9D F4 20			sta trackn_volume,x
   411 24FC			oo1x
   412 24FC E0 03		xtracks03sub1	cpx #TRACKS-1
   413 24FE D0 B4			bne oo1
   414 					IFT FEAT_CONSTANTSPEED==0
   415 					lda #$ff
   416 				v_bspeed equ *-1
   417 					sta v_speed
   418 					ELS
   419 2500 A9 09			lda #FEAT_CONSTANTSPEED
   420 					EIF
   421 2502 8D 40 21			sta v_aspeed
   422 2505 4C 3F 25			jmp InitOfNewSetInstrumentsOnly
   423 2508			oo2
   424 2508 C9 3F			cmp #63
   425 250A F0 1B			beq oo63
   426 250C A5 8E			lda reg1
   427 250E 29 C0			and #$c0
   428 2510 F0 09			beq oo62_b
   429 2512 0A				asl @
   430 2513 2A				rol @
   431 2514 2A				rol @
   432 2515 9D EC 20			sta trackn_pause,x
   433 2518 4C FC 24			jmp oo1x
   434 251B			oo62_b
   435 251B C8				iny
   436 251C B1 88			lda (ns),y
   437 251E 9D EC 20			sta trackn_pause,x
   438 2521 FE E8 20			inc trackn_idx,x
   439 2524 4C FC 24			jmp oo1x
   440 2527			oo63
   441 2527 A5 8E			lda reg1
   442 					IFT FEAT_CONSTANTSPEED==0
   443 					bmi oo63_1X
   444 					iny
   445 					lda (ns),y
   446 					sta v_bspeed
   447 					inc trackn_idx,x
   448 					jmp oo1i
   449 				oo63_1X
   450 					EIF
   451 2529 C9 FF			cmp #255
   452 252B F0 09			beq oo63_11
   453 252D C8				iny
   454 252E B1 88			lda (ns),y
   455 2530 9D E8 20			sta trackn_idx,x
   456 2533 4C C4 24			jmp oo1i
   457 2536			oo63_11
   458 2536 4C 62 24			jmp GetSongLine
   459 2539 4C BE 25		p2xrmtp3	jmp rmt_p3
   460 253C CA			p2x0 dex
   461 253D 30 FA			 bmi p2xrmtp3
   462 253F			InitOfNewSetInstrumentsOnly
   463 253F BC 00 21		p2x1 ldy trackn_instrx2,x
   464 2542 30 F8			bmi p2x0
   465 					IFT FEAT_SFX
   466 2544 20 52 25			jsr SetUpInstrumentY2
   467 2547 4C 3C 25			jmp p2x0
   468 254A			rmt_sfx
   469 254A 9D F0 20			sta trackn_note,x
   470 					IFT FEAT_BASS16
   471 					sta trackn_outnote,x
   472 					EIF
   473 254D A9 F0			lda #$f0				;* sfx note volume*16
   474 = 254E			RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   475 254F 9D F4 20			sta trackn_volume,x
   476 					EIF
   477 2552			SetUpInstrumentY2
   478 2552 B1 80			lda (p_instrstable),y
   479 2554 9D 04 21			sta trackn_instrdb,x
   480 2557 85 8C			sta nt
   481 2559 C8				iny
   482 255A B1 80			lda (p_instrstable),y
   483 255C 9D 08 21			sta trackn_instrhb,x
   484 255F 85 8D			sta nt+1
   485 					IFT FEAT_FILTER
   486 					lda #1
   487 					sta trackn_filter,x
   488 					EIF
   489 					IFT FEAT_TABLEGO
   490 					IFT FEAT_FILTER
   491 					tay
   492 					ELS
   493 					ldy #1
   494 					EIF
   495 					lda (nt),y
   496 					sta trackn_tablelop,x
   497 					iny
   498 					ELS
   499 2561 A0 02			ldy #2
   500 					EIF
   501 2563 B1 8C			lda (nt),y
   502 2565 9D 10 21			sta trackn_instrlen,x
   503 2568 C8				iny
   504 2569 B1 8C			lda (nt),y
   505 256B 9D 14 21			sta trackn_instrlop,x
   506 256E C8				iny
   507 256F B1 8C			lda (nt),y
   508 2571 9D 24 21			sta trackn_tabletypespeed,x
   509 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   510 					and #$3f
   511 					EIF
   512 2574 9D 34 21			sta trackn_tablespeeda,x
   513 					IFT FEAT_TABLEMODE
   514 					lda (nt),y
   515 					and #$40
   516 					sta trackn_tablemode,x
   517 					EIF
   518 					IFT FEAT_AUDCTLMANUALSET
   519 					iny
   520 					lda (nt),y
   521 					sta trackn_audctl,x
   522 					iny
   523 					ELS
   524 2577 A0 06			ldy #6
   525 					EIF
   526 2579 B1 8C			lda (nt),y
   527 257B 9D 1C 21			sta trackn_volumeslidedepth,x
   528 					IFT FEAT_VOLUMEMIN
   529 					iny
   530 					lda (nt),y
   531 					sta trackn_volumemin,x
   532 					IFT FEAT_EFFECTS
   533 					iny
   534 					EIF
   535 					ELS
   536 					IFT FEAT_EFFECTS
   537 					ldy #8
   538 					EIF
   539 					EIF
   540 					IFT FEAT_EFFECTS
   541 					lda (nt),y
   542 					sta trackn_effdelay,x
   543 					IFT FEAT_EFFECTVIBRATO
   544 					iny
   545 					lda (nt),y
   546 					tay
   547 					lda vibtabbeg,y
   548 					sta trackn_effvibratoa,x
   549 					EIF
   550 					IFT FEAT_EFFECTFSHIFT
   551 					ldy #10
   552 					lda (nt),y
   553 					sta trackn_effshift,x
   554 					EIF
   555 					EIF
   556 257E A9 80			lda #128
   557 2580 9D 20 21			sta trackn_volumeslidevalue,x
   558 2583 9D 00 21			sta trackn_instrx2,x
   559 2586 0A				asl @
   560 2587 9D 18 21			sta trackn_instrreachend,x
   561 258A 9D FC 20			sta trackn_shiftfrq,x
   562 258D A8				tay
   563 258E B1 8C			lda (nt),y
   564 2590 9D 30 21			sta trackn_tableend,x
   565 2593 69 00			adc #0
   566 2595 9D 0C 21			sta trackn_instridx,x
   567 2598 A9 0C			lda #INSTRPAR
   568 259A 9D 2C 21			sta trackn_tablea,x
   569 259D A8				tay
   570 259E B1 8C			lda (nt),y
   571 25A0 9D 28 21			sta trackn_tablenote,x
   572 25A3			xata_rtshere
   573 					IFT FEAT_SFX
   574 25A3 60				rts
   575 					ELS
   576 					jmp p2x0
   577 					EIF
   578 25A4			rmt_play
   579 25A4			rmt_p0
   580 25A4 20 EA 26			jsr SetPokey
   581 25A7			rmt_p1
   582 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   583 					dec v_ainstrspeed
   584 					bne rmt_p3
   585 					EIF
   586 					IFT FEAT_INSTRSPEED==0
   587 					lda #$ff
   588 				v_instrspeed	equ *-1
   589 					sta v_ainstrspeed
   590 					ELI FEAT_INSTRSPEED>1
   591 					lda #FEAT_INSTRSPEED
   592 					sta v_ainstrspeed
   593 					EIF
   594 25A7			rmt_p2
   595 25A7 CE 40 21			dec v_aspeed
   596 25AA D0 12			bne rmt_p3
   597 25AC EE B0 25			inc v_abeat
   598 25AF A9 FF			lda #$ff
   599 = 25B0			v_abeat equ *-1
   600 25B1 C9 FF			cmp #$ff
   601 = 25B2			v_maxtracklen equ *-1
   602 25B3 F0 03			beq p2o3
   603 25B5 4C B2 24			jmp GetTrackLine
   604 25B8			p2o3
   605 25B8 4C 62 24			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   606 25BB 4C D9 26		go_ppnext	jmp ppnext
   607 25BE			rmt_p3
   608 25BE A9 22			lda #>frqtab
   609 25C0 85 8B			sta nr+1
   610 25C2 A2 03		xtracks05sub1	ldx #TRACKS-1
   611 25C4			pp1
   612 25C4 BD 08 21			lda trackn_instrhb,x
   613 25C7 F0 F2			beq go_ppnext
   614 25C9 85 89			sta ns+1
   615 25CB BD 04 21			lda trackn_instrdb,x
   616 25CE 85 88			sta ns
   617 25D0 BC 0C 21			ldy trackn_instridx,x
   618 25D3 B1 88			lda (ns),y
   619 25D5 85 8E			sta reg1
   620 25D7 C8				iny
   621 25D8 B1 88			lda (ns),y
   622 25DA 85 8F			sta reg2
   623 25DC C8				iny
   624 25DD B1 88			lda (ns),y
   625 25DF 85 90			sta reg3
   626 25E1 C8				iny
   627 25E2 98				tya
   628 25E3 DD 10 21			cmp trackn_instrlen,x
   629 25E6 90 0A			bcc pp2
   630 25E8 F0 08			beq pp2
   631 25EA A9 80			lda #$80
   632 25EC 9D 18 21			sta trackn_instrreachend,x
   633 25EF			pp1b
   634 25EF BD 14 21			lda trackn_instrlop,x
   635 25F2 9D 0C 21		pp2	sta trackn_instridx,x
   636 25F5 A5 8E			lda reg1
   637 					IFT TRACKS>4
   638 					cpx #4
   639 					bcc pp2s
   640 					lsr @
   641 					lsr @
   642 					lsr @
   643 					lsr @
   644 				pp2s
   645 					EIF
   646 25F7 29 0F			and #$0f
   647 25F9 1D F4 20			ora trackn_volume,x
   648 25FC A8				tay
   649 25FD B9 00 23			lda volumetab,y
   650 2600 85 91			sta tmp
   651 2602 A5 8F			lda reg2
   652 2604 29 0E			and #$0e
   653 2606 A8				tay
   654 2607 B9 82 21			lda tabbeganddistor,y
   655 260A 85 8A			sta nr
   656 260C A5 91			lda tmp
   657 260E 19 83 21			ora tabbeganddistor+1,y
   658 2611 9D 3C 21			sta trackn_audc,x
   659 2614			InstrumentsEffects
   660 					IFT FEAT_EFFECTS
   661 					lda trackn_effdelay,x
   662 					beq ei2
   663 					cmp #1
   664 					bne ei1
   665 					lda trackn_shiftfrq,x
   666 					IFT FEAT_EFFECTFSHIFT
   667 					clc
   668 					adc trackn_effshift,x
   669 					EIF
   670 					IFT FEAT_EFFECTVIBRATO
   671 					clc
   672 					ldy trackn_effvibratoa,x
   673 					adc vib0,y
   674 					EIF
   675 					sta trackn_shiftfrq,x
   676 					IFT FEAT_EFFECTVIBRATO
   677 					lda vibtabnext,y
   678 					sta trackn_effvibratoa,x
   679 					EIF
   680 					jmp ei2
   681 				ei1
   682 					dec trackn_effdelay,x
   683 				ei2
   684 					EIF
   685 2614 BC 30 21			ldy trackn_tableend,x
   686 2617 C0 0D			cpy #INSTRPAR+1
   687 2619 90 30			bcc ei3
   688 261B BD 34 21			lda trackn_tablespeeda,x
   689 261E 10 25			bpl ei2f
   690 2620			ei2c
   691 2620 98				tya
   692 2621 DD 2C 21			cmp trackn_tablea,x
   693 2624 D0 07			bne ei2c2
   694 					IFT FEAT_TABLEGO
   695 					lda trackn_tablelop,x
   696 					ELS
   697 2626 A9 0C			lda #INSTRPAR
   698 					EIF
   699 2628 9D 2C 21			sta trackn_tablea,x
   700 262B D0 03			bne ei2a
   701 262D			ei2c2
   702 262D FE 2C 21			inc trackn_tablea,x
   703 2630			ei2a
   704 2630 BD 04 21			lda trackn_instrdb,x
   705 2633 85 8C			sta nt
   706 2635 BD 08 21			lda trackn_instrhb,x
   707 2638 85 8D			sta nt+1
   708 263A BC 2C 21			ldy trackn_tablea,x
   709 263D B1 8C			lda (nt),y
   710 					IFT FEAT_TABLEMODE
   711 					ldy trackn_tablemode,x
   712 					beq ei2e
   713 					clc
   714 					adc trackn_tablenote,x
   715 				ei2e
   716 					EIF
   717 263F 9D 28 21			sta trackn_tablenote,x
   718 2642 BD 24 21			lda trackn_tabletypespeed,x
   719 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   720 					and #$3f
   721 					EIF
   722 2645			ei2f
   723 2645 38				sec
   724 2646 E9 01			sbc #1
   725 2648 9D 34 21			sta trackn_tablespeeda,x
   726 264B			ei3
   727 264B BD 18 21			lda trackn_instrreachend,x
   728 264E 10 18			bpl ei4
   729 2650 BD F4 20			lda trackn_volume,x
   730 2653 F0 13			beq ei4
   731 					IFT FEAT_VOLUMEMIN
   732 					cmp trackn_volumemin,x
   733 					beq ei4
   734 					bcc ei4
   735 					EIF
   736 2655 A8				tay
   737 2656 BD 20 21			lda trackn_volumeslidevalue,x
   738 2659 18				clc
   739 265A 7D 1C 21			adc trackn_volumeslidedepth,x
   740 265D 9D 20 21			sta trackn_volumeslidevalue,x
   741 2660 90 06			bcc ei4
   742 2662 98				tya
   743 2663 E9 10			sbc #16
   744 2665 9D F4 20			sta trackn_volume,x
   745 2668			ei4
   746 					IFT FEAT_COMMAND2
   747 					lda #0
   748 					sta frqaddcmd2
   749 					EIF
   750 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   751 2668 A5 8F			lda reg2
   752 					IFT FEAT_FILTER||FEAT_BASS16
   753 					sta trackn_command,x
   754 					EIF
   755 266A 29 70			and #$70
   756 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   757 					beq cmd0
   758 					ELS
   759 266C 4A				lsr @
   760 266D 4A				lsr @
   761 266E 8D 72 26			sta jmx+1
   762 2671 90 FE		jmx	bcc *
   763 2673 4C BA 26			jmp cmd0
   764 2676 EA				nop
   765 2677 4C 92 26			jmp cmd1
   766 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   767 267A EA				nop
   768 267B 4C 97 26			jmp cmd2
   769 					EIF
   770 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   771 267E EA				nop
   772 267F 4C 97 26			jmp cmd3
   773 					EIF
   774 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   775 2682 EA				nop
   776 2683 4C A3 26			jmp cmd4
   777 					EIF
   778 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   779 2686 EA				nop
   780 2687 4C B2 26			jmp cmd5
   781 					EIF
   782 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   783 268A EA				nop
   784 268B 4C B2 26			jmp cmd6
   785 					EIF
   786 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   787 268E EA				nop
   788 268F 4C B2 26			jmp cmd7
   789 					EIF
   790 					EIF
   791 					ELS
   792 					IFT FEAT_FILTER||FEAT_BASS16
   793 					lda reg2
   794 					sta trackn_command,x
   795 					EIF
   796 					EIF
   797 2692			cmd1
   798 					IFT FEAT_COMMAND1
   799 2692 A5 90			lda reg3
   800 2694 4C D6 26			jmp cmd0c
   801 					EIF
   802 2697			cmd2
   803 					IFT FEAT_COMMAND2
   804 					lda reg3
   805 					sta frqaddcmd2
   806 					lda trackn_note,x
   807 					jmp cmd0a
   808 					EIF
   809 2697			cmd3
   810 					IFT FEAT_COMMAND3
   811 2697 BD F0 20			lda trackn_note,x
   812 269A 18				clc
   813 269B 65 90			adc reg3
   814 269D 9D F0 20			sta trackn_note,x
   815 26A0 4C C0 26			jmp cmd0a
   816 					EIF
   817 26A3			cmd4
   818 					IFT FEAT_COMMAND4
   819 26A3 BD FC 20			lda trackn_shiftfrq,x
   820 26A6 18				clc
   821 26A7 65 90			adc reg3
   822 26A9 9D FC 20			sta trackn_shiftfrq,x
   823 26AC BD F0 20			lda trackn_note,x
   824 26AF 4C C0 26			jmp cmd0a
   825 					EIF
   826 26B2			cmd5
   827 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   828 					IFT FEAT_TABLETYPE
   829 					lda trackn_tabletypespeed,x
   830 					bpl cmd5a1
   831 					ldy trackn_note,x
   832 					lda (nr),y
   833 					clc
   834 					adc trackn_tablenote,x
   835 					jmp cmd5ax
   836 					EIF
   837 				cmd5a1
   838 					lda trackn_note,x
   839 					clc
   840 					adc trackn_tablenote,x
   841 					cmp #61
   842 					bcc cmd5a2
   843 					lda #63
   844 				cmd5a2
   845 					tay
   846 					lda (nr),y
   847 				cmd5ax
   848 					sta trackn_portafrqc,x
   849 					ldy reg3
   850 					bne cmd5a
   851 					sta trackn_portafrqa,x
   852 				cmd5a
   853 					tya
   854 					lsr @
   855 					lsr @
   856 					lsr @
   857 					lsr @
   858 					sta trackn_portaspeed,x
   859 					sta trackn_portaspeeda,x
   860 					lda reg3
   861 					and #$0f
   862 					sta trackn_portadepth,x
   863 					lda trackn_note,x
   864 					jmp cmd0a
   865 					ELI FEAT_COMMAND5
   866 					lda trackn_note,x
   867 					jmp cmd0a
   868 					EIF
   869 26B2			cmd6
   870 					IFT FEAT_COMMAND6&&FEAT_FILTER
   871 					lda reg3
   872 					clc
   873 					adc trackn_filter,x
   874 					sta trackn_filter,x
   875 					lda trackn_note,x
   876 					jmp cmd0a
   877 					ELI FEAT_COMMAND6
   878 					lda trackn_note,x
   879 					jmp cmd0a
   880 					EIF
   881 26B2			cmd7
   882 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   883 					IFT FEAT_COMMAND7SETNOTE
   884 26B2 A5 90			lda reg3
   885 					IFT FEAT_COMMAND7VOLUMEONLY
   886 					cmp #$80
   887 					beq cmd7a
   888 					EIF
   889 26B4 9D F0 20			sta trackn_note,x
   890 26B7 4C C0 26			jmp cmd0a
   891 					EIF
   892 					IFT FEAT_COMMAND7VOLUMEONLY
   893 				cmd7a
   894 					lda trackn_audc,x
   895 					ora #$f0
   896 					sta trackn_audc,x
   897 					lda trackn_note,x
   898 					jmp cmd0a
   899 					EIF
   900 					EIF
   901 26BA			cmd0
   902 26BA BD F0 20			lda trackn_note,x
   903 26BD 18				clc
   904 26BE 65 90			adc reg3
   905 26C0			cmd0a
   906 					IFT FEAT_TABLETYPE
   907 					ldy trackn_tabletypespeed,x
   908 					bmi cmd0b
   909 					EIF
   910 26C0 18				clc
   911 26C1 7D 28 21			adc trackn_tablenote,x
   912 26C4 C9 3D			cmp #61
   913 26C6 90 07			bcc cmd0a1
   914 26C8 A9 00			lda #0
   915 26CA 9D 3C 21			sta trackn_audc,x
   916 26CD A9 3F			lda #63
   917 26CF			cmd0a1
   918 					IFT FEAT_BASS16
   919 					sta trackn_outnote,x
   920 					EIF
   921 26CF A8				tay
   922 26D0 B1 8A			lda (nr),y
   923 26D2 18				clc
   924 26D3 7D FC 20			adc trackn_shiftfrq,x
   925 					IFT FEAT_COMMAND2
   926 					clc
   927 					adc frqaddcmd2
   928 					EIF
   929 					IFT FEAT_TABLETYPE
   930 					jmp cmd0c
   931 				cmd0b
   932 					cmp #61
   933 					bcc cmd0b1
   934 					lda #0
   935 					sta trackn_audc,x
   936 					lda #63
   937 				cmd0b1
   938 					tay
   939 					lda trackn_shiftfrq,x
   940 					clc
   941 					adc trackn_tablenote,x
   942 					clc
   943 					adc (nr),y
   944 					IFT FEAT_COMMAND2
   945 					clc
   946 					adc frqaddcmd2
   947 					EIF
   948 					EIF
   949 26D6			cmd0c
   950 26D6 9D 38 21			sta trackn_audf,x
   951 26D9			pp9
   952 					IFT FEAT_PORTAMENTO
   953 					lda trackn_portaspeeda,x
   954 					beq pp10
   955 					dec trackn_portaspeeda,x
   956 					bne pp10
   957 					lda trackn_portaspeed,x
   958 					sta trackn_portaspeeda,x
   959 					lda trackn_portafrqa,x
   960 					cmp trackn_portafrqc,x
   961 					beq pp10
   962 					bcs pps1
   963 					adc trackn_portadepth,x
   964 					bcs pps8
   965 					cmp trackn_portafrqc,x
   966 					bcs pps8
   967 					jmp pps9
   968 				pps1
   969 					sbc trackn_portadepth,x
   970 					bcc pps8
   971 					cmp trackn_portafrqc,x
   972 					bcs pps9
   973 				pps8
   974 					lda trackn_portafrqc,x
   975 				pps9
   976 					sta trackn_portafrqa,x
   977 				pp10
   978 					lda reg2
   979 					and #$01
   980 					beq pp11
   981 					lda trackn_portafrqa,x
   982 					clc
   983 					adc trackn_shiftfrq,x
   984 					sta trackn_audf,x
   985 				pp11
   986 					EIF
   987 26D9			ppnext
   988 26D9 CA				dex
   989 26DA 30 03			bmi rmt_p4
   990 26DC 4C C4 25			jmp pp1
   991 26DF			rmt_p4
   992 					IFT FEAT_AUDCTLMANUALSET
   993 					lda trackn_audctl+0
   994 					ora trackn_audctl+1
   995 					ora trackn_audctl+2
   996 					ora trackn_audctl+3
   997 					tax
   998 					ELS
   999 26DF A2 00			ldx #0
  1000 					EIF
  1001 26E1			qq1
  1002 26E1 8E EB 26			stx v_audctl
  1003 					IFT FEAT_FILTER
  1004 					IFT FEAT_FILTERG0L
  1005 					lda trackn_command+0
  1006 					bpl qq2
  1007 					lda trackn_audc+0
  1008 					and #$0f
  1009 					beq qq2
  1010 					lda trackn_audf+0
  1011 					clc
  1012 					adc trackn_filter+0
  1013 					sta trackn_audf+2
  1014 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1015 					lda trackn_audc+2
  1016 					and #$10
  1017 					bne qq1a
  1018 					EIF
  1019 					lda #0
  1020 					sta trackn_audc+2
  1021 				qq1a
  1022 					txa
  1023 					ora #4
  1024 					tax
  1025 					EIF
  1026 				qq2
  1027 					IFT FEAT_FILTERG1L
  1028 					lda trackn_command+1
  1029 					bpl qq3
  1030 					lda trackn_audc+1
  1031 					and #$0f
  1032 					beq qq3
  1033 					lda trackn_audf+1
  1034 					clc
  1035 					adc trackn_filter+1
  1036 					sta trackn_audf+3
  1037 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1038 					lda trackn_audc+3
  1039 					and #$10
  1040 					bne qq2a
  1041 					EIF
  1042 					lda #0
  1043 					sta trackn_audc+3
  1044 				qq2a
  1045 					txa
  1046 					ora #2
  1047 					tax
  1048 					EIF
  1049 				qq3
  1050 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1051 					cpx v_audctl
  1052 					bne qq5
  1053 					EIF
  1054 					EIF
  1055 					IFT FEAT_BASS16
  1056 					IFT FEAT_BASS16G1L
  1057 					lda trackn_command+1
  1058 					and #$0e
  1059 					cmp #6
  1060 					bne qq4
  1061 					lda trackn_audc+1
  1062 					and #$0f
  1063 					beq qq4
  1064 					ldy trackn_outnote+1
  1065 					lda frqtabbasslo,y
  1066 					sta trackn_audf+0
  1067 					lda frqtabbasshi,y
  1068 					sta trackn_audf+1
  1069 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1070 					lda trackn_audc+0
  1071 					and #$10
  1072 					bne qq3a
  1073 					EIF
  1074 					lda #0
  1075 					sta trackn_audc+0
  1076 				qq3a
  1077 					txa
  1078 					ora #$50
  1079 					tax
  1080 					EIF
  1081 				qq4
  1082 					IFT FEAT_BASS16G3L
  1083 					lda trackn_command+3
  1084 					and #$0e
  1085 					cmp #6
  1086 					bne qq5
  1087 					lda trackn_audc+3
  1088 					and #$0f
  1089 					beq qq5
  1090 					ldy trackn_outnote+3
  1091 					lda frqtabbasslo,y
  1092 					sta trackn_audf+2
  1093 					lda frqtabbasshi,y
  1094 					sta trackn_audf+3
  1095 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1096 					lda trackn_audc+2
  1097 					and #$10
  1098 					bne qq4a
  1099 					EIF
  1100 					lda #0
  1101 					sta trackn_audc+2
  1102 				qq4a
  1103 					txa
  1104 					ora #$28
  1105 					tax
  1106 					EIF
  1107 					EIF
  1108 26E4			qq5
  1109 26E4 8E EB 26			stx v_audctl
  1110 					IFT TRACKS>4
  1111 					IFT FEAT_AUDCTLMANUALSET
  1112 					lda trackn_audctl+4
  1113 					ora trackn_audctl+5
  1114 					ora trackn_audctl+6
  1115 					ora trackn_audctl+7
  1116 					tax
  1117 					ELS
  1118 					ldx #0
  1119 					EIF
  1120 					stx v_audctl2
  1121 					IFT FEAT_FILTER
  1122 					IFT FEAT_FILTERG0R
  1123 					lda trackn_command+0+4
  1124 					bpl qs2
  1125 					lda trackn_audc+0+4
  1126 					and #$0f
  1127 					beq qs2
  1128 					lda trackn_audf+0+4
  1129 					clc
  1130 					adc trackn_filter+0+4
  1131 					sta trackn_audf+2+4
  1132 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1133 					lda trackn_audc+2+4
  1134 					and #$10
  1135 					bne qs1a
  1136 					EIF
  1137 					lda #0
  1138 					sta trackn_audc+2+4
  1139 				qs1a
  1140 					txa
  1141 					ora #4
  1142 					tax
  1143 					EIF
  1144 				qs2
  1145 					IFT FEAT_FILTERG1R
  1146 					lda trackn_command+1+4
  1147 					bpl qs3
  1148 					lda trackn_audc+1+4
  1149 					and #$0f
  1150 					beq qs3
  1151 					lda trackn_audf+1+4
  1152 					clc
  1153 					adc trackn_filter+1+4
  1154 					sta trackn_audf+3+4
  1155 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1156 					lda trackn_audc+3+4
  1157 					and #$10
  1158 					bne qs2a
  1159 					EIF
  1160 					lda #0
  1161 					sta trackn_audc+3+4
  1162 				qs2a
  1163 					txa
  1164 					ora #2
  1165 					tax
  1166 					EIF
  1167 				qs3
  1168 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1169 					cpx v_audctl2
  1170 					bne qs5
  1171 					EIF
  1172 					EIF
  1173 					IFT FEAT_BASS16
  1174 					IFT FEAT_BASS16G1R
  1175 					lda trackn_command+1+4
  1176 					and #$0e
  1177 					cmp #6
  1178 					bne qs4
  1179 					lda trackn_audc+1+4
  1180 					and #$0f
  1181 					beq qs4
  1182 					ldy trackn_outnote+1+4
  1183 					lda frqtabbasslo,y
  1184 					sta trackn_audf+0+4
  1185 					lda frqtabbasshi,y
  1186 					sta trackn_audf+1+4
  1187 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1188 					lda trackn_audc+0+4
  1189 					and #$10
  1190 					bne qs3a
  1191 					EIF
  1192 					lda #0
  1193 					sta trackn_audc+0+4
  1194 				qs3a
  1195 					txa
  1196 					ora #$50
  1197 					tax
  1198 					EIF
  1199 				qs4
  1200 					IFT FEAT_BASS16G3R
  1201 					lda trackn_command+3+4
  1202 					and #$0e
  1203 					cmp #6
  1204 					bne qs5
  1205 					lda trackn_audc+3+4
  1206 					and #$0f
  1207 					beq qs5
  1208 					ldy trackn_outnote+3+4
  1209 					lda frqtabbasslo,y
  1210 					sta trackn_audf+2+4
  1211 					lda frqtabbasshi,y
  1212 					sta trackn_audf+3+4
  1213 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1214 					lda trackn_audc+2+4
  1215 					and #$10
  1216 					bne qs4a
  1217 					EIF
  1218 					lda #0
  1219 					sta trackn_audc+2+4
  1220 				qs4a
  1221 					txa
  1222 					ora #$28
  1223 					tax
  1224 					EIF
  1225 					EIF
  1226 				qs5
  1227 					stx v_audctl2
  1228 					EIF
  1229 26E7			rmt_p5
  1230 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1231 					lda #$ff
  1232 				v_ainstrspeed equ *-1
  1233 					ELS
  1234 26E7 A9 01			lda #1
  1235 					EIF
  1236 26E9 60				rts
  1237 26EA			SetPokey
  1238 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1239 					ldy #$ff
  1240 				v_audctl2 equ *-1
  1241 					lda trackn_audf+0+4
  1242 					ldx trackn_audf+0
  1243 				xstastx01	sta $d210
  1244 					stx $d200
  1245 					lda trackn_audc+0+4
  1246 					ldx trackn_audc+0
  1247 				xstastx02	sta $d211
  1248 					stx $d201
  1249 					lda trackn_audf+1+4
  1250 					ldx trackn_audf+1
  1251 				xstastx03	sta $d212
  1252 					stx $d202
  1253 					lda trackn_audc+1+4
  1254 					ldx trackn_audc+1
  1255 				xstastx04	sta $d213
  1256 					stx $d203
  1257 					lda trackn_audf+2+4
  1258 					ldx trackn_audf+2
  1259 				xstastx05	sta $d214
  1260 					stx $d204
  1261 					lda trackn_audc+2+4
  1262 					ldx trackn_audc+2
  1263 				xstastx06	sta $d215
  1264 					stx $d205
  1265 					lda trackn_audf+3+4
  1266 					ldx trackn_audf+3
  1267 				xstastx07	sta $d216
  1268 					stx $d206
  1269 					lda trackn_audc+3+4
  1270 					ldx trackn_audc+3
  1271 				xstastx08	sta $d217
  1272 					stx $d207
  1273 					lda #$ff
  1274 				v_audctl equ *-1
  1275 				xstysta01	sty $d218
  1276 					sta $d208
  1277 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1278 26EA A0 FF			ldy #$ff
  1279 = 26EB			v_audctl equ *-1
  1280 26EC AD 38 21			lda trackn_audf+0
  1281 26EF AE 3C 21			ldx trackn_audc+0
  1282 26F2 8D 00 D2			sta $d200
  1283 26F5 8E 01 D2			stx $d201
  1284 26F8 AD 39 21			lda trackn_audf+1
  1285 26FB AE 3D 21			ldx trackn_audc+1
  1286 26FE 8D 02 D2			sta $d200+2
  1287 2701 8E 03 D2			stx $d201+2
  1288 2704 AD 3A 21			lda trackn_audf+2
  1289 2707 AE 3E 21			ldx trackn_audc+2
  1290 270A 8D 04 D2			sta $d200+4
  1291 270D 8E 05 D2			stx $d201+4
  1292 2710 AD 3B 21			lda trackn_audf+3
  1293 2713 AE 3F 21			ldx trackn_audc+3
  1294 2716 8D 06 D2			sta $d200+6
  1295 2719 8E 07 D2			stx $d201+6
  1296 271C 8C 08 D2			sty $d208
  1297 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1298 					ldy #$ff
  1299 				v_audctl equ *-1
  1300 					lda trackn_audf+0
  1301 					ldx trackn_audc+0
  1302 					sta $d200
  1303 					stx $d201
  1304 					sta $d210
  1305 					lda trackn_audf+1
  1306 					ldx trackn_audc+1
  1307 					sta $d210+2
  1308 					stx $d211+2
  1309 					lda trackn_audf+2
  1310 					ldx trackn_audc+2
  1311 					sta $d210+4
  1312 					stx $d211+4
  1313 					sta $d200+4
  1314 					lda trackn_audf+3
  1315 					ldx trackn_audc+3
  1316 					sta $d200+6
  1317 					stx $d201+6
  1318 					sta $d210+6
  1319 					sty $d218
  1320 					sty $d208
  1321 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1322 					ldy #$ff
  1323 				v_audctl equ *-1
  1324 					lda trackn_audf+0
  1325 					ldx trackn_audc+0
  1326 					sta $d200
  1327 					stx $d201
  1328 					lda trackn_audf+1
  1329 					ldx trackn_audc+1
  1330 					sta $d200+2
  1331 					stx $d201+2
  1332 					lda trackn_audf+2
  1333 					ldx trackn_audc+2
  1334 					sta $d210+4
  1335 					stx $d211+4
  1336 					sta $d200+4
  1337 					lda trackn_audf+3
  1338 					ldx trackn_audc+3
  1339 					sta $d210+6
  1340 					stx $d211+6
  1341 					sta $d200+6
  1342 					sty $d218
  1343 					sty $d208
  1344 					EIF
  1345 271F 60				rts
  1346 2720			RMTPLAYEREND
   335 						
   336 				;*****	End of code test
   337 				;
   338 2720			END_CODE_WARNING
   339 					.if END_CODE_WARNING > PmgAddress 
   340 						.error "Code overrides code area!"
   341 					.endif
   342
   343 				;*****	Player missle graphics address
   344 				;
   345 2720					org PmgAddress
   346 A000-A7FF> 00 00 00 00 + :768	.byte %00000000	
   347 					
   348 				;*****	Missle starting address
   349 				;
   350 A300					org ms_area_1
   351 A300 00 00 00 00 00 00 + :1280 .byte %00000000
   352
   353 				;*****	Level Data definition
   354 				;
   355 A800					org DataAddress
   356 						
   357 3000					icl "Data/Levels.Asm"
Source: E:\_8BitProjects\Series\Scroller\Data\Levels.Asm
     1 				;
     2 				;****************************************************************************************************
     3 				;
     4 				;	Player Data
     5 				;
     6 				;		Each row of X and Y is associated with a level number (zero based).
     7 				;
     8 				;****************************************************************************************************
     9 				;
    10 3000			LevelsPlayer_X
    11 3000-370F> 01					.byte $01
    12
    13 3001			LevelsPlayer_Y
    14 3001 0B						.byte $0B
    15 				;
    16 				;****************************************************************************************************
    17 				;
    18 				;	Level Data
    19 				;
    20 				;		Low (LSB) and High (MSB) addresses of the level data map
    21 				;
    22 				;****************************************************************************************************
    23 				;
    24 3002			LevelsAddr_LSB
    25 3002 04				.byte <LEVELS_01
    26
    27 3003			LevelsAddr_MSB
    28 3003 30				.byte >LEVELS_01
    29 				;
    30 				;****************************************************************************************************
    31 				;
    32 3004			LEVELS_01
    33 3004 1B 09 26 27 28 29 + 			.byte $1B,$09,$26,$27,$28,$29,$FD,$FE
    34 300C 04 0A 01 FD 07 0A + 			.byte $04,$0A,$01,$FD,$07,$0A,$01,$FD,$FE
    35 3015 0A 0B 01 FD 14 0B + 			.byte $0A,$0B,$01,$FD,$14,$0B,$01,$FD,$16,$0B,$01,$FD,$1D,$0B,$03,$FD,$1F,$0B,$03,$FD,$FE
    36 302A 00 0C 60 60 60 60 + 			.byte $00,$0C,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$0C,$0C,$01,$FD,$0E,$0C,$01,$FD,$26,$0C,$01,$FD,$28,$0C,$01,$FD,$2A,$0C,$01,$FD,$34,$0C,$60,$61,$62,$61,$64,$FD,$FE
    37 3052 08 0D 60 60 60 FD + 			.byte $08,$0D,$60,$60,$60,$FD,$14,$0D,$71,$71,$71,$FD,$1D,$0D,$61,$61,$61,$FD,$2D,$0D,$01,$FD,$FE
    38 3069 0B 0E 60 60 60 60 + 			.byte $0B,$0E,$60,$60,$60,$60,$FD,$1C,$0E,$60,$70,$70,$70,$60,$FD,$26,$0E,$60,$60,$60,$60,$60,$FD,$FE
    39 3081 26 0F 5E 5D 5D 5D + 			.byte $26,$0F,$5E,$5D,$5D,$5D,$5D,$60,$60,$60,$FD,$FE
    40 308D 01 10 C0 C1 FD 26 + 			.byte $01,$10,$C0,$C1,$FD,$26,$10,$65,$23,$24,$25,$65,$66,$67,$5D,$FD,$36,$10,$01,$FD,$38,$10,$01,$FD,$3A,$10,$01,$FD,$FE
    41 30AA 00 11 60 60 60 60 + 			.byte $00,$11,$60,$60,$60,$60,$60,$60,$FD,$13,$11,$01,$FD,$15,$11,$01,$FD,$17,$11,$01,$FD,$28,$11,$95,$FD,$2D,$11,$5D,$FD,$FE
    42 30C8 28 12 95 FD 2D 12 + 			.byte $28,$12,$95,$FD,$2D,$12,$5D,$FD,$35,$12,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$41,$12,$60,$60,$46,$47,$46,$47,$46,$47,$46,$47,$60,$60,$FD,$FE
    43 30EB 0A 13 60 60 60 60 + 			.byte $0A,$13,$60,$60,$60,$60,$60,$60,$60,$FD,$1A,$13,$60,$60,$99,$99,$99,$99,$99,$60,$60,$FD,$28,$13,$95,$FD,$2B,$13,$01,$FD,$2D,$13,$5D,$FD,$35,$13,$10,$11,$12,$FD,$42,$13,$70,$07,$07,$07,$07,$07,$07,$07,$07,$5D,$FD,$FE
    44 3121 1A 14 5D 5D FD 21 + 			.byte $1A,$14,$5D,$5D,$FD,$21,$14,$5D,$5D,$FD,$28,$14,$95,$FD,$2A,$14,$01,$FD,$2D,$14,$5D,$FD,$35,$14,$10,$11,$12,$FD,$42,$14,$70,$07,$07,$07,$07,$07,$07,$07,$07,$5C,$FD,$FE
    45 314B 17 15 60 60 60 5D + 			.byte $17,$15,$60,$60,$60,$5D,$5D,$FD,$21,$15,$5D,$5D,$FD,$28,$15,$95,$FD,$2B,$15,$01,$FD,$2D,$15,$5D,$FD,$35,$15,$10,$11,$12,$FD,$3B,$15,$01,$FD,$3D,$15,$01,$FD,$3F,$15,$03,$FD,$42,$15,$70,$07,$07,$07,$07,$07,$07,$07,$07,$5D,$FD,$FE
    46 3184 15 16 60 60 60 60 + 			.byte $15,$16,$60,$60,$60,$60,$60,$5D,$5D,$FD,$21,$16,$5D,$6B,$FD,$28,$16,$95,$FD,$2D,$16,$5D,$FD,$35,$16,$10,$11,$12,$FD,$42,$16,$6E,$07,$07,$07,$07,$07,$07,$07,$07,$5D,$FD,$FE
    47 31AF 00 17 60 60 60 60 + 			.byte $00,$17,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$5C,$6A,$60,$60,$60,$60,$60,$5D,$5D,$60,$60,$60,$60,$20,$21,$22,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$70,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$60,$60,$60,$60,$60,$60,$FD,$FE
    48 3205 FF						.byte $FF
    49
   358 3206					icl "ScrollerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ScrollerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;***** System Data members
    14 				;
    15 3206 00			m_sfxData						.byte $00
    16 3207 00			m_sfxValue						.byte $00
    17 3208 00			m_sfxLength						.byte $00
    18
    19 3209 00			m_floatAnimModV					.byte $00		; used for modulus operation on vertical animation
    20 320A 00			m_floatAnimModH					.byte $00		; used for modulus operation on horizontal animation
    21 320B 00			m_floatPlatformV				.byte $00		; is there vertical floating platforms
    22 320C 00			m_floatPlatformH				.byte $00		; is there horizontal floating platforms
    23 320D 00			m_floatPlatformIdx				.byte $00		; index to platform screen array
    24 320E 00			m_floatPlatform_X				.byte $00
    25 320F 00			m_floatPlatform_Y				.byte $00
    26
    27 3210 00			m_verticalLaserOn				.byte $00		; is vertical laser available
    28 3211 00			m_horizontalLaserOn				.byte $00		; is horizontal laser available
    29
    30 3212 00			m_goldCounter 					.byte $00		; current gold counter
    31 3213 00			m_healthCounter					.byte $00		; current health counter
    32 3214 00			m_waterAvailable				.byte $00		; is water available
    33
    34 3215 00			m_disableGameTimer				.byte $00		; disable game flag
    35
    36 3216 00			m_gameTimerSeconds				.byte $00		; seconds timer
    37 3217 00			m_gameTimerMinutes				.byte $00		; minutes timer
    38
    39 3218 00			m_gameTimerTSeconds				.byte $00		; seconds timer total
    40 3219 00			m_gameTSFrameCounter			.byte $00		; frame counter total
    41
    42 321A 04			m_animSeaTopTimer				.byte ANIM_SEA_TOP_FRAME_TIME
    43
    44 321B 00			m_firstCoinAnimIndex			.byte $00
    45 321C 00			m_emptyCoinAnimIndex			.byte $00
    46 321D 00			m_currentCoinAnimations			.byte $00
    47
    48 321E 01			m_animHLaserTimer				.byte $01
    49 321F 00			m_animHLaserCurrentFrame		.byte $00
    50
    51 3220 01			m_animLaserTimer				.byte $01
    52 3221 00			m_animLaserCurrentFrame			.byte $00
    53
    54 3222 00 00		m_screenBaseAddress1			.word $00
    55 3224 00 00		m_screenBaseAddress2			.word $00
    56
    57 3226 00			m_windowTargetPosX_H1			.byte $00
    58 3227 00			m_windowTargetPosX_H2			.byte $00
    59 3228 00			m_windowTargetPosY_H1			.byte $00
    60 3229 00			m_windowTargetPosY_H2			.byte $00
    61
    62 322A 00			m_windowTargetDeltaX_H1			.byte $00
    63 322B 00			m_windowTargetDeltaX_H2			.byte $00
    64 322C 00			m_windowTargetDeltaY_H1			.byte $00
    65 322D 00			m_windowTargetDeltaY_H2			.byte $00
    66
    67 322E 00			m_enemyExplosionLevelLeftX_H1	.byte $00
    68 322F 00			m_enemyExplosionLevelLeftX_H2	.byte $00
    69
    70 3230 00			m_enemyExplosionLevelTopY_H1	.byte $00
    71 3231 00			m_enemyExplosionLevelTopY_H2	.byte $00
    72 3232 00			m_enemyExplosionLevelTopY_L1	.byte $00
    73
    74 3233 00			m_enemyExplosionScreenTopY_H1	.byte $00
    75 3234 00			m_enemyExplosionScreenLeftX_H1	.byte $00
    76
    77 3235 00			m_enemyExplosionStep			.byte $00
    78
    79 3236 00			m_enemyCharPosX					.byte $00
    80 3237 00			m_enemyCharPosY					.byte $00
    81 3238 00			m_enemyExplosionStepIndex		.byte $00
    82
    83 3239 00			m_hitEnemySaveX 				.byte $00
    84 323A 00			m_numEnemyExplosions			.byte $00
    85
    86 323B 00			m_totalEnemies 					.byte $00
    87 323C 00			m_activeEnemies 				.byte $00
    88
    89 323D 00			m_searchEnemyChar 				.byte $00
    90 323E 00			m_defEnemyLife 					.byte $00
    91 323F 00			m_numberOfValidRows 			.byte $00
    92
    93 3240 00			m_tempByte 						.byte $00
    94
    95 3241 00			m_lastEnemyIndexUpdated 		.byte $00
    96
    97 3242 00			m_enemyMissilesActive 			.byte $00
    98
    99 3243 00			m_enemyShootDirection 			.byte $00
   100
   101 3244 00			m_enemyShotLevelLeftX_H1 		.byte $00
   102 3245 00			m_enemyShotLevelLeftX_H2 		.byte $00
   103 3246 00			m_enemyShotLevelTopY_H1 		.byte $00
   104 3247 00			m_enemyShotLevelTopY_H2 		.byte $00
   105
   106 3248 00			m_currRow						.byte $00
   107 3249 00			m_currCol						.byte $00
   108 324A 00			m_scrYCount						.byte $00
   109 324B 00			m_datYCount						.byte $00
   110
   111 324C 00			m_pixelPositionX_H2				.byte 0
   112 324D 00			m_pixelPositionX_H1				.byte 0
   113 324E 00			m_pixelPositionY_H2				.byte 0
   114 324F 00			m_pixelPositionY_H1				.byte 0
   115
   116 3250 00			m_charPositionX					.byte 0
   117 3251 00			m_charPositionY					.byte 0
   118
   119 3252 00			m_lineAddressLSB				.byte 0
   120 3253 00			m_lineAddressMSB				.byte 0
   121
   122 3254 00			m_charRaw						.byte 0
   123 3255 00			m_charDef						.byte 0
   124
   125 3256 00			m_screenDelta_H2				.byte 0
   126 3257 00			m_screenDelta_H1				.byte 0
   127
   128 3258 00			m_playerBaseColor				.byte $00
   129
   130 3259 00			m_hldA							.byte $00
   131 325A 00			m_hldY							.byte $00
   132 325B 00			m_hldX							.byte $00
   133 325C 00			m_revX							.byte $00
   134 325D 00			m_revIndex						.byte $00
   135 325E 00			m_revHeight						.byte $00
   136 325F 00			m_revOffset						.byte $00
   137 3260 00			m_animCount						.byte $00
   138 3261 00			m_animFrame						.byte $00
   139 3262 00			m_animIndex        				.byte $00
   140 3263 00			m_animHeight					.byte $00
   141 3264 00			m_animOffset					.byte $00	
   142
   143 3265 00			m_leftTopChar					.byte $00
   144 3266 00			m_rightTopChar					.byte $00
   145 3267 00			m_charBuffer_H2					.byte $00
   146 3268 00			m_leftBottomChar				.byte $00
   147 3269 00			m_rightBottomChar				.byte $00
   148 326A 00			m_middleBottomChar				.byte $00
   149 326B 00			m_bottomPosOffsetX				.byte $00
   150 326C 00			m_bottomPosOffsetY				.byte $00
   151 326D 00			m_playerExplosionStep			.byte $00
   152 326E 00			m_middleBottomCharPosX			.byte $00
   153 326F 00			m_waterPlayerDirectionFlag		.byte $00
   154 3270 00			m_playerOnWaterSurfaceFlag		.byte $00
   155 3271 00			m_playerExplosionScreenTopY_H1	.byte $00
   156 3272 00			m_playerExplosionScreenTopY_L1	.byte $00
   157
   158 3273 00			m_debugSaveX					.byte 0
   159
   160 3274 00 00		m_currentLineAddress			.word $0000
   161
   162 3276 00 00 00 00 00 00 + TabLevelLineAddressLSB			:256 .byte $00
   163 3376 00 00 00 00 00 00 + TabLevelLineAddressMSB			:256 .byte $00
   164
   165 				;
   166 				;**************************************************************************************************
   167 				; Character tile type definition
   168 				;
   169 				; 	Type definition: low 4 bits (0-15 value)
   170 				;		- 0: empty normal space (with gravity info?)			CT_BLANK			= 0					
   171
   172 				;		- 1: block (with collision info, RLDU)					CT_BLOCK			= 1
   173 				;		- 6: floating platform									CT_FLOATPLATFORM	= 1	
   174
   175 				;		- 2: collectable (with value info?)						CT_COLLECTABLE		= 2
   176 				;		- 3: danger (with energy info?)							CT_DANGER			= 3
   177 				;		- 4: ladder, climbable (with directions info?)			CT_LADDER			= 4
   178 				;		- 5: water (with density info? currents?)				CT_WATER			= 5
   179 				;		- 7: health 											CT_HEALTH			= 6
   180 				;		- 8: Vertical Lasers									CT_VLASER			= 7
   181 				;		- 9: Horizontal Lasers									CT_HLASER			= 8
   182 				;
   183 				; 	External level definitions:
   184 				; 		- blocks ON/OFF
   185 				; 		- moving blocks
   186 				; 		- switches, triggers and traps
   187 				; 		- enemies and generators
   188 				; 		- dangers ON/OFF
   189 				; 		- moving dangers
   190 				; 		- interactions zones
   191 				; 		- text messages
   192 				;
   193 				;**************************************************************************************************
   194 				;
   195 3476			TabCharDefinition
   196 3476 00				.byte %00000000+CT_BLANK								; blank								[00]
   197 3477 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[01]
   198 3478 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[02]				
   199 3479 06				.byte %00000000+CT_HEALTH								; collectable 1						[03]
   200 347A 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[04]
   201 347B 03				.byte %00000000+CT_DANGER								; blue spikes						[05]
   202 347C 03				.byte %00000000+CT_DANGER								; blue spikes						[06]
   203 347D 05				.byte %00000000+CT_WATER								; blank								[07]
   204 347E 00				.byte %00000000+CT_BLANK								; blank								[08]
   205 347F 00				.byte %00000000+CT_BLANK								; blank								[09]
   206 3480 00				.byte %00000000+CT_BLANK								; blank								[0A]
   207 3481 00				.byte %00000000+CT_BLANK								; blank								[0B]
   208 3482 00				.byte %00000000+CT_BLANK								; blank								[0C]
   209 3483 00				.byte %00000000+CT_BLANK								; blank								[0D]
   210 3484 00				.byte %00000000+CT_BLANK								; blank								[0E]
   211 3485 00				.byte %00000000+CT_BLANK								; blank								[0F]
   212 3486 04				.byte %00000000+CT_LADDER								; ladder							[10]
   213 3487 04				.byte %00000000+CT_LADDER								; ladder							[11]
   214 3488 04				.byte %00000000+CT_LADDER								; ladder							[12]
   215 3489 03				.byte %00000000+CT_DANGER								; blue spikes						[13]
   216 348A F8				.byte %11110000+CT_VLASER								; vertical dither 1					[14]				
   217 348B F8				.byte %11110000+CT_VLASER								; vertical dither 2					[15]
   218 348C F8				.byte %11110000+CT_VLASER								; vertical dither 3					[16]
   219 348D FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[17]
   220 348E FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[18]
   221 348F FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[19]
   222 3490 03				.byte %00000000+CT_DANGER								; spikes							[1A]
   223 3491 03				.byte %00000000+CT_DANGER								; spikes							[1B]
   224 3492 03				.byte %00000000+CT_DANGER								; spikes							[1C]
   225 3493 03				.byte %00000000+CT_DANGER								; spikes							[1D]
   226 3494 03				.byte %00000000+CT_DANGER								; spikes							[1E]
   227 3495 03				.byte %00000000+CT_DANGER								; spikes							[1F]
   228 3496 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[20]
   229 3497 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[21]
   230 3498 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[22]
   231 3499 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[23]
   232 349A F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[24]
   233 349B F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[25]
   234 349C 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[26]
   235 349D 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[27]
   236 349E 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[28]
   237 349F 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[29]
   238 34A0 00				.byte %00000000+CT_BLANK								; blank								[2A]
   239 34A1 00				.byte %00000000+CT_BLANK								; blank								[2B]
   240 34A2 00				.byte %00000000+CT_BLANK								; blank								[2C]
   241 34A3 00				.byte %00000000+CT_BLANK								; blank								[2D]
   242 34A4 00				.byte %00000000+CT_BLANK								; blank								[2E]
   243 34A5 00				.byte %00000000+CT_BLANK								; blank								[2F]
   244 34A6 00				.byte %00000000+CT_BLANK								; blank								[30]
   245 34A7 00				.byte %00000000+CT_BLANK								; blank								[31]
   246 34A8 00				.byte %00000000+CT_BLANK								; blank								[32]
   247 34A9 00				.byte %00000000+CT_BLANK								; blank								[33]
   248 34AA 00				.byte %00000000+CT_BLANK								; blank								[34]
   249 34AB 00				.byte %00000000+CT_BLANK								; blank								[35]
   250 34AC 00				.byte %00000000+CT_BLANK								; blank								[36]
   251 34AD 00				.byte %00000000+CT_BLANK								; blank								[37]
   252 34AE 00				.byte %00000000+CT_BLANK								; blank								[38]
   253 34AF 00				.byte %00000000+CT_BLANK								; blank								[39]
   254 34B0 03				.byte %00000000+CT_DANGER								; spikes							[3A]
   255 34B1 03				.byte %00000000+CT_DANGER								; spikes							[3B]
   256 34B2 00				.byte %00000000+CT_BLANK								; blank								[3C]
   257 34B3 00				.byte %00000000+CT_BLANK								; blank								[3D]
   258 34B4 00				.byte %00000000+CT_BLANK								; blank								[3E]
   259 34B5 00				.byte %00000000+CT_BLANK								; blank								[3F]
   260 34B6 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [40]
   261 34B7 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [41]
   262 34B8 00				.byte %00000000+CT_BLANK								; blank								[42]
   263 34B9 00				.byte %00000000+CT_BLANK								; blank								[43]
   264 34BA 00				.byte %00000000+CT_BLANK								; blank								[44]
   265 34BB 00				.byte %00000000+CT_BLANK								; blank								[45]
   266 34BC 05				.byte %00000000+CT_WATER								; blank								[46]
   267 34BD 05				.byte %00000000+CT_WATER								; blank								[47]
   268 34BE 00				.byte %00000000+CT_BLANK								; blank								[48]
   269 34BF 00				.byte %00000000+CT_BLANK								; blank								[49]
   270 34C0 00				.byte %00000000+CT_BLANK								; blank								[4A]
   271 34C1 00				.byte %00000000+CT_BLANK								; blank								[4B]
   272 34C2 F1				.byte %11110000+CT_BLOCK								; solid platform					[4C]
   273 34C3 F1				.byte %11110000+CT_BLOCK								; solid platform					[4D]
   274 34C4 F1				.byte %11110000+CT_BLOCK								; solid platform					[4E]
   275 34C5 F1				.byte %11110000+CT_BLOCK								; solid platform					[4F]
   276 34C6 F1				.byte %11110000+CT_BLOCK								; solid platform					[50]
   277 34C7 F1				.byte %11110000+CT_BLOCK								; solid platform					[51]
   278 34C8 00				.byte %00000000+CT_BLANK								; blank								[52]   
   279 34C9 00				.byte %00000000+CT_BLANK								; blank								[53]   
   280 34CA 00				.byte %00000000+CT_BLANK								; blank								[54]   
   281 34CB 00				.byte %00000000+CT_BLANK								; blank								[55]   
   282 34CC 00				.byte %00000000+CT_BLANK								; blank								[56]   
   283 34CD 00				.byte %00000000+CT_BLANK								; blank								[57]   
   284 34CE 00				.byte %00000000+CT_BLANK								; blank								[58]   
   285 34CF 00				.byte %00000000+CT_BLANK								; blank								[59]   
   286 34D0 03				.byte %00000000+CT_DANGER								; spikes							[5A]   
   287 34D1 03				.byte %00000000+CT_DANGER								; spikes							[5B]   
   288 34D2 F1				.byte %11110000+CT_BLOCK								; solid platform					[5C]   
   289 34D3 F1				.byte %11110000+CT_BLOCK								; solid platform					[5D]   
   290 34D4 F1				.byte %11110000+CT_BLOCK								; solid platform					[5E]   
   291 34D5 00				.byte %00000000+CT_BLANK								; blank								[5F]   
   292 34D6 F1				.byte %11110000+CT_BLOCK								; solid platform					[60]   
   293 34D7 F1				.byte %11110000+CT_BLOCK								; solid platform					[61]   
   294 34D8 F1				.byte %11110000+CT_BLOCK								; solid platform					[62]   
   295 34D9 F1				.byte %11110000+CT_BLOCK								; solid platform					[63]   
   296 34DA F1				.byte %11110000+CT_BLOCK								; solid platform					[64]   
   297 34DB F1				.byte %11110000+CT_BLOCK								; solid platform					[65]   
   298 34DC F1				.byte %11110000+CT_BLOCK								; solid platform					[66]   
   299 34DD F1				.byte %11110000+CT_BLOCK								; solid platform					[67]   
   300 34DE F1				.byte %11110000+CT_BLOCK								; solid platform					[68]   
   301 34DF F1				.byte %11110000+CT_BLOCK								; solid platform					[69]   
   302 34E0 F1				.byte %11110000+CT_BLOCK								; solid platform					[6A]   
   303 34E1 F1				.byte %11110000+CT_BLOCK								; solid platform					[6B]   
   304 34E2 F1				.byte %11110000+CT_BLOCK								; solid platform					[6C]   
   305 34E3 F1				.byte %11110000+CT_BLOCK								; solid platform					[6D]   
   306 34E4 F1				.byte %11110000+CT_BLOCK								; solid platform					[6E]   
   307 34E5 F1				.byte %11110000+CT_BLOCK								; solid platform					[6F]   
   308 34E6 F1				.byte %11110000+CT_BLOCK								; solid platform					[70]   
   309 34E7 F1				.byte %11110000+CT_BLOCK								; solid platform					[71]   
   310 34E8 F1				.byte %11110000+CT_BLOCK								; solid platform					[72]   
   311 34E9 F1				.byte %11110000+CT_BLOCK								; solid platform					[73]   
   312 34EA F1				.byte %11110000+CT_BLOCK								; solid platform					[74]   
   313 34EB 00				.byte %00000000+CT_BLANK								; blank								[75]   
   314 34EC 00				.byte %00000000+CT_BLANK								; blank								[76]   
   315 34ED 00				.byte %00000000+CT_BLANK								; blank								[77]   
   316 34EE 00				.byte %00000000+CT_BLANK								; blank								[78]   
   317 34EF 00				.byte %00000000+CT_BLANK								; blank								[79]   
   318 34F0 00				.byte %00000000+CT_BLANK								; blank								[7A]   
   319 34F1 00				.byte %00000000+CT_BLANK								; blank								[7B]   
   320 34F2 00				.byte %00000000+CT_BLANK								; blank								[7C]   
   321 34F3 00				.byte %00000000+CT_BLANK								; blank								[7D]   
   322 34F4 00				.byte %00000000+CT_BLANK								; blank								[7E]   
   323 34F5 00				.byte %00000000+CT_BLANK								; blank								[7F]   
   324 				;
   325 				;**************************************************************************************************
   326 				; second half, inverse characters, fifth color (red, danger)
   327 				;**************************************************************************************************
   328 				;
   329 34F6				org TabCharDefinition+$80
   330
   331 34F6 00				.byte %00000000+CT_BLANK								; blank								[80]
   332 34F7 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[81]
   333 34F8 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[82]				
   334 34F9 06				.byte %00000000+CT_HEALTH								; collectable 1						[83]
   335 34FA 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[84]
   336 34FB 03				.byte %00000000+CT_DANGER								; blue spikes						[85]
   337 34FC 03				.byte %00000000+CT_DANGER								; blue spikes						[86]
   338 34FD 05				.byte %00000000+CT_WATER								; blank								[87]
   339 34FE 00				.byte %00000000+CT_BLANK								; blank								[88]
   340 34FF 00				.byte %00000000+CT_BLANK								; blank								[89]
   341 3500 00				.byte %00000000+CT_BLANK								; blank								[8A]
   342 3501 00				.byte %00000000+CT_BLANK								; blank								[8B]
   343 3502 00				.byte %00000000+CT_BLANK								; blank								[8C]
   344 3503 00				.byte %00000000+CT_BLANK								; blank								[8D]
   345 3504 00				.byte %00000000+CT_BLANK								; blank								[8E]
   346 3505 00				.byte %00000000+CT_BLANK								; blank								[8F]
   347 3506 04				.byte %00000000+CT_LADDER								; ladder							[90]
   348 3507 04				.byte %00000000+CT_LADDER								; ladder							[91]
   349 3508 04				.byte %00000000+CT_LADDER								; ladder							[92]
   350 3509 03				.byte %00000000+CT_DANGER								; blue spikes						[93]
   351 350A F8				.byte %11110000+CT_VLASER								; vertical dither 1					[94]				
   352 350B F8				.byte %11110000+CT_VLASER								; vertical dither 2					[95]
   353 350C F8				.byte %11110000+CT_VLASER								; vertical dither 3					[96]
   354 350D FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[97]
   355 350E FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[98]
   356 350F FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[99]
   357 3510 03				.byte %00000000+CT_DANGER								; spikes							[9A]
   358 3511 03				.byte %00000000+CT_DANGER								; spikes							[9B]
   359 3512 03				.byte %00000000+CT_DANGER								; spikes							[9C]
   360 3513 03				.byte %00000000+CT_DANGER								; spikes							[9D]
   361 3514 03				.byte %00000000+CT_DANGER								; spikes							[9E]
   362 3515 03				.byte %00000000+CT_DANGER								; spikes							[9F]
   363 3516 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[A0]
   364 3517 F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[A1]
   365 3518 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[A2]
   366 3519 F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[A3]
   367 351A F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[A4]
   368 351B F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[A5]
   369 351C 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A6]
   370 351D 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A7]
   371 351E 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A8]
   372 351F 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A9]
   373 3520 00				.byte %00000000+CT_BLANK								; blank								[AA]
   374 3521 00				.byte %00000000+CT_BLANK								; blank								[AB]
   375 3522 00				.byte %00000000+CT_BLANK								; blank								[AC]
   376 3523 00				.byte %00000000+CT_BLANK								; blank								[AD]
   377 3524 00				.byte %00000000+CT_BLANK								; blank								[AE]
   378 3525 00				.byte %00000000+CT_BLANK								; blank								[AF]
   379 3526 00				.byte %00000000+CT_BLANK								; blank								[B0]
   380 3527 00				.byte %00000000+CT_BLANK								; blank								[B1]
   381 3528 00				.byte %00000000+CT_BLANK								; blank								[B2]
   382 3529 00				.byte %00000000+CT_BLANK								; blank								[B3]
   383 352A 00				.byte %00000000+CT_BLANK								; blank								[B4]
   384 352B 00				.byte %00000000+CT_BLANK								; blank								[B5]
   385 352C 00				.byte %00000000+CT_BLANK								; blank								[B6]
   386 352D 00				.byte %00000000+CT_BLANK								; blank								[B7]
   387 352E 00				.byte %00000000+CT_BLANK								; blank								[B8]
   388 352F 00				.byte %00000000+CT_BLANK								; blank								[B9]
   389 3530 03				.byte %00000000+CT_DANGER								; spikes							[BA]
   390 3531 03				.byte %00000000+CT_DANGER								; spikes							[BB]
   391 3532 00				.byte %00000000+CT_BLANK								; blank								[BC]
   392 3533 00				.byte %00000000+CT_BLANK								; blank								[BD]
   393 3534 00				.byte %00000000+CT_BLANK								; blank								[BE]
   394 3535 00				.byte %00000000+CT_BLANK								; blank								[BF]
   395 3536 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C0]
   396 3537 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C1]
   397 3538 00				.byte %00000000+CT_BLANK								; blank								[C2]
   398 3539 00				.byte %00000000+CT_BLANK								; blank								[C3]
   399 353A 00				.byte %00000000+CT_BLANK								; blank								[C4]
   400 353B 00				.byte %00000000+CT_BLANK								; blank								[C5]
   401 353C 05				.byte %00000000+CT_WATER								; blank								[C6]
   402 353D 05				.byte %00000000+CT_WATER								; blank								[C7]
   403 353E 00				.byte %00000000+CT_BLANK								; blank								[C8]
   404 353F 00				.byte %00000000+CT_BLANK								; blank								[C9]
   405 3540 00				.byte %00000000+CT_BLANK								; blank								[CA]
   406 3541 00				.byte %00000000+CT_BLANK								; blank								[CB]
   407 3542 F1				.byte %11110000+CT_BLOCK								; solid platform					[CC]
   408 3543 F1				.byte %11110000+CT_BLOCK								; solid platform					[CD]
   409 3544 F1				.byte %11110000+CT_BLOCK								; solid platform					[CE]
   410 3545 F1				.byte %11110000+CT_BLOCK								; solid platform					[CF]
   411 3546 F1				.byte %11110000+CT_BLOCK								; solid platform					[D0]
   412 3547 F1				.byte %11110000+CT_BLOCK								; solid platform					[D1]
   413 3548 00				.byte %00000000+CT_BLANK								; blank								[D2]   
   414 3549 00				.byte %00000000+CT_BLANK								; blank								[D3]   
   415 354A 00				.byte %00000000+CT_BLANK								; blank								[D4]   
   416 354B 00				.byte %00000000+CT_BLANK								; blank								[D5]   
   417 354C 00				.byte %00000000+CT_BLANK								; blank								[D6]   
   418 354D 00				.byte %00000000+CT_BLANK								; blank								[D7]   
   419 354E 00				.byte %00000000+CT_BLANK								; blank								[D8]   
   420 354F 00				.byte %00000000+CT_BLANK								; blank								[D9]   
   421 3550 03				.byte %00000000+CT_DANGER								; spikes							[DA]   
   422 3551 03				.byte %00000000+CT_DANGER								; spikes							[DB]   
   423 3552 F1				.byte %11110000+CT_BLOCK								; solid platform					[DC]   
   424 3553 F1				.byte %11110000+CT_BLOCK								; solid platform					[DD]   
   425 3554 F1				.byte %11110000+CT_BLOCK								; solid platform					[DE]   
   426 3555 00				.byte %00000000+CT_BLANK								; blank								[DF]   
   427 3556 F1				.byte %11110000+CT_BLOCK								; solid platform					[E0]   
   428 3557 F1				.byte %11110000+CT_BLOCK								; solid platform					[E1]   
   429 3558 F1				.byte %11110000+CT_BLOCK								; solid platform					[E2]   
   430 3559 F1				.byte %11110000+CT_BLOCK								; solid platform					[E3]   
   431 355A F1				.byte %11110000+CT_BLOCK								; solid platform					[E4]   
   432 355B F1				.byte %11110000+CT_BLOCK								; solid platform					[E5]   
   433 355C F1				.byte %11110000+CT_BLOCK								; solid platform					[E6]   
   434 355D F1				.byte %11110000+CT_BLOCK								; solid platform					[E7]   
   435 355E F1				.byte %11110000+CT_BLOCK								; solid platform					[E8]   
   436 355F F1				.byte %11110000+CT_BLOCK								; solid platform					[E9]   
   437 3560 F1				.byte %11110000+CT_BLOCK								; solid platform					[EA]   
   438 3561 F1				.byte %11110000+CT_BLOCK								; solid platform					[EB]   
   439 3562 F1				.byte %11110000+CT_BLOCK								; solid platform					[EC]   
   440 3563 F1				.byte %11110000+CT_BLOCK								; solid platform					[ED]   
   441 3564 F1				.byte %11110000+CT_BLOCK								; solid platform					[EE]   
   442 3565 F1				.byte %11110000+CT_BLOCK								; solid platform					[EF]   
   443 3566 F1				.byte %11110000+CT_BLOCK								; solid platform					[F0]   
   444 3567 F1				.byte %11110000+CT_BLOCK								; solid platform					[F1]   
   445 3568 F1				.byte %11110000+CT_BLOCK								; solid platform					[F2]   
   446 3569 F1				.byte %11110000+CT_BLOCK								; solid platform					[F3]   
   447 356A F1				.byte %11110000+CT_BLOCK								; solid platform					[F4]   
   448 356B 00				.byte %00000000+CT_BLANK								; blank								[F5]   
   449 356C 00				.byte %00000000+CT_BLANK								; blank								[F6]   
   450 356D 00				.byte %00000000+CT_BLANK								; blank								[F7]   
   451 356E 00				.byte %00000000+CT_BLANK								; blank								[F8]   
   452 356F 00				.byte %00000000+CT_BLANK								; blank								[F9]   
   453 3570 00				.byte %00000000+CT_BLANK								; blank								[FA]   
   454 3571 00				.byte %00000000+CT_BLANK								; blank								[FB]   
   455 3572 00				.byte %00000000+CT_BLANK								; blank								[FC]   
   456 3573 00				.byte %00000000+CT_BLANK								; blank								[FD]   
   457 3574 00				.byte %00000000+CT_BLANK								; blank								[FE]   
   458 3575 00				.byte %00000000+CT_BLANK								; blank								[FF]
   459
   460 				;*****	Game Dislplay List Definition
   461 				;
   462 3576			GameDL 
   463 3576 70					.byte DL_BLANK_8
   464 3577 70					.byte DL_BLANK_8
   465 3578 F0					.byte DL_BLANK_8 + DL_DLI
   466
   467 3579			GameDL_LMS1
   468 						
   469 = B000					?dldata = GameMemoryAddress
   470 						.rept 24
   471 							.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   472 							.BYTE <?DLDATA, >?DLDATA
   473 							?DLDATA += LEVEL_CHAR_SIZE_X
   474 						.ENDR
   474 						.endr
Source: REPT
   471 3579 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 357A 00 B0					.BYTE <?DLDATA, >?DLDATA
   471 = B052						?DLDATA += LEVEL_CHAR_SIZE_X
   471 357C 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 357D 52 B0					.BYTE <?DLDATA, >?DLDATA
   471 = B0A4						?DLDATA += LEVEL_CHAR_SIZE_X
   471 357F 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3580 A4 B0					.BYTE <?DLDATA, >?DLDATA
   471 = B0F6						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3582 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3583 F6 B0					.BYTE <?DLDATA, >?DLDATA
   471 = B148						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3585 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3586 48 B1					.BYTE <?DLDATA, >?DLDATA
   471 = B19A						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3588 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3589 9A B1					.BYTE <?DLDATA, >?DLDATA
   471 = B1EC						?DLDATA += LEVEL_CHAR_SIZE_X
   471 358B 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 358C EC B1					.BYTE <?DLDATA, >?DLDATA
   471 = B23E						?DLDATA += LEVEL_CHAR_SIZE_X
   471 358E 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 358F 3E B2					.BYTE <?DLDATA, >?DLDATA
   471 = B290						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3591 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3592 90 B2					.BYTE <?DLDATA, >?DLDATA
   471 = B2E2						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3594 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3595 E2 B2					.BYTE <?DLDATA, >?DLDATA
   471 = B334						?DLDATA += LEVEL_CHAR_SIZE_X
   471 3597 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 3598 34 B3					.BYTE <?DLDATA, >?DLDATA
   471 = B386						?DLDATA += LEVEL_CHAR_SIZE_X
   471 359A 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 359B 86 B3					.BYTE <?DLDATA, >?DLDATA
   471 = B3D8						?DLDATA += LEVEL_CHAR_SIZE_X
   471 359D 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 359E D8 B3					.BYTE <?DLDATA, >?DLDATA
   471 = B42A						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35A0 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35A1 2A B4					.BYTE <?DLDATA, >?DLDATA
   471 = B47C						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35A3 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35A4 7C B4					.BYTE <?DLDATA, >?DLDATA
   471 = B4CE						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35A6 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35A7 CE B4					.BYTE <?DLDATA, >?DLDATA
   471 = B520						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35A9 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35AA 20 B5					.BYTE <?DLDATA, >?DLDATA
   471 = B572						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35AC 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35AD 72 B5					.BYTE <?DLDATA, >?DLDATA
   471 = B5C4						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35AF 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35B0 C4 B5					.BYTE <?DLDATA, >?DLDATA
   471 = B616						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35B2 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35B3 16 B6					.BYTE <?DLDATA, >?DLDATA
   471 = B668						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35B5 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35B6 68 B6					.BYTE <?DLDATA, >?DLDATA
   471 = B6BA						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35B8 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35B9 BA B6					.BYTE <?DLDATA, >?DLDATA
   471 = B70C						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35BB 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35BC 0C B7					.BYTE <?DLDATA, >?DLDATA
   471 = B75E						?DLDATA += LEVEL_CHAR_SIZE_X
   471 35BE 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   471 35BF 5E B7					.BYTE <?DLDATA, >?DLDATA
   471 = B7B0						?DLDATA += LEVEL_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   475 					
   476 35C1 54					.byte DL_TEXT_4 + DL_LMS + DL_HSCROLL
   477 35C2 B0 B7				.byte <?dldata, >?dldata
   478 					
   479 35C4 A0					.byte DL_BLANK_3 + DL_DLI
   480
   481 = 0680					?dldata = HudMemoryAddr
   482 						.rept 2
   483 							.BYTE DL_TEXT_2 + DL_LMS
   484 							.BYTE <?DLDATA, >?DLDATA
   485 							?DLDATA += WINDOW_CHAR_SIZE_X
   486 						.ENDR	
   486 						.endr	
Source: REPT
   483 35C5 42						.BYTE DL_TEXT_2 + DL_LMS
   483 35C6 80 06					.BYTE <?DLDATA, >?DLDATA
   483 = 06A8						?DLDATA += WINDOW_CHAR_SIZE_X
   483 35C8 42						.BYTE DL_TEXT_2 + DL_LMS
   483 35C9 A8 06					.BYTE <?DLDATA, >?DLDATA
   483 = 06D0						?DLDATA += WINDOW_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   487 					
   488 35CB 41 00 0E				.byte DL_JUMP_VB, <GameDspLstAddr, >GameDspLstAddr
   489
   490 = 0058			GameDLEnd = * - GameDL
   491 							
   359 35CE					icl "PlayerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 35CE			.array TabAnimationMap [12] .byte
    14  [0000] 00 15 01			$00, $15, $01 			
    15  [0003] 15 15 01			$15, $15, $01
    16  [0006] 2A 15 01			$2A, $15, $01		
    17  [0009] 3F 15 01			$3F, $15, $01	 
    18 				.enda
    19
    20 35DA			.array TabAnimationMiscMap [10] .byte
    21
    22  [0000] E0 36 18 0C 08		<BONUS100, >BONUS100, BONUS100END, $0C, $08
    23  [0005] F8 36 18 0C 08		<CLEARBONUS, >CLEARBONUS, CLEARBONUSEND, $0C, $08
    24 					
    25 				.enda
    26
    27 35E4			TabPlayerShape_01								
    28 					
    29 					; Standing 0
    30 35E4 18				.byte 	%00011000							; ...##...
    31 35E5 3C				.byte 	%00111100                           ; ..####..
    32 35E6 FF				.byte 	%11111111                           ; ########
    33 35E7 00				.byte 	%00000000                           ; ........
    34 35E8 00				.byte 	%00000000                           ; ........
    35 35E9 00				.byte 	%00000000                           ; ........
    36 35EA 00				.byte 	%00000000                           ; ........
    37 35EB 00				.byte 	%00000000                           ; ........
    38 35EC 00				.byte 	%00000000                           ; ........
    39 35ED 18				.byte 	%00011000                           ; ...##...
    40 35EE 18				.byte 	%00011000                           ; ...##...
    41 35EF 3C				.byte 	%00111100                           ; ..####..
    42 35F0 6E				.byte 	%01101110                           ; .##.###.
    43 35F1 00				.byte 	%00000000                           ; ........
    44 35F2 00				.byte 	%00000000                           ; ........
    45 35F3 6E				.byte 	%01101110                           ; .## ###.
    46 35F4 76				.byte 	%01110110                           ; .######.
    47 35F5 3C				.byte 	%00111100                           ; ..####..
    48 35F6 00				.byte 	%00000000                           ; ........
    49 35F7 00				.byte 	%00000000                           ; ........
    50 35F8 00				.byte 	%00000000                           ; ........
    51 						
    52 					; Walking 0
    53 35F9 18				.byte 	%00011000							; ...##...
    54 35FA 3C				.byte	%00111100							; ..####..
    55 35FB FF				.byte	%11111111							; ########
    56 35FC 00				.byte	%00000000							; ........
    57 35FD 00				.byte	%00000000							; ........
    58 35FE 00				.byte 	%00000000							; ........							
    59 35FF 00				.byte 	%00000000							; ........
    60 3600 00				.byte 	%00000000							; ........		
    61 3601 00				.byte 	%00000000							; ........
    62 3602 18				.byte 	%00011000							; ...##...
    63 3603 18				.byte 	%00011000							; ...##...
    64 3604 3C				.byte 	%00111100							; ..####..
    65 3605 6E				.byte 	%01101110							; .##.###.
    66 3606 00				.byte 	%00000000							; ........
    67 3607 00				.byte 	%00000000							; ........
    68 3608 7A				.byte 	%01111010							; .####.#.
    69 3609 7E				.byte 	%01111110							; .######.
    70 360A 3C				.byte 	%00111100							; ..####..
    71 360B 00				.byte 	%00000000							; ........
    72 360C 00				.byte 	%00000000							; ........
    73 360D 00				.byte 	%00000000							; ........
    74
    75 					; Walking 1	
    76 360E 18				.byte 	%00011000							; ...##...  
    77 360F 3C				.byte 	%00111100							; ..####..  
    78 3610 FF				.byte 	%11111111                           ; ########  
    79 3611 00				.byte 	%00000000                           ; ........  
    80 3612 00				.byte 	%00000000			                ; ........  
    81 3613 00				.byte 	%00000000                           ; ........	
    82 3614 00				.byte 	%00000000                           ; ........  
    83 3615 00				.byte 	%00000000                           ; ........	
    84 3616 00				.byte 	%00000000                           ; ........  
    85 3617 18				.byte 	%00011000                           ; ...##...  
    86 3618 18				.byte 	%00011000                           ; ...##...  
    87 3619 3C				.byte 	%00111100                           ; ..####..  
    88 361A 6E				.byte 	%01101110                           ; .##.###.  
    89 361B 00				.byte 	%00000000                           ; ........  
    90 361C 00				.byte 	%00000000                           ; ........  
    91 361D 3E				.byte 	%00111110                           ; ..#####.  
    92 361E 7E				.byte 	%01111110                           ; .######.  
    93 361F 3C				.byte 	%00111100                           ; ..####..  
    94 3620 00				.byte 	%00000000                           ; ........  
    95 3621 00				.byte 	%00000000                           ; ........  
    96 3622 00				.byte 	%00000000                           ; ........  
    97
    98 					; Jumping 0
    99 3623 18				.byte %00011000								;...##...
   100 3624 3C				.byte %00111100								;..####..
   101 3625 FF				.byte %11111111								;########
   102 3626 00				.byte %00000000								;........
   103 3627 00				.byte %00000000								;........
   104 3628 00				.byte %00000000								;........
   105 3629 00				.byte %00000000								;........
   106 362A 00				.byte %00000000								;........
   107 362B 00				.byte %00000000								;........
   108 362C 18				.byte %00011000								;...##...
   109 362D 18				.byte %00011000								;...##...
   110 362E 3C				.byte %00111100								;..####..
   111 362F 7E				.byte %01111110								;.######.
   112 3630 00				.byte %00000000								;........
   113 3631 00				.byte %00000000								;........
   114 3632 7E				.byte %01111110								;.######.
   115 3633 3E				.byte %00111110								;..#####.
   116 3634 0C				.byte %00001100								;....##..
   117 3635 00				.byte %00000000								;........
   118 3636 00				.byte %00000000								;........
   119 3637 00				.byte %00000000								;........
   120 				                                                
   121 3638			TabPlayerShape_01A								
   122 					
   123 					; Standing 0			
   124 3638 18				.byte 	%00011000							; ...##...
   125 3639 3C				.byte 	%00111100                           ; ..####..
   126 363A FF				.byte 	%11111111                           ; ########
   127 363B 3C				.byte 	%00111100                           ; ..####..
   128 363C 34				.byte 	%00110100                           ; ..##.#..
   129 363D 3E				.byte 	%00111110                           ; ..#####.
   130 363E 34				.byte 	%00110100                           ; ..##.#..
   131 363F 38				.byte 	%00111000                           ; ..###...
   132 3640 1C				.byte 	%00011100                           ; ...###..
   133 3641 00				.byte 	%00000000                           ; ........
   134 3642 00				.byte 	%00000000                           ; ........
   135 3643 00				.byte 	%00000000                           ; ........
   136 3644 00				.byte 	%00000000                           ; ........
   137 3645 6E				.byte 	%01101110                           ; .##.###.
   138 3646 6E				.byte 	%01101110                           ; .##.###.
   139 3647 00				.byte 	%00000000                           ; ........
   140 3648 00				.byte 	%00000000                           ; ........
   141 3649 00				.byte 	%00000000                           ; ........
   142 364A 00				.byte 	%00000000                           ; ........
   143 364B 00				.byte 	%00000000                           ; ........
   144 364C 00				.byte 	%00000000                           ; ........
   145 						
   146 					
   147 					; Walking 0
   148 364D 18				.byte 	%00011000							; ...##...
   149 364E 3C				.byte 	%00111100							; ..####..	
   150 364F FF				.byte 	%11111111							; ########
   151 3650 3C				.byte 	%00111100							; ..####..
   152 3651 34				.byte 	%00110100							; ..##.#..
   153 3652 3E				.byte 	%00111110							; ..#####.
   154 3653 34				.byte 	%00110100							; ..##.#..
   155 3654 38				.byte 	%00111000							; ..###...
   156 3655 1C				.byte 	%00011100							; ...###..
   157 3656 00				.byte 	%00000000							; ........
   158 3657 00				.byte 	%00000000							; ........
   159 3658 00				.byte 	%00000000							; ........
   160 3659 00				.byte 	%00000000							; ........
   161 365A 6E				.byte 	%01101110							; .##.###.	
   162 365B 76				.byte 	%01110110							; .###.##.
   163 365C 00				.byte 	%00000000							; ........
   164 365D 00				.byte 	%00000000							; ........
   165 365E 00				.byte 	%00000000							; ........
   166 365F 00				.byte 	%00000000							; ........
   167 3660 00				.byte 	%00000000							; ........
   168 3661 00				.byte 	%00000000							; ........
   169
   170 					; Walking 1
   171 3662 18				.byte	%00011000							; ...##... 
   172 3663 3C				.byte	%00111100                           ; ..####.. 
   173 3664 FF				.byte	%11111111                           ; ######## 
   174 3665 3C				.byte	%00111100                           ; ..####.. 
   175 3666 34				.byte	%00110100			                ; ..##.#.. 
   176 3667 3E				.byte	%00111110                           ; ..#####. 
   177 3668 34				.byte	%00110100                           ; ..##.#.. 
   178 3669 38				.byte	%00111000                           ; ..###... 
   179 366A 1C				.byte	%00011100                           ; ...###.. 
   180 366B 00				.byte	%00000000                           ; ........ 
   181 366C 00				.byte	%00000000                           ; ........ 
   182 366D 00				.byte	%00000000                           ; ........ 
   183 366E 00				.byte	%00000000                           ; ........ 
   184 366F 6E				.byte	%01101110                           ; .##.###. 
   185 3670 5E				.byte	%01011110                           ; .#.####. 
   186 3671 00				.byte	%00000000                           ; ........ 
   187 3672 00				.byte	%00000000                           ; ........ 
   188 3673 00				.byte	%00000000                           ; ........ 
   189 3674 00				.byte	%00000000                           ; ........ 
   190 3675 00				.byte	%00000000                           ; ........ 
   191 3676 00				.byte	%00000000                           ; ........       
   192 					
   193 					
   194 					; Jumping 1	
   195 3677 18				.byte %00011000								;...##...
   196 3678 3C				.byte %00111100                             ;..####..
   197 3679 FF				.byte %11111111                             ;########
   198 367A 3C				.byte %00111100                             ;..####..
   199 367B 34				.byte %00110100                             ;..##.#..
   200 367C 3E				.byte %00111110                             ;..#####.
   201 367D 34				.byte %00110100                             ;..##.#..
   202 367E 38				.byte %00111000                             ;..###...
   203 367F 1C				.byte %00011100                             ;...###..
   204 3680 00				.byte %00000000                             ;........
   205 3681 00				.byte %00000000                             ;........
   206 3682 00				.byte %00000000                             ;........
   207 3683 00				.byte %00000000                             ;........
   208 3684 7E				.byte %01111110                             ;.######.
   209 3685 7E				.byte %01111110                             ;.######.
   210 3686 00				.byte %00000000                             ;........
   211 3687 00				.byte %00000000                             ;........
   212 3688 00				.byte %00000000                             ;........
   213 3689 00				.byte %00000000                             ;........
   214 368A 00				.byte %00000000                             ;........
   215 368B 00				.byte %00000000                             ;........
   216 					
   217
   218 368C			TabPlayerShape_01B								
   219
   220 					; Standing 0
   221 368C 00				.byte 	%00000000							; ........
   222 368D 00				.byte 	%00000000                           ; ........
   223 368E 00				.byte 	%00000000                           ; ........
   224 368F 00				.byte 	%00000000                           ; ........
   225 3690 00				.byte 	%00000000			                ; ........
   226 3691 00				.byte 	%00000000                           ; ........
   227 3692 00				.byte 	%00000000                           ; ........
   228 3693 00				.byte 	%00000000                           ; ........
   229 3694 00				.byte 	%00000000                           ; ........
   230 3695 00				.byte 	%00000000                           ; ........
   231 3696 00				.byte 	%00000000                           ; ........
   232 3697 00				.byte 	%00000000                           ; ........
   233 3698 10				.byte 	%00010000                           ; ...#....
   234 3699 10				.byte 	%00010000                           ; ...#....
   235 369A 10				.byte 	%00010000                           ; ...#....
   236 369B 10				.byte 	%00010000                           ; ...#....
   237 369C 08				.byte 	%00001000                           ; ........
   238 369D 00				.byte 	%00000000                           ; ........
   239 369E 10				.byte 	%00010000                           ; ...#.#..
   240 369F 10				.byte 	%00010000                           ; ...#.#..
   241 36A0 18				.byte 	%00011000                           ; ...####.
   242
   243 					; Walking 0
   244 36A1 00				.byte 	%00000000							; ........
   245 36A2 00				.byte   %00000000							; ........
   246 36A3 00				.byte   %00000000							; ........
   247 36A4 00				.byte   %00000000							; ........
   248 36A5 00				.byte   %00000000							; ........
   249 36A6 00				.byte 	%00000000							; ........
   250 36A7 00				.byte   %00000000							; ........
   251 36A8 00				.byte   %00000000							; ........
   252 36A9 00				.byte   %00000000							; ........
   253 36AA 00				.byte   %00000000							; ........
   254 36AB 00				.byte 	%00000000							; ........
   255 36AC 00				.byte   %00000000							; ........
   256 36AD 10				.byte   %00010000							; ...#....
   257 36AE 10				.byte   %00010000							; ...#....
   258 36AF 08				.byte   %00001000							; ....#...
   259 36B0 04				.byte 	%00000100							; .....#..
   260 36B1 00				.byte   %00000000							; ........
   261 36B2 00				.byte   %00000000							; ........
   262 36B3 24				.byte   %00100100							; ..#. #..
   263 36B4 24				.byte   %00100100							; ..#. #..
   264 36B5 36				.byte   %00110110							; ..## ##.
   265
   266 					; Walking 1	
   267 36B6 00				.byte 	%00000000							; ........
   268 36B7 00				.byte 	%00000000                           ; ........
   269 36B8 00				.byte 	%00000000                           ; ........
   270 36B9 00				.byte 	%00000000                           ; ........
   271 36BA 00				.byte 	%00000000			                ; ........
   272 36BB 00				.byte 	%00000000                           ; ........
   273 36BC 00				.byte 	%00000000                           ; ........
   274 36BD 00				.byte 	%00000000                           ; ........
   275 36BE 00				.byte 	%00000000                           ; ........
   276 36BF 00				.byte 	%00000000                           ; ........
   277 36C0 00				.byte 	%00000000                           ; ........
   278 36C1 00				.byte 	%00000000                           ; ........
   279 36C2 10				.byte 	%00010000                           ; ...#....
   280 36C3 10				.byte 	%00010000                           ; ...#....
   281 36C4 20				.byte 	%00100000                           ; ..#.....
   282 36C5 40				.byte 	%01000000                           ; .#......
   283 36C6 00				.byte 	%00000000                           ; ........
   284 36C7 00				.byte 	%00000000                           ; ........
   285 36C8 24				.byte 	%00100100                           ; .#...#..
   286 36C9 24				.byte 	%00100100                           ; .#...#..
   287 36CA 36				.byte 	%00110110                           ; .##..##.
   288 					
   289 					; Jumping 2
   290 36CB 00			    .byte %00000000								;........
   291 36CC 00			    .byte %00000000                             ;........
   292 36CD 00				.byte %00000000                             ;........
   293 36CE 00				.byte %00000000                             ;........
   294 36CF 00				.byte %00000000                             ;........
   295 36D0 00				.byte %00000000                             ;........
   296 36D1 00				.byte %00000000                             ;........
   297 36D2 00				.byte %00000000                             ;........
   298 36D3 81				.byte %10000001                             ;#......#
   299 36D4 42				.byte %01000010                             ;.#....#.
   300 36D5 24				.byte %00100100                             ;..#..#..
   301 36D6 00				.byte %00000000                             ;........
   302 36D7 00				.byte %00000000                             ;........
   303 36D8 00				.byte %00000000                             ;........
   304 36D9 00				.byte %00000000                             ;........
   305 36DA 10				.byte %00010000                             ;...#....
   306 36DB 14				.byte %00010100                             ;...#.#..
   307 36DC 24				.byte %00100100                             ;..#..#..
   308 36DD A5				.byte %10100101                             ;#.#..#.#
   309 36DE 42				.byte %01000010                             ;.#....#.
   310 36DF 00				.byte %00000000                             ;........
   311
   312 				;*****	Misc Animations and Graphics
   313 				;
   314 36E0			BONUS100
   315
   316 36E0 00 00 00			.byte %0000,%0000,%0000							;............
   317 36E3 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   318 36E6 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   319 36E9 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   320 36EC 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   321 36EF 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   322 36F2 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   323 36F5 00 00 00			.byte %0000,%0000,%0000							;............
   324
   325 = 0018			BONUS100END = * - BONUS100
   326
   327 36F8			CLEARBONUS
   328
   329 36F8 00 00 00			.byte %0000,%0000,%0000							;............
   330 36FB 00 00 00			.byte %0000,%0000,%0000							;............
   331 36FE 00 00 00			.byte %0000,%0000,%0000							;............
   332 3701 00 00 00			.byte %0000,%0000,%0000							;............
   333 3704 00 00 00			.byte %0000,%0000,%0000							;............
   334 3707 00 00 00			.byte %0000,%0000,%0000							;............
   335 370A 00 00 00			.byte %0000,%0000,%0000							;............
   336 370D 00 00 00			.byte %0000,%0000,%0000							;............
   337
   338 = 0018			CLEARBONUSEND = * - CLEARBONUS
   360 						
   361 				.PRINT "Data Size : ", * - DataAddress		
   361 				Data Size : $0710
   362
   363 				;*****	Game font address
   364 				;
   365 3710					org GameFontAddress
   366 A800-AFFF> 00 00 00 00 + 		ins "data/scroller.fnt"
   367 					
   368 				;*****	Text font address
   369 				;
   370 AC00					org TextFontAddress
   371 AC00 00 00 00 00 00 00 + 		ins "data/atari.fnt"
   372 					
   373 				;*****	Sound Data Address
   374 				;
   375 B000					org SoundAddress
   376 						opt h-									;RMT module is standard Atari binary file already
   377 4000 FF FF 00 40 AA 42 + 		ins "Data/sfx.rmt"						;include music RMT module
   378 						opt h+
   379 					
   380 				;*****	HUD Memory Address	
   381 				;
   382 42B1					org HudMemoryAddr							
   383 						 
   384 				.if PAL_VERSION = 0
   385 0680-06CF> 00 00 27 00 + 		.sb "  G 00    E 00    T 00:00.0  H 00 NTSC  "
   386 				.else
   387 						.sb "  G 00    E 00    T 00:00.0  H 00  PAL  "
   388 				.endif
   389 06A8 00 00 00 00 00 00 + 		.sb "                                        "
   390 					
   391 				;*****	Game Memory Address 
   392 				;
   393 06D0					org GameMemoryAddress	
   394 						.rept $1000-LEVEL_CHAR_SIZE_X
   395 							.BYTE $00
   396 						.ENDR
   396 						.endr
Source: REPT
   395 B000-BFFF> 00					.BYTE $00
   395 B001 00						.BYTE $00
   395 B002 00						.BYTE $00
   395 B003 00						.BYTE $00
   395 B004 00						.BYTE $00
   395 B005 00						.BYTE $00
   395 B006 00						.BYTE $00
   395 B007 00						.BYTE $00
   395 B008 00						.BYTE $00
   395 B009 00						.BYTE $00
   395 B00A 00						.BYTE $00
   395 B00B 00						.BYTE $00
   395 B00C 00						.BYTE $00
   395 B00D 00						.BYTE $00
   395 B00E 00						.BYTE $00
   395 B00F 00						.BYTE $00
   395 B010 00						.BYTE $00
   395 B011 00						.BYTE $00
   395 B012 00						.BYTE $00
   395 B013 00						.BYTE $00
   395 B014 00						.BYTE $00
   395 B015 00						.BYTE $00
   395 B016 00						.BYTE $00
   395 B017 00						.BYTE $00
   395 B018 00						.BYTE $00
   395 B019 00						.BYTE $00
   395 B01A 00						.BYTE $00
   395 B01B 00						.BYTE $00
   395 B01C 00						.BYTE $00
   395 B01D 00						.BYTE $00
   395 B01E 00						.BYTE $00
   395 B01F 00						.BYTE $00
   395 B020 00						.BYTE $00
   395 B021 00						.BYTE $00
   395 B022 00						.BYTE $00
   395 B023 00						.BYTE $00
   395 B024 00						.BYTE $00
   395 B025 00						.BYTE $00
   395 B026 00						.BYTE $00
   395 B027 00						.BYTE $00
   395 B028 00						.BYTE $00
   395 B029 00						.BYTE $00
   395 B02A 00						.BYTE $00
   395 B02B 00						.BYTE $00
   395 B02C 00						.BYTE $00
   395 B02D 00						.BYTE $00
   395 B02E 00						.BYTE $00
   395 B02F 00						.BYTE $00
   395 B030 00						.BYTE $00
   395 B031 00						.BYTE $00
   395 B032 00						.BYTE $00
   395 B033 00						.BYTE $00
   395 B034 00						.BYTE $00
   395 B035 00						.BYTE $00
   395 B036 00						.BYTE $00
   395 B037 00						.BYTE $00
   395 B038 00						.BYTE $00
   395 B039 00						.BYTE $00
   395 B03A 00						.BYTE $00
   395 B03B 00						.BYTE $00
   395 B03C 00						.BYTE $00
   395 B03D 00						.BYTE $00
   395 B03E 00						.BYTE $00
   395 B03F 00						.BYTE $00
   395 B040 00						.BYTE $00
   395 B041 00						.BYTE $00
   395 B042 00						.BYTE $00
   395 B043 00						.BYTE $00
   395 B044 00						.BYTE $00
   395 B045 00						.BYTE $00
   395 B046 00						.BYTE $00
   395 B047 00						.BYTE $00
   395 B048 00						.BYTE $00
   395 B049 00						.BYTE $00
   395 B04A 00						.BYTE $00
   395 B04B 00						.BYTE $00
   395 B04C 00						.BYTE $00
   395 B04D 00						.BYTE $00
   395 B04E 00						.BYTE $00
   395 B04F 00						.BYTE $00
   395 B050 00						.BYTE $00
   395 B051 00						.BYTE $00
   395 B052 00						.BYTE $00
   395 B053 00						.BYTE $00
   395 B054 00						.BYTE $00
   395 B055 00						.BYTE $00
   395 B056 00						.BYTE $00
   395 B057 00						.BYTE $00
   395 B058 00						.BYTE $00
   395 B059 00						.BYTE $00
   395 B05A 00						.BYTE $00
   395 B05B 00						.BYTE $00
   395 B05C 00						.BYTE $00
   395 B05D 00						.BYTE $00
   395 B05E 00						.BYTE $00
   395 B05F 00						.BYTE $00
   395 B060 00						.BYTE $00
   395 B061 00						.BYTE $00
   395 B062 00						.BYTE $00
   395 B063 00						.BYTE $00
   395 B064 00						.BYTE $00
   395 B065 00						.BYTE $00
   395 B066 00						.BYTE $00
   395 B067 00						.BYTE $00
   395 B068 00						.BYTE $00
   395 B069 00						.BYTE $00
   395 B06A 00						.BYTE $00
   395 B06B 00						.BYTE $00
   395 B06C 00						.BYTE $00
   395 B06D 00						.BYTE $00
   395 B06E 00						.BYTE $00
   395 B06F 00						.BYTE $00
   395 B070 00						.BYTE $00
   395 B071 00						.BYTE $00
   395 B072 00						.BYTE $00
   395 B073 00						.BYTE $00
   395 B074 00						.BYTE $00
   395 B075 00						.BYTE $00
   395 B076 00						.BYTE $00
   395 B077 00						.BYTE $00
   395 B078 00						.BYTE $00
   395 B079 00						.BYTE $00
   395 B07A 00						.BYTE $00
   395 B07B 00						.BYTE $00
   395 B07C 00						.BYTE $00
   395 B07D 00						.BYTE $00
   395 B07E 00						.BYTE $00
   395 B07F 00						.BYTE $00
   395 B080 00						.BYTE $00
   395 B081 00						.BYTE $00
   395 B082 00						.BYTE $00
   395 B083 00						.BYTE $00
   395 B084 00						.BYTE $00
   395 B085 00						.BYTE $00
   395 B086 00						.BYTE $00
   395 B087 00						.BYTE $00
   395 B088 00						.BYTE $00
   395 B089 00						.BYTE $00
   395 B08A 00						.BYTE $00
   395 B08B 00						.BYTE $00
   395 B08C 00						.BYTE $00
   395 B08D 00						.BYTE $00
   395 B08E 00						.BYTE $00
   395 B08F 00						.BYTE $00
   395 B090 00						.BYTE $00
   395 B091 00						.BYTE $00
   395 B092 00						.BYTE $00
   395 B093 00						.BYTE $00
   395 B094 00						.BYTE $00
   395 B095 00						.BYTE $00
   395 B096 00						.BYTE $00
   395 B097 00						.BYTE $00
   395 B098 00						.BYTE $00
   395 B099 00						.BYTE $00
   395 B09A 00						.BYTE $00
   395 B09B 00						.BYTE $00
   395 B09C 00						.BYTE $00
   395 B09D 00						.BYTE $00
   395 B09E 00						.BYTE $00
   395 B09F 00						.BYTE $00
   395 B0A0 00						.BYTE $00
   395 B0A1 00						.BYTE $00
   395 B0A2 00						.BYTE $00
   395 B0A3 00						.BYTE $00
   395 B0A4 00						.BYTE $00
   395 B0A5 00						.BYTE $00
   395 B0A6 00						.BYTE $00
   395 B0A7 00						.BYTE $00
   395 B0A8 00						.BYTE $00
   395 B0A9 00						.BYTE $00
   395 B0AA 00						.BYTE $00
   395 B0AB 00						.BYTE $00
   395 B0AC 00						.BYTE $00
   395 B0AD 00						.BYTE $00
   395 B0AE 00						.BYTE $00
   395 B0AF 00						.BYTE $00
   395 B0B0 00						.BYTE $00
   395 B0B1 00						.BYTE $00
   395 B0B2 00						.BYTE $00
   395 B0B3 00						.BYTE $00
   395 B0B4 00						.BYTE $00
   395 B0B5 00						.BYTE $00
   395 B0B6 00						.BYTE $00
   395 B0B7 00						.BYTE $00
   395 B0B8 00						.BYTE $00
   395 B0B9 00						.BYTE $00
   395 B0BA 00						.BYTE $00
   395 B0BB 00						.BYTE $00
   395 B0BC 00						.BYTE $00
   395 B0BD 00						.BYTE $00
   395 B0BE 00						.BYTE $00
   395 B0BF 00						.BYTE $00
   395 B0C0 00						.BYTE $00
   395 B0C1 00						.BYTE $00
   395 B0C2 00						.BYTE $00
   395 B0C3 00						.BYTE $00
   395 B0C4 00						.BYTE $00
   395 B0C5 00						.BYTE $00
   395 B0C6 00						.BYTE $00
   395 B0C7 00						.BYTE $00
   395 B0C8 00						.BYTE $00
   395 B0C9 00						.BYTE $00
   395 B0CA 00						.BYTE $00
   395 B0CB 00						.BYTE $00
   395 B0CC 00						.BYTE $00
   395 B0CD 00						.BYTE $00
   395 B0CE 00						.BYTE $00
   395 B0CF 00						.BYTE $00
   395 B0D0 00						.BYTE $00
   395 B0D1 00						.BYTE $00
   395 B0D2 00						.BYTE $00
   395 B0D3 00						.BYTE $00
   395 B0D4 00						.BYTE $00
   395 B0D5 00						.BYTE $00
   395 B0D6 00						.BYTE $00
   395 B0D7 00						.BYTE $00
   395 B0D8 00						.BYTE $00
   395 B0D9 00						.BYTE $00
   395 B0DA 00						.BYTE $00
   395 B0DB 00						.BYTE $00
   395 B0DC 00						.BYTE $00
   395 B0DD 00						.BYTE $00
   395 B0DE 00						.BYTE $00
   395 B0DF 00						.BYTE $00
   395 B0E0 00						.BYTE $00
   395 B0E1 00						.BYTE $00
   395 B0E2 00						.BYTE $00
   395 B0E3 00						.BYTE $00
   395 B0E4 00						.BYTE $00
   395 B0E5 00						.BYTE $00
   395 B0E6 00						.BYTE $00
   395 B0E7 00						.BYTE $00
   395 B0E8 00						.BYTE $00
   395 B0E9 00						.BYTE $00
   395 B0EA 00						.BYTE $00
   395 B0EB 00						.BYTE $00
   395 B0EC 00						.BYTE $00
   395 B0ED 00						.BYTE $00
   395 B0EE 00						.BYTE $00
   395 B0EF 00						.BYTE $00
   395 B0F0 00						.BYTE $00
   395 B0F1 00						.BYTE $00
   395 B0F2 00						.BYTE $00
   395 B0F3 00						.BYTE $00
   395 B0F4 00						.BYTE $00
   395 B0F5 00						.BYTE $00
   395 B0F6 00						.BYTE $00
   395 B0F7 00						.BYTE $00
   395 B0F8 00						.BYTE $00
   395 B0F9 00						.BYTE $00
   395 B0FA 00						.BYTE $00
   395 B0FB 00						.BYTE $00
   395 B0FC 00						.BYTE $00
   395 B0FD 00						.BYTE $00
   395 B0FE 00						.BYTE $00
   395 B0FF 00						.BYTE $00
   395 B100 00						.BYTE $00
   395 B101 00						.BYTE $00
   395 B102 00						.BYTE $00
   395 B103 00						.BYTE $00
   395 B104 00						.BYTE $00
   395 B105 00						.BYTE $00
   395 B106 00						.BYTE $00
   395 B107 00						.BYTE $00
   395 B108 00						.BYTE $00
   395 B109 00						.BYTE $00
   395 B10A 00						.BYTE $00
   395 B10B 00						.BYTE $00
   395 B10C 00						.BYTE $00
   395 B10D 00						.BYTE $00
   395 B10E 00						.BYTE $00
   395 B10F 00						.BYTE $00
   395 B110 00						.BYTE $00
   395 B111 00						.BYTE $00
   395 B112 00						.BYTE $00
   395 B113 00						.BYTE $00
   395 B114 00						.BYTE $00
   395 B115 00						.BYTE $00
   395 B116 00						.BYTE $00
   395 B117 00						.BYTE $00
   395 B118 00						.BYTE $00
   395 B119 00						.BYTE $00
   395 B11A 00						.BYTE $00
   395 B11B 00						.BYTE $00
   395 B11C 00						.BYTE $00
   395 B11D 00						.BYTE $00
   395 B11E 00						.BYTE $00
   395 B11F 00						.BYTE $00
   395 B120 00						.BYTE $00
   395 B121 00						.BYTE $00
   395 B122 00						.BYTE $00
   395 B123 00						.BYTE $00
   395 B124 00						.BYTE $00
   395 B125 00						.BYTE $00
   395 B126 00						.BYTE $00
   395 B127 00						.BYTE $00
   395 B128 00						.BYTE $00
   395 B129 00						.BYTE $00
   395 B12A 00						.BYTE $00
   395 B12B 00						.BYTE $00
   395 B12C 00						.BYTE $00
   395 B12D 00						.BYTE $00
   395 B12E 00						.BYTE $00
   395 B12F 00						.BYTE $00
   395 B130 00						.BYTE $00
   395 B131 00						.BYTE $00
   395 B132 00						.BYTE $00
   395 B133 00						.BYTE $00
   395 B134 00						.BYTE $00
   395 B135 00						.BYTE $00
   395 B136 00						.BYTE $00
   395 B137 00						.BYTE $00
   395 B138 00						.BYTE $00
   395 B139 00						.BYTE $00
   395 B13A 00						.BYTE $00
   395 B13B 00						.BYTE $00
   395 B13C 00						.BYTE $00
   395 B13D 00						.BYTE $00
   395 B13E 00						.BYTE $00
   395 B13F 00						.BYTE $00
   395 B140 00						.BYTE $00
   395 B141 00						.BYTE $00
   395 B142 00						.BYTE $00
   395 B143 00						.BYTE $00
   395 B144 00						.BYTE $00
   395 B145 00						.BYTE $00
   395 B146 00						.BYTE $00
   395 B147 00						.BYTE $00
   395 B148 00						.BYTE $00
   395 B149 00						.BYTE $00
   395 B14A 00						.BYTE $00
   395 B14B 00						.BYTE $00
   395 B14C 00						.BYTE $00
   395 B14D 00						.BYTE $00
   395 B14E 00						.BYTE $00
   395 B14F 00						.BYTE $00
   395 B150 00						.BYTE $00
   395 B151 00						.BYTE $00
   395 B152 00						.BYTE $00
   395 B153 00						.BYTE $00
   395 B154 00						.BYTE $00
   395 B155 00						.BYTE $00
   395 B156 00						.BYTE $00
   395 B157 00						.BYTE $00
   395 B158 00						.BYTE $00
   395 B159 00						.BYTE $00
   395 B15A 00						.BYTE $00
   395 B15B 00						.BYTE $00
   395 B15C 00						.BYTE $00
   395 B15D 00						.BYTE $00
   395 B15E 00						.BYTE $00
   395 B15F 00						.BYTE $00
   395 B160 00						.BYTE $00
   395 B161 00						.BYTE $00
   395 B162 00						.BYTE $00
   395 B163 00						.BYTE $00
   395 B164 00						.BYTE $00
   395 B165 00						.BYTE $00
   395 B166 00						.BYTE $00
   395 B167 00						.BYTE $00
   395 B168 00						.BYTE $00
   395 B169 00						.BYTE $00
   395 B16A 00						.BYTE $00
   395 B16B 00						.BYTE $00
   395 B16C 00						.BYTE $00
   395 B16D 00						.BYTE $00
   395 B16E 00						.BYTE $00
   395 B16F 00						.BYTE $00
   395 B170 00						.BYTE $00
   395 B171 00						.BYTE $00
   395 B172 00						.BYTE $00
   395 B173 00						.BYTE $00
   395 B174 00						.BYTE $00
   395 B175 00						.BYTE $00
   395 B176 00						.BYTE $00
   395 B177 00						.BYTE $00
   395 B178 00						.BYTE $00
   395 B179 00						.BYTE $00
   395 B17A 00						.BYTE $00
   395 B17B 00						.BYTE $00
   395 B17C 00						.BYTE $00
   395 B17D 00						.BYTE $00
   395 B17E 00						.BYTE $00
   395 B17F 00						.BYTE $00
   395 B180 00						.BYTE $00
   395 B181 00						.BYTE $00
   395 B182 00						.BYTE $00
   395 B183 00						.BYTE $00
   395 B184 00						.BYTE $00
   395 B185 00						.BYTE $00
   395 B186 00						.BYTE $00
   395 B187 00						.BYTE $00
   395 B188 00						.BYTE $00
   395 B189 00						.BYTE $00
   395 B18A 00						.BYTE $00
   395 B18B 00						.BYTE $00
   395 B18C 00						.BYTE $00
   395 B18D 00						.BYTE $00
   395 B18E 00						.BYTE $00
   395 B18F 00						.BYTE $00
   395 B190 00						.BYTE $00
   395 B191 00						.BYTE $00
   395 B192 00						.BYTE $00
   395 B193 00						.BYTE $00
   395 B194 00						.BYTE $00
   395 B195 00						.BYTE $00
   395 B196 00						.BYTE $00
   395 B197 00						.BYTE $00
   395 B198 00						.BYTE $00
   395 B199 00						.BYTE $00
   395 B19A 00						.BYTE $00
   395 B19B 00						.BYTE $00
   395 B19C 00						.BYTE $00
   395 B19D 00						.BYTE $00
   395 B19E 00						.BYTE $00
   395 B19F 00						.BYTE $00
   395 B1A0 00						.BYTE $00
   395 B1A1 00						.BYTE $00
   395 B1A2 00						.BYTE $00
   395 B1A3 00						.BYTE $00
   395 B1A4 00						.BYTE $00
   395 B1A5 00						.BYTE $00
   395 B1A6 00						.BYTE $00
   395 B1A7 00						.BYTE $00
   395 B1A8 00						.BYTE $00
   395 B1A9 00						.BYTE $00
   395 B1AA 00						.BYTE $00
   395 B1AB 00						.BYTE $00
   395 B1AC 00						.BYTE $00
   395 B1AD 00						.BYTE $00
   395 B1AE 00						.BYTE $00
   395 B1AF 00						.BYTE $00
   395 B1B0 00						.BYTE $00
   395 B1B1 00						.BYTE $00
   395 B1B2 00						.BYTE $00
   395 B1B3 00						.BYTE $00
   395 B1B4 00						.BYTE $00
   395 B1B5 00						.BYTE $00
   395 B1B6 00						.BYTE $00
   395 B1B7 00						.BYTE $00
   395 B1B8 00						.BYTE $00
   395 B1B9 00						.BYTE $00
   395 B1BA 00						.BYTE $00
   395 B1BB 00						.BYTE $00
   395 B1BC 00						.BYTE $00
   395 B1BD 00						.BYTE $00
   395 B1BE 00						.BYTE $00
   395 B1BF 00						.BYTE $00
   395 B1C0 00						.BYTE $00
   395 B1C1 00						.BYTE $00
   395 B1C2 00						.BYTE $00
   395 B1C3 00						.BYTE $00
   395 B1C4 00						.BYTE $00
   395 B1C5 00						.BYTE $00
   395 B1C6 00						.BYTE $00
   395 B1C7 00						.BYTE $00
   395 B1C8 00						.BYTE $00
   395 B1C9 00						.BYTE $00
   395 B1CA 00						.BYTE $00
   395 B1CB 00						.BYTE $00
   395 B1CC 00						.BYTE $00
   395 B1CD 00						.BYTE $00
   395 B1CE 00						.BYTE $00
   395 B1CF 00						.BYTE $00
   395 B1D0 00						.BYTE $00
   395 B1D1 00						.BYTE $00
   395 B1D2 00						.BYTE $00
   395 B1D3 00						.BYTE $00
   395 B1D4 00						.BYTE $00
   395 B1D5 00						.BYTE $00
   395 B1D6 00						.BYTE $00
   395 B1D7 00						.BYTE $00
   395 B1D8 00						.BYTE $00
   395 B1D9 00						.BYTE $00
   395 B1DA 00						.BYTE $00
   395 B1DB 00						.BYTE $00
   395 B1DC 00						.BYTE $00
   395 B1DD 00						.BYTE $00
   395 B1DE 00						.BYTE $00
   395 B1DF 00						.BYTE $00
   395 B1E0 00						.BYTE $00
   395 B1E1 00						.BYTE $00
   395 B1E2 00						.BYTE $00
   395 B1E3 00						.BYTE $00
   395 B1E4 00						.BYTE $00
   395 B1E5 00						.BYTE $00
   395 B1E6 00						.BYTE $00
   395 B1E7 00						.BYTE $00
   395 B1E8 00						.BYTE $00
   395 B1E9 00						.BYTE $00
   395 B1EA 00						.BYTE $00
   395 B1EB 00						.BYTE $00
   395 B1EC 00						.BYTE $00
   395 B1ED 00						.BYTE $00
   395 B1EE 00						.BYTE $00
   395 B1EF 00						.BYTE $00
   395 B1F0 00						.BYTE $00
   395 B1F1 00						.BYTE $00
   395 B1F2 00						.BYTE $00
   395 B1F3 00						.BYTE $00
   395 B1F4 00						.BYTE $00
   395 B1F5 00						.BYTE $00
   395 B1F6 00						.BYTE $00
   395 B1F7 00						.BYTE $00
   395 B1F8 00						.BYTE $00
   395 B1F9 00						.BYTE $00
   395 B1FA 00						.BYTE $00
   395 B1FB 00						.BYTE $00
   395 B1FC 00						.BYTE $00
   395 B1FD 00						.BYTE $00
   395 B1FE 00						.BYTE $00
   395 B1FF 00						.BYTE $00
   395 B200 00						.BYTE $00
   395 B201 00						.BYTE $00
   395 B202 00						.BYTE $00
   395 B203 00						.BYTE $00
   395 B204 00						.BYTE $00
   395 B205 00						.BYTE $00
   395 B206 00						.BYTE $00
   395 B207 00						.BYTE $00
   395 B208 00						.BYTE $00
   395 B209 00						.BYTE $00
   395 B20A 00						.BYTE $00
   395 B20B 00						.BYTE $00
   395 B20C 00						.BYTE $00
   395 B20D 00						.BYTE $00
   395 B20E 00						.BYTE $00
   395 B20F 00						.BYTE $00
   395 B210 00						.BYTE $00
   395 B211 00						.BYTE $00
   395 B212 00						.BYTE $00
   395 B213 00						.BYTE $00
   395 B214 00						.BYTE $00
   395 B215 00						.BYTE $00
   395 B216 00						.BYTE $00
   395 B217 00						.BYTE $00
   395 B218 00						.BYTE $00
   395 B219 00						.BYTE $00
   395 B21A 00						.BYTE $00
   395 B21B 00						.BYTE $00
   395 B21C 00						.BYTE $00
   395 B21D 00						.BYTE $00
   395 B21E 00						.BYTE $00
   395 B21F 00						.BYTE $00
   395 B220 00						.BYTE $00
   395 B221 00						.BYTE $00
   395 B222 00						.BYTE $00
   395 B223 00						.BYTE $00
   395 B224 00						.BYTE $00
   395 B225 00						.BYTE $00
   395 B226 00						.BYTE $00
   395 B227 00						.BYTE $00
   395 B228 00						.BYTE $00
   395 B229 00						.BYTE $00
   395 B22A 00						.BYTE $00
   395 B22B 00						.BYTE $00
   395 B22C 00						.BYTE $00
   395 B22D 00						.BYTE $00
   395 B22E 00						.BYTE $00
   395 B22F 00						.BYTE $00
   395 B230 00						.BYTE $00
   395 B231 00						.BYTE $00
   395 B232 00						.BYTE $00
   395 B233 00						.BYTE $00
   395 B234 00						.BYTE $00
   395 B235 00						.BYTE $00
   395 B236 00						.BYTE $00
   395 B237 00						.BYTE $00
   395 B238 00						.BYTE $00
   395 B239 00						.BYTE $00
   395 B23A 00						.BYTE $00
   395 B23B 00						.BYTE $00
   395 B23C 00						.BYTE $00
   395 B23D 00						.BYTE $00
   395 B23E 00						.BYTE $00
   395 B23F 00						.BYTE $00
   395 B240 00						.BYTE $00
   395 B241 00						.BYTE $00
   395 B242 00						.BYTE $00
   395 B243 00						.BYTE $00
   395 B244 00						.BYTE $00
   395 B245 00						.BYTE $00
   395 B246 00						.BYTE $00
   395 B247 00						.BYTE $00
   395 B248 00						.BYTE $00
   395 B249 00						.BYTE $00
   395 B24A 00						.BYTE $00
   395 B24B 00						.BYTE $00
   395 B24C 00						.BYTE $00
   395 B24D 00						.BYTE $00
   395 B24E 00						.BYTE $00
   395 B24F 00						.BYTE $00
   395 B250 00						.BYTE $00
   395 B251 00						.BYTE $00
   395 B252 00						.BYTE $00
   395 B253 00						.BYTE $00
   395 B254 00						.BYTE $00
   395 B255 00						.BYTE $00
   395 B256 00						.BYTE $00
   395 B257 00						.BYTE $00
   395 B258 00						.BYTE $00
   395 B259 00						.BYTE $00
   395 B25A 00						.BYTE $00
   395 B25B 00						.BYTE $00
   395 B25C 00						.BYTE $00
   395 B25D 00						.BYTE $00
   395 B25E 00						.BYTE $00
   395 B25F 00						.BYTE $00
   395 B260 00						.BYTE $00
   395 B261 00						.BYTE $00
   395 B262 00						.BYTE $00
   395 B263 00						.BYTE $00
   395 B264 00						.BYTE $00
   395 B265 00						.BYTE $00
   395 B266 00						.BYTE $00
   395 B267 00						.BYTE $00
   395 B268 00						.BYTE $00
   395 B269 00						.BYTE $00
   395 B26A 00						.BYTE $00
   395 B26B 00						.BYTE $00
   395 B26C 00						.BYTE $00
   395 B26D 00						.BYTE $00
   395 B26E 00						.BYTE $00
   395 B26F 00						.BYTE $00
   395 B270 00						.BYTE $00
   395 B271 00						.BYTE $00
   395 B272 00						.BYTE $00
   395 B273 00						.BYTE $00
   395 B274 00						.BYTE $00
   395 B275 00						.BYTE $00
   395 B276 00						.BYTE $00
   395 B277 00						.BYTE $00
   395 B278 00						.BYTE $00
   395 B279 00						.BYTE $00
   395 B27A 00						.BYTE $00
   395 B27B 00						.BYTE $00
   395 B27C 00						.BYTE $00
   395 B27D 00						.BYTE $00
   395 B27E 00						.BYTE $00
   395 B27F 00						.BYTE $00
   395 B280 00						.BYTE $00
   395 B281 00						.BYTE $00
   395 B282 00						.BYTE $00
   395 B283 00						.BYTE $00
   395 B284 00						.BYTE $00
   395 B285 00						.BYTE $00
   395 B286 00						.BYTE $00
   395 B287 00						.BYTE $00
   395 B288 00						.BYTE $00
   395 B289 00						.BYTE $00
   395 B28A 00						.BYTE $00
   395 B28B 00						.BYTE $00
   395 B28C 00						.BYTE $00
   395 B28D 00						.BYTE $00
   395 B28E 00						.BYTE $00
   395 B28F 00						.BYTE $00
   395 B290 00						.BYTE $00
   395 B291 00						.BYTE $00
   395 B292 00						.BYTE $00
   395 B293 00						.BYTE $00
   395 B294 00						.BYTE $00
   395 B295 00						.BYTE $00
   395 B296 00						.BYTE $00
   395 B297 00						.BYTE $00
   395 B298 00						.BYTE $00
   395 B299 00						.BYTE $00
   395 B29A 00						.BYTE $00
   395 B29B 00						.BYTE $00
   395 B29C 00						.BYTE $00
   395 B29D 00						.BYTE $00
   395 B29E 00						.BYTE $00
   395 B29F 00						.BYTE $00
   395 B2A0 00						.BYTE $00
   395 B2A1 00						.BYTE $00
   395 B2A2 00						.BYTE $00
   395 B2A3 00						.BYTE $00
   395 B2A4 00						.BYTE $00
   395 B2A5 00						.BYTE $00
   395 B2A6 00						.BYTE $00
   395 B2A7 00						.BYTE $00
   395 B2A8 00						.BYTE $00
   395 B2A9 00						.BYTE $00
   395 B2AA 00						.BYTE $00
   395 B2AB 00						.BYTE $00
   395 B2AC 00						.BYTE $00
   395 B2AD 00						.BYTE $00
   395 B2AE 00						.BYTE $00
   395 B2AF 00						.BYTE $00
   395 B2B0 00						.BYTE $00
   395 B2B1 00						.BYTE $00
   395 B2B2 00						.BYTE $00
   395 B2B3 00						.BYTE $00
   395 B2B4 00						.BYTE $00
   395 B2B5 00						.BYTE $00
   395 B2B6 00						.BYTE $00
   395 B2B7 00						.BYTE $00
   395 B2B8 00						.BYTE $00
   395 B2B9 00						.BYTE $00
   395 B2BA 00						.BYTE $00
   395 B2BB 00						.BYTE $00
   395 B2BC 00						.BYTE $00
   395 B2BD 00						.BYTE $00
   395 B2BE 00						.BYTE $00
   395 B2BF 00						.BYTE $00
   395 B2C0 00						.BYTE $00
   395 B2C1 00						.BYTE $00
   395 B2C2 00						.BYTE $00
   395 B2C3 00						.BYTE $00
   395 B2C4 00						.BYTE $00
   395 B2C5 00						.BYTE $00
   395 B2C6 00						.BYTE $00
   395 B2C7 00						.BYTE $00
   395 B2C8 00						.BYTE $00
   395 B2C9 00						.BYTE $00
   395 B2CA 00						.BYTE $00
   395 B2CB 00						.BYTE $00
   395 B2CC 00						.BYTE $00
   395 B2CD 00						.BYTE $00
   395 B2CE 00						.BYTE $00
   395 B2CF 00						.BYTE $00
   395 B2D0 00						.BYTE $00
   395 B2D1 00						.BYTE $00
   395 B2D2 00						.BYTE $00
   395 B2D3 00						.BYTE $00
   395 B2D4 00						.BYTE $00
   395 B2D5 00						.BYTE $00
   395 B2D6 00						.BYTE $00
   395 B2D7 00						.BYTE $00
   395 B2D8 00						.BYTE $00
   395 B2D9 00						.BYTE $00
   395 B2DA 00						.BYTE $00
   395 B2DB 00						.BYTE $00
   395 B2DC 00						.BYTE $00
   395 B2DD 00						.BYTE $00
   395 B2DE 00						.BYTE $00
   395 B2DF 00						.BYTE $00
   395 B2E0 00						.BYTE $00
   395 B2E1 00						.BYTE $00
   395 B2E2 00						.BYTE $00
   395 B2E3 00						.BYTE $00
   395 B2E4 00						.BYTE $00
   395 B2E5 00						.BYTE $00
   395 B2E6 00						.BYTE $00
   395 B2E7 00						.BYTE $00
   395 B2E8 00						.BYTE $00
   395 B2E9 00						.BYTE $00
   395 B2EA 00						.BYTE $00
   395 B2EB 00						.BYTE $00
   395 B2EC 00						.BYTE $00
   395 B2ED 00						.BYTE $00
   395 B2EE 00						.BYTE $00
   395 B2EF 00						.BYTE $00
   395 B2F0 00						.BYTE $00
   395 B2F1 00						.BYTE $00
   395 B2F2 00						.BYTE $00
   395 B2F3 00						.BYTE $00
   395 B2F4 00						.BYTE $00
   395 B2F5 00						.BYTE $00
   395 B2F6 00						.BYTE $00
   395 B2F7 00						.BYTE $00
   395 B2F8 00						.BYTE $00
   395 B2F9 00						.BYTE $00
   395 B2FA 00						.BYTE $00
   395 B2FB 00						.BYTE $00
   395 B2FC 00						.BYTE $00
   395 B2FD 00						.BYTE $00
   395 B2FE 00						.BYTE $00
   395 B2FF 00						.BYTE $00
   395 B300 00						.BYTE $00
   395 B301 00						.BYTE $00
   395 B302 00						.BYTE $00
   395 B303 00						.BYTE $00
   395 B304 00						.BYTE $00
   395 B305 00						.BYTE $00
   395 B306 00						.BYTE $00
   395 B307 00						.BYTE $00
   395 B308 00						.BYTE $00
   395 B309 00						.BYTE $00
   395 B30A 00						.BYTE $00
   395 B30B 00						.BYTE $00
   395 B30C 00						.BYTE $00
   395 B30D 00						.BYTE $00
   395 B30E 00						.BYTE $00
   395 B30F 00						.BYTE $00
   395 B310 00						.BYTE $00
   395 B311 00						.BYTE $00
   395 B312 00						.BYTE $00
   395 B313 00						.BYTE $00
   395 B314 00						.BYTE $00
   395 B315 00						.BYTE $00
   395 B316 00						.BYTE $00
   395 B317 00						.BYTE $00
   395 B318 00						.BYTE $00
   395 B319 00						.BYTE $00
   395 B31A 00						.BYTE $00
   395 B31B 00						.BYTE $00
   395 B31C 00						.BYTE $00
   395 B31D 00						.BYTE $00
   395 B31E 00						.BYTE $00
   395 B31F 00						.BYTE $00
   395 B320 00						.BYTE $00
   395 B321 00						.BYTE $00
   395 B322 00						.BYTE $00
   395 B323 00						.BYTE $00
   395 B324 00						.BYTE $00
   395 B325 00						.BYTE $00
   395 B326 00						.BYTE $00
   395 B327 00						.BYTE $00
   395 B328 00						.BYTE $00
   395 B329 00						.BYTE $00
   395 B32A 00						.BYTE $00
   395 B32B 00						.BYTE $00
   395 B32C 00						.BYTE $00
   395 B32D 00						.BYTE $00
   395 B32E 00						.BYTE $00
   395 B32F 00						.BYTE $00
   395 B330 00						.BYTE $00
   395 B331 00						.BYTE $00
   395 B332 00						.BYTE $00
   395 B333 00						.BYTE $00
   395 B334 00						.BYTE $00
   395 B335 00						.BYTE $00
   395 B336 00						.BYTE $00
   395 B337 00						.BYTE $00
   395 B338 00						.BYTE $00
   395 B339 00						.BYTE $00
   395 B33A 00						.BYTE $00
   395 B33B 00						.BYTE $00
   395 B33C 00						.BYTE $00
   395 B33D 00						.BYTE $00
   395 B33E 00						.BYTE $00
   395 B33F 00						.BYTE $00
   395 B340 00						.BYTE $00
   395 B341 00						.BYTE $00
   395 B342 00						.BYTE $00
   395 B343 00						.BYTE $00
   395 B344 00						.BYTE $00
   395 B345 00						.BYTE $00
   395 B346 00						.BYTE $00
   395 B347 00						.BYTE $00
   395 B348 00						.BYTE $00
   395 B349 00						.BYTE $00
   395 B34A 00						.BYTE $00
   395 B34B 00						.BYTE $00
   395 B34C 00						.BYTE $00
   395 B34D 00						.BYTE $00
   395 B34E 00						.BYTE $00
   395 B34F 00						.BYTE $00
   395 B350 00						.BYTE $00
   395 B351 00						.BYTE $00
   395 B352 00						.BYTE $00
   395 B353 00						.BYTE $00
   395 B354 00						.BYTE $00
   395 B355 00						.BYTE $00
   395 B356 00						.BYTE $00
   395 B357 00						.BYTE $00
   395 B358 00						.BYTE $00
   395 B359 00						.BYTE $00
   395 B35A 00						.BYTE $00
   395 B35B 00						.BYTE $00
   395 B35C 00						.BYTE $00
   395 B35D 00						.BYTE $00
   395 B35E 00						.BYTE $00
   395 B35F 00						.BYTE $00
   395 B360 00						.BYTE $00
   395 B361 00						.BYTE $00
   395 B362 00						.BYTE $00
   395 B363 00						.BYTE $00
   395 B364 00						.BYTE $00
   395 B365 00						.BYTE $00
   395 B366 00						.BYTE $00
   395 B367 00						.BYTE $00
   395 B368 00						.BYTE $00
   395 B369 00						.BYTE $00
   395 B36A 00						.BYTE $00
   395 B36B 00						.BYTE $00
   395 B36C 00						.BYTE $00
   395 B36D 00						.BYTE $00
   395 B36E 00						.BYTE $00
   395 B36F 00						.BYTE $00
   395 B370 00						.BYTE $00
   395 B371 00						.BYTE $00
   395 B372 00						.BYTE $00
   395 B373 00						.BYTE $00
   395 B374 00						.BYTE $00
   395 B375 00						.BYTE $00
   395 B376 00						.BYTE $00
   395 B377 00						.BYTE $00
   395 B378 00						.BYTE $00
   395 B379 00						.BYTE $00
   395 B37A 00						.BYTE $00
   395 B37B 00						.BYTE $00
   395 B37C 00						.BYTE $00
   395 B37D 00						.BYTE $00
   395 B37E 00						.BYTE $00
   395 B37F 00						.BYTE $00
   395 B380 00						.BYTE $00
   395 B381 00						.BYTE $00
   395 B382 00						.BYTE $00
   395 B383 00						.BYTE $00
   395 B384 00						.BYTE $00
   395 B385 00						.BYTE $00
   395 B386 00						.BYTE $00
   395 B387 00						.BYTE $00
   395 B388 00						.BYTE $00
   395 B389 00						.BYTE $00
   395 B38A 00						.BYTE $00
   395 B38B 00						.BYTE $00
   395 B38C 00						.BYTE $00
   395 B38D 00						.BYTE $00
   395 B38E 00						.BYTE $00
   395 B38F 00						.BYTE $00
   395 B390 00						.BYTE $00
   395 B391 00						.BYTE $00
   395 B392 00						.BYTE $00
   395 B393 00						.BYTE $00
   395 B394 00						.BYTE $00
   395 B395 00						.BYTE $00
   395 B396 00						.BYTE $00
   395 B397 00						.BYTE $00
   395 B398 00						.BYTE $00
   395 B399 00						.BYTE $00
   395 B39A 00						.BYTE $00
   395 B39B 00						.BYTE $00
   395 B39C 00						.BYTE $00
   395 B39D 00						.BYTE $00
   395 B39E 00						.BYTE $00
   395 B39F 00						.BYTE $00
   395 B3A0 00						.BYTE $00
   395 B3A1 00						.BYTE $00
   395 B3A2 00						.BYTE $00
   395 B3A3 00						.BYTE $00
   395 B3A4 00						.BYTE $00
   395 B3A5 00						.BYTE $00
   395 B3A6 00						.BYTE $00
   395 B3A7 00						.BYTE $00
   395 B3A8 00						.BYTE $00
   395 B3A9 00						.BYTE $00
   395 B3AA 00						.BYTE $00
   395 B3AB 00						.BYTE $00
   395 B3AC 00						.BYTE $00
   395 B3AD 00						.BYTE $00
   395 B3AE 00						.BYTE $00
   395 B3AF 00						.BYTE $00
   395 B3B0 00						.BYTE $00
   395 B3B1 00						.BYTE $00
   395 B3B2 00						.BYTE $00
   395 B3B3 00						.BYTE $00
   395 B3B4 00						.BYTE $00
   395 B3B5 00						.BYTE $00
   395 B3B6 00						.BYTE $00
   395 B3B7 00						.BYTE $00
   395 B3B8 00						.BYTE $00
   395 B3B9 00						.BYTE $00
   395 B3BA 00						.BYTE $00
   395 B3BB 00						.BYTE $00
   395 B3BC 00						.BYTE $00
   395 B3BD 00						.BYTE $00
   395 B3BE 00						.BYTE $00
   395 B3BF 00						.BYTE $00
   395 B3C0 00						.BYTE $00
   395 B3C1 00						.BYTE $00
   395 B3C2 00						.BYTE $00
   395 B3C3 00						.BYTE $00
   395 B3C4 00						.BYTE $00
   395 B3C5 00						.BYTE $00
   395 B3C6 00						.BYTE $00
   395 B3C7 00						.BYTE $00
   395 B3C8 00						.BYTE $00
   395 B3C9 00						.BYTE $00
   395 B3CA 00						.BYTE $00
   395 B3CB 00						.BYTE $00
   395 B3CC 00						.BYTE $00
   395 B3CD 00						.BYTE $00
   395 B3CE 00						.BYTE $00
   395 B3CF 00						.BYTE $00
   395 B3D0 00						.BYTE $00
   395 B3D1 00						.BYTE $00
   395 B3D2 00						.BYTE $00
   395 B3D3 00						.BYTE $00
   395 B3D4 00						.BYTE $00
   395 B3D5 00						.BYTE $00
   395 B3D6 00						.BYTE $00
   395 B3D7 00						.BYTE $00
   395 B3D8 00						.BYTE $00
   395 B3D9 00						.BYTE $00
   395 B3DA 00						.BYTE $00
   395 B3DB 00						.BYTE $00
   395 B3DC 00						.BYTE $00
   395 B3DD 00						.BYTE $00
   395 B3DE 00						.BYTE $00
   395 B3DF 00						.BYTE $00
   395 B3E0 00						.BYTE $00
   395 B3E1 00						.BYTE $00
   395 B3E2 00						.BYTE $00
   395 B3E3 00						.BYTE $00
   395 B3E4 00						.BYTE $00
   395 B3E5 00						.BYTE $00
   395 B3E6 00						.BYTE $00
   395 B3E7 00						.BYTE $00
   395 B3E8 00						.BYTE $00
   395 B3E9 00						.BYTE $00
   395 B3EA 00						.BYTE $00
   395 B3EB 00						.BYTE $00
   395 B3EC 00						.BYTE $00
   395 B3ED 00						.BYTE $00
   395 B3EE 00						.BYTE $00
   395 B3EF 00						.BYTE $00
   395 B3F0 00						.BYTE $00
   395 B3F1 00						.BYTE $00
   395 B3F2 00						.BYTE $00
   395 B3F3 00						.BYTE $00
   395 B3F4 00						.BYTE $00
   395 B3F5 00						.BYTE $00
   395 B3F6 00						.BYTE $00
   395 B3F7 00						.BYTE $00
   395 B3F8 00						.BYTE $00
   395 B3F9 00						.BYTE $00
   395 B3FA 00						.BYTE $00
   395 B3FB 00						.BYTE $00
   395 B3FC 00						.BYTE $00
   395 B3FD 00						.BYTE $00
   395 B3FE 00						.BYTE $00
   395 B3FF 00						.BYTE $00
   395 B400 00						.BYTE $00
   395 B401 00						.BYTE $00
   395 B402 00						.BYTE $00
   395 B403 00						.BYTE $00
   395 B404 00						.BYTE $00
   395 B405 00						.BYTE $00
   395 B406 00						.BYTE $00
   395 B407 00						.BYTE $00
   395 B408 00						.BYTE $00
   395 B409 00						.BYTE $00
   395 B40A 00						.BYTE $00
   395 B40B 00						.BYTE $00
   395 B40C 00						.BYTE $00
   395 B40D 00						.BYTE $00
   395 B40E 00						.BYTE $00
   395 B40F 00						.BYTE $00
   395 B410 00						.BYTE $00
   395 B411 00						.BYTE $00
   395 B412 00						.BYTE $00
   395 B413 00						.BYTE $00
   395 B414 00						.BYTE $00
   395 B415 00						.BYTE $00
   395 B416 00						.BYTE $00
   395 B417 00						.BYTE $00
   395 B418 00						.BYTE $00
   395 B419 00						.BYTE $00
   395 B41A 00						.BYTE $00
   395 B41B 00						.BYTE $00
   395 B41C 00						.BYTE $00
   395 B41D 00						.BYTE $00
   395 B41E 00						.BYTE $00
   395 B41F 00						.BYTE $00
   395 B420 00						.BYTE $00
   395 B421 00						.BYTE $00
   395 B422 00						.BYTE $00
   395 B423 00						.BYTE $00
   395 B424 00						.BYTE $00
   395 B425 00						.BYTE $00
   395 B426 00						.BYTE $00
   395 B427 00						.BYTE $00
   395 B428 00						.BYTE $00
   395 B429 00						.BYTE $00
   395 B42A 00						.BYTE $00
   395 B42B 00						.BYTE $00
   395 B42C 00						.BYTE $00
   395 B42D 00						.BYTE $00
   395 B42E 00						.BYTE $00
   395 B42F 00						.BYTE $00
   395 B430 00						.BYTE $00
   395 B431 00						.BYTE $00
   395 B432 00						.BYTE $00
   395 B433 00						.BYTE $00
   395 B434 00						.BYTE $00
   395 B435 00						.BYTE $00
   395 B436 00						.BYTE $00
   395 B437 00						.BYTE $00
   395 B438 00						.BYTE $00
   395 B439 00						.BYTE $00
   395 B43A 00						.BYTE $00
   395 B43B 00						.BYTE $00
   395 B43C 00						.BYTE $00
   395 B43D 00						.BYTE $00
   395 B43E 00						.BYTE $00
   395 B43F 00						.BYTE $00
   395 B440 00						.BYTE $00
   395 B441 00						.BYTE $00
   395 B442 00						.BYTE $00
   395 B443 00						.BYTE $00
   395 B444 00						.BYTE $00
   395 B445 00						.BYTE $00
   395 B446 00						.BYTE $00
   395 B447 00						.BYTE $00
   395 B448 00						.BYTE $00
   395 B449 00						.BYTE $00
   395 B44A 00						.BYTE $00
   395 B44B 00						.BYTE $00
   395 B44C 00						.BYTE $00
   395 B44D 00						.BYTE $00
   395 B44E 00						.BYTE $00
   395 B44F 00						.BYTE $00
   395 B450 00						.BYTE $00
   395 B451 00						.BYTE $00
   395 B452 00						.BYTE $00
   395 B453 00						.BYTE $00
   395 B454 00						.BYTE $00
   395 B455 00						.BYTE $00
   395 B456 00						.BYTE $00
   395 B457 00						.BYTE $00
   395 B458 00						.BYTE $00
   395 B459 00						.BYTE $00
   395 B45A 00						.BYTE $00
   395 B45B 00						.BYTE $00
   395 B45C 00						.BYTE $00
   395 B45D 00						.BYTE $00
   395 B45E 00						.BYTE $00
   395 B45F 00						.BYTE $00
   395 B460 00						.BYTE $00
   395 B461 00						.BYTE $00
   395 B462 00						.BYTE $00
   395 B463 00						.BYTE $00
   395 B464 00						.BYTE $00
   395 B465 00						.BYTE $00
   395 B466 00						.BYTE $00
   395 B467 00						.BYTE $00
   395 B468 00						.BYTE $00
   395 B469 00						.BYTE $00
   395 B46A 00						.BYTE $00
   395 B46B 00						.BYTE $00
   395 B46C 00						.BYTE $00
   395 B46D 00						.BYTE $00
   395 B46E 00						.BYTE $00
   395 B46F 00						.BYTE $00
   395 B470 00						.BYTE $00
   395 B471 00						.BYTE $00
   395 B472 00						.BYTE $00
   395 B473 00						.BYTE $00
   395 B474 00						.BYTE $00
   395 B475 00						.BYTE $00
   395 B476 00						.BYTE $00
   395 B477 00						.BYTE $00
   395 B478 00						.BYTE $00
   395 B479 00						.BYTE $00
   395 B47A 00						.BYTE $00
   395 B47B 00						.BYTE $00
   395 B47C 00						.BYTE $00
   395 B47D 00						.BYTE $00
   395 B47E 00						.BYTE $00
   395 B47F 00						.BYTE $00
   395 B480 00						.BYTE $00
   395 B481 00						.BYTE $00
   395 B482 00						.BYTE $00
   395 B483 00						.BYTE $00
   395 B484 00						.BYTE $00
   395 B485 00						.BYTE $00
   395 B486 00						.BYTE $00
   395 B487 00						.BYTE $00
   395 B488 00						.BYTE $00
   395 B489 00						.BYTE $00
   395 B48A 00						.BYTE $00
   395 B48B 00						.BYTE $00
   395 B48C 00						.BYTE $00
   395 B48D 00						.BYTE $00
   395 B48E 00						.BYTE $00
   395 B48F 00						.BYTE $00
   395 B490 00						.BYTE $00
   395 B491 00						.BYTE $00
   395 B492 00						.BYTE $00
   395 B493 00						.BYTE $00
   395 B494 00						.BYTE $00
   395 B495 00						.BYTE $00
   395 B496 00						.BYTE $00
   395 B497 00						.BYTE $00
   395 B498 00						.BYTE $00
   395 B499 00						.BYTE $00
   395 B49A 00						.BYTE $00
   395 B49B 00						.BYTE $00
   395 B49C 00						.BYTE $00
   395 B49D 00						.BYTE $00
   395 B49E 00						.BYTE $00
   395 B49F 00						.BYTE $00
   395 B4A0 00						.BYTE $00
   395 B4A1 00						.BYTE $00
   395 B4A2 00						.BYTE $00
   395 B4A3 00						.BYTE $00
   395 B4A4 00						.BYTE $00
   395 B4A5 00						.BYTE $00
   395 B4A6 00						.BYTE $00
   395 B4A7 00						.BYTE $00
   395 B4A8 00						.BYTE $00
   395 B4A9 00						.BYTE $00
   395 B4AA 00						.BYTE $00
   395 B4AB 00						.BYTE $00
   395 B4AC 00						.BYTE $00
   395 B4AD 00						.BYTE $00
   395 B4AE 00						.BYTE $00
   395 B4AF 00						.BYTE $00
   395 B4B0 00						.BYTE $00
   395 B4B1 00						.BYTE $00
   395 B4B2 00						.BYTE $00
   395 B4B3 00						.BYTE $00
   395 B4B4 00						.BYTE $00
   395 B4B5 00						.BYTE $00
   395 B4B6 00						.BYTE $00
   395 B4B7 00						.BYTE $00
   395 B4B8 00						.BYTE $00
   395 B4B9 00						.BYTE $00
   395 B4BA 00						.BYTE $00
   395 B4BB 00						.BYTE $00
   395 B4BC 00						.BYTE $00
   395 B4BD 00						.BYTE $00
   395 B4BE 00						.BYTE $00
   395 B4BF 00						.BYTE $00
   395 B4C0 00						.BYTE $00
   395 B4C1 00						.BYTE $00
   395 B4C2 00						.BYTE $00
   395 B4C3 00						.BYTE $00
   395 B4C4 00						.BYTE $00
   395 B4C5 00						.BYTE $00
   395 B4C6 00						.BYTE $00
   395 B4C7 00						.BYTE $00
   395 B4C8 00						.BYTE $00
   395 B4C9 00						.BYTE $00
   395 B4CA 00						.BYTE $00
   395 B4CB 00						.BYTE $00
   395 B4CC 00						.BYTE $00
   395 B4CD 00						.BYTE $00
   395 B4CE 00						.BYTE $00
   395 B4CF 00						.BYTE $00
   395 B4D0 00						.BYTE $00
   395 B4D1 00						.BYTE $00
   395 B4D2 00						.BYTE $00
   395 B4D3 00						.BYTE $00
   395 B4D4 00						.BYTE $00
   395 B4D5 00						.BYTE $00
   395 B4D6 00						.BYTE $00
   395 B4D7 00						.BYTE $00
   395 B4D8 00						.BYTE $00
   395 B4D9 00						.BYTE $00
   395 B4DA 00						.BYTE $00
   395 B4DB 00						.BYTE $00
   395 B4DC 00						.BYTE $00
   395 B4DD 00						.BYTE $00
   395 B4DE 00						.BYTE $00
   395 B4DF 00						.BYTE $00
   395 B4E0 00						.BYTE $00
   395 B4E1 00						.BYTE $00
   395 B4E2 00						.BYTE $00
   395 B4E3 00						.BYTE $00
   395 B4E4 00						.BYTE $00
   395 B4E5 00						.BYTE $00
   395 B4E6 00						.BYTE $00
   395 B4E7 00						.BYTE $00
   395 B4E8 00						.BYTE $00
   395 B4E9 00						.BYTE $00
   395 B4EA 00						.BYTE $00
   395 B4EB 00						.BYTE $00
   395 B4EC 00						.BYTE $00
   395 B4ED 00						.BYTE $00
   395 B4EE 00						.BYTE $00
   395 B4EF 00						.BYTE $00
   395 B4F0 00						.BYTE $00
   395 B4F1 00						.BYTE $00
   395 B4F2 00						.BYTE $00
   395 B4F3 00						.BYTE $00
   395 B4F4 00						.BYTE $00
   395 B4F5 00						.BYTE $00
   395 B4F6 00						.BYTE $00
   395 B4F7 00						.BYTE $00
   395 B4F8 00						.BYTE $00
   395 B4F9 00						.BYTE $00
   395 B4FA 00						.BYTE $00
   395 B4FB 00						.BYTE $00
   395 B4FC 00						.BYTE $00
   395 B4FD 00						.BYTE $00
   395 B4FE 00						.BYTE $00
   395 B4FF 00						.BYTE $00
   395 B500 00						.BYTE $00
   395 B501 00						.BYTE $00
   395 B502 00						.BYTE $00
   395 B503 00						.BYTE $00
   395 B504 00						.BYTE $00
   395 B505 00						.BYTE $00
   395 B506 00						.BYTE $00
   395 B507 00						.BYTE $00
   395 B508 00						.BYTE $00
   395 B509 00						.BYTE $00
   395 B50A 00						.BYTE $00
   395 B50B 00						.BYTE $00
   395 B50C 00						.BYTE $00
   395 B50D 00						.BYTE $00
   395 B50E 00						.BYTE $00
   395 B50F 00						.BYTE $00
   395 B510 00						.BYTE $00
   395 B511 00						.BYTE $00
   395 B512 00						.BYTE $00
   395 B513 00						.BYTE $00
   395 B514 00						.BYTE $00
   395 B515 00						.BYTE $00
   395 B516 00						.BYTE $00
   395 B517 00						.BYTE $00
   395 B518 00						.BYTE $00
   395 B519 00						.BYTE $00
   395 B51A 00						.BYTE $00
   395 B51B 00						.BYTE $00
   395 B51C 00						.BYTE $00
   395 B51D 00						.BYTE $00
   395 B51E 00						.BYTE $00
   395 B51F 00						.BYTE $00
   395 B520 00						.BYTE $00
   395 B521 00						.BYTE $00
   395 B522 00						.BYTE $00
   395 B523 00						.BYTE $00
   395 B524 00						.BYTE $00
   395 B525 00						.BYTE $00
   395 B526 00						.BYTE $00
   395 B527 00						.BYTE $00
   395 B528 00						.BYTE $00
   395 B529 00						.BYTE $00
   395 B52A 00						.BYTE $00
   395 B52B 00						.BYTE $00
   395 B52C 00						.BYTE $00
   395 B52D 00						.BYTE $00
   395 B52E 00						.BYTE $00
   395 B52F 00						.BYTE $00
   395 B530 00						.BYTE $00
   395 B531 00						.BYTE $00
   395 B532 00						.BYTE $00
   395 B533 00						.BYTE $00
   395 B534 00						.BYTE $00
   395 B535 00						.BYTE $00
   395 B536 00						.BYTE $00
   395 B537 00						.BYTE $00
   395 B538 00						.BYTE $00
   395 B539 00						.BYTE $00
   395 B53A 00						.BYTE $00
   395 B53B 00						.BYTE $00
   395 B53C 00						.BYTE $00
   395 B53D 00						.BYTE $00
   395 B53E 00						.BYTE $00
   395 B53F 00						.BYTE $00
   395 B540 00						.BYTE $00
   395 B541 00						.BYTE $00
   395 B542 00						.BYTE $00
   395 B543 00						.BYTE $00
   395 B544 00						.BYTE $00
   395 B545 00						.BYTE $00
   395 B546 00						.BYTE $00
   395 B547 00						.BYTE $00
   395 B548 00						.BYTE $00
   395 B549 00						.BYTE $00
   395 B54A 00						.BYTE $00
   395 B54B 00						.BYTE $00
   395 B54C 00						.BYTE $00
   395 B54D 00						.BYTE $00
   395 B54E 00						.BYTE $00
   395 B54F 00						.BYTE $00
   395 B550 00						.BYTE $00
   395 B551 00						.BYTE $00
   395 B552 00						.BYTE $00
   395 B553 00						.BYTE $00
   395 B554 00						.BYTE $00
   395 B555 00						.BYTE $00
   395 B556 00						.BYTE $00
   395 B557 00						.BYTE $00
   395 B558 00						.BYTE $00
   395 B559 00						.BYTE $00
   395 B55A 00						.BYTE $00
   395 B55B 00						.BYTE $00
   395 B55C 00						.BYTE $00
   395 B55D 00						.BYTE $00
   395 B55E 00						.BYTE $00
   395 B55F 00						.BYTE $00
   395 B560 00						.BYTE $00
   395 B561 00						.BYTE $00
   395 B562 00						.BYTE $00
   395 B563 00						.BYTE $00
   395 B564 00						.BYTE $00
   395 B565 00						.BYTE $00
   395 B566 00						.BYTE $00
   395 B567 00						.BYTE $00
   395 B568 00						.BYTE $00
   395 B569 00						.BYTE $00
   395 B56A 00						.BYTE $00
   395 B56B 00						.BYTE $00
   395 B56C 00						.BYTE $00
   395 B56D 00						.BYTE $00
   395 B56E 00						.BYTE $00
   395 B56F 00						.BYTE $00
   395 B570 00						.BYTE $00
   395 B571 00						.BYTE $00
   395 B572 00						.BYTE $00
   395 B573 00						.BYTE $00
   395 B574 00						.BYTE $00
   395 B575 00						.BYTE $00
   395 B576 00						.BYTE $00
   395 B577 00						.BYTE $00
   395 B578 00						.BYTE $00
   395 B579 00						.BYTE $00
   395 B57A 00						.BYTE $00
   395 B57B 00						.BYTE $00
   395 B57C 00						.BYTE $00
   395 B57D 00						.BYTE $00
   395 B57E 00						.BYTE $00
   395 B57F 00						.BYTE $00
   395 B580 00						.BYTE $00
   395 B581 00						.BYTE $00
   395 B582 00						.BYTE $00
   395 B583 00						.BYTE $00
   395 B584 00						.BYTE $00
   395 B585 00						.BYTE $00
   395 B586 00						.BYTE $00
   395 B587 00						.BYTE $00
   395 B588 00						.BYTE $00
   395 B589 00						.BYTE $00
   395 B58A 00						.BYTE $00
   395 B58B 00						.BYTE $00
   395 B58C 00						.BYTE $00
   395 B58D 00						.BYTE $00
   395 B58E 00						.BYTE $00
   395 B58F 00						.BYTE $00
   395 B590 00						.BYTE $00
   395 B591 00						.BYTE $00
   395 B592 00						.BYTE $00
   395 B593 00						.BYTE $00
   395 B594 00						.BYTE $00
   395 B595 00						.BYTE $00
   395 B596 00						.BYTE $00
   395 B597 00						.BYTE $00
   395 B598 00						.BYTE $00
   395 B599 00						.BYTE $00
   395 B59A 00						.BYTE $00
   395 B59B 00						.BYTE $00
   395 B59C 00						.BYTE $00
   395 B59D 00						.BYTE $00
   395 B59E 00						.BYTE $00
   395 B59F 00						.BYTE $00
   395 B5A0 00						.BYTE $00
   395 B5A1 00						.BYTE $00
   395 B5A2 00						.BYTE $00
   395 B5A3 00						.BYTE $00
   395 B5A4 00						.BYTE $00
   395 B5A5 00						.BYTE $00
   395 B5A6 00						.BYTE $00
   395 B5A7 00						.BYTE $00
   395 B5A8 00						.BYTE $00
   395 B5A9 00						.BYTE $00
   395 B5AA 00						.BYTE $00
   395 B5AB 00						.BYTE $00
   395 B5AC 00						.BYTE $00
   395 B5AD 00						.BYTE $00
   395 B5AE 00						.BYTE $00
   395 B5AF 00						.BYTE $00
   395 B5B0 00						.BYTE $00
   395 B5B1 00						.BYTE $00
   395 B5B2 00						.BYTE $00
   395 B5B3 00						.BYTE $00
   395 B5B4 00						.BYTE $00
   395 B5B5 00						.BYTE $00
   395 B5B6 00						.BYTE $00
   395 B5B7 00						.BYTE $00
   395 B5B8 00						.BYTE $00
   395 B5B9 00						.BYTE $00
   395 B5BA 00						.BYTE $00
   395 B5BB 00						.BYTE $00
   395 B5BC 00						.BYTE $00
   395 B5BD 00						.BYTE $00
   395 B5BE 00						.BYTE $00
   395 B5BF 00						.BYTE $00
   395 B5C0 00						.BYTE $00
   395 B5C1 00						.BYTE $00
   395 B5C2 00						.BYTE $00
   395 B5C3 00						.BYTE $00
   395 B5C4 00						.BYTE $00
   395 B5C5 00						.BYTE $00
   395 B5C6 00						.BYTE $00
   395 B5C7 00						.BYTE $00
   395 B5C8 00						.BYTE $00
   395 B5C9 00						.BYTE $00
   395 B5CA 00						.BYTE $00
   395 B5CB 00						.BYTE $00
   395 B5CC 00						.BYTE $00
   395 B5CD 00						.BYTE $00
   395 B5CE 00						.BYTE $00
   395 B5CF 00						.BYTE $00
   395 B5D0 00						.BYTE $00
   395 B5D1 00						.BYTE $00
   395 B5D2 00						.BYTE $00
   395 B5D3 00						.BYTE $00
   395 B5D4 00						.BYTE $00
   395 B5D5 00						.BYTE $00
   395 B5D6 00						.BYTE $00
   395 B5D7 00						.BYTE $00
   395 B5D8 00						.BYTE $00
   395 B5D9 00						.BYTE $00
   395 B5DA 00						.BYTE $00
   395 B5DB 00						.BYTE $00
   395 B5DC 00						.BYTE $00
   395 B5DD 00						.BYTE $00
   395 B5DE 00						.BYTE $00
   395 B5DF 00						.BYTE $00
   395 B5E0 00						.BYTE $00
   395 B5E1 00						.BYTE $00
   395 B5E2 00						.BYTE $00
   395 B5E3 00						.BYTE $00
   395 B5E4 00						.BYTE $00
   395 B5E5 00						.BYTE $00
   395 B5E6 00						.BYTE $00
   395 B5E7 00						.BYTE $00
   395 B5E8 00						.BYTE $00
   395 B5E9 00						.BYTE $00
   395 B5EA 00						.BYTE $00
   395 B5EB 00						.BYTE $00
   395 B5EC 00						.BYTE $00
   395 B5ED 00						.BYTE $00
   395 B5EE 00						.BYTE $00
   395 B5EF 00						.BYTE $00
   395 B5F0 00						.BYTE $00
   395 B5F1 00						.BYTE $00
   395 B5F2 00						.BYTE $00
   395 B5F3 00						.BYTE $00
   395 B5F4 00						.BYTE $00
   395 B5F5 00						.BYTE $00
   395 B5F6 00						.BYTE $00
   395 B5F7 00						.BYTE $00
   395 B5F8 00						.BYTE $00
   395 B5F9 00						.BYTE $00
   395 B5FA 00						.BYTE $00
   395 B5FB 00						.BYTE $00
   395 B5FC 00						.BYTE $00
   395 B5FD 00						.BYTE $00
   395 B5FE 00						.BYTE $00
   395 B5FF 00						.BYTE $00
   395 B600 00						.BYTE $00
   395 B601 00						.BYTE $00
   395 B602 00						.BYTE $00
   395 B603 00						.BYTE $00
   395 B604 00						.BYTE $00
   395 B605 00						.BYTE $00
   395 B606 00						.BYTE $00
   395 B607 00						.BYTE $00
   395 B608 00						.BYTE $00
   395 B609 00						.BYTE $00
   395 B60A 00						.BYTE $00
   395 B60B 00						.BYTE $00
   395 B60C 00						.BYTE $00
   395 B60D 00						.BYTE $00
   395 B60E 00						.BYTE $00
   395 B60F 00						.BYTE $00
   395 B610 00						.BYTE $00
   395 B611 00						.BYTE $00
   395 B612 00						.BYTE $00
   395 B613 00						.BYTE $00
   395 B614 00						.BYTE $00
   395 B615 00						.BYTE $00
   395 B616 00						.BYTE $00
   395 B617 00						.BYTE $00
   395 B618 00						.BYTE $00
   395 B619 00						.BYTE $00
   395 B61A 00						.BYTE $00
   395 B61B 00						.BYTE $00
   395 B61C 00						.BYTE $00
   395 B61D 00						.BYTE $00
   395 B61E 00						.BYTE $00
   395 B61F 00						.BYTE $00
   395 B620 00						.BYTE $00
   395 B621 00						.BYTE $00
   395 B622 00						.BYTE $00
   395 B623 00						.BYTE $00
   395 B624 00						.BYTE $00
   395 B625 00						.BYTE $00
   395 B626 00						.BYTE $00
   395 B627 00						.BYTE $00
   395 B628 00						.BYTE $00
   395 B629 00						.BYTE $00
   395 B62A 00						.BYTE $00
   395 B62B 00						.BYTE $00
   395 B62C 00						.BYTE $00
   395 B62D 00						.BYTE $00
   395 B62E 00						.BYTE $00
   395 B62F 00						.BYTE $00
   395 B630 00						.BYTE $00
   395 B631 00						.BYTE $00
   395 B632 00						.BYTE $00
   395 B633 00						.BYTE $00
   395 B634 00						.BYTE $00
   395 B635 00						.BYTE $00
   395 B636 00						.BYTE $00
   395 B637 00						.BYTE $00
   395 B638 00						.BYTE $00
   395 B639 00						.BYTE $00
   395 B63A 00						.BYTE $00
   395 B63B 00						.BYTE $00
   395 B63C 00						.BYTE $00
   395 B63D 00						.BYTE $00
   395 B63E 00						.BYTE $00
   395 B63F 00						.BYTE $00
   395 B640 00						.BYTE $00
   395 B641 00						.BYTE $00
   395 B642 00						.BYTE $00
   395 B643 00						.BYTE $00
   395 B644 00						.BYTE $00
   395 B645 00						.BYTE $00
   395 B646 00						.BYTE $00
   395 B647 00						.BYTE $00
   395 B648 00						.BYTE $00
   395 B649 00						.BYTE $00
   395 B64A 00						.BYTE $00
   395 B64B 00						.BYTE $00
   395 B64C 00						.BYTE $00
   395 B64D 00						.BYTE $00
   395 B64E 00						.BYTE $00
   395 B64F 00						.BYTE $00
   395 B650 00						.BYTE $00
   395 B651 00						.BYTE $00
   395 B652 00						.BYTE $00
   395 B653 00						.BYTE $00
   395 B654 00						.BYTE $00
   395 B655 00						.BYTE $00
   395 B656 00						.BYTE $00
   395 B657 00						.BYTE $00
   395 B658 00						.BYTE $00
   395 B659 00						.BYTE $00
   395 B65A 00						.BYTE $00
   395 B65B 00						.BYTE $00
   395 B65C 00						.BYTE $00
   395 B65D 00						.BYTE $00
   395 B65E 00						.BYTE $00
   395 B65F 00						.BYTE $00
   395 B660 00						.BYTE $00
   395 B661 00						.BYTE $00
   395 B662 00						.BYTE $00
   395 B663 00						.BYTE $00
   395 B664 00						.BYTE $00
   395 B665 00						.BYTE $00
   395 B666 00						.BYTE $00
   395 B667 00						.BYTE $00
   395 B668 00						.BYTE $00
   395 B669 00						.BYTE $00
   395 B66A 00						.BYTE $00
   395 B66B 00						.BYTE $00
   395 B66C 00						.BYTE $00
   395 B66D 00						.BYTE $00
   395 B66E 00						.BYTE $00
   395 B66F 00						.BYTE $00
   395 B670 00						.BYTE $00
   395 B671 00						.BYTE $00
   395 B672 00						.BYTE $00
   395 B673 00						.BYTE $00
   395 B674 00						.BYTE $00
   395 B675 00						.BYTE $00
   395 B676 00						.BYTE $00
   395 B677 00						.BYTE $00
   395 B678 00						.BYTE $00
   395 B679 00						.BYTE $00
   395 B67A 00						.BYTE $00
   395 B67B 00						.BYTE $00
   395 B67C 00						.BYTE $00
   395 B67D 00						.BYTE $00
   395 B67E 00						.BYTE $00
   395 B67F 00						.BYTE $00
   395 B680 00						.BYTE $00
   395 B681 00						.BYTE $00
   395 B682 00						.BYTE $00
   395 B683 00						.BYTE $00
   395 B684 00						.BYTE $00
   395 B685 00						.BYTE $00
   395 B686 00						.BYTE $00
   395 B687 00						.BYTE $00
   395 B688 00						.BYTE $00
   395 B689 00						.BYTE $00
   395 B68A 00						.BYTE $00
   395 B68B 00						.BYTE $00
   395 B68C 00						.BYTE $00
   395 B68D 00						.BYTE $00
   395 B68E 00						.BYTE $00
   395 B68F 00						.BYTE $00
   395 B690 00						.BYTE $00
   395 B691 00						.BYTE $00
   395 B692 00						.BYTE $00
   395 B693 00						.BYTE $00
   395 B694 00						.BYTE $00
   395 B695 00						.BYTE $00
   395 B696 00						.BYTE $00
   395 B697 00						.BYTE $00
   395 B698 00						.BYTE $00
   395 B699 00						.BYTE $00
   395 B69A 00						.BYTE $00
   395 B69B 00						.BYTE $00
   395 B69C 00						.BYTE $00
   395 B69D 00						.BYTE $00
   395 B69E 00						.BYTE $00
   395 B69F 00						.BYTE $00
   395 B6A0 00						.BYTE $00
   395 B6A1 00						.BYTE $00
   395 B6A2 00						.BYTE $00
   395 B6A3 00						.BYTE $00
   395 B6A4 00						.BYTE $00
   395 B6A5 00						.BYTE $00
   395 B6A6 00						.BYTE $00
   395 B6A7 00						.BYTE $00
   395 B6A8 00						.BYTE $00
   395 B6A9 00						.BYTE $00
   395 B6AA 00						.BYTE $00
   395 B6AB 00						.BYTE $00
   395 B6AC 00						.BYTE $00
   395 B6AD 00						.BYTE $00
   395 B6AE 00						.BYTE $00
   395 B6AF 00						.BYTE $00
   395 B6B0 00						.BYTE $00
   395 B6B1 00						.BYTE $00
   395 B6B2 00						.BYTE $00
   395 B6B3 00						.BYTE $00
   395 B6B4 00						.BYTE $00
   395 B6B5 00						.BYTE $00
   395 B6B6 00						.BYTE $00
   395 B6B7 00						.BYTE $00
   395 B6B8 00						.BYTE $00
   395 B6B9 00						.BYTE $00
   395 B6BA 00						.BYTE $00
   395 B6BB 00						.BYTE $00
   395 B6BC 00						.BYTE $00
   395 B6BD 00						.BYTE $00
   395 B6BE 00						.BYTE $00
   395 B6BF 00						.BYTE $00
   395 B6C0 00						.BYTE $00
   395 B6C1 00						.BYTE $00
   395 B6C2 00						.BYTE $00
   395 B6C3 00						.BYTE $00
   395 B6C4 00						.BYTE $00
   395 B6C5 00						.BYTE $00
   395 B6C6 00						.BYTE $00
   395 B6C7 00						.BYTE $00
   395 B6C8 00						.BYTE $00
   395 B6C9 00						.BYTE $00
   395 B6CA 00						.BYTE $00
   395 B6CB 00						.BYTE $00
   395 B6CC 00						.BYTE $00
   395 B6CD 00						.BYTE $00
   395 B6CE 00						.BYTE $00
   395 B6CF 00						.BYTE $00
   395 B6D0 00						.BYTE $00
   395 B6D1 00						.BYTE $00
   395 B6D2 00						.BYTE $00
   395 B6D3 00						.BYTE $00
   395 B6D4 00						.BYTE $00
   395 B6D5 00						.BYTE $00
   395 B6D6 00						.BYTE $00
   395 B6D7 00						.BYTE $00
   395 B6D8 00						.BYTE $00
   395 B6D9 00						.BYTE $00
   395 B6DA 00						.BYTE $00
   395 B6DB 00						.BYTE $00
   395 B6DC 00						.BYTE $00
   395 B6DD 00						.BYTE $00
   395 B6DE 00						.BYTE $00
   395 B6DF 00						.BYTE $00
   395 B6E0 00						.BYTE $00
   395 B6E1 00						.BYTE $00
   395 B6E2 00						.BYTE $00
   395 B6E3 00						.BYTE $00
   395 B6E4 00						.BYTE $00
   395 B6E5 00						.BYTE $00
   395 B6E6 00						.BYTE $00
   395 B6E7 00						.BYTE $00
   395 B6E8 00						.BYTE $00
   395 B6E9 00						.BYTE $00
   395 B6EA 00						.BYTE $00
   395 B6EB 00						.BYTE $00
   395 B6EC 00						.BYTE $00
   395 B6ED 00						.BYTE $00
   395 B6EE 00						.BYTE $00
   395 B6EF 00						.BYTE $00
   395 B6F0 00						.BYTE $00
   395 B6F1 00						.BYTE $00
   395 B6F2 00						.BYTE $00
   395 B6F3 00						.BYTE $00
   395 B6F4 00						.BYTE $00
   395 B6F5 00						.BYTE $00
   395 B6F6 00						.BYTE $00
   395 B6F7 00						.BYTE $00
   395 B6F8 00						.BYTE $00
   395 B6F9 00						.BYTE $00
   395 B6FA 00						.BYTE $00
   395 B6FB 00						.BYTE $00
   395 B6FC 00						.BYTE $00
   395 B6FD 00						.BYTE $00
   395 B6FE 00						.BYTE $00
   395 B6FF 00						.BYTE $00
   395 B700 00						.BYTE $00
   395 B701 00						.BYTE $00
   395 B702 00						.BYTE $00
   395 B703 00						.BYTE $00
   395 B704 00						.BYTE $00
   395 B705 00						.BYTE $00
   395 B706 00						.BYTE $00
   395 B707 00						.BYTE $00
   395 B708 00						.BYTE $00
   395 B709 00						.BYTE $00
   395 B70A 00						.BYTE $00
   395 B70B 00						.BYTE $00
   395 B70C 00						.BYTE $00
   395 B70D 00						.BYTE $00
   395 B70E 00						.BYTE $00
   395 B70F 00						.BYTE $00
   395 B710 00						.BYTE $00
   395 B711 00						.BYTE $00
   395 B712 00						.BYTE $00
   395 B713 00						.BYTE $00
   395 B714 00						.BYTE $00
   395 B715 00						.BYTE $00
   395 B716 00						.BYTE $00
   395 B717 00						.BYTE $00
   395 B718 00						.BYTE $00
   395 B719 00						.BYTE $00
   395 B71A 00						.BYTE $00
   395 B71B 00						.BYTE $00
   395 B71C 00						.BYTE $00
   395 B71D 00						.BYTE $00
   395 B71E 00						.BYTE $00
   395 B71F 00						.BYTE $00
   395 B720 00						.BYTE $00
   395 B721 00						.BYTE $00
   395 B722 00						.BYTE $00
   395 B723 00						.BYTE $00
   395 B724 00						.BYTE $00
   395 B725 00						.BYTE $00
   395 B726 00						.BYTE $00
   395 B727 00						.BYTE $00
   395 B728 00						.BYTE $00
   395 B729 00						.BYTE $00
   395 B72A 00						.BYTE $00
   395 B72B 00						.BYTE $00
   395 B72C 00						.BYTE $00
   395 B72D 00						.BYTE $00
   395 B72E 00						.BYTE $00
   395 B72F 00						.BYTE $00
   395 B730 00						.BYTE $00
   395 B731 00						.BYTE $00
   395 B732 00						.BYTE $00
   395 B733 00						.BYTE $00
   395 B734 00						.BYTE $00
   395 B735 00						.BYTE $00
   395 B736 00						.BYTE $00
   395 B737 00						.BYTE $00
   395 B738 00						.BYTE $00
   395 B739 00						.BYTE $00
   395 B73A 00						.BYTE $00
   395 B73B 00						.BYTE $00
   395 B73C 00						.BYTE $00
   395 B73D 00						.BYTE $00
   395 B73E 00						.BYTE $00
   395 B73F 00						.BYTE $00
   395 B740 00						.BYTE $00
   395 B741 00						.BYTE $00
   395 B742 00						.BYTE $00
   395 B743 00						.BYTE $00
   395 B744 00						.BYTE $00
   395 B745 00						.BYTE $00
   395 B746 00						.BYTE $00
   395 B747 00						.BYTE $00
   395 B748 00						.BYTE $00
   395 B749 00						.BYTE $00
   395 B74A 00						.BYTE $00
   395 B74B 00						.BYTE $00
   395 B74C 00						.BYTE $00
   395 B74D 00						.BYTE $00
   395 B74E 00						.BYTE $00
   395 B74F 00						.BYTE $00
   395 B750 00						.BYTE $00
   395 B751 00						.BYTE $00
   395 B752 00						.BYTE $00
   395 B753 00						.BYTE $00
   395 B754 00						.BYTE $00
   395 B755 00						.BYTE $00
   395 B756 00						.BYTE $00
   395 B757 00						.BYTE $00
   395 B758 00						.BYTE $00
   395 B759 00						.BYTE $00
   395 B75A 00						.BYTE $00
   395 B75B 00						.BYTE $00
   395 B75C 00						.BYTE $00
   395 B75D 00						.BYTE $00
   395 B75E 00						.BYTE $00
   395 B75F 00						.BYTE $00
   395 B760 00						.BYTE $00
   395 B761 00						.BYTE $00
   395 B762 00						.BYTE $00
   395 B763 00						.BYTE $00
   395 B764 00						.BYTE $00
   395 B765 00						.BYTE $00
   395 B766 00						.BYTE $00
   395 B767 00						.BYTE $00
   395 B768 00						.BYTE $00
   395 B769 00						.BYTE $00
   395 B76A 00						.BYTE $00
   395 B76B 00						.BYTE $00
   395 B76C 00						.BYTE $00
   395 B76D 00						.BYTE $00
   395 B76E 00						.BYTE $00
   395 B76F 00						.BYTE $00
   395 B770 00						.BYTE $00
   395 B771 00						.BYTE $00
   395 B772 00						.BYTE $00
   395 B773 00						.BYTE $00
   395 B774 00						.BYTE $00
   395 B775 00						.BYTE $00
   395 B776 00						.BYTE $00
   395 B777 00						.BYTE $00
   395 B778 00						.BYTE $00
   395 B779 00						.BYTE $00
   395 B77A 00						.BYTE $00
   395 B77B 00						.BYTE $00
   395 B77C 00						.BYTE $00
   395 B77D 00						.BYTE $00
   395 B77E 00						.BYTE $00
   395 B77F 00						.BYTE $00
   395 B780 00						.BYTE $00
   395 B781 00						.BYTE $00
   395 B782 00						.BYTE $00
   395 B783 00						.BYTE $00
   395 B784 00						.BYTE $00
   395 B785 00						.BYTE $00
   395 B786 00						.BYTE $00
   395 B787 00						.BYTE $00
   395 B788 00						.BYTE $00
   395 B789 00						.BYTE $00
   395 B78A 00						.BYTE $00
   395 B78B 00						.BYTE $00
   395 B78C 00						.BYTE $00
   395 B78D 00						.BYTE $00
   395 B78E 00						.BYTE $00
   395 B78F 00						.BYTE $00
   395 B790 00						.BYTE $00
   395 B791 00						.BYTE $00
   395 B792 00						.BYTE $00
   395 B793 00						.BYTE $00
   395 B794 00						.BYTE $00
   395 B795 00						.BYTE $00
   395 B796 00						.BYTE $00
   395 B797 00						.BYTE $00
   395 B798 00						.BYTE $00
   395 B799 00						.BYTE $00
   395 B79A 00						.BYTE $00
   395 B79B 00						.BYTE $00
   395 B79C 00						.BYTE $00
   395 B79D 00						.BYTE $00
   395 B79E 00						.BYTE $00
   395 B79F 00						.BYTE $00
   395 B7A0 00						.BYTE $00
   395 B7A1 00						.BYTE $00
   395 B7A2 00						.BYTE $00
   395 B7A3 00						.BYTE $00
   395 B7A4 00						.BYTE $00
   395 B7A5 00						.BYTE $00
   395 B7A6 00						.BYTE $00
   395 B7A7 00						.BYTE $00
   395 B7A8 00						.BYTE $00
   395 B7A9 00						.BYTE $00
   395 B7AA 00						.BYTE $00
   395 B7AB 00						.BYTE $00
   395 B7AC 00						.BYTE $00
   395 B7AD 00						.BYTE $00
   395 B7AE 00						.BYTE $00
   395 B7AF 00						.BYTE $00
   395 B7B0 00						.BYTE $00
   395 B7B1 00						.BYTE $00
   395 B7B2 00						.BYTE $00
   395 B7B3 00						.BYTE $00
   395 B7B4 00						.BYTE $00
   395 B7B5 00						.BYTE $00
   395 B7B6 00						.BYTE $00
   395 B7B7 00						.BYTE $00
   395 B7B8 00						.BYTE $00
   395 B7B9 00						.BYTE $00
   395 B7BA 00						.BYTE $00
   395 B7BB 00						.BYTE $00
   395 B7BC 00						.BYTE $00
   395 B7BD 00						.BYTE $00
   395 B7BE 00						.BYTE $00
   395 B7BF 00						.BYTE $00
   395 B7C0 00						.BYTE $00
   395 B7C1 00						.BYTE $00
   395 B7C2 00						.BYTE $00
   395 B7C3 00						.BYTE $00
   395 B7C4 00						.BYTE $00
   395 B7C5 00						.BYTE $00
   395 B7C6 00						.BYTE $00
   395 B7C7 00						.BYTE $00
   395 B7C8 00						.BYTE $00
   395 B7C9 00						.BYTE $00
   395 B7CA 00						.BYTE $00
   395 B7CB 00						.BYTE $00
   395 B7CC 00						.BYTE $00
   395 B7CD 00						.BYTE $00
   395 B7CE 00						.BYTE $00
   395 B7CF 00						.BYTE $00
   395 B7D0 00						.BYTE $00
   395 B7D1 00						.BYTE $00
   395 B7D2 00						.BYTE $00
   395 B7D3 00						.BYTE $00
   395 B7D4 00						.BYTE $00
   395 B7D5 00						.BYTE $00
   395 B7D6 00						.BYTE $00
   395 B7D7 00						.BYTE $00
   395 B7D8 00						.BYTE $00
   395 B7D9 00						.BYTE $00
   395 B7DA 00						.BYTE $00
   395 B7DB 00						.BYTE $00
   395 B7DC 00						.BYTE $00
   395 B7DD 00						.BYTE $00
   395 B7DE 00						.BYTE $00
   395 B7DF 00						.BYTE $00
   395 B7E0 00						.BYTE $00
   395 B7E1 00						.BYTE $00
   395 B7E2 00						.BYTE $00
   395 B7E3 00						.BYTE $00
   395 B7E4 00						.BYTE $00
   395 B7E5 00						.BYTE $00
   395 B7E6 00						.BYTE $00
   395 B7E7 00						.BYTE $00
   395 B7E8 00						.BYTE $00
   395 B7E9 00						.BYTE $00
   395 B7EA 00						.BYTE $00
   395 B7EB 00						.BYTE $00
   395 B7EC 00						.BYTE $00
   395 B7ED 00						.BYTE $00
   395 B7EE 00						.BYTE $00
   395 B7EF 00						.BYTE $00
   395 B7F0 00						.BYTE $00
   395 B7F1 00						.BYTE $00
   395 B7F2 00						.BYTE $00
   395 B7F3 00						.BYTE $00
   395 B7F4 00						.BYTE $00
   395 B7F5 00						.BYTE $00
   395 B7F6 00						.BYTE $00
   395 B7F7 00						.BYTE $00
   395 B7F8 00						.BYTE $00
   395 B7F9 00						.BYTE $00
   395 B7FA 00						.BYTE $00
   395 B7FB 00						.BYTE $00
   395 B7FC 00						.BYTE $00
   395 B7FD 00						.BYTE $00
   395 B7FE 00						.BYTE $00
   395 B7FF 00						.BYTE $00
   395 B800 00						.BYTE $00
   395 B801 00						.BYTE $00
   395 B802 00						.BYTE $00
   395 B803 00						.BYTE $00
   395 B804 00						.BYTE $00
   395 B805 00						.BYTE $00
   395 B806 00						.BYTE $00
   395 B807 00						.BYTE $00
   395 B808 00						.BYTE $00
   395 B809 00						.BYTE $00
   395 B80A 00						.BYTE $00
   395 B80B 00						.BYTE $00
   395 B80C 00						.BYTE $00
   395 B80D 00						.BYTE $00
   395 B80E 00						.BYTE $00
   395 B80F 00						.BYTE $00
   395 B810 00						.BYTE $00
   395 B811 00						.BYTE $00
   395 B812 00						.BYTE $00
   395 B813 00						.BYTE $00
   395 B814 00						.BYTE $00
   395 B815 00						.BYTE $00
   395 B816 00						.BYTE $00
   395 B817 00						.BYTE $00
   395 B818 00						.BYTE $00
   395 B819 00						.BYTE $00
   395 B81A 00						.BYTE $00
   395 B81B 00						.BYTE $00
   395 B81C 00						.BYTE $00
   395 B81D 00						.BYTE $00
   395 B81E 00						.BYTE $00
   395 B81F 00						.BYTE $00
   395 B820 00						.BYTE $00
   395 B821 00						.BYTE $00
   395 B822 00						.BYTE $00
   395 B823 00						.BYTE $00
   395 B824 00						.BYTE $00
   395 B825 00						.BYTE $00
   395 B826 00						.BYTE $00
   395 B827 00						.BYTE $00
   395 B828 00						.BYTE $00
   395 B829 00						.BYTE $00
   395 B82A 00						.BYTE $00
   395 B82B 00						.BYTE $00
   395 B82C 00						.BYTE $00
   395 B82D 00						.BYTE $00
   395 B82E 00						.BYTE $00
   395 B82F 00						.BYTE $00
   395 B830 00						.BYTE $00
   395 B831 00						.BYTE $00
   395 B832 00						.BYTE $00
   395 B833 00						.BYTE $00
   395 B834 00						.BYTE $00
   395 B835 00						.BYTE $00
   395 B836 00						.BYTE $00
   395 B837 00						.BYTE $00
   395 B838 00						.BYTE $00
   395 B839 00						.BYTE $00
   395 B83A 00						.BYTE $00
   395 B83B 00						.BYTE $00
   395 B83C 00						.BYTE $00
   395 B83D 00						.BYTE $00
   395 B83E 00						.BYTE $00
   395 B83F 00						.BYTE $00
   395 B840 00						.BYTE $00
   395 B841 00						.BYTE $00
   395 B842 00						.BYTE $00
   395 B843 00						.BYTE $00
   395 B844 00						.BYTE $00
   395 B845 00						.BYTE $00
   395 B846 00						.BYTE $00
   395 B847 00						.BYTE $00
   395 B848 00						.BYTE $00
   395 B849 00						.BYTE $00
   395 B84A 00						.BYTE $00
   395 B84B 00						.BYTE $00
   395 B84C 00						.BYTE $00
   395 B84D 00						.BYTE $00
   395 B84E 00						.BYTE $00
   395 B84F 00						.BYTE $00
   395 B850 00						.BYTE $00
   395 B851 00						.BYTE $00
   395 B852 00						.BYTE $00
   395 B853 00						.BYTE $00
   395 B854 00						.BYTE $00
   395 B855 00						.BYTE $00
   395 B856 00						.BYTE $00
   395 B857 00						.BYTE $00
   395 B858 00						.BYTE $00
   395 B859 00						.BYTE $00
   395 B85A 00						.BYTE $00
   395 B85B 00						.BYTE $00
   395 B85C 00						.BYTE $00
   395 B85D 00						.BYTE $00
   395 B85E 00						.BYTE $00
   395 B85F 00						.BYTE $00
   395 B860 00						.BYTE $00
   395 B861 00						.BYTE $00
   395 B862 00						.BYTE $00
   395 B863 00						.BYTE $00
   395 B864 00						.BYTE $00
   395 B865 00						.BYTE $00
   395 B866 00						.BYTE $00
   395 B867 00						.BYTE $00
   395 B868 00						.BYTE $00
   395 B869 00						.BYTE $00
   395 B86A 00						.BYTE $00
   395 B86B 00						.BYTE $00
   395 B86C 00						.BYTE $00
   395 B86D 00						.BYTE $00
   395 B86E 00						.BYTE $00
   395 B86F 00						.BYTE $00
   395 B870 00						.BYTE $00
   395 B871 00						.BYTE $00
   395 B872 00						.BYTE $00
   395 B873 00						.BYTE $00
   395 B874 00						.BYTE $00
   395 B875 00						.BYTE $00
   395 B876 00						.BYTE $00
   395 B877 00						.BYTE $00
   395 B878 00						.BYTE $00
   395 B879 00						.BYTE $00
   395 B87A 00						.BYTE $00
   395 B87B 00						.BYTE $00
   395 B87C 00						.BYTE $00
   395 B87D 00						.BYTE $00
   395 B87E 00						.BYTE $00
   395 B87F 00						.BYTE $00
   395 B880 00						.BYTE $00
   395 B881 00						.BYTE $00
   395 B882 00						.BYTE $00
   395 B883 00						.BYTE $00
   395 B884 00						.BYTE $00
   395 B885 00						.BYTE $00
   395 B886 00						.BYTE $00
   395 B887 00						.BYTE $00
   395 B888 00						.BYTE $00
   395 B889 00						.BYTE $00
   395 B88A 00						.BYTE $00
   395 B88B 00						.BYTE $00
   395 B88C 00						.BYTE $00
   395 B88D 00						.BYTE $00
   395 B88E 00						.BYTE $00
   395 B88F 00						.BYTE $00
   395 B890 00						.BYTE $00
   395 B891 00						.BYTE $00
   395 B892 00						.BYTE $00
   395 B893 00						.BYTE $00
   395 B894 00						.BYTE $00
   395 B895 00						.BYTE $00
   395 B896 00						.BYTE $00
   395 B897 00						.BYTE $00
   395 B898 00						.BYTE $00
   395 B899 00						.BYTE $00
   395 B89A 00						.BYTE $00
   395 B89B 00						.BYTE $00
   395 B89C 00						.BYTE $00
   395 B89D 00						.BYTE $00
   395 B89E 00						.BYTE $00
   395 B89F 00						.BYTE $00
   395 B8A0 00						.BYTE $00
   395 B8A1 00						.BYTE $00
   395 B8A2 00						.BYTE $00
   395 B8A3 00						.BYTE $00
   395 B8A4 00						.BYTE $00
   395 B8A5 00						.BYTE $00
   395 B8A6 00						.BYTE $00
   395 B8A7 00						.BYTE $00
   395 B8A8 00						.BYTE $00
   395 B8A9 00						.BYTE $00
   395 B8AA 00						.BYTE $00
   395 B8AB 00						.BYTE $00
   395 B8AC 00						.BYTE $00
   395 B8AD 00						.BYTE $00
   395 B8AE 00						.BYTE $00
   395 B8AF 00						.BYTE $00
   395 B8B0 00						.BYTE $00
   395 B8B1 00						.BYTE $00
   395 B8B2 00						.BYTE $00
   395 B8B3 00						.BYTE $00
   395 B8B4 00						.BYTE $00
   395 B8B5 00						.BYTE $00
   395 B8B6 00						.BYTE $00
   395 B8B7 00						.BYTE $00
   395 B8B8 00						.BYTE $00
   395 B8B9 00						.BYTE $00
   395 B8BA 00						.BYTE $00
   395 B8BB 00						.BYTE $00
   395 B8BC 00						.BYTE $00
   395 B8BD 00						.BYTE $00
   395 B8BE 00						.BYTE $00
   395 B8BF 00						.BYTE $00
   395 B8C0 00						.BYTE $00
   395 B8C1 00						.BYTE $00
   395 B8C2 00						.BYTE $00
   395 B8C3 00						.BYTE $00
   395 B8C4 00						.BYTE $00
   395 B8C5 00						.BYTE $00
   395 B8C6 00						.BYTE $00
   395 B8C7 00						.BYTE $00
   395 B8C8 00						.BYTE $00
   395 B8C9 00						.BYTE $00
   395 B8CA 00						.BYTE $00
   395 B8CB 00						.BYTE $00
   395 B8CC 00						.BYTE $00
   395 B8CD 00						.BYTE $00
   395 B8CE 00						.BYTE $00
   395 B8CF 00						.BYTE $00
   395 B8D0 00						.BYTE $00
   395 B8D1 00						.BYTE $00
   395 B8D2 00						.BYTE $00
   395 B8D3 00						.BYTE $00
   395 B8D4 00						.BYTE $00
   395 B8D5 00						.BYTE $00
   395 B8D6 00						.BYTE $00
   395 B8D7 00						.BYTE $00
   395 B8D8 00						.BYTE $00
   395 B8D9 00						.BYTE $00
   395 B8DA 00						.BYTE $00
   395 B8DB 00						.BYTE $00
   395 B8DC 00						.BYTE $00
   395 B8DD 00						.BYTE $00
   395 B8DE 00						.BYTE $00
   395 B8DF 00						.BYTE $00
   395 B8E0 00						.BYTE $00
   395 B8E1 00						.BYTE $00
   395 B8E2 00						.BYTE $00
   395 B8E3 00						.BYTE $00
   395 B8E4 00						.BYTE $00
   395 B8E5 00						.BYTE $00
   395 B8E6 00						.BYTE $00
   395 B8E7 00						.BYTE $00
   395 B8E8 00						.BYTE $00
   395 B8E9 00						.BYTE $00
   395 B8EA 00						.BYTE $00
   395 B8EB 00						.BYTE $00
   395 B8EC 00						.BYTE $00
   395 B8ED 00						.BYTE $00
   395 B8EE 00						.BYTE $00
   395 B8EF 00						.BYTE $00
   395 B8F0 00						.BYTE $00
   395 B8F1 00						.BYTE $00
   395 B8F2 00						.BYTE $00
   395 B8F3 00						.BYTE $00
   395 B8F4 00						.BYTE $00
   395 B8F5 00						.BYTE $00
   395 B8F6 00						.BYTE $00
   395 B8F7 00						.BYTE $00
   395 B8F8 00						.BYTE $00
   395 B8F9 00						.BYTE $00
   395 B8FA 00						.BYTE $00
   395 B8FB 00						.BYTE $00
   395 B8FC 00						.BYTE $00
   395 B8FD 00						.BYTE $00
   395 B8FE 00						.BYTE $00
   395 B8FF 00						.BYTE $00
   395 B900 00						.BYTE $00
   395 B901 00						.BYTE $00
   395 B902 00						.BYTE $00
   395 B903 00						.BYTE $00
   395 B904 00						.BYTE $00
   395 B905 00						.BYTE $00
   395 B906 00						.BYTE $00
   395 B907 00						.BYTE $00
   395 B908 00						.BYTE $00
   395 B909 00						.BYTE $00
   395 B90A 00						.BYTE $00
   395 B90B 00						.BYTE $00
   395 B90C 00						.BYTE $00
   395 B90D 00						.BYTE $00
   395 B90E 00						.BYTE $00
   395 B90F 00						.BYTE $00
   395 B910 00						.BYTE $00
   395 B911 00						.BYTE $00
   395 B912 00						.BYTE $00
   395 B913 00						.BYTE $00
   395 B914 00						.BYTE $00
   395 B915 00						.BYTE $00
   395 B916 00						.BYTE $00
   395 B917 00						.BYTE $00
   395 B918 00						.BYTE $00
   395 B919 00						.BYTE $00
   395 B91A 00						.BYTE $00
   395 B91B 00						.BYTE $00
   395 B91C 00						.BYTE $00
   395 B91D 00						.BYTE $00
   395 B91E 00						.BYTE $00
   395 B91F 00						.BYTE $00
   395 B920 00						.BYTE $00
   395 B921 00						.BYTE $00
   395 B922 00						.BYTE $00
   395 B923 00						.BYTE $00
   395 B924 00						.BYTE $00
   395 B925 00						.BYTE $00
   395 B926 00						.BYTE $00
   395 B927 00						.BYTE $00
   395 B928 00						.BYTE $00
   395 B929 00						.BYTE $00
   395 B92A 00						.BYTE $00
   395 B92B 00						.BYTE $00
   395 B92C 00						.BYTE $00
   395 B92D 00						.BYTE $00
   395 B92E 00						.BYTE $00
   395 B92F 00						.BYTE $00
   395 B930 00						.BYTE $00
   395 B931 00						.BYTE $00
   395 B932 00						.BYTE $00
   395 B933 00						.BYTE $00
   395 B934 00						.BYTE $00
   395 B935 00						.BYTE $00
   395 B936 00						.BYTE $00
   395 B937 00						.BYTE $00
   395 B938 00						.BYTE $00
   395 B939 00						.BYTE $00
   395 B93A 00						.BYTE $00
   395 B93B 00						.BYTE $00
   395 B93C 00						.BYTE $00
   395 B93D 00						.BYTE $00
   395 B93E 00						.BYTE $00
   395 B93F 00						.BYTE $00
   395 B940 00						.BYTE $00
   395 B941 00						.BYTE $00
   395 B942 00						.BYTE $00
   395 B943 00						.BYTE $00
   395 B944 00						.BYTE $00
   395 B945 00						.BYTE $00
   395 B946 00						.BYTE $00
   395 B947 00						.BYTE $00
   395 B948 00						.BYTE $00
   395 B949 00						.BYTE $00
   395 B94A 00						.BYTE $00
   395 B94B 00						.BYTE $00
   395 B94C 00						.BYTE $00
   395 B94D 00						.BYTE $00
   395 B94E 00						.BYTE $00
   395 B94F 00						.BYTE $00
   395 B950 00						.BYTE $00
   395 B951 00						.BYTE $00
   395 B952 00						.BYTE $00
   395 B953 00						.BYTE $00
   395 B954 00						.BYTE $00
   395 B955 00						.BYTE $00
   395 B956 00						.BYTE $00
   395 B957 00						.BYTE $00
   395 B958 00						.BYTE $00
   395 B959 00						.BYTE $00
   395 B95A 00						.BYTE $00
   395 B95B 00						.BYTE $00
   395 B95C 00						.BYTE $00
   395 B95D 00						.BYTE $00
   395 B95E 00						.BYTE $00
   395 B95F 00						.BYTE $00
   395 B960 00						.BYTE $00
   395 B961 00						.BYTE $00
   395 B962 00						.BYTE $00
   395 B963 00						.BYTE $00
   395 B964 00						.BYTE $00
   395 B965 00						.BYTE $00
   395 B966 00						.BYTE $00
   395 B967 00						.BYTE $00
   395 B968 00						.BYTE $00
   395 B969 00						.BYTE $00
   395 B96A 00						.BYTE $00
   395 B96B 00						.BYTE $00
   395 B96C 00						.BYTE $00
   395 B96D 00						.BYTE $00
   395 B96E 00						.BYTE $00
   395 B96F 00						.BYTE $00
   395 B970 00						.BYTE $00
   395 B971 00						.BYTE $00
   395 B972 00						.BYTE $00
   395 B973 00						.BYTE $00
   395 B974 00						.BYTE $00
   395 B975 00						.BYTE $00
   395 B976 00						.BYTE $00
   395 B977 00						.BYTE $00
   395 B978 00						.BYTE $00
   395 B979 00						.BYTE $00
   395 B97A 00						.BYTE $00
   395 B97B 00						.BYTE $00
   395 B97C 00						.BYTE $00
   395 B97D 00						.BYTE $00
   395 B97E 00						.BYTE $00
   395 B97F 00						.BYTE $00
   395 B980 00						.BYTE $00
   395 B981 00						.BYTE $00
   395 B982 00						.BYTE $00
   395 B983 00						.BYTE $00
   395 B984 00						.BYTE $00
   395 B985 00						.BYTE $00
   395 B986 00						.BYTE $00
   395 B987 00						.BYTE $00
   395 B988 00						.BYTE $00
   395 B989 00						.BYTE $00
   395 B98A 00						.BYTE $00
   395 B98B 00						.BYTE $00
   395 B98C 00						.BYTE $00
   395 B98D 00						.BYTE $00
   395 B98E 00						.BYTE $00
   395 B98F 00						.BYTE $00
   395 B990 00						.BYTE $00
   395 B991 00						.BYTE $00
   395 B992 00						.BYTE $00
   395 B993 00						.BYTE $00
   395 B994 00						.BYTE $00
   395 B995 00						.BYTE $00
   395 B996 00						.BYTE $00
   395 B997 00						.BYTE $00
   395 B998 00						.BYTE $00
   395 B999 00						.BYTE $00
   395 B99A 00						.BYTE $00
   395 B99B 00						.BYTE $00
   395 B99C 00						.BYTE $00
   395 B99D 00						.BYTE $00
   395 B99E 00						.BYTE $00
   395 B99F 00						.BYTE $00
   395 B9A0 00						.BYTE $00
   395 B9A1 00						.BYTE $00
   395 B9A2 00						.BYTE $00
   395 B9A3 00						.BYTE $00
   395 B9A4 00						.BYTE $00
   395 B9A5 00						.BYTE $00
   395 B9A6 00						.BYTE $00
   395 B9A7 00						.BYTE $00
   395 B9A8 00						.BYTE $00
   395 B9A9 00						.BYTE $00
   395 B9AA 00						.BYTE $00
   395 B9AB 00						.BYTE $00
   395 B9AC 00						.BYTE $00
   395 B9AD 00						.BYTE $00
   395 B9AE 00						.BYTE $00
   395 B9AF 00						.BYTE $00
   395 B9B0 00						.BYTE $00
   395 B9B1 00						.BYTE $00
   395 B9B2 00						.BYTE $00
   395 B9B3 00						.BYTE $00
   395 B9B4 00						.BYTE $00
   395 B9B5 00						.BYTE $00
   395 B9B6 00						.BYTE $00
   395 B9B7 00						.BYTE $00
   395 B9B8 00						.BYTE $00
   395 B9B9 00						.BYTE $00
   395 B9BA 00						.BYTE $00
   395 B9BB 00						.BYTE $00
   395 B9BC 00						.BYTE $00
   395 B9BD 00						.BYTE $00
   395 B9BE 00						.BYTE $00
   395 B9BF 00						.BYTE $00
   395 B9C0 00						.BYTE $00
   395 B9C1 00						.BYTE $00
   395 B9C2 00						.BYTE $00
   395 B9C3 00						.BYTE $00
   395 B9C4 00						.BYTE $00
   395 B9C5 00						.BYTE $00
   395 B9C6 00						.BYTE $00
   395 B9C7 00						.BYTE $00
   395 B9C8 00						.BYTE $00
   395 B9C9 00						.BYTE $00
   395 B9CA 00						.BYTE $00
   395 B9CB 00						.BYTE $00
   395 B9CC 00						.BYTE $00
   395 B9CD 00						.BYTE $00
   395 B9CE 00						.BYTE $00
   395 B9CF 00						.BYTE $00
   395 B9D0 00						.BYTE $00
   395 B9D1 00						.BYTE $00
   395 B9D2 00						.BYTE $00
   395 B9D3 00						.BYTE $00
   395 B9D4 00						.BYTE $00
   395 B9D5 00						.BYTE $00
   395 B9D6 00						.BYTE $00
   395 B9D7 00						.BYTE $00
   395 B9D8 00						.BYTE $00
   395 B9D9 00						.BYTE $00
   395 B9DA 00						.BYTE $00
   395 B9DB 00						.BYTE $00
   395 B9DC 00						.BYTE $00
   395 B9DD 00						.BYTE $00
   395 B9DE 00						.BYTE $00
   395 B9DF 00						.BYTE $00
   395 B9E0 00						.BYTE $00
   395 B9E1 00						.BYTE $00
   395 B9E2 00						.BYTE $00
   395 B9E3 00						.BYTE $00
   395 B9E4 00						.BYTE $00
   395 B9E5 00						.BYTE $00
   395 B9E6 00						.BYTE $00
   395 B9E7 00						.BYTE $00
   395 B9E8 00						.BYTE $00
   395 B9E9 00						.BYTE $00
   395 B9EA 00						.BYTE $00
   395 B9EB 00						.BYTE $00
   395 B9EC 00						.BYTE $00
   395 B9ED 00						.BYTE $00
   395 B9EE 00						.BYTE $00
   395 B9EF 00						.BYTE $00
   395 B9F0 00						.BYTE $00
   395 B9F1 00						.BYTE $00
   395 B9F2 00						.BYTE $00
   395 B9F3 00						.BYTE $00
   395 B9F4 00						.BYTE $00
   395 B9F5 00						.BYTE $00
   395 B9F6 00						.BYTE $00
   395 B9F7 00						.BYTE $00
   395 B9F8 00						.BYTE $00
   395 B9F9 00						.BYTE $00
   395 B9FA 00						.BYTE $00
   395 B9FB 00						.BYTE $00
   395 B9FC 00						.BYTE $00
   395 B9FD 00						.BYTE $00
   395 B9FE 00						.BYTE $00
   395 B9FF 00						.BYTE $00
   395 BA00 00						.BYTE $00
   395 BA01 00						.BYTE $00
   395 BA02 00						.BYTE $00
   395 BA03 00						.BYTE $00
   395 BA04 00						.BYTE $00
   395 BA05 00						.BYTE $00
   395 BA06 00						.BYTE $00
   395 BA07 00						.BYTE $00
   395 BA08 00						.BYTE $00
   395 BA09 00						.BYTE $00
   395 BA0A 00						.BYTE $00
   395 BA0B 00						.BYTE $00
   395 BA0C 00						.BYTE $00
   395 BA0D 00						.BYTE $00
   395 BA0E 00						.BYTE $00
   395 BA0F 00						.BYTE $00
   395 BA10 00						.BYTE $00
   395 BA11 00						.BYTE $00
   395 BA12 00						.BYTE $00
   395 BA13 00						.BYTE $00
   395 BA14 00						.BYTE $00
   395 BA15 00						.BYTE $00
   395 BA16 00						.BYTE $00
   395 BA17 00						.BYTE $00
   395 BA18 00						.BYTE $00
   395 BA19 00						.BYTE $00
   395 BA1A 00						.BYTE $00
   395 BA1B 00						.BYTE $00
   395 BA1C 00						.BYTE $00
   395 BA1D 00						.BYTE $00
   395 BA1E 00						.BYTE $00
   395 BA1F 00						.BYTE $00
   395 BA20 00						.BYTE $00
   395 BA21 00						.BYTE $00
   395 BA22 00						.BYTE $00
   395 BA23 00						.BYTE $00
   395 BA24 00						.BYTE $00
   395 BA25 00						.BYTE $00
   395 BA26 00						.BYTE $00
   395 BA27 00						.BYTE $00
   395 BA28 00						.BYTE $00
   395 BA29 00						.BYTE $00
   395 BA2A 00						.BYTE $00
   395 BA2B 00						.BYTE $00
   395 BA2C 00						.BYTE $00
   395 BA2D 00						.BYTE $00
   395 BA2E 00						.BYTE $00
   395 BA2F 00						.BYTE $00
   395 BA30 00						.BYTE $00
   395 BA31 00						.BYTE $00
   395 BA32 00						.BYTE $00
   395 BA33 00						.BYTE $00
   395 BA34 00						.BYTE $00
   395 BA35 00						.BYTE $00
   395 BA36 00						.BYTE $00
   395 BA37 00						.BYTE $00
   395 BA38 00						.BYTE $00
   395 BA39 00						.BYTE $00
   395 BA3A 00						.BYTE $00
   395 BA3B 00						.BYTE $00
   395 BA3C 00						.BYTE $00
   395 BA3D 00						.BYTE $00
   395 BA3E 00						.BYTE $00
   395 BA3F 00						.BYTE $00
   395 BA40 00						.BYTE $00
   395 BA41 00						.BYTE $00
   395 BA42 00						.BYTE $00
   395 BA43 00						.BYTE $00
   395 BA44 00						.BYTE $00
   395 BA45 00						.BYTE $00
   395 BA46 00						.BYTE $00
   395 BA47 00						.BYTE $00
   395 BA48 00						.BYTE $00
   395 BA49 00						.BYTE $00
   395 BA4A 00						.BYTE $00
   395 BA4B 00						.BYTE $00
   395 BA4C 00						.BYTE $00
   395 BA4D 00						.BYTE $00
   395 BA4E 00						.BYTE $00
   395 BA4F 00						.BYTE $00
   395 BA50 00						.BYTE $00
   395 BA51 00						.BYTE $00
   395 BA52 00						.BYTE $00
   395 BA53 00						.BYTE $00
   395 BA54 00						.BYTE $00
   395 BA55 00						.BYTE $00
   395 BA56 00						.BYTE $00
   395 BA57 00						.BYTE $00
   395 BA58 00						.BYTE $00
   395 BA59 00						.BYTE $00
   395 BA5A 00						.BYTE $00
   395 BA5B 00						.BYTE $00
   395 BA5C 00						.BYTE $00
   395 BA5D 00						.BYTE $00
   395 BA5E 00						.BYTE $00
   395 BA5F 00						.BYTE $00
   395 BA60 00						.BYTE $00
   395 BA61 00						.BYTE $00
   395 BA62 00						.BYTE $00
   395 BA63 00						.BYTE $00
   395 BA64 00						.BYTE $00
   395 BA65 00						.BYTE $00
   395 BA66 00						.BYTE $00
   395 BA67 00						.BYTE $00
   395 BA68 00						.BYTE $00
   395 BA69 00						.BYTE $00
   395 BA6A 00						.BYTE $00
   395 BA6B 00						.BYTE $00
   395 BA6C 00						.BYTE $00
   395 BA6D 00						.BYTE $00
   395 BA6E 00						.BYTE $00
   395 BA6F 00						.BYTE $00
   395 BA70 00						.BYTE $00
   395 BA71 00						.BYTE $00
   395 BA72 00						.BYTE $00
   395 BA73 00						.BYTE $00
   395 BA74 00						.BYTE $00
   395 BA75 00						.BYTE $00
   395 BA76 00						.BYTE $00
   395 BA77 00						.BYTE $00
   395 BA78 00						.BYTE $00
   395 BA79 00						.BYTE $00
   395 BA7A 00						.BYTE $00
   395 BA7B 00						.BYTE $00
   395 BA7C 00						.BYTE $00
   395 BA7D 00						.BYTE $00
   395 BA7E 00						.BYTE $00
   395 BA7F 00						.BYTE $00
   395 BA80 00						.BYTE $00
   395 BA81 00						.BYTE $00
   395 BA82 00						.BYTE $00
   395 BA83 00						.BYTE $00
   395 BA84 00						.BYTE $00
   395 BA85 00						.BYTE $00
   395 BA86 00						.BYTE $00
   395 BA87 00						.BYTE $00
   395 BA88 00						.BYTE $00
   395 BA89 00						.BYTE $00
   395 BA8A 00						.BYTE $00
   395 BA8B 00						.BYTE $00
   395 BA8C 00						.BYTE $00
   395 BA8D 00						.BYTE $00
   395 BA8E 00						.BYTE $00
   395 BA8F 00						.BYTE $00
   395 BA90 00						.BYTE $00
   395 BA91 00						.BYTE $00
   395 BA92 00						.BYTE $00
   395 BA93 00						.BYTE $00
   395 BA94 00						.BYTE $00
   395 BA95 00						.BYTE $00
   395 BA96 00						.BYTE $00
   395 BA97 00						.BYTE $00
   395 BA98 00						.BYTE $00
   395 BA99 00						.BYTE $00
   395 BA9A 00						.BYTE $00
   395 BA9B 00						.BYTE $00
   395 BA9C 00						.BYTE $00
   395 BA9D 00						.BYTE $00
   395 BA9E 00						.BYTE $00
   395 BA9F 00						.BYTE $00
   395 BAA0 00						.BYTE $00
   395 BAA1 00						.BYTE $00
   395 BAA2 00						.BYTE $00
   395 BAA3 00						.BYTE $00
   395 BAA4 00						.BYTE $00
   395 BAA5 00						.BYTE $00
   395 BAA6 00						.BYTE $00
   395 BAA7 00						.BYTE $00
   395 BAA8 00						.BYTE $00
   395 BAA9 00						.BYTE $00
   395 BAAA 00						.BYTE $00
   395 BAAB 00						.BYTE $00
   395 BAAC 00						.BYTE $00
   395 BAAD 00						.BYTE $00
   395 BAAE 00						.BYTE $00
   395 BAAF 00						.BYTE $00
   395 BAB0 00						.BYTE $00
   395 BAB1 00						.BYTE $00
   395 BAB2 00						.BYTE $00
   395 BAB3 00						.BYTE $00
   395 BAB4 00						.BYTE $00
   395 BAB5 00						.BYTE $00
   395 BAB6 00						.BYTE $00
   395 BAB7 00						.BYTE $00
   395 BAB8 00						.BYTE $00
   395 BAB9 00						.BYTE $00
   395 BABA 00						.BYTE $00
   395 BABB 00						.BYTE $00
   395 BABC 00						.BYTE $00
   395 BABD 00						.BYTE $00
   395 BABE 00						.BYTE $00
   395 BABF 00						.BYTE $00
   395 BAC0 00						.BYTE $00
   395 BAC1 00						.BYTE $00
   395 BAC2 00						.BYTE $00
   395 BAC3 00						.BYTE $00
   395 BAC4 00						.BYTE $00
   395 BAC5 00						.BYTE $00
   395 BAC6 00						.BYTE $00
   395 BAC7 00						.BYTE $00
   395 BAC8 00						.BYTE $00
   395 BAC9 00						.BYTE $00
   395 BACA 00						.BYTE $00
   395 BACB 00						.BYTE $00
   395 BACC 00						.BYTE $00
   395 BACD 00						.BYTE $00
   395 BACE 00						.BYTE $00
   395 BACF 00						.BYTE $00
   395 BAD0 00						.BYTE $00
   395 BAD1 00						.BYTE $00
   395 BAD2 00						.BYTE $00
   395 BAD3 00						.BYTE $00
   395 BAD4 00						.BYTE $00
   395 BAD5 00						.BYTE $00
   395 BAD6 00						.BYTE $00
   395 BAD7 00						.BYTE $00
   395 BAD8 00						.BYTE $00
   395 BAD9 00						.BYTE $00
   395 BADA 00						.BYTE $00
   395 BADB 00						.BYTE $00
   395 BADC 00						.BYTE $00
   395 BADD 00						.BYTE $00
   395 BADE 00						.BYTE $00
   395 BADF 00						.BYTE $00
   395 BAE0 00						.BYTE $00
   395 BAE1 00						.BYTE $00
   395 BAE2 00						.BYTE $00
   395 BAE3 00						.BYTE $00
   395 BAE4 00						.BYTE $00
   395 BAE5 00						.BYTE $00
   395 BAE6 00						.BYTE $00
   395 BAE7 00						.BYTE $00
   395 BAE8 00						.BYTE $00
   395 BAE9 00						.BYTE $00
   395 BAEA 00						.BYTE $00
   395 BAEB 00						.BYTE $00
   395 BAEC 00						.BYTE $00
   395 BAED 00						.BYTE $00
   395 BAEE 00						.BYTE $00
   395 BAEF 00						.BYTE $00
   395 BAF0 00						.BYTE $00
   395 BAF1 00						.BYTE $00
   395 BAF2 00						.BYTE $00
   395 BAF3 00						.BYTE $00
   395 BAF4 00						.BYTE $00
   395 BAF5 00						.BYTE $00
   395 BAF6 00						.BYTE $00
   395 BAF7 00						.BYTE $00
   395 BAF8 00						.BYTE $00
   395 BAF9 00						.BYTE $00
   395 BAFA 00						.BYTE $00
   395 BAFB 00						.BYTE $00
   395 BAFC 00						.BYTE $00
   395 BAFD 00						.BYTE $00
   395 BAFE 00						.BYTE $00
   395 BAFF 00						.BYTE $00
   395 BB00 00						.BYTE $00
   395 BB01 00						.BYTE $00
   395 BB02 00						.BYTE $00
   395 BB03 00						.BYTE $00
   395 BB04 00						.BYTE $00
   395 BB05 00						.BYTE $00
   395 BB06 00						.BYTE $00
   395 BB07 00						.BYTE $00
   395 BB08 00						.BYTE $00
   395 BB09 00						.BYTE $00
   395 BB0A 00						.BYTE $00
   395 BB0B 00						.BYTE $00
   395 BB0C 00						.BYTE $00
   395 BB0D 00						.BYTE $00
   395 BB0E 00						.BYTE $00
   395 BB0F 00						.BYTE $00
   395 BB10 00						.BYTE $00
   395 BB11 00						.BYTE $00
   395 BB12 00						.BYTE $00
   395 BB13 00						.BYTE $00
   395 BB14 00						.BYTE $00
   395 BB15 00						.BYTE $00
   395 BB16 00						.BYTE $00
   395 BB17 00						.BYTE $00
   395 BB18 00						.BYTE $00
   395 BB19 00						.BYTE $00
   395 BB1A 00						.BYTE $00
   395 BB1B 00						.BYTE $00
   395 BB1C 00						.BYTE $00
   395 BB1D 00						.BYTE $00
   395 BB1E 00						.BYTE $00
   395 BB1F 00						.BYTE $00
   395 BB20 00						.BYTE $00
   395 BB21 00						.BYTE $00
   395 BB22 00						.BYTE $00
   395 BB23 00						.BYTE $00
   395 BB24 00						.BYTE $00
   395 BB25 00						.BYTE $00
   395 BB26 00						.BYTE $00
   395 BB27 00						.BYTE $00
   395 BB28 00						.BYTE $00
   395 BB29 00						.BYTE $00
   395 BB2A 00						.BYTE $00
   395 BB2B 00						.BYTE $00
   395 BB2C 00						.BYTE $00
   395 BB2D 00						.BYTE $00
   395 BB2E 00						.BYTE $00
   395 BB2F 00						.BYTE $00
   395 BB30 00						.BYTE $00
   395 BB31 00						.BYTE $00
   395 BB32 00						.BYTE $00
   395 BB33 00						.BYTE $00
   395 BB34 00						.BYTE $00
   395 BB35 00						.BYTE $00
   395 BB36 00						.BYTE $00
   395 BB37 00						.BYTE $00
   395 BB38 00						.BYTE $00
   395 BB39 00						.BYTE $00
   395 BB3A 00						.BYTE $00
   395 BB3B 00						.BYTE $00
   395 BB3C 00						.BYTE $00
   395 BB3D 00						.BYTE $00
   395 BB3E 00						.BYTE $00
   395 BB3F 00						.BYTE $00
   395 BB40 00						.BYTE $00
   395 BB41 00						.BYTE $00
   395 BB42 00						.BYTE $00
   395 BB43 00						.BYTE $00
   395 BB44 00						.BYTE $00
   395 BB45 00						.BYTE $00
   395 BB46 00						.BYTE $00
   395 BB47 00						.BYTE $00
   395 BB48 00						.BYTE $00
   395 BB49 00						.BYTE $00
   395 BB4A 00						.BYTE $00
   395 BB4B 00						.BYTE $00
   395 BB4C 00						.BYTE $00
   395 BB4D 00						.BYTE $00
   395 BB4E 00						.BYTE $00
   395 BB4F 00						.BYTE $00
   395 BB50 00						.BYTE $00
   395 BB51 00						.BYTE $00
   395 BB52 00						.BYTE $00
   395 BB53 00						.BYTE $00
   395 BB54 00						.BYTE $00
   395 BB55 00						.BYTE $00
   395 BB56 00						.BYTE $00
   395 BB57 00						.BYTE $00
   395 BB58 00						.BYTE $00
   395 BB59 00						.BYTE $00
   395 BB5A 00						.BYTE $00
   395 BB5B 00						.BYTE $00
   395 BB5C 00						.BYTE $00
   395 BB5D 00						.BYTE $00
   395 BB5E 00						.BYTE $00
   395 BB5F 00						.BYTE $00
   395 BB60 00						.BYTE $00
   395 BB61 00						.BYTE $00
   395 BB62 00						.BYTE $00
   395 BB63 00						.BYTE $00
   395 BB64 00						.BYTE $00
   395 BB65 00						.BYTE $00
   395 BB66 00						.BYTE $00
   395 BB67 00						.BYTE $00
   395 BB68 00						.BYTE $00
   395 BB69 00						.BYTE $00
   395 BB6A 00						.BYTE $00
   395 BB6B 00						.BYTE $00
   395 BB6C 00						.BYTE $00
   395 BB6D 00						.BYTE $00
   395 BB6E 00						.BYTE $00
   395 BB6F 00						.BYTE $00
   395 BB70 00						.BYTE $00
   395 BB71 00						.BYTE $00
   395 BB72 00						.BYTE $00
   395 BB73 00						.BYTE $00
   395 BB74 00						.BYTE $00
   395 BB75 00						.BYTE $00
   395 BB76 00						.BYTE $00
   395 BB77 00						.BYTE $00
   395 BB78 00						.BYTE $00
   395 BB79 00						.BYTE $00
   395 BB7A 00						.BYTE $00
   395 BB7B 00						.BYTE $00
   395 BB7C 00						.BYTE $00
   395 BB7D 00						.BYTE $00
   395 BB7E 00						.BYTE $00
   395 BB7F 00						.BYTE $00
   395 BB80 00						.BYTE $00
   395 BB81 00						.BYTE $00
   395 BB82 00						.BYTE $00
   395 BB83 00						.BYTE $00
   395 BB84 00						.BYTE $00
   395 BB85 00						.BYTE $00
   395 BB86 00						.BYTE $00
   395 BB87 00						.BYTE $00
   395 BB88 00						.BYTE $00
   395 BB89 00						.BYTE $00
   395 BB8A 00						.BYTE $00
   395 BB8B 00						.BYTE $00
   395 BB8C 00						.BYTE $00
   395 BB8D 00						.BYTE $00
   395 BB8E 00						.BYTE $00
   395 BB8F 00						.BYTE $00
   395 BB90 00						.BYTE $00
   395 BB91 00						.BYTE $00
   395 BB92 00						.BYTE $00
   395 BB93 00						.BYTE $00
   395 BB94 00						.BYTE $00
   395 BB95 00						.BYTE $00
   395 BB96 00						.BYTE $00
   395 BB97 00						.BYTE $00
   395 BB98 00						.BYTE $00
   395 BB99 00						.BYTE $00
   395 BB9A 00						.BYTE $00
   395 BB9B 00						.BYTE $00
   395 BB9C 00						.BYTE $00
   395 BB9D 00						.BYTE $00
   395 BB9E 00						.BYTE $00
   395 BB9F 00						.BYTE $00
   395 BBA0 00						.BYTE $00
   395 BBA1 00						.BYTE $00
   395 BBA2 00						.BYTE $00
   395 BBA3 00						.BYTE $00
   395 BBA4 00						.BYTE $00
   395 BBA5 00						.BYTE $00
   395 BBA6 00						.BYTE $00
   395 BBA7 00						.BYTE $00
   395 BBA8 00						.BYTE $00
   395 BBA9 00						.BYTE $00
   395 BBAA 00						.BYTE $00
   395 BBAB 00						.BYTE $00
   395 BBAC 00						.BYTE $00
   395 BBAD 00						.BYTE $00
   395 BBAE 00						.BYTE $00
   395 BBAF 00						.BYTE $00
   395 BBB0 00						.BYTE $00
   395 BBB1 00						.BYTE $00
   395 BBB2 00						.BYTE $00
   395 BBB3 00						.BYTE $00
   395 BBB4 00						.BYTE $00
   395 BBB5 00						.BYTE $00
   395 BBB6 00						.BYTE $00
   395 BBB7 00						.BYTE $00
   395 BBB8 00						.BYTE $00
   395 BBB9 00						.BYTE $00
   395 BBBA 00						.BYTE $00
   395 BBBB 00						.BYTE $00
   395 BBBC 00						.BYTE $00
   395 BBBD 00						.BYTE $00
   395 BBBE 00						.BYTE $00
   395 BBBF 00						.BYTE $00
   395 BBC0 00						.BYTE $00
   395 BBC1 00						.BYTE $00
   395 BBC2 00						.BYTE $00
   395 BBC3 00						.BYTE $00
   395 BBC4 00						.BYTE $00
   395 BBC5 00						.BYTE $00
   395 BBC6 00						.BYTE $00
   395 BBC7 00						.BYTE $00
   395 BBC8 00						.BYTE $00
   395 BBC9 00						.BYTE $00
   395 BBCA 00						.BYTE $00
   395 BBCB 00						.BYTE $00
   395 BBCC 00						.BYTE $00
   395 BBCD 00						.BYTE $00
   395 BBCE 00						.BYTE $00
   395 BBCF 00						.BYTE $00
   395 BBD0 00						.BYTE $00
   395 BBD1 00						.BYTE $00
   395 BBD2 00						.BYTE $00
   395 BBD3 00						.BYTE $00
   395 BBD4 00						.BYTE $00
   395 BBD5 00						.BYTE $00
   395 BBD6 00						.BYTE $00
   395 BBD7 00						.BYTE $00
   395 BBD8 00						.BYTE $00
   395 BBD9 00						.BYTE $00
   395 BBDA 00						.BYTE $00
   395 BBDB 00						.BYTE $00
   395 BBDC 00						.BYTE $00
   395 BBDD 00						.BYTE $00
   395 BBDE 00						.BYTE $00
   395 BBDF 00						.BYTE $00
   395 BBE0 00						.BYTE $00
   395 BBE1 00						.BYTE $00
   395 BBE2 00						.BYTE $00
   395 BBE3 00						.BYTE $00
   395 BBE4 00						.BYTE $00
   395 BBE5 00						.BYTE $00
   395 BBE6 00						.BYTE $00
   395 BBE7 00						.BYTE $00
   395 BBE8 00						.BYTE $00
   395 BBE9 00						.BYTE $00
   395 BBEA 00						.BYTE $00
   395 BBEB 00						.BYTE $00
   395 BBEC 00						.BYTE $00
   395 BBED 00						.BYTE $00
   395 BBEE 00						.BYTE $00
   395 BBEF 00						.BYTE $00
   395 BBF0 00						.BYTE $00
   395 BBF1 00						.BYTE $00
   395 BBF2 00						.BYTE $00
   395 BBF3 00						.BYTE $00
   395 BBF4 00						.BYTE $00
   395 BBF5 00						.BYTE $00
   395 BBF6 00						.BYTE $00
   395 BBF7 00						.BYTE $00
   395 BBF8 00						.BYTE $00
   395 BBF9 00						.BYTE $00
   395 BBFA 00						.BYTE $00
   395 BBFB 00						.BYTE $00
   395 BBFC 00						.BYTE $00
   395 BBFD 00						.BYTE $00
   395 BBFE 00						.BYTE $00
   395 BBFF 00						.BYTE $00
   395 BC00 00						.BYTE $00
   395 BC01 00						.BYTE $00
   395 BC02 00						.BYTE $00
   395 BC03 00						.BYTE $00
   395 BC04 00						.BYTE $00
   395 BC05 00						.BYTE $00
   395 BC06 00						.BYTE $00
   395 BC07 00						.BYTE $00
   395 BC08 00						.BYTE $00
   395 BC09 00						.BYTE $00
   395 BC0A 00						.BYTE $00
   395 BC0B 00						.BYTE $00
   395 BC0C 00						.BYTE $00
   395 BC0D 00						.BYTE $00
   395 BC0E 00						.BYTE $00
   395 BC0F 00						.BYTE $00
   395 BC10 00						.BYTE $00
   395 BC11 00						.BYTE $00
   395 BC12 00						.BYTE $00
   395 BC13 00						.BYTE $00
   395 BC14 00						.BYTE $00
   395 BC15 00						.BYTE $00
   395 BC16 00						.BYTE $00
   395 BC17 00						.BYTE $00
   395 BC18 00						.BYTE $00
   395 BC19 00						.BYTE $00
   395 BC1A 00						.BYTE $00
   395 BC1B 00						.BYTE $00
   395 BC1C 00						.BYTE $00
   395 BC1D 00						.BYTE $00
   395 BC1E 00						.BYTE $00
   395 BC1F 00						.BYTE $00
   395 BC20 00						.BYTE $00
   395 BC21 00						.BYTE $00
   395 BC22 00						.BYTE $00
   395 BC23 00						.BYTE $00
   395 BC24 00						.BYTE $00
   395 BC25 00						.BYTE $00
   395 BC26 00						.BYTE $00
   395 BC27 00						.BYTE $00
   395 BC28 00						.BYTE $00
   395 BC29 00						.BYTE $00
   395 BC2A 00						.BYTE $00
   395 BC2B 00						.BYTE $00
   395 BC2C 00						.BYTE $00
   395 BC2D 00						.BYTE $00
   395 BC2E 00						.BYTE $00
   395 BC2F 00						.BYTE $00
   395 BC30 00						.BYTE $00
   395 BC31 00						.BYTE $00
   395 BC32 00						.BYTE $00
   395 BC33 00						.BYTE $00
   395 BC34 00						.BYTE $00
   395 BC35 00						.BYTE $00
   395 BC36 00						.BYTE $00
   395 BC37 00						.BYTE $00
   395 BC38 00						.BYTE $00
   395 BC39 00						.BYTE $00
   395 BC3A 00						.BYTE $00
   395 BC3B 00						.BYTE $00
   395 BC3C 00						.BYTE $00
   395 BC3D 00						.BYTE $00
   395 BC3E 00						.BYTE $00
   395 BC3F 00						.BYTE $00
   395 BC40 00						.BYTE $00
   395 BC41 00						.BYTE $00
   395 BC42 00						.BYTE $00
   395 BC43 00						.BYTE $00
   395 BC44 00						.BYTE $00
   395 BC45 00						.BYTE $00
   395 BC46 00						.BYTE $00
   395 BC47 00						.BYTE $00
   395 BC48 00						.BYTE $00
   395 BC49 00						.BYTE $00
   395 BC4A 00						.BYTE $00
   395 BC4B 00						.BYTE $00
   395 BC4C 00						.BYTE $00
   395 BC4D 00						.BYTE $00
   395 BC4E 00						.BYTE $00
   395 BC4F 00						.BYTE $00
   395 BC50 00						.BYTE $00
   395 BC51 00						.BYTE $00
   395 BC52 00						.BYTE $00
   395 BC53 00						.BYTE $00
   395 BC54 00						.BYTE $00
   395 BC55 00						.BYTE $00
   395 BC56 00						.BYTE $00
   395 BC57 00						.BYTE $00
   395 BC58 00						.BYTE $00
   395 BC59 00						.BYTE $00
   395 BC5A 00						.BYTE $00
   395 BC5B 00						.BYTE $00
   395 BC5C 00						.BYTE $00
   395 BC5D 00						.BYTE $00
   395 BC5E 00						.BYTE $00
   395 BC5F 00						.BYTE $00
   395 BC60 00						.BYTE $00
   395 BC61 00						.BYTE $00
   395 BC62 00						.BYTE $00
   395 BC63 00						.BYTE $00
   395 BC64 00						.BYTE $00
   395 BC65 00						.BYTE $00
   395 BC66 00						.BYTE $00
   395 BC67 00						.BYTE $00
   395 BC68 00						.BYTE $00
   395 BC69 00						.BYTE $00
   395 BC6A 00						.BYTE $00
   395 BC6B 00						.BYTE $00
   395 BC6C 00						.BYTE $00
   395 BC6D 00						.BYTE $00
   395 BC6E 00						.BYTE $00
   395 BC6F 00						.BYTE $00
   395 BC70 00						.BYTE $00
   395 BC71 00						.BYTE $00
   395 BC72 00						.BYTE $00
   395 BC73 00						.BYTE $00
   395 BC74 00						.BYTE $00
   395 BC75 00						.BYTE $00
   395 BC76 00						.BYTE $00
   395 BC77 00						.BYTE $00
   395 BC78 00						.BYTE $00
   395 BC79 00						.BYTE $00
   395 BC7A 00						.BYTE $00
   395 BC7B 00						.BYTE $00
   395 BC7C 00						.BYTE $00
   395 BC7D 00						.BYTE $00
   395 BC7E 00						.BYTE $00
   395 BC7F 00						.BYTE $00
   395 BC80 00						.BYTE $00
   395 BC81 00						.BYTE $00
   395 BC82 00						.BYTE $00
   395 BC83 00						.BYTE $00
   395 BC84 00						.BYTE $00
   395 BC85 00						.BYTE $00
   395 BC86 00						.BYTE $00
   395 BC87 00						.BYTE $00
   395 BC88 00						.BYTE $00
   395 BC89 00						.BYTE $00
   395 BC8A 00						.BYTE $00
   395 BC8B 00						.BYTE $00
   395 BC8C 00						.BYTE $00
   395 BC8D 00						.BYTE $00
   395 BC8E 00						.BYTE $00
   395 BC8F 00						.BYTE $00
   395 BC90 00						.BYTE $00
   395 BC91 00						.BYTE $00
   395 BC92 00						.BYTE $00
   395 BC93 00						.BYTE $00
   395 BC94 00						.BYTE $00
   395 BC95 00						.BYTE $00
   395 BC96 00						.BYTE $00
   395 BC97 00						.BYTE $00
   395 BC98 00						.BYTE $00
   395 BC99 00						.BYTE $00
   395 BC9A 00						.BYTE $00
   395 BC9B 00						.BYTE $00
   395 BC9C 00						.BYTE $00
   395 BC9D 00						.BYTE $00
   395 BC9E 00						.BYTE $00
   395 BC9F 00						.BYTE $00
   395 BCA0 00						.BYTE $00
   395 BCA1 00						.BYTE $00
   395 BCA2 00						.BYTE $00
   395 BCA3 00						.BYTE $00
   395 BCA4 00						.BYTE $00
   395 BCA5 00						.BYTE $00
   395 BCA6 00						.BYTE $00
   395 BCA7 00						.BYTE $00
   395 BCA8 00						.BYTE $00
   395 BCA9 00						.BYTE $00
   395 BCAA 00						.BYTE $00
   395 BCAB 00						.BYTE $00
   395 BCAC 00						.BYTE $00
   395 BCAD 00						.BYTE $00
   395 BCAE 00						.BYTE $00
   395 BCAF 00						.BYTE $00
   395 BCB0 00						.BYTE $00
   395 BCB1 00						.BYTE $00
   395 BCB2 00						.BYTE $00
   395 BCB3 00						.BYTE $00
   395 BCB4 00						.BYTE $00
   395 BCB5 00						.BYTE $00
   395 BCB6 00						.BYTE $00
   395 BCB7 00						.BYTE $00
   395 BCB8 00						.BYTE $00
   395 BCB9 00						.BYTE $00
   395 BCBA 00						.BYTE $00
   395 BCBB 00						.BYTE $00
   395 BCBC 00						.BYTE $00
   395 BCBD 00						.BYTE $00
   395 BCBE 00						.BYTE $00
   395 BCBF 00						.BYTE $00
   395 BCC0 00						.BYTE $00
   395 BCC1 00						.BYTE $00
   395 BCC2 00						.BYTE $00
   395 BCC3 00						.BYTE $00
   395 BCC4 00						.BYTE $00
   395 BCC5 00						.BYTE $00
   395 BCC6 00						.BYTE $00
   395 BCC7 00						.BYTE $00
   395 BCC8 00						.BYTE $00
   395 BCC9 00						.BYTE $00
   395 BCCA 00						.BYTE $00
   395 BCCB 00						.BYTE $00
   395 BCCC 00						.BYTE $00
   395 BCCD 00						.BYTE $00
   395 BCCE 00						.BYTE $00
   395 BCCF 00						.BYTE $00
   395 BCD0 00						.BYTE $00
   395 BCD1 00						.BYTE $00
   395 BCD2 00						.BYTE $00
   395 BCD3 00						.BYTE $00
   395 BCD4 00						.BYTE $00
   395 BCD5 00						.BYTE $00
   395 BCD6 00						.BYTE $00
   395 BCD7 00						.BYTE $00
   395 BCD8 00						.BYTE $00
   395 BCD9 00						.BYTE $00
   395 BCDA 00						.BYTE $00
   395 BCDB 00						.BYTE $00
   395 BCDC 00						.BYTE $00
   395 BCDD 00						.BYTE $00
   395 BCDE 00						.BYTE $00
   395 BCDF 00						.BYTE $00
   395 BCE0 00						.BYTE $00
   395 BCE1 00						.BYTE $00
   395 BCE2 00						.BYTE $00
   395 BCE3 00						.BYTE $00
   395 BCE4 00						.BYTE $00
   395 BCE5 00						.BYTE $00
   395 BCE6 00						.BYTE $00
   395 BCE7 00						.BYTE $00
   395 BCE8 00						.BYTE $00
   395 BCE9 00						.BYTE $00
   395 BCEA 00						.BYTE $00
   395 BCEB 00						.BYTE $00
   395 BCEC 00						.BYTE $00
   395 BCED 00						.BYTE $00
   395 BCEE 00						.BYTE $00
   395 BCEF 00						.BYTE $00
   395 BCF0 00						.BYTE $00
   395 BCF1 00						.BYTE $00
   395 BCF2 00						.BYTE $00
   395 BCF3 00						.BYTE $00
   395 BCF4 00						.BYTE $00
   395 BCF5 00						.BYTE $00
   395 BCF6 00						.BYTE $00
   395 BCF7 00						.BYTE $00
   395 BCF8 00						.BYTE $00
   395 BCF9 00						.BYTE $00
   395 BCFA 00						.BYTE $00
   395 BCFB 00						.BYTE $00
   395 BCFC 00						.BYTE $00
   395 BCFD 00						.BYTE $00
   395 BCFE 00						.BYTE $00
   395 BCFF 00						.BYTE $00
   395 BD00 00						.BYTE $00
   395 BD01 00						.BYTE $00
   395 BD02 00						.BYTE $00
   395 BD03 00						.BYTE $00
   395 BD04 00						.BYTE $00
   395 BD05 00						.BYTE $00
   395 BD06 00						.BYTE $00
   395 BD07 00						.BYTE $00
   395 BD08 00						.BYTE $00
   395 BD09 00						.BYTE $00
   395 BD0A 00						.BYTE $00
   395 BD0B 00						.BYTE $00
   395 BD0C 00						.BYTE $00
   395 BD0D 00						.BYTE $00
   395 BD0E 00						.BYTE $00
   395 BD0F 00						.BYTE $00
   395 BD10 00						.BYTE $00
   395 BD11 00						.BYTE $00
   395 BD12 00						.BYTE $00
   395 BD13 00						.BYTE $00
   395 BD14 00						.BYTE $00
   395 BD15 00						.BYTE $00
   395 BD16 00						.BYTE $00
   395 BD17 00						.BYTE $00
   395 BD18 00						.BYTE $00
   395 BD19 00						.BYTE $00
   395 BD1A 00						.BYTE $00
   395 BD1B 00						.BYTE $00
   395 BD1C 00						.BYTE $00
   395 BD1D 00						.BYTE $00
   395 BD1E 00						.BYTE $00
   395 BD1F 00						.BYTE $00
   395 BD20 00						.BYTE $00
   395 BD21 00						.BYTE $00
   395 BD22 00						.BYTE $00
   395 BD23 00						.BYTE $00
   395 BD24 00						.BYTE $00
   395 BD25 00						.BYTE $00
   395 BD26 00						.BYTE $00
   395 BD27 00						.BYTE $00
   395 BD28 00						.BYTE $00
   395 BD29 00						.BYTE $00
   395 BD2A 00						.BYTE $00
   395 BD2B 00						.BYTE $00
   395 BD2C 00						.BYTE $00
   395 BD2D 00						.BYTE $00
   395 BD2E 00						.BYTE $00
   395 BD2F 00						.BYTE $00
   395 BD30 00						.BYTE $00
   395 BD31 00						.BYTE $00
   395 BD32 00						.BYTE $00
   395 BD33 00						.BYTE $00
   395 BD34 00						.BYTE $00
   395 BD35 00						.BYTE $00
   395 BD36 00						.BYTE $00
   395 BD37 00						.BYTE $00
   395 BD38 00						.BYTE $00
   395 BD39 00						.BYTE $00
   395 BD3A 00						.BYTE $00
   395 BD3B 00						.BYTE $00
   395 BD3C 00						.BYTE $00
   395 BD3D 00						.BYTE $00
   395 BD3E 00						.BYTE $00
   395 BD3F 00						.BYTE $00
   395 BD40 00						.BYTE $00
   395 BD41 00						.BYTE $00
   395 BD42 00						.BYTE $00
   395 BD43 00						.BYTE $00
   395 BD44 00						.BYTE $00
   395 BD45 00						.BYTE $00
   395 BD46 00						.BYTE $00
   395 BD47 00						.BYTE $00
   395 BD48 00						.BYTE $00
   395 BD49 00						.BYTE $00
   395 BD4A 00						.BYTE $00
   395 BD4B 00						.BYTE $00
   395 BD4C 00						.BYTE $00
   395 BD4D 00						.BYTE $00
   395 BD4E 00						.BYTE $00
   395 BD4F 00						.BYTE $00
   395 BD50 00						.BYTE $00
   395 BD51 00						.BYTE $00
   395 BD52 00						.BYTE $00
   395 BD53 00						.BYTE $00
   395 BD54 00						.BYTE $00
   395 BD55 00						.BYTE $00
   395 BD56 00						.BYTE $00
   395 BD57 00						.BYTE $00
   395 BD58 00						.BYTE $00
   395 BD59 00						.BYTE $00
   395 BD5A 00						.BYTE $00
   395 BD5B 00						.BYTE $00
   395 BD5C 00						.BYTE $00
   395 BD5D 00						.BYTE $00
   395 BD5E 00						.BYTE $00
   395 BD5F 00						.BYTE $00
   395 BD60 00						.BYTE $00
   395 BD61 00						.BYTE $00
   395 BD62 00						.BYTE $00
   395 BD63 00						.BYTE $00
   395 BD64 00						.BYTE $00
   395 BD65 00						.BYTE $00
   395 BD66 00						.BYTE $00
   395 BD67 00						.BYTE $00
   395 BD68 00						.BYTE $00
   395 BD69 00						.BYTE $00
   395 BD6A 00						.BYTE $00
   395 BD6B 00						.BYTE $00
   395 BD6C 00						.BYTE $00
   395 BD6D 00						.BYTE $00
   395 BD6E 00						.BYTE $00
   395 BD6F 00						.BYTE $00
   395 BD70 00						.BYTE $00
   395 BD71 00						.BYTE $00
   395 BD72 00						.BYTE $00
   395 BD73 00						.BYTE $00
   395 BD74 00						.BYTE $00
   395 BD75 00						.BYTE $00
   395 BD76 00						.BYTE $00
   395 BD77 00						.BYTE $00
   395 BD78 00						.BYTE $00
   395 BD79 00						.BYTE $00
   395 BD7A 00						.BYTE $00
   395 BD7B 00						.BYTE $00
   395 BD7C 00						.BYTE $00
   395 BD7D 00						.BYTE $00
   395 BD7E 00						.BYTE $00
   395 BD7F 00						.BYTE $00
   395 BD80 00						.BYTE $00
   395 BD81 00						.BYTE $00
   395 BD82 00						.BYTE $00
   395 BD83 00						.BYTE $00
   395 BD84 00						.BYTE $00
   395 BD85 00						.BYTE $00
   395 BD86 00						.BYTE $00
   395 BD87 00						.BYTE $00
   395 BD88 00						.BYTE $00
   395 BD89 00						.BYTE $00
   395 BD8A 00						.BYTE $00
   395 BD8B 00						.BYTE $00
   395 BD8C 00						.BYTE $00
   395 BD8D 00						.BYTE $00
   395 BD8E 00						.BYTE $00
   395 BD8F 00						.BYTE $00
   395 BD90 00						.BYTE $00
   395 BD91 00						.BYTE $00
   395 BD92 00						.BYTE $00
   395 BD93 00						.BYTE $00
   395 BD94 00						.BYTE $00
   395 BD95 00						.BYTE $00
   395 BD96 00						.BYTE $00
   395 BD97 00						.BYTE $00
   395 BD98 00						.BYTE $00
   395 BD99 00						.BYTE $00
   395 BD9A 00						.BYTE $00
   395 BD9B 00						.BYTE $00
   395 BD9C 00						.BYTE $00
   395 BD9D 00						.BYTE $00
   395 BD9E 00						.BYTE $00
   395 BD9F 00						.BYTE $00
   395 BDA0 00						.BYTE $00
   395 BDA1 00						.BYTE $00
   395 BDA2 00						.BYTE $00
   395 BDA3 00						.BYTE $00
   395 BDA4 00						.BYTE $00
   395 BDA5 00						.BYTE $00
   395 BDA6 00						.BYTE $00
   395 BDA7 00						.BYTE $00
   395 BDA8 00						.BYTE $00
   395 BDA9 00						.BYTE $00
   395 BDAA 00						.BYTE $00
   395 BDAB 00						.BYTE $00
   395 BDAC 00						.BYTE $00
   395 BDAD 00						.BYTE $00
   395 BDAE 00						.BYTE $00
   395 BDAF 00						.BYTE $00
   395 BDB0 00						.BYTE $00
   395 BDB1 00						.BYTE $00
   395 BDB2 00						.BYTE $00
   395 BDB3 00						.BYTE $00
   395 BDB4 00						.BYTE $00
   395 BDB5 00						.BYTE $00
   395 BDB6 00						.BYTE $00
   395 BDB7 00						.BYTE $00
   395 BDB8 00						.BYTE $00
   395 BDB9 00						.BYTE $00
   395 BDBA 00						.BYTE $00
   395 BDBB 00						.BYTE $00
   395 BDBC 00						.BYTE $00
   395 BDBD 00						.BYTE $00
   395 BDBE 00						.BYTE $00
   395 BDBF 00						.BYTE $00
   395 BDC0 00						.BYTE $00
   395 BDC1 00						.BYTE $00
   395 BDC2 00						.BYTE $00
   395 BDC3 00						.BYTE $00
   395 BDC4 00						.BYTE $00
   395 BDC5 00						.BYTE $00
   395 BDC6 00						.BYTE $00
   395 BDC7 00						.BYTE $00
   395 BDC8 00						.BYTE $00
   395 BDC9 00						.BYTE $00
   395 BDCA 00						.BYTE $00
   395 BDCB 00						.BYTE $00
   395 BDCC 00						.BYTE $00
   395 BDCD 00						.BYTE $00
   395 BDCE 00						.BYTE $00
   395 BDCF 00						.BYTE $00
   395 BDD0 00						.BYTE $00
   395 BDD1 00						.BYTE $00
   395 BDD2 00						.BYTE $00
   395 BDD3 00						.BYTE $00
   395 BDD4 00						.BYTE $00
   395 BDD5 00						.BYTE $00
   395 BDD6 00						.BYTE $00
   395 BDD7 00						.BYTE $00
   395 BDD8 00						.BYTE $00
   395 BDD9 00						.BYTE $00
   395 BDDA 00						.BYTE $00
   395 BDDB 00						.BYTE $00
   395 BDDC 00						.BYTE $00
   395 BDDD 00						.BYTE $00
   395 BDDE 00						.BYTE $00
   395 BDDF 00						.BYTE $00
   395 BDE0 00						.BYTE $00
   395 BDE1 00						.BYTE $00
   395 BDE2 00						.BYTE $00
   395 BDE3 00						.BYTE $00
   395 BDE4 00						.BYTE $00
   395 BDE5 00						.BYTE $00
   395 BDE6 00						.BYTE $00
   395 BDE7 00						.BYTE $00
   395 BDE8 00						.BYTE $00
   395 BDE9 00						.BYTE $00
   395 BDEA 00						.BYTE $00
   395 BDEB 00						.BYTE $00
   395 BDEC 00						.BYTE $00
   395 BDED 00						.BYTE $00
   395 BDEE 00						.BYTE $00
   395 BDEF 00						.BYTE $00
   395 BDF0 00						.BYTE $00
   395 BDF1 00						.BYTE $00
   395 BDF2 00						.BYTE $00
   395 BDF3 00						.BYTE $00
   395 BDF4 00						.BYTE $00
   395 BDF5 00						.BYTE $00
   395 BDF6 00						.BYTE $00
   395 BDF7 00						.BYTE $00
   395 BDF8 00						.BYTE $00
   395 BDF9 00						.BYTE $00
   395 BDFA 00						.BYTE $00
   395 BDFB 00						.BYTE $00
   395 BDFC 00						.BYTE $00
   395 BDFD 00						.BYTE $00
   395 BDFE 00						.BYTE $00
   395 BDFF 00						.BYTE $00
   395 BE00 00						.BYTE $00
   395 BE01 00						.BYTE $00
   395 BE02 00						.BYTE $00
   395 BE03 00						.BYTE $00
   395 BE04 00						.BYTE $00
   395 BE05 00						.BYTE $00
   395 BE06 00						.BYTE $00
   395 BE07 00						.BYTE $00
   395 BE08 00						.BYTE $00
   395 BE09 00						.BYTE $00
   395 BE0A 00						.BYTE $00
   395 BE0B 00						.BYTE $00
   395 BE0C 00						.BYTE $00
   395 BE0D 00						.BYTE $00
   395 BE0E 00						.BYTE $00
   395 BE0F 00						.BYTE $00
   395 BE10 00						.BYTE $00
   395 BE11 00						.BYTE $00
   395 BE12 00						.BYTE $00
   395 BE13 00						.BYTE $00
   395 BE14 00						.BYTE $00
   395 BE15 00						.BYTE $00
   395 BE16 00						.BYTE $00
   395 BE17 00						.BYTE $00
   395 BE18 00						.BYTE $00
   395 BE19 00						.BYTE $00
   395 BE1A 00						.BYTE $00
   395 BE1B 00						.BYTE $00
   395 BE1C 00						.BYTE $00
   395 BE1D 00						.BYTE $00
   395 BE1E 00						.BYTE $00
   395 BE1F 00						.BYTE $00
   395 BE20 00						.BYTE $00
   395 BE21 00						.BYTE $00
   395 BE22 00						.BYTE $00
   395 BE23 00						.BYTE $00
   395 BE24 00						.BYTE $00
   395 BE25 00						.BYTE $00
   395 BE26 00						.BYTE $00
   395 BE27 00						.BYTE $00
   395 BE28 00						.BYTE $00
   395 BE29 00						.BYTE $00
   395 BE2A 00						.BYTE $00
   395 BE2B 00						.BYTE $00
   395 BE2C 00						.BYTE $00
   395 BE2D 00						.BYTE $00
   395 BE2E 00						.BYTE $00
   395 BE2F 00						.BYTE $00
   395 BE30 00						.BYTE $00
   395 BE31 00						.BYTE $00
   395 BE32 00						.BYTE $00
   395 BE33 00						.BYTE $00
   395 BE34 00						.BYTE $00
   395 BE35 00						.BYTE $00
   395 BE36 00						.BYTE $00
   395 BE37 00						.BYTE $00
   395 BE38 00						.BYTE $00
   395 BE39 00						.BYTE $00
   395 BE3A 00						.BYTE $00
   395 BE3B 00						.BYTE $00
   395 BE3C 00						.BYTE $00
   395 BE3D 00						.BYTE $00
   395 BE3E 00						.BYTE $00
   395 BE3F 00						.BYTE $00
   395 BE40 00						.BYTE $00
   395 BE41 00						.BYTE $00
   395 BE42 00						.BYTE $00
   395 BE43 00						.BYTE $00
   395 BE44 00						.BYTE $00
   395 BE45 00						.BYTE $00
   395 BE46 00						.BYTE $00
   395 BE47 00						.BYTE $00
   395 BE48 00						.BYTE $00
   395 BE49 00						.BYTE $00
   395 BE4A 00						.BYTE $00
   395 BE4B 00						.BYTE $00
   395 BE4C 00						.BYTE $00
   395 BE4D 00						.BYTE $00
   395 BE4E 00						.BYTE $00
   395 BE4F 00						.BYTE $00
   395 BE50 00						.BYTE $00
   395 BE51 00						.BYTE $00
   395 BE52 00						.BYTE $00
   395 BE53 00						.BYTE $00
   395 BE54 00						.BYTE $00
   395 BE55 00						.BYTE $00
   395 BE56 00						.BYTE $00
   395 BE57 00						.BYTE $00
   395 BE58 00						.BYTE $00
   395 BE59 00						.BYTE $00
   395 BE5A 00						.BYTE $00
   395 BE5B 00						.BYTE $00
   395 BE5C 00						.BYTE $00
   395 BE5D 00						.BYTE $00
   395 BE5E 00						.BYTE $00
   395 BE5F 00						.BYTE $00
   395 BE60 00						.BYTE $00
   395 BE61 00						.BYTE $00
   395 BE62 00						.BYTE $00
   395 BE63 00						.BYTE $00
   395 BE64 00						.BYTE $00
   395 BE65 00						.BYTE $00
   395 BE66 00						.BYTE $00
   395 BE67 00						.BYTE $00
   395 BE68 00						.BYTE $00
   395 BE69 00						.BYTE $00
   395 BE6A 00						.BYTE $00
   395 BE6B 00						.BYTE $00
   395 BE6C 00						.BYTE $00
   395 BE6D 00						.BYTE $00
   395 BE6E 00						.BYTE $00
   395 BE6F 00						.BYTE $00
   395 BE70 00						.BYTE $00
   395 BE71 00						.BYTE $00
   395 BE72 00						.BYTE $00
   395 BE73 00						.BYTE $00
   395 BE74 00						.BYTE $00
   395 BE75 00						.BYTE $00
   395 BE76 00						.BYTE $00
   395 BE77 00						.BYTE $00
   395 BE78 00						.BYTE $00
   395 BE79 00						.BYTE $00
   395 BE7A 00						.BYTE $00
   395 BE7B 00						.BYTE $00
   395 BE7C 00						.BYTE $00
   395 BE7D 00						.BYTE $00
   395 BE7E 00						.BYTE $00
   395 BE7F 00						.BYTE $00
   395 BE80 00						.BYTE $00
   395 BE81 00						.BYTE $00
   395 BE82 00						.BYTE $00
   395 BE83 00						.BYTE $00
   395 BE84 00						.BYTE $00
   395 BE85 00						.BYTE $00
   395 BE86 00						.BYTE $00
   395 BE87 00						.BYTE $00
   395 BE88 00						.BYTE $00
   395 BE89 00						.BYTE $00
   395 BE8A 00						.BYTE $00
   395 BE8B 00						.BYTE $00
   395 BE8C 00						.BYTE $00
   395 BE8D 00						.BYTE $00
   395 BE8E 00						.BYTE $00
   395 BE8F 00						.BYTE $00
   395 BE90 00						.BYTE $00
   395 BE91 00						.BYTE $00
   395 BE92 00						.BYTE $00
   395 BE93 00						.BYTE $00
   395 BE94 00						.BYTE $00
   395 BE95 00						.BYTE $00
   395 BE96 00						.BYTE $00
   395 BE97 00						.BYTE $00
   395 BE98 00						.BYTE $00
   395 BE99 00						.BYTE $00
   395 BE9A 00						.BYTE $00
   395 BE9B 00						.BYTE $00
   395 BE9C 00						.BYTE $00
   395 BE9D 00						.BYTE $00
   395 BE9E 00						.BYTE $00
   395 BE9F 00						.BYTE $00
   395 BEA0 00						.BYTE $00
   395 BEA1 00						.BYTE $00
   395 BEA2 00						.BYTE $00
   395 BEA3 00						.BYTE $00
   395 BEA4 00						.BYTE $00
   395 BEA5 00						.BYTE $00
   395 BEA6 00						.BYTE $00
   395 BEA7 00						.BYTE $00
   395 BEA8 00						.BYTE $00
   395 BEA9 00						.BYTE $00
   395 BEAA 00						.BYTE $00
   395 BEAB 00						.BYTE $00
   395 BEAC 00						.BYTE $00
   395 BEAD 00						.BYTE $00
   395 BEAE 00						.BYTE $00
   395 BEAF 00						.BYTE $00
   395 BEB0 00						.BYTE $00
   395 BEB1 00						.BYTE $00
   395 BEB2 00						.BYTE $00
   395 BEB3 00						.BYTE $00
   395 BEB4 00						.BYTE $00
   395 BEB5 00						.BYTE $00
   395 BEB6 00						.BYTE $00
   395 BEB7 00						.BYTE $00
   395 BEB8 00						.BYTE $00
   395 BEB9 00						.BYTE $00
   395 BEBA 00						.BYTE $00
   395 BEBB 00						.BYTE $00
   395 BEBC 00						.BYTE $00
   395 BEBD 00						.BYTE $00
   395 BEBE 00						.BYTE $00
   395 BEBF 00						.BYTE $00
   395 BEC0 00						.BYTE $00
   395 BEC1 00						.BYTE $00
   395 BEC2 00						.BYTE $00
   395 BEC3 00						.BYTE $00
   395 BEC4 00						.BYTE $00
   395 BEC5 00						.BYTE $00
   395 BEC6 00						.BYTE $00
   395 BEC7 00						.BYTE $00
   395 BEC8 00						.BYTE $00
   395 BEC9 00						.BYTE $00
   395 BECA 00						.BYTE $00
   395 BECB 00						.BYTE $00
   395 BECC 00						.BYTE $00
   395 BECD 00						.BYTE $00
   395 BECE 00						.BYTE $00
   395 BECF 00						.BYTE $00
   395 BED0 00						.BYTE $00
   395 BED1 00						.BYTE $00
   395 BED2 00						.BYTE $00
   395 BED3 00						.BYTE $00
   395 BED4 00						.BYTE $00
   395 BED5 00						.BYTE $00
   395 BED6 00						.BYTE $00
   395 BED7 00						.BYTE $00
   395 BED8 00						.BYTE $00
   395 BED9 00						.BYTE $00
   395 BEDA 00						.BYTE $00
   395 BEDB 00						.BYTE $00
   395 BEDC 00						.BYTE $00
   395 BEDD 00						.BYTE $00
   395 BEDE 00						.BYTE $00
   395 BEDF 00						.BYTE $00
   395 BEE0 00						.BYTE $00
   395 BEE1 00						.BYTE $00
   395 BEE2 00						.BYTE $00
   395 BEE3 00						.BYTE $00
   395 BEE4 00						.BYTE $00
   395 BEE5 00						.BYTE $00
   395 BEE6 00						.BYTE $00
   395 BEE7 00						.BYTE $00
   395 BEE8 00						.BYTE $00
   395 BEE9 00						.BYTE $00
   395 BEEA 00						.BYTE $00
   395 BEEB 00						.BYTE $00
   395 BEEC 00						.BYTE $00
   395 BEED 00						.BYTE $00
   395 BEEE 00						.BYTE $00
   395 BEEF 00						.BYTE $00
   395 BEF0 00						.BYTE $00
   395 BEF1 00						.BYTE $00
   395 BEF2 00						.BYTE $00
   395 BEF3 00						.BYTE $00
   395 BEF4 00						.BYTE $00
   395 BEF5 00						.BYTE $00
   395 BEF6 00						.BYTE $00
   395 BEF7 00						.BYTE $00
   395 BEF8 00						.BYTE $00
   395 BEF9 00						.BYTE $00
   395 BEFA 00						.BYTE $00
   395 BEFB 00						.BYTE $00
   395 BEFC 00						.BYTE $00
   395 BEFD 00						.BYTE $00
   395 BEFE 00						.BYTE $00
   395 BEFF 00						.BYTE $00
   395 BF00 00						.BYTE $00
   395 BF01 00						.BYTE $00
   395 BF02 00						.BYTE $00
   395 BF03 00						.BYTE $00
   395 BF04 00						.BYTE $00
   395 BF05 00						.BYTE $00
   395 BF06 00						.BYTE $00
   395 BF07 00						.BYTE $00
   395 BF08 00						.BYTE $00
   395 BF09 00						.BYTE $00
   395 BF0A 00						.BYTE $00
   395 BF0B 00						.BYTE $00
   395 BF0C 00						.BYTE $00
   395 BF0D 00						.BYTE $00
   395 BF0E 00						.BYTE $00
   395 BF0F 00						.BYTE $00
   395 BF10 00						.BYTE $00
   395 BF11 00						.BYTE $00
   395 BF12 00						.BYTE $00
   395 BF13 00						.BYTE $00
   395 BF14 00						.BYTE $00
   395 BF15 00						.BYTE $00
   395 BF16 00						.BYTE $00
   395 BF17 00						.BYTE $00
   395 BF18 00						.BYTE $00
   395 BF19 00						.BYTE $00
   395 BF1A 00						.BYTE $00
   395 BF1B 00						.BYTE $00
   395 BF1C 00						.BYTE $00
   395 BF1D 00						.BYTE $00
   395 BF1E 00						.BYTE $00
   395 BF1F 00						.BYTE $00
   395 BF20 00						.BYTE $00
   395 BF21 00						.BYTE $00
   395 BF22 00						.BYTE $00
   395 BF23 00						.BYTE $00
   395 BF24 00						.BYTE $00
   395 BF25 00						.BYTE $00
   395 BF26 00						.BYTE $00
   395 BF27 00						.BYTE $00
   395 BF28 00						.BYTE $00
   395 BF29 00						.BYTE $00
   395 BF2A 00						.BYTE $00
   395 BF2B 00						.BYTE $00
   395 BF2C 00						.BYTE $00
   395 BF2D 00						.BYTE $00
   395 BF2E 00						.BYTE $00
   395 BF2F 00						.BYTE $00
   395 BF30 00						.BYTE $00
   395 BF31 00						.BYTE $00
   395 BF32 00						.BYTE $00
   395 BF33 00						.BYTE $00
   395 BF34 00						.BYTE $00
   395 BF35 00						.BYTE $00
   395 BF36 00						.BYTE $00
   395 BF37 00						.BYTE $00
   395 BF38 00						.BYTE $00
   395 BF39 00						.BYTE $00
   395 BF3A 00						.BYTE $00
   395 BF3B 00						.BYTE $00
   395 BF3C 00						.BYTE $00
   395 BF3D 00						.BYTE $00
   395 BF3E 00						.BYTE $00
   395 BF3F 00						.BYTE $00
   395 BF40 00						.BYTE $00
   395 BF41 00						.BYTE $00
   395 BF42 00						.BYTE $00
   395 BF43 00						.BYTE $00
   395 BF44 00						.BYTE $00
   395 BF45 00						.BYTE $00
   395 BF46 00						.BYTE $00
   395 BF47 00						.BYTE $00
   395 BF48 00						.BYTE $00
   395 BF49 00						.BYTE $00
   395 BF4A 00						.BYTE $00
   395 BF4B 00						.BYTE $00
   395 BF4C 00						.BYTE $00
   395 BF4D 00						.BYTE $00
   395 BF4E 00						.BYTE $00
   395 BF4F 00						.BYTE $00
   395 BF50 00						.BYTE $00
   395 BF51 00						.BYTE $00
   395 BF52 00						.BYTE $00
   395 BF53 00						.BYTE $00
   395 BF54 00						.BYTE $00
   395 BF55 00						.BYTE $00
   395 BF56 00						.BYTE $00
   395 BF57 00						.BYTE $00
   395 BF58 00						.BYTE $00
   395 BF59 00						.BYTE $00
   395 BF5A 00						.BYTE $00
   395 BF5B 00						.BYTE $00
   395 BF5C 00						.BYTE $00
   395 BF5D 00						.BYTE $00
   395 BF5E 00						.BYTE $00
   395 BF5F 00						.BYTE $00
   395 BF60 00						.BYTE $00
   395 BF61 00						.BYTE $00
   395 BF62 00						.BYTE $00
   395 BF63 00						.BYTE $00
   395 BF64 00						.BYTE $00
   395 BF65 00						.BYTE $00
   395 BF66 00						.BYTE $00
   395 BF67 00						.BYTE $00
   395 BF68 00						.BYTE $00
   395 BF69 00						.BYTE $00
   395 BF6A 00						.BYTE $00
   395 BF6B 00						.BYTE $00
   395 BF6C 00						.BYTE $00
   395 BF6D 00						.BYTE $00
   395 BF6E 00						.BYTE $00
   395 BF6F 00						.BYTE $00
   395 BF70 00						.BYTE $00
   395 BF71 00						.BYTE $00
   395 BF72 00						.BYTE $00
   395 BF73 00						.BYTE $00
   395 BF74 00						.BYTE $00
   395 BF75 00						.BYTE $00
   395 BF76 00						.BYTE $00
   395 BF77 00						.BYTE $00
   395 BF78 00						.BYTE $00
   395 BF79 00						.BYTE $00
   395 BF7A 00						.BYTE $00
   395 BF7B 00						.BYTE $00
   395 BF7C 00						.BYTE $00
   395 BF7D 00						.BYTE $00
   395 BF7E 00						.BYTE $00
   395 BF7F 00						.BYTE $00
   395 BF80 00						.BYTE $00
   395 BF81 00						.BYTE $00
   395 BF82 00						.BYTE $00
   395 BF83 00						.BYTE $00
   395 BF84 00						.BYTE $00
   395 BF85 00						.BYTE $00
   395 BF86 00						.BYTE $00
   395 BF87 00						.BYTE $00
   395 BF88 00						.BYTE $00
   395 BF89 00						.BYTE $00
   395 BF8A 00						.BYTE $00
   395 BF8B 00						.BYTE $00
   395 BF8C 00						.BYTE $00
   395 BF8D 00						.BYTE $00
   395 BF8E 00						.BYTE $00
   395 BF8F 00						.BYTE $00
   395 BF90 00						.BYTE $00
   395 BF91 00						.BYTE $00
   395 BF92 00						.BYTE $00
   395 BF93 00						.BYTE $00
   395 BF94 00						.BYTE $00
   395 BF95 00						.BYTE $00
   395 BF96 00						.BYTE $00
   395 BF97 00						.BYTE $00
   395 BF98 00						.BYTE $00
   395 BF99 00						.BYTE $00
   395 BF9A 00						.BYTE $00
   395 BF9B 00						.BYTE $00
   395 BF9C 00						.BYTE $00
   395 BF9D 00						.BYTE $00
   395 BF9E 00						.BYTE $00
   395 BF9F 00						.BYTE $00
   395 BFA0 00						.BYTE $00
   395 BFA1 00						.BYTE $00
   395 BFA2 00						.BYTE $00
   395 BFA3 00						.BYTE $00
   395 BFA4 00						.BYTE $00
   395 BFA5 00						.BYTE $00
   395 BFA6 00						.BYTE $00
   395 BFA7 00						.BYTE $00
   395 BFA8 00						.BYTE $00
   395 BFA9 00						.BYTE $00
   395 BFAA 00						.BYTE $00
   395 BFAB 00						.BYTE $00
   395 BFAC 00						.BYTE $00
   395 BFAD 00						.BYTE $00
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   397 					
   398 						; add extra line info to avoid problem with ladder in the last line	
   399 BFAE 61 61 61 61 61 61 + 		:LEVEL_CHAR_SIZE_X 		.byte $61
   400
   401 				;*****	Run Address
   402 				;
   403 02E0-02E1> 00 48				run InitSystem

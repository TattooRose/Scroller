mads 2.0.7
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Scroller.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	1 page 				= 256 bytes
    14 				;	1 K	   				= 004 pages - 1024 bytes	 
    15 				;	2 K	   				= 008 pages - 2048 bytes	 
    16 				;	3 K	   				= 012 pages - 3072 bytes	 
    17 				;	4 K	   				= 016 pages - 4096 bytes	 
    18 				;
    19 				;***** Memory Map - Atari 64K
    20 				;
    21 				;	$0000-$007F			zeropage for OS
    22 				;	$0080-$00FF 		zeropage for you
    23 				;	$0100-$01FF 		CPU stack
    24 				;	$0200-$02FF 		OS vector, registers
    25 				;	$0300-$03FF 		OS vector, registers
    26 				;	$0400-$05FF 		OS buffers
    27 				;	$0600-$06FF 		Page 6, object code in BASIC
    28 				;	$0700-$1FFF 		Disk Operating System
    29 				;	$2000-$7FFF 		User Code Area 
    30 				;	$8000-$BFFF 		Cartrige A and B slots
    31 				;	$C000-$CBFF 		OS part 1
    32 				;	$CC00-$CFFF 		OS character set, international
    33 				;	$D000-$D7FF			Hardware registers
    34 				;	$D800-$DFFF			FP Routines
    35 				;	$E000-$E3FF 		OS character set, standard
    36 				;	$E000-$FFFF 		OS part 2
    37 				;
    38 				;***** Include Library Files
    39 				;
    40 						icl "/Lib/AtariEquates.Asm"				; Atari hardware DOS,OS,ANTIC,GITA,POKEY,PIA equates
Source: E:\_8BitProjects\Series\Scroller\\Lib\AtariEquates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AtariEquates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************
    14 				; OS memory and vectors
    15 				;
    16 = 0012			RTCLOK 						= $12 				; and $13, and $14.  
    17 = 0014			RTCLOK60 					= $14 				; incremented every jiffy/frame.
    18
    19 = 004D			ATRACT 						= $4D
    20 = 0200			VDSLST 						= $0200 			; Display List interrupt.
    21
    22 				;
    23 				;**************************************************
    24 				; DOS - Misc values related to DOS and file loading
    25 				;
    26 = 2000			LOMEM_DOS 					= $2000 			; First usable memory after DOS
    27 = 3308			LOMEM_DOS_DUP 				= $3308 			; First usable memory after DOS and DUP 
    28
    29 				;**************************************************	
    30 				; Atari RUN ADDRESS.  
    31 				;
    32 				; 	The binary load file has a segmented structure 
    33 				; 	specifying starting address, and ending address, 
    34 				; 	followed by the bytes to load in that memory range.  
    35 				;
    36 				; 	DOS observes two special addresses when loading data.
    37 				; 	If the contents of the INIT address changes ater loading
    38 				; 	a segment DOS calls that address immediately. If the routine
    39 				; 	returns to DOS cleanly then file loading continues.
    40 				;
    41 				; 	If the contents of the RUN address changes DOS waits until
    42 				; 	all segments from the file are loaded and then calls the RUN
    43 				; 	address target.
    44 				;
    45 = 02E0			DOS_RUN_ADDR 				= $02e0				; Execute here when file loading completes.
    46 = 02E2			DOS_INIT_ADDR 				= $02e2				; Execute here immediately then resume loading.
    47
    48 				;**************************************************	
    49 				; ANTIC - Register List
    50 				;
    51 = D400			DMACTL 						= $D400				; DMA control for display and Player/Missile graphics
    52 = D401			CHACTL 						= $D401				; Character display control
    53 = D402			DLISTL 						= $D402				; Display List Pointer (low)
    54 = D403			DLISTH 						= $D403				; Display List Pointer (high)
    55 = D404			HSCROL 						= $D404				; Horizontal Fine Scroll 0 to 16 color clocks.
    56 = D405			VSCROL 						= $D405				; Vertical Fine Scroll 0 to 16 scanlines.
    57 = D407			PMBASE 						= $D407				; Player/Missile Base Address (high) 
    58 = D409			CHBASE 						= $D409				; Character Set Base Address (high)
    59 = D40A			WSYNC 						= $D40A				; Wait for Horizontal Sync
    60 = D40B			VCOUNT 						= $D40B				; (Read) Vertical Scan Line Counter
    61 = D40C			PENH 						= $D40C				; (Read) Light Pen Horizontal Position
    62 = D40D			PENV 						= $D40D				; (Read) Light Pen Vertical Position
    63 = D40E			NMIEN 						= $D40E				; Non-Maskable Interupt (NMI) Enable
    64 = D40F			NMIRES 						= $D40F				; (Write) Non-Maskable Interrupt (NMI) Reset
    65 = D40F			NMIST 						= $D40F				; (Read)  Non-Maskable Interrupt Status                   	
    66 				                   	;
    67 				;**************************************************
    68 				; Handler vectors:
    69 				;
    70 = FFFA			NMIH_VECTOR					= $FFFA
    71 = FFFC			RESH_VECTOR					= $FFFC
    72 = FFFE			IRQH_VECTOR					= $FFFE
    73
    74 				;**************************************************	
    75 				; Shadow Registers for Hardware Registers
    76 				;
    77 = 022F			SDMCTL 						= $022F 			; DMACTL
    78 = 0230			SDLSTL 						= $0230 			; DLISTL
    79 = 0231			SDLSTH 						= $0231 			; DLISTH
    80 = 02F4			CHBAS 						= $02F4 			; CHBASE
    81 = 02F3			CHART 						= $02F3 			; CHACTL
    82 = 0234			LPENH 						= $0234 			; (Read) PENH
    83 = 0235			LPENV 						= $0235 			; (Read) PENV
    84
    85 				;**************************************************	
    86 				; Important Bit Positions
    87 				;
    88 				;**************************************************
    89 				; DMACTL and SDMCTL - DMA control for display and Player/Missile graphics
    90 				;
    91 = 00DF			MASK_DL_DMA 				= %11011111			; Enable/Disable DMA to read the Display List
    92 = 00EF			MASK_PM_RESOLUTION 			= %11101111			; Set P/M graphics DMA to 1 or 2 scan line per update  
    93 = 00F3			MASK_PM_DMA 				= %11110011			; Enable/Disable DMA for Players/Missiles
    94 = 00FC			MASK_PLAYFIELD_WIDTH 		= %11111100			; Enable playfield display/set playfield width
    95
    96 				;**************************************************	
    97 				; DMACTL and SDMCTL - Enable/Disable DMA to read the Display List
    98 				;
    99 = 0020			ENABLE_DL_DMA 				= %00100000
   100 = 0000			DISABLE_DL_DMA 				= %00000000			; defining this is overkill
   101
   102 				;**************************************************	
   103 				; DMACTL and SDMCTL - Set P/M graphics DMA to 1 or 2 scan line per update  
   104 				;
   105 = 0010			PM_1LINE_RESOLUTION 		= %00010000
   106 = 0000			PM_2LINE_RESOLUTION 		= %00000000
   107
   108 				;**************************************************	
   109 				; DMACTL and SDMCTL - Enable DMA for Players/Missiles
   110 				;
   111 = 0008			ENABLE_PLAYER_DMA 			= %00001000
   112 = 0004			ENABLE_MISSILE_DMA 			= %00000100
   113 = 000C			ENABLE_PM_DMA 				= %00001100
   114
   115 				;**************************************************	
   116 				; DMACTL and SDMCTL - Enable playfield display/set playfield width
   117 				;
   118 = 0000			PLAYFIELD_DISABLE 			= %00000000			; No width is the same as no display
   119 = 0001			PLAYFIELD_WIDTH_NARROW_MASK	= %00000001			; 32 characters/128 color clocks
   120 = 0002			PLAYFIELD_WIDTH_NORMAL_MASK	= %00000010			; 40 characters/160 color clocks
   121 = 0003			PLAYFIELD_WIDTH_WIDE_MASK	= %00000011			; 48 characters/192 color clocks (176 visible)
   122
   123 				;**************************************************	
   124 				; CHACTL - Character display control
   125 				;
   126 = 00FB			MASK_CHACTL_REFLECT 		= %11111011			; Enable/Disable vertical reflect
   127 = 00FD			MASK_CHACTL_INVERSE 		= %11111101			; Enable/Disable characters with high bit set displayed as inverse 
   128 = 00FE			MASK_CHACTL_BLANK 			= %11111110			; Enable/Disable characters with high bit set displayed as blank space
   129
   130 				;**************************************************	
   131 				; CHACTL - Enable character display options
   132 				; 
   133 = 0004			CHACTL_REFLECT 				= %00000100 		; Enable vertical reflect
   134 = 0002			CHACTL_INVERSE 				= %00000010 		; Enable inverse display for characters with high bit set
   135 = 0001			CHACTL_BLANK 				= %00000001 		; Enable blank display for characters with high bit set
   136
   137 				;**************************************************	
   138 				; NMIEN (NMIRES and NMIST) - Non-Maskable Interupt (NMI) Reset and Status
   139 				;
   140 = 007F			MASK_NMI_DLI 				= %01111111 		; Enable/Disable Display List Interrupts
   141 = 00BF			MASK_NMI_VBI 				= %10111111 		; Enable/Disable Vertical Blank Interrupt
   142 = 00DF			MASK_NMI_RESET 				= %11011111 		; Enable/Disable Reset Key Interrupt
   143
   144 				;**************************************************	
   145 				; NMIEN (NMIRES and NMIST) - Enable Non-Maskable Interupts
   146 				;
   147 = 0080			NMI_DLI 					= %10000000 		; Enable Display List Interrupts
   148 = 0040			NMI_VBI 					= %01000000 		; Enable Vertical Blank Interrupt
   149 = 0020			NMI_RESET 					= %00100000 		; Enable Reset Key Interrupt
   150
   151 				;**************************************************	
   152 				; Display List Instructions/Options Mask
   153 				;
   154 = 007F			MASK_DL_DLI 				= %01111111 		; Display List Interrupt on last scan line of graphics line
   155 = 00BF			MASK_DL_LMS 				= %10111111 		; Reload Memory Scan address for this graphics line
   156 = 00DF			MASK_DL_VSCROLL 			= %11011111 		; Vertical scrolling for this graphics line
   157 = 00EF			MASK_DL_HSCROLL 			= %11101111 		; Horizontal scrolling for this graphics line
   158 = 00F0			MASK_DL_MODE 				= %11110000 		; Text/Graphics Modes
   159
   160 				;**************************************************	
   161 				; Display List Instruction Options
   162 				;
   163 = 0080			DL_DLI 						= %10000000 		; Enable Display List Interrupt on last scan line of graphics line
   164 = 0040			DL_LMS 						= %01000000 		; Enable Reload Memory Scan address for this graphics line
   165 = 0020			DL_VSCROLL 					= %00100000 		; Enable Vertical scrolling for this graphics line
   166 = 0010			DL_HSCROLL 					= %00010000 		; Enable Horizontal scrolling for this graphics line
   167 = 000F			DL_MODE 					= %00001111 		; Collection of Text/Graphics Modes
   168
   169 				;**************************************************	
   170 				; Display List Instructions, Jump 
   171 				;
   172 = 0001			DL_JUMP 					= $01				; Display List jump to new address
   173 = 0041			DL_JUMP_VB 					= $41				; Display List jump to address and start Vertical Blank
   174 				                        	
   175 				;**************************************************	
   176 				; Display List Instructions, blank scan lines
   177 				;
   178 				; 	Note: Bit $80 is not part of this, so the
   179 				; 	DL_DLI Instruction Option is available for 
   180 				; 	the blank line instructions.
   181 				;
   182 = 0000			DL_BLANK_1 					= $00 				; 1 Blank Scan line
   183 = 0010			DL_BLANK_2 					= $10 				; 2 Blank Scan lines
   184 = 0020			DL_BLANK_3 					= $20 				; 3 Blank Scan lines
   185 = 0030			DL_BLANK_4 					= $30 				; 4 Blank Scan lines
   186 = 0040			DL_BLANK_5 					= $40 				; 5 Blank Scan lines
   187 = 0050			DL_BLANK_6 					= $50 				; 6 Blank Scan lines
   188 = 0060			DL_BLANK_7 					= $60 				; 7 Blank Scan lines
   189 = 0070			DL_BLANK_8 					= $70 				; 8 Blank Scan lines
   190
   191 				;**************************************************	
   192 				; Display List Instructions, Text Modes
   193 				;
   194 = 0002			DL_TEXT_2 					= $02 				; 1.5 Color, 40 Columns X  8 Scan lines
   195 = 0003			DL_TEXT_3 					= $03 				; 1.5 Color, 40 Columns X 10 Scan lines
   196 = 0004			DL_TEXT_4 					= $04 				; 4/5 Color, 40 Columns X  8 Scan lines
   197 = 0005			DL_TEXT_5 					= $05 				; 4/5 Color, 40 Columns X 16 Scan lines
   198 = 0006			DL_TEXT_6 					= $06 				;   5 Color, 20 Columns X  8 Scan lines
   199 = 0007			DL_TEXT_7 					= $07 				;   5 Color, 20 Columns X 16 Scan lines
   200
   201 				;**************************************************	
   202 				; Display List Instructions, Map Modes
   203 				;
   204 = 0008			DL_MAP_8 					= $08 				;   4 Color,  40 Pixels X   8 Scan Lines
   205 = 0009			DL_MAP_9 					= $09 				;   2 Color,  80 Pixels X   4 Scan Lines
   206 = 000A			DL_MAP_A 					= $0A 				;   4 Color,  80 Pixels X   4 Scan Lines
   207 = 000B			DL_MAP_B 					= $0B 				;   2 Color, 160 Pixels X   2 Scan Lines
   208 = 000C			DL_MAP_C 					= $0C 				;   2 Color, 160 Pixels X   1 Scan Lines
   209 = 000D			DL_MAP_D 					= $0D 				;   4 Color, 160 Pixels X   2 Scan Lines
   210 = 000E			DL_MAP_E 					= $0E 				;   4 Color, 160 Pixels X   1 Scan Lines
   211 = 000F			DL_MAP_F 					= $0F 				; 1.5 Color, 320 Pixels X   1 Scan Lines (and GTIA modes)
   212
   213 				;**************************************************	
   214 				; GTIA - Register List
   215 				;
   216 				;**************************************************	
   217 				; Hardware Registers
   218 				;
   219 = D000			HPOSP0 						= $D000 			; Player 0 Horizontal Position
   220 = D001			HPOSP1 						= $D001 			; Player 1 Horizontal Position
   221 = D002			HPOSP2 						= $D002 			; Player 2 Horizontal Position
   222 = D003			HPOSP3 						= $D003 			; Player 3 Horizontal Position
   223 				                        	
   224 = D004			HPOSM0 						= $D004 			; Missile 0 Horizontal Position
   225 = D005			HPOSM1 						= $D005 			; Missile 1 Horizontal Position
   226 = D006			HPOSM2 						= $D006 			; Missile 2 Horizontal Position
   227 = D007			HPOSM3 						= $D007 			; Missile 3 Horizontal Position
   228 				;;     						        			
   229 = D008			SIZEP0 						= $D008 			; Player 0 Size
   230 = D009			SIZEP1 						= $D009 			; Player 1 Size
   231 = D00A			SIZEP2 						= $D00A 			; Player 2 Size
   232 = D00B			SIZEP3 						= $D00B 			; Player 3 Size
   233 = D00C			SIZEM 						= $D00C 			; Missiles Sizes (2 bits per missile)
   234 				                        	
   235 = D00D			GRAFP0 						= $D00D 			; Player 0 Graphics Pattern
   236 = D00E			GRAFP1 						= $D00E 			; Player 1 Graphics Pattern
   237 = D00F			GRAFP2 						= $D00F 			; Player 2 Graphics Pattern
   238 = D010			GRAFP3 						= $D010 			; Player 3 Graphics Pattern
   239 = D011			GRAFM 						= $D011 			; Missile Graphics Pattern (2 bits per missile)
   240 				                        	
   241 = D000			M0PF 						= $D000 			; (Read) Missile 0 to Playfield collisions
   242 = D001			M1PF 						= $D001 			; (Read) Missile 1 to Playfield collisions
   243 = D002			M2PF 						= $D002 			; (Read) Missile 2 to Playfield collisions
   244 = D003			M3PF 						= $D003 			; (Read) Missile 3 to Playfield collisions
   245 				   					    	    			
   246 = D004			P0PF 						= $D004 			; (Read) Player 0 to Playfield collisions
   247 = D005			P1PF 						= $D005 			; (Read) Player 1 to Playfield collisions
   248 = D006			P2PF 						= $D006 			; (Read) Player 2 to Playfield collisions
   249 = D007			P3PF 						= $D007 			; (Read) Player 3 to Playfield collisions
   250 				   					    	    			
   251 = D008			M0PL 						= $D008 			; (Read) Missile 0 to Player collisions
   252 = D009			M1PL 						= $D009 			; (Read) Missile 1 to Player collisions
   253 = D00A			M2PL 						= $D00A 			; (Read) Missile 2 to Player collisions
   254 = D00B			M3PL 						= $D00B 			; (Read) Missile 3 to Player collisions
   255 				   					    	    			
   256 = D00C			P0PL 						= $D00C 			; (Read) Player 0 to Player collisions
   257 = D00D			P1PL 						= $D00D 			; (Read) Player 1 to Player collisions
   258 = D00E			P2PL 						= $D00E 			; (Read) Player 2 to Player collisions
   259 = D00F			P3PL 						= $D00F 			; (Read) Player 3 to Player collisions
   260 				                        	
   261 = D012			COLPM0 						= $D012 			; Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   262 = D013			COLPM1 						= $D013 			; Player/Missile 1 color, GTIA 9-color playfield color 1
   263 = D014			COLPM2 						= $D014 			; Player/Missile 2 color, GTIA 9-color playfield color 2
   264 = D015			COLPM3 						= $D015 			; Player/Missile 3 color, GTIA 9-color playfield color 3
   265 				       						        			
   266 = D016			COLPF0 						= $D016 			; Playfield 0 color
   267 = D017			COLPF1 						= $D017 			; Playfield 1 color
   268 = D018			COLPF2 						= $D018 			; Playfield 2 color
   269 = D019			COLPF3 						= $D019 			; Playfield 3 color (and fifth Player color)
   270 = D01A			COLBK 						= $D01A 			; Playfield Background color
   271 				                        	
   272 = D010			TRIG0 						= $D010 			; (Read) Joystick 0 trigger
   273 = D011			TRIG1 						= $D011 			; (Read) Joystick 1 trigger
   274 = D012			TRIG2 						= $D012 			; (Read) Joystick 2 trigger
   275 = D013			TRIG3 						= $D013 			; (Read) Joystick 3 trigger
   276 				    						        				
   277 = D014			PAL    						= $D014 			; (Read) PAL Flag
   278 = D01B			PRIOR  						= $D01B 			; Control Priority, Fifth Player and GTIA modes
   279 = D01C			VDELAY 						= $D01C 			; Player Missile Vertical Delay
   280 = D01D			GRACTL 						= $D01D 			; Graphics Control, P/M DMA and joystick trigger latches
   281 = D01E			HITCLR 						= $D01E 			; Clear Player/Missile Collisions
   282 				     						        			
   283 = D01F			CONSOL 						= $D01F 			; (Read) Start, Select, Option console keys.
   284 = D01F			CONSPK 						= $D01F 			; Console speaker.
   285
   286 				;**************************************************	
   287 				; Shadow Registers for Hardware Registers
   288 				;
   289 = 0284			STRIG0 						= $0284				; (Read) TRIG0 - Joystick 0 trigger
   290 = 0285			STRIG1 						= $0285				; (Read) TRIG1 - Joystick 1 trigger
   291 = 0286			STRIG2 						= $0286				; (Read) TRIG2 - Joystick 2 trigger
   292 = 0287			STRIG3 						= $0287				; (Read) TRIG3 - Joystick 3 trigger
   293 				                        	
   294 = 02C0			PCOLOR0 					= $02C0				; COLPM0 - Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   295 = 02C1			PCOLOR1 					= $02C1				; COLPM1 - Player/Missile 1 color, GTIA 9-color playfield color 1
   296 = 02C2			PCOLOR2 					= $02C2				; COLPM2 - Player/Missile 2 color, GTIA 9-color playfield color 2
   297 = 02C3			PCOLOR3 					= $02C3				; COLPM3 - Player/Missile 3 color, GTIA 9-color playfield color 3
   298 				                      	
   299 = 02C4			COLOR0 						= $02C4				; COLPF0 - Playfield 0 color
   300 = 02C5			COLOR1 						= $02C5				; COLPF1 - Playfield 1 color
   301 = 02C6			COLOR2 						= $02C6				; COLPF2 - Playfield 2 color
   302 = 02C7			COLOR3 						= $02C7				; COLPF3 - Playfield 3 color (and fifth Player color)
   303 = 02C8			COLOR4 						= $02C8				; COLBK  - Playfield Background color
   304 				     						        				
   305 = 026F			GPRIOR 						= $026F				; PRIOR - Control Priority, Fifth Player and GTIA modes
   306
   307 				;**************************************************	
   308 				; Important Bit Positions
   309 				;		
   310 				;	SIZEP0 - SIZEP3
   311 				;
   312 = 0003			PLAYER_SIZE_BITS 			= %00000011
   313 = 0000			PM_SIZE_NORMAL 				= %00000000 		; One color clock per Player/Missile pixel
   314 = 0001			PM_SIZE_DOUBLE 				= %00000001 		; Two color clocks per Player/Missile pixel
   315 = 0003			PM_SIZE_QUAD 				= %00000011 		; Fopur color clocks per Player/Missile pixel
   316
   317 				;**************************************************	
   318 				; SIZEM and GRAFM (and missile memory)
   319 				;
   320 = 00FC			MASK_MISSILE0_BITS 			= %11111100
   321 = 00F3			MASK_MISSILE1_BITS 			= %11110011
   322 = 00CF			MASK_MISSILE2_BITS 			= %11001111
   323 = 003F			MASK_MISSILE3_BITS 			= %00111111
   324 				                        	
   325 = 0003			MISSILE0_BITS 				= %00000011
   326 = 000C			MISSILE1_BITS 				= %00001100
   327 = 0030			MISSILE2_BITS 				= %00110000
   328 = 00C0			MISSILE3_BITS 				= %11000000
   329 = 0055			MISSILES_BITS				= %01010101
   330 				 
   331 				;**************************************************	
   332 				; Collisions MxPF, MxPL, PxPF, PxPL
   333 				;
   334 				; 	COLPMx or COLPFx where X is bits 0 through 3
   335 				;
   336 = 00FE			MASK_COLPMF0_BIT 			= %11111110 		; Player or Missile v Player or Playfield color 0
   337 = 00FD			MASK_COLPMF1_BIT 			= %11111101 		; Player or Missile v Player or Playfield color 1
   338 = 00FB			MASK_COLPMF2_BIT 			= %11111011 		; Player or Missile v Player or Playfield color 2
   339 = 00F7			MASK_COLPMF3_BIT 			= %11110111 		; Player or Missile v Player or Playfield color 3
   340 				                      	
   341 = 0001			COLPMF0_BIT 				= %00000001 		; Player or Missile v Player or Playfield color 0
   342 = 0002			COLPMF1_BIT 				= %00000010 		; Player or Missile v Player or Playfield color 1
   343 = 0004			COLPMF2_BIT 				= %00000100 		; Player or Missile v Player or Playfield color 2
   344 = 0008			COLPMF3_BIT 				= %00001000 		; Player or Missile v Player or Playfield color 3
   345
   346 				;**************************************************	
   347 				; Colors Registers
   348 				;
   349 = 00F0			COLOR_BITS 					= %11110000
   350 = 000F			LUMA_BITS 					= %00001111
   351
   352 				;**************************************************	
   353 				; PRIOR and GPRIOR - Control Priority, Fifth Player and GTIA modes
   354 				;
   355 = 00F0			MASK_PRIORITY 				= %11110000 		; Player/Missile, Playfield priority
   356 = 00EF			MASK_F.ifH_PLAYER 			= %11101111 		; Enable/Disable Fifth Player
   357 = 00DF			MASK_MULTICOLOR_PM 			= %11011111 		; Enable/Disable Player color mixing
   358 = 003F			MASK_GTIA_MODE 				= %00111111 		; Enable/Disable GTIA playfield modes
   359 				                        	           
   360 = 0001			PM_PRIORITY_1				= %00000001
   361 = 0002			PM_PRIORITY_2				= %00000010
   362 = 0004			PM_PRIORITY_3				= %00000100
   363 = 0008			PM_PRIORITY_4				= %00001000       
   364 				                 	            		
   365 = 000F			PRIORITY_BITS 				= %00001111 		; Player/Missile, Playfield priority
   366 = 0010			F.ifH_PLAYER 				= %00010000 		; Enable Fifth Player
   367 = 0020			MULTICOLOR_PM 				= %00100000 		; Enable Player color mixing
   368 				                        	            		
   369 = 0000			GTIA_MODE_DEFAULT 			= %00000000 		; Normal CTIA color interpretation
   370 = 0040			GTIA_MODE_16_SHADE 			= %01000000 		; 16 shades of background color (COLBK)
   371 = 0080			GTIA_MODE_9_COLOR 			= %10000000 		; 9 colors from registers, COLPM0 is background
   372 = 00C0			GTIA_MODE_16_COLOR 			= %11000000 		; 16 hues of brigntess of background color (COLBK)
   373
   374 				;**************************************************	
   375 				; VDELAY - Delay PM DMA to render 2 scan line Player data one scan line lower 
   376 				;
   377 = 00FE			MASK_VD_MISSILE0 			= %11111110
   378 = 00FD			MASK_VD_MISSILE1 			= %11111101
   379 = 00FB			MASK_VD_MISSILE2 			= %11111011
   380 = 00F7			MASK_VD_MISSILE3 			= %11110111
   381 = 00EF			MASK_VD_PLAYER0 			= %11101111
   382 = 00DF			MASK_VD_PLAYER1 			= %11011111
   383 = 00BF			MASK_VD_PLAYER2 			= %10111111
   384 = 007F			MASK_VD_PLAYER3 			= %01111111
   385 				                        	
   386 = 0001			VD_MISSILE0 				= %00000001
   387 = 0002			VD_MISSILE1 				= %00000010
   388 = 0004			VD_MISSILE2 				= %00000100
   389 = 0008			VD_MISSILE3 				= %00001000
   390 = 0010			VD_PLAYER0 					= %00010000
   391 = 0020			VD_PLAYER1 					= %00100000
   392 = 0040			VD_PLAYER2 					= %01000000
   393 = 0080			VD_PLAYER3 					= %10000000
   394
   395 				;**************************************************	
   396 				; GRACTL - Enable/Disable Player/Missile DMA to GRAFxx registers. And latch triggers.
   397 				;
   398 = 00FE			MASK_ENABLE_MISSILES 		= %11111110 		; Enable/Disable Missile DMA to GRAFM register
   399 = 00FD			MASK_ENABLE_PLAYERS 		= %11111101 		; Enable/Disable Player DMA to GRAFPx registers
   400 = 00FB			MASK_TRIGGER_LATCH 			= %11111011 		; Enable/Disable jostick trigger latching
   401 				                        	          		
   402 = 0001			ENABLE_MISSILES 			= %00000001 		; Enable Missile DMA to GRAFM register
   403 = 0002			ENABLE_PLAYERS 				= %00000010 		; Enable Player DMA to GRAFPx registers
   404 = 0004			TRIGGER_LATCH 				= %00000100 		; Enable joystick trigger latching
   405
   406 				;**************************************************	                                  			
   407 				; CONSOL and CONSPK - 0 is key pressed
   408 				;
   409 = 00F8			MASK_CONSOLE_KEYS 			= %11111000
   410 = 00FE			MASK_CONSOLE_START 			= %11111110 		; Start button
   411 = 00FD			MASK_CONSOLE_SELECT 		= %11111101 		; Select button
   412 = 00FB			MASK_CONSOLE_OPTION 		= %11111011 		; Option button
   413 = 00F7			MASK_CONSOLE_SPEAKER 		= %11110111 		; (Write) Keyboard speaker
   414 				                        	
   415 = 0001			CONSOLE_START 				= %00000001 		; Start button
   416 = 0002			CONSOLE_SELECT 				= %00000010 		; Select button
   417 = 0004			CONSOLE_OPTION 				= %00000100 		; Option button
   418 = 0008			CONSOLE_SPEAKER 			= %00001000 		; (Wrie) Keyboard speaker
   419
   420 				;**************************************************
   421 				; Other Value Lists 
   422 				;
   423 				; 	Sizes in horizontal color clocks and vertical scan lines
   424 				;
   425 = 0080			PLAYFIELD_WIDTH_NARROW 		= %10000000			; Color Clocks Normal Width = 128
   426 = 00A0			PLAYFIELD_WIDTH_NORMAL 		= %10100000			; Color Clocks Normal Width = 160
   427 = 00B0			PLAYFIELD_WIDTH_WIDE 		= %10110000			; Color Clocks Normal Width = 176
   428
   429 = 0040			PLAYFIELD_LEFT_EDGE_NARROW 	= %01000000 		; First/left-most color clock horizontal position
   430 = 0030			PLAYFIELD_LEFT_EDGE_NORMAL 	= %00110000
   431 = 0028			PLAYFIELD_LEFT_EDGE_WIDE 	= %00101000
   432
   433 = 00BF			PLAYFIELD_RIGHT_EDGE_NARROW = %10111111 		; Last/right-most color clock horizontal position
   434 = 00CF			PLAYFIELD_RIGHT_EDGE_NORMAL = %11001111
   435 = 00D7			PLAYFIELD_RIGHT_EDGE_WIDE 	= %11010111
   436
   437 				;**************************************************	
   438 				; PMBASE offsets to Player or Missile addresses
   439 				;
   440 = 0180			PMADR_2LINE_MISSILES 		= $180 
   441 = 0200			PMADR_2LINE_PLAYER0 		= $200
   442 = 0280			PMADR_2LINE_PLAYER1 		= $280
   443 = 0300			PMADR_2LINE_PLAYER2 		= $300
   444 = 0380			PMADR_2LINE_PLAYER3 		= $380
   445
   446 = 0300			PMADR_1LINE_MISSILES 		= $300
   447 = 0400			PMADR_1LINE_PLAYER0 		= $400
   448 = 0500			PMADR_1LINE_PLAYER1 		= $500
   449 = 0600			PMADR_1LINE_PLAYER2 		= $600
   450 = 0700			PMADR_1LINE_PLAYER3 		= $700
   451
   452 				;**************************************************	
   453 				; Vertical Alignments - screen scanlines are offsets into PMADR memory locations
   454 				;
   455 = 0004			PM_2LINE_OVERSCAN_TOP 		= $04
   456 = 0010			PM_2LINE_NORMAL_TOP 		= $10 				; For default OS 192 scan line display
   457 = 006F			PM_2LINE_NORMAL_BOTTOM 		= $6F 				; For default OS 192 scan line display
   458 = 007B			PM_2LINE_OVERSCAN_BOTTOM 	= $7B
   459
   460 = 0008			PM_1LINE_OVERSCAN_TOP 		= $08
   461 = 0020			PM_1LINE_NORMAL_TOP 		= $20 				; For default OS 192 scan line display
   462 = 00DF			PM_1LINE_NORMAL_BOTTOM 		= $DF 				; For default OS 192 scan line display
   463 = 00F7			PM_1LINE_OVERSCAN_BOTTOM 	= $F7
   464
   465 				;**************************************************	
   466 				; Helpful Colors.  (Many match C64)
   467 				;
   468 = 0000			COLOR_GREY 					= $00
   469 = 0010			COLOR_ORANGE1 				= $10
   470 = 0020			COLOR_ORANGE2 				= $20
   471 = 0030			COLOR_RED_ORANGE 			= $30
   472 = 0040			COLOR_PINK 					= $40
   473 = 0050			COLOR_PURPLE 				= $50
   474 = 0060			COLOR_PURPLE_BLUE 			= $60
   475 = 0070			COLOR_BLUE1 				= $70
   476 = 0080			COLOR_BLUE2 				= $80
   477 = 0090			COLOR_LITE_BLUE 			= $90
   478 = 00A0			COLOR_AQUA 					= $A0
   479 = 00B0			COLOR_BLUE_GREEN 			= $B0
   480 = 00C0			COLOR_GREEN 				= $C0
   481 = 00D0			COLOR_YELLOW_GREEN 			= $D0
   482 = 00E0			COLOR_ORANGE_GREEN 			= $E0
   483 = 00F0			COLOR_LITE_ORANGE 			= $F0
   484 = 0000			COLOR_BLACK 				= $00				; Some like to think of first color value as black.
   485
   486 				;**************************************************
   487 				; PIA  - Register List
   488 				;
   489 				;**************************************************
   490 				; Hardware Registers                                                                                                                                                   
   491 				;                                                                                                                                                                      
   492 = D300			PORTA 						= $D300				; Joystick ports 1 and 2, STICK0 and STICK1                                                                                                               
   493 = D301			PORTB 						= $D301				; Joystick ports 3 and 4, STICK2 and STICK3                                                                                                               
   494 = D302			PACTL 						= $D302				; Port A Control                                                                                                                                          
   495 = D303			PBCTL 						= $D303				; Port B Control                                                                                                                                          
   496
   497 				;**************************************************
   498 				; Shadow Registers for Hardware Registers                                                                                                                              
   499 				;                                                                                                                                                                      
   500 = 0278			STICK0 						= $0278                                                                                                                                                          
   501 = 0279			STICK1 						= $0279                                                                                                                                                          
   502 = 027A			STICK2 						= $027A                                                                                                                                                          
   503 = 027B			STICK3 						= $027B                                                                                                                                                          
   504 				       						                                                                                                                                                               
   505 = 027C			PTRIG0 						= $027C                                                                                                                                                          
   506 = 027D			PTRIG1 						= $027D                                                                                                                                                          
   507 = 027E			PTRIG2 						= $027E                                                                                                                                                          
   508 = 027F			PTRIG3 						= $027F                                                                                                                                                          
   509 = 0280			PTRIG4 						= $0280                                                                                                                                                          
   510 = 0281			PTRIG5 						= $0281                                                                                                                                                          
   511 = 0282			PTRIG6 						= $0282                                                                                                                                                          
   512 = 0283			PTRIG7 						= $0283                                                                                                                                                          
   513
   514 				;**************************************************
   515 				; Important Bit Positions                                                                                                                                              
   516 				;                                                                                                                                                                      
   517 = 000F			MASK_JACK_1_3 				= %00001111 		; Actually the anti-mask.  Keeps bits from first controller in pair.                                                                          
   518 = 00F0			MASK_JACK_2_4 				= %11110000 		; The inverse of mask.  Keeps bits from second controller in pair.                                                                            
   519
   520 				;**************************************************
   521 				; 	Stick's bits in the high nybble should be right shifted into a low nybble for testing.                                                                               
   522 				;  	Or just use the STICKx shadow register as that is its purpose.                                                                                                      
   523 				; 	Bits for STICKx shadow regs below:                                                                                                                                   
   524 				;
   525 = 00F7			MASK_STICK_RIGHT 			= %11110111                                                                                                                                            
   526 = 00FB			MASK_STICK_LEFT 			= %11111011                                                                                                                                            
   527 = 00FD			MASK_STICK_DOWN 			= %11111101                                                                                                                                            
   528 = 00FE			MASK_STICK_UP 				= %11111110                                                                                                                                            
   529 				                                                                                                                                                                      
   530 = 0008			STICK_RIGHT 				= %00001000                                                                                                                                                 
   531 = 0004			STICK_LEFT 					= %00000100                                                                                                                                                 
   532 = 0002			STICK_DOWN 					= %00000010                                                                                                                                                 
   533 = 0001			STICK_UP 					= %00000001                                                                                                                                                 
   534
   535 				;**************************************************                                                                                                                                                                      
   536 				; PACTL and PBCTL                                                                                                                                                      
   537 				;
   538 = 007F			MASK_PORT_SERIAL_IRQ 		= %01111111 		; (Read)                                                                                                                             
   539 = 00F7			MASK_MOTOR_CONTROL 			= %11110111 		; PACTL Peripheral motor control (cassette)                                                                                          
   540 = 00F7			MASK_COMMAND_IDENT 			= %11110111 		; PBCTL Peripheral command identification                                                                                            
   541 = 00FB			MASK_PORT_ADDRESSING 		= %11111011 		; PACTL 0 = Port direction control. 1 = Read port.                                                                                   
   542 = 00FE			MASK_SERIAL_IRQ_ENABLE 		= %11111110                                                                                                                                      
   543 				                                                                                                                                                                      
   544 = 0080			PORT_SERIAL_IRQ 			= %10000000 		; (Read)                                                                                                                                  
   545 = 0008			MOTOR_CONTROL 				= %00001000 		; PACTL                                                                                                                                   
   546 = 0008			COMMAND_IDENT 				= %00001000 		; PBCTL                                                                                                                                   
   547 = 0004			PORT_ADDRESSING 			= %00000100                                                                                                                                           
   548 = 0001			SERIAL_IRQ_ENABLE 			= %00000001                                                                                                                                           
   549 				                                                                                                                                                                      
   550
   551 				;**************************************************                                                                                                                                                                      
   552 				; PBCTL for the XL                                                                                                                                                     
   553 				;
   554 = 00FE			MASK_SELECT_OS_ROM 			= %11111110 		; Turn OS ROM on and off                                                                                                            
   555 = 00FD			MASK_SELECT_BASIC_ROM 		= %11111101 		; Turn BASIC ROM on and off                                                                                                         
   556 = 00FB			MASK_LED_1_KEYBOARD 		= %11111011 		; 1200XL LED 1, enable/disable keyboard                                                                                             
   557 = 00F7			MASK_LED_2_INTL_CHARSET 	= %11110111 		; 1200XL LED 2, enable international character set                                                                                  
   558 = 007F			MASK_SELF_TEST_ROM 			= %01111111 		; Expose Self Test at $5000                                                                                                         
   559 				                                                                                                                                                                      
   560 = 0001			SELECT_OS_ROM 				= %00000001                                                                                                                                          
   561 = 0002			SELECT_BASIC_ROM 			= %00000010                                                                                                                                          
   562 = 0004			LED_1_KEYBOARD 				= %00000100                                                                                                                                          
   563 = 0008			LED_2_INTL_CHARSET 			= %00001000                                                                                                                                          
   564 = 0080			SELF_TEST_ROM 				= %10000000                                                                                                                                          
   565 				                                                
   566 				;**************************************************
   567 				; POKEY  - Register List                             
   568 				;      
   569 				;**************************************************
   570 				; Hardware Registers
   571 				;
   572 = D200			AUDF1 						= $D200 			; Audio channel 1 Frequency
   573 = D202			AUDF2 						= $D202 			; Audio channel 2 Frequency
   574 = D204			AUDF3 						= $D204 			; Audio channel 3 Frequency
   575 = D206			AUDF4 						= $D206 			; Audio channel 4 Frequency
   576 				    						        			
   577 = D201			AUDC1 						= $D201 			; Audio channel 1 Control
   578 = D203			AUDC2 						= $D203 			; Audio channel 2 Control
   579 = D205			AUDC3 						= $D205 			; Audio channel 3 Control
   580 = D207			AUDC4 						= $D207 			; Audio channel 4 Control
   581
   582 = D208			AUDCTL 						= $D208 			; Audio Control
   583
   584 = D200			POT0 						= $D200 			; (Read) Potentiometer (paddle) 0 
   585 = D201			POT1 						= $D201 			; (Read) Potentiometer (paddle) 1 
   586 = D202			POT2 						= $D202 			; (Read) Potentiometer (paddle) 2 
   587 = D203			POT3 						= $D203 			; (Read) Potentiometer (paddle) 3 
   588 = D204			POT4 						= $D204 			; (Read) Potentiometer (paddle) 4 
   589 = D205			POT5 						= $D205 			; (Read) Potentiometer (paddle) 5 
   590 = D206			POT6 						= $D206 			; (Read) Potentiometer (paddle) 6 
   591 = D207			POT7 						= $D207 			; (Read) Potentiometer (paddle) 7 
   592
   593 = D208			ALLPOT 						= $D208 			; (Read) Read 8 line POT port state
   594 = D20B			POTGO  						= $D20B 			; Start the POT scan sequence
   595 				       						        			
   596 = D209			STIMER 						= $D209 			; Start timers
   597 = D209			KBCODE 						= $D209 			; (Read) Keyboard code
   598 = D208			RANDOM 						= $D208 			; (Read) Random number
   599 				       						        			
   600 = D20A			SKREST 						= $D20A 			; Reset Serial Status (SKSTAT)
   601 = D20D			SEROUT 						= $D20D 			; Serial port data output
   602 = D20D			SERIN  						= $D20D 			; (Read) Serial port data input
   603 = D20F			SKCTL  						= $D20F 			; Serial Port Control
   604 = D20F			SKSTAT 						= $D20F 			; (Read) Serial port status
   605 				       						        			
   606 = D20E			IRQEN  						= $D20E 			; Interrupt Request Enable
   607 = D20E			IRQST  						= $D20E 			; (Read) IRQ Status
   608
   609 				;**************************************************
   610 				; Shadow Registers for Hardware Registers
   611 				;
   612 = 0270			PADDL0 						= $0270 			; POT0
   613 = 0270			PADDL1 						= $0270 			; POT1
   614 = 0270			PADDL2 						= $0270 			; POT2
   615 = 0270			PADDL3 						= $0270 			; POT3
   616 = 0270			PADDL4 						= $0270 			; POT4
   617 = 0270			PADDL5 						= $0270 			; POT5
   618 = 0270			PADDL6 						= $0270 			; POT6
   619 = 0270			PADDL7 						= $0270 			; POT7
   620 				       						        			
   621 = 02FC			CH 	   						= $02FC 			; KBCODE       						
   622 = 0010			POKMSK 						= $10 				; IRQEN       						
   623 = 0232			SSKCTL 						= $0232 			; SKCTL
   624
   625 				;**************************************************
   626 				; Important Bit Positions
   627
   628 				;**************************************************
   629 				; AUDC 
   630 				;
   631 = 001F			MASK_AUD_NOISE  			= %00011111
   632 = 00EF			MASK_AUD_FORCE  			= %11101111
   633 = 00F0			MASK_AUD_VOLUME 			= %11110000
   634
   635 = 00E0			AUD_NOISE  					= %11100000
   636 = 0010			AUD_FORCE  					= %00010000
   637 = 000F			AUD_VOLUME 					= %00001111
   638
   639 = 0000			NOISE_5_BIT_17_BIT_POLY 	= %00000000
   640 = 0020			NOISE_5_BIT_POLY 			= %00100000
   641 = 0040			NOISE_5_BIT_4_BIT_POLY 		= %01000000
   642 = 0060			NOISE_5_BIT_POLY_2 			= %01100000 		; Duplicate of "5 bit poly"
   643 = 0080			NOISE_17_BIT_POLY 			= %10000000
   644 = 00A0			NOISE_NO_POLY_PURE 			= %10100000
   645 = 00C0			NOISE_4_BIT_POLY 			= %11000000
   646 = 00E0			NOISE_NO_POLY_PURE_2 		= %11100000 		; Duplicate of "No poly pure"
   647
   648 				;**************************************************
   649 				; AUDCTL
   650 				;
   651 = 007F			MASK_AUDCTL_POLY        	= %01111111 		; 17 or 9 bit poly
   652 = 00BF			MASK_AUDCTL_CH1_SYS     	= %10111111 		; Channel 1, 64KHz or system CPU clock (1.79Mhz NTSC)
   653 = 00DF			MASK_AUDCTL_CH3_SYS     	= %11011111 		; Channel 3, 64KHz or system CPU clock (1.79Mhz NTSC)
   654 = 00EF			MASK_AUDCTL_16_BIT_2_1  	= %11101111 		; Tie channels 2 and 1 for 16-bit resolution
   655 = 00F7			MASK_AUDCTL_16_BIT_4_3  	= %11110111 		; Tie channels 4 and 3 for 16-bit resolution
   656 = 00FB			MASK_AUDCTL_HIPASS_1_3  	= %11111011 		; High pass filter channel 1 by channel 3
   657 = 00FD			MASK_AUDCTL_HIPASS_2_4  	= %11111101 		; High pass filter channel 2 by channel 4
   658 = 00FE			MASK_AUDCTL_64_OR_15KHZ 	= %11111110 		; Use Clock 64Khz or 15Khz
   659
   660 = 0000			AUDCTL_POLY_17 				= %00000000
   661 = 0080			AUDCTL_POLY_9  				= %10000000
   662 = 0000			AUDCTL_CH1_64  				= %00000000
   663 = 0040			AUDCTL_CH1_SYS 				= %01000000
   664 = 0000			AUDCTL_CH3_64  				= %00000000
   665 = 0020			AUDCTL_CH3_SYS 				= %00100000
   666 = 0000			AUDCTL_16_BIT_2_1_OFF 		= %00000000
   667 = 0010			AUDCTL_16_BIT_2_1_ON 		= %00010000
   668 = 0000			AUDCTL_16_BIT_4_3_OFF 		= %00000000
   669 = 0008			AUDCTL_16_BIT_4_3_ON 		= %00001000
   670 = 0000			AUDCTL_HIPASS_1_3_OFF 		= %00000000
   671 = 0004			AUDCTL_HIPASS_1_3_ON 		= %00000100
   672 = 0000			AUDCTL_HIPASS_2_4_OFF 		= %00000000
   673 = 0002			AUDCTL_HIPASS_2_4_ON 		= %00000010
   674 = 0000			AUDCTL_CLOCK_64KHZ 			= %00000000
   675 = 0001			AUDCTL_CLOCK_15KHZ 			= %00000001
   676
   677 				;**************************************************
   678 				; ALLPOT
   679 				;
   680 = 007F			MASK_ALLPOT_PADDLE7 		= %01111111
   681 = 00BF			MASK_ALLPOT_PADDLE6 		= %10111111
   682 = 00DF			MASK_ALLPOT_PADDLE5 		= %11011111
   683 = 00EF			MASK_ALLPOT_PADDLE4 		= %11101111
   684 = 00F7			MASK_ALLPOT_PADDLE3 		= %11110111
   685 = 00FB			MASK_ALLPOT_PADDLE2 		= %11111011
   686 = 00FD			MASK_ALLPOT_PADDLE1 		= %11111101
   687 = 00FE			MASK_ALLPOT_PADDLE0 		= %11111110
   688
   689 = 0080			ALLPOT_PADDLE7 				= %10000000
   690 = 0040			ALLPOT_PADDLE6 				= %01000000
   691 = 0020			ALLPOT_PADDLE5 				= %00100000
   692 = 0010			ALLPOT_PADDLE4 				= %00010000
   693 = 0008			ALLPOT_PADDLE3 				= %00001000
   694 = 0004			ALLPOT_PADDLE2 				= %00000100
   695 = 0002			ALLPOT_PADDLE1 				= %00000010
   696 = 0001			ALLPOT_PADDLE0 				= %00000001
   697
   698 				;**************************************************
   699 				; SKCTL
   700 				;
   701 = 007F			MASK_SERIAL_BREAK 			= %01111111
   702 = 008F			MASK_SERIAL_MODE 			= %10001111
   703 = 00F7			MASK_SERIAL_2TONE 			= %11110111
   704 = 00FB			MASK_FAST_POT_SCAN 			= %11111011
   705 = 00FD			MASK_ENABLE_KB_SCAN 		= %11111101
   706 = 00FE			MASK_KB_DEBOUNCE 			= %11111110
   707
   708 = 0080			SERIAL_BREAK 				= %10000000 		
   709 = 0000			SERIAL_MODE0 				= %00000000 		; Input Clock External.            Output Clock External.          Bidirectional Clock Input.
   710 = 0010			SERIAL_MODE1 				= %00010000 		; Input Clock Channel 3+4 (async). Output Clock External.          Bidirectional Clock Input.
   711 = 0020			SERIAL_MODE2 				= %00100000 		; Input Clock Channel 4.           Output Clock Channel 4.         Bidirectional Clock Output Channel 4.
   712 = 0030			SERIAL_MODE3 				= %00110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   713 = 0040			SERIAL_MODE4 				= %01000000 		; Input Clock External.            Output Clock Channel 4.         Bidirectional Clock Input.
   714 = 0050			SERIAL_MODE5 				= %01010000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   715 = 0060			SERIAL_MODE6 				= %01100000 		; Input Clock Channel 4.           Output Clock Channel 2.         Bidirectional Clock Output Channel 4.
   716 = 0070			SERIAL_MODE7 				= %01110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 2.         Bidirectional Clock Input.
   717
   718 = 0008			SERIAL_2TONE 				= %00001000 		; 1 and 0 bits are audio set by timers 1 and 2
   719
   720 = 0000			FAST_POT_SCAN_OFF 			= %00000000
   721 = 0004			FAST_POT_SCAN_ON  			= %00000100
   722 = 0000			DISABLE_KB_SCAN   			= %00000000
   723 = 0002			ENABLE_KB_SCAN    			= %00000010
   724 = 0000			KB_DEBOUNCE_OFF   			= %00000000
   725 = 0001			KB_DEBOUNCE_ON    			= %00000001
   726
   727 				;**************************************************
   728 				; SKSTAT
   729 				;
   730 = 007F			MASK_SERIAL_FRAME_ERROR 	= %01111111
   731 = 00BF			MASK_SERIAL_INPUT_OVERRUN 	= %10111111
   732 = 00DF			MASK_KEYBOARD_OVERRUN 		= %11011111
   733 = 00EF			MASK_SERIAL_DATA_READY 		= %11101111
   734 = 00F7			MASK_SH.if_KEY_PRESSED 		= %11110111
   735 = 00FB			MASK_LAST_KEY_HELD 			= %11111011
   736 = 00FD			MASK_SERIAL_INPUT_BUSY 		= %11111101
   737
   738 = 0000			SERIAL_FRAME_NO_ERROR 		= %00000000
   739 = 0080			SERIAL_FRAME_ERROR 			= %10000000
   740 = 0000			SERIAL_NO_INPUT_OVERRUN 	= %00000000
   741 = 0040			SERIAL_INPUT_OVERRUN 		= %01000000
   742 = 0000			KEYBOARD_NO_OVERRUN 		= %00000000
   743 = 0020			KEYBOARD_OVERRUN 			= %00100000
   744 = 0000			SERIAL_DATA_NOT_READY 		= %00000000
   745 = 0010			SERIAL_DATA_READY 			= %00010000
   746 = 0000			SH.if_KEY_NOT_PRESSED 		= %00000000
   747 = 0008			SH.if_KEY_PRESSED 			= %00001000
   748 = 0000			LAST_KEY_NOT_HELD 			= %00000000
   749 = 0004			LAST_KEY_HELD 				= %00000100
   750 = 0000			SERIAL_INPUT_NOT_BUSY 		= %00000000
   751 = 0002			SERIAL_INPUT_BUSY 			= %00000010
   752
   753 				;**************************************************
   754 				; IRQEN and IRQST
   755 				;
   756 = 00FE			MASK_IRQ_TIMER1 			= %11111110
   757 = 00FD			MASK_IRQ_TIMER2 			= %11111101
   758 = 00FB			MASK_IRQ_TIMER4 			= %11111011
   759 = 00F7			MASK_IRQ_SERIAL_OUT_DONE 	= %11110111
   760 = 00EF			MASK_IRQ_SERIAL_OUT_READY 	= %11101111
   761 = 00DF			MASK_IRQ_SERIAL_IN_READY 	= %11011111
   762 = 00BF			MASK_IRQ_NORMAL_KEY_PRESS 	= %10111111
   763 = 007F			MASK_IRQ_BREAK_PRESSED 		= %01111111
   764
   765 = 0000			IRQ_TIMER1_OFF 				= %00000000
   766 = 0001			IRQ_TIMER1_ON 				= %00000001
   767 = 0000			IRQ_TIMER2_OFF 				= %00000000
   768 = 0002			IRQ_TIMER2_ON 				= %00000010
   769 = 0000			IRQ_TIMER4_OFF 				= %00000000
   770 = 0004			IRQ_TIMER4_ON 				= %00000100
   771 = 0000			IRQ_SERIAL_OUT_NOT_DONE 	= %00000000
   772 = 0008			IRQ_SERIAL_OUT_DONE 		= %00001000
   773 = 0000			IRQ_SERIAL_OUT_NOT_READY 	= %00000000
   774 = 0010			IRQ_SERIAL_OUT_READY 		= %00010000
   775 = 0000			IRQ_SERIAL_IN_NOT_READY 	= %00000000
   776 = 0020			IRQ_SERIAL_IN_READY 		= %00100000
   777 = 0000			IRQ_NO_KEY_PRESS 			= %00000000
   778 = 0040			IRQ_NORMAL_KEY_PRESS 		= %01000000
   779 = 0000			IRQ_BREAK_NOT_PRESSED 		= %00000000
   780 = 0080			IRQ_BREAK_PRESSED 			= %10000000
   781
   782 				;**************************************************
   783 				; Additional Registers
   784 				;
   785 = 006A			RAMTOP						= $6A
   786 = E45F			SYSVBV 						= $E45F  			; interrupt enabled vector
   787 = E45C			SETVBI 						= $E45C  			; set vertical blank interrupt vector
   788 = E462			XITVBL 						= $E462  			; exit VBI vector
   789
   790 = E45F			XITVB_I						= $e45f
   791 = 0006			VBI_I						= $06
   792 = 0007			VBI_D						= $07
   793 = C0E2			NORMAL_VBI_I				= $c0e2
   794 = C28A			NORMAL_VBI_D				= $c28a
   795 = E45C			SETVBV						= $e45c
   796 = 0222			VVBLKI						= $0222
   797 = 0224			VVBLKD						= $0224
   798 = E462			XITVB						= XITVBL
    41 						icl "/Lib/SysMacros.Asm"				; General purpose macros used by system
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysMacros.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;
    15 				;**************************************************************************************************
    16 				; SaveAXY
    17 				;**************************************************************************************************
    18 				;
    19 				.macro SaveAXY
    20 					pha
    21 					txa
    22 					pha
    23 					tya
    24 					pha
    25 				.endm
    26
    27 				;
    28 				;**************************************************************************************************
    29 				; RestoreRTS
    30 				;**************************************************************************************************
    31 				;
    32 				.macro RestoreRTS
    33 					pla
    34 					tay
    35 					pla
    36 					tax
    37 					pla
    38 					rts
    39 				.endm
    40
    41 				;
    42 				;**************************************************************************************************
    43 				; RestoreRTS
    44 				;**************************************************************************************************
    45 				;
    46 				.macro RestoreRTI
    47 					pla
    48 					tay
    49 					pla
    50 					tax
    51 					pla
    52 					rti
    53 				.endm
    54
    55 				;
    56 				;**************************************************************************************************
    57 				; SetRamTop [pages]
    58 				;**************************************************************************************************
    59 				;
    60 				.macro SetRamTop
    61 					.if :0 <> 1
    62 						.error "SetRamTop error"
    63 				   .else
    64 				   		lda RAMTOP
    65 						sec
    66 						sbc :1
    67 						sta RAMTOP
    68 					.endif
    69 				.endm
    70
    71 				;
    72 				;**************************************************************************************************
    73 				; SetVector [address] [word]
    74 				;**************************************************************************************************
    75 				;
    76 				.macro SetVector
    77 					.if :0 <> 2
    78 						.error "SetVector error"
    79 				   .else
    80 				      	lda #<:2
    81 					    sta :1
    82 					    lda #>:2
    83 					    sta :1+1
    84 					.endif
    85 				.endm
    86
    87 				;
    88 				;**************************************************************************************************
    89 				; SetColor [0..4] [0..255]
    90 				; SetColor [0..4] [0..15] [0..15]
    91 				;**************************************************************************************************
    92 				;
    93 				.macro SetColor
    94 					.if :0 < 2 .or :0 > 3
    95 						.error "SetColor error"
    96 				   	.else
    97 						.if :0 = 2
    98 					    	lda #:2
    99 					        sta COLPF0+:1
   100 						.else
   101 							lda #[:2 * 16 + :3]
   102 							sta COLPF0+:1
   103 						.endif
   104 					.endif
   105 				.endm
   106
   107 				;
   108 				;**************************************************************************************************
   109 				; SetBKColor [0..15] [0..15]
   110 				;**************************************************************************************************
   111 				;
   112 				.macro SetBKColor
   113 					.if :0 < 1 .or :0 > 2
   114 						.error "SetBKColor error"
   115 				   	.else
   116 						.if :0 = 1
   117 					    	lda #:1
   118 					        sta COLBK
   119 						.else
   120 							lda #[:1 * 16 + :2]
   121 					        sta COLBK
   122 						.endif
   123 					.endif
   124 				.endm
   125
   126 				;
   127 				;**************************************************************************************************
   128 				; SetPMColor [0..3] [0..255]
   129 				; SetPMColor [0..3] [0..15] [0..15]
   130 				;**************************************************************************************************
   131 				;
   132 				.macro SetPMColor
   133 					.if :0 < 2 .or :0 > 3
   134 						.error "SetPMColor error"
   135 					.else
   136 						.if :0 = 2
   137 							lda #:2
   138 							sta COLPM0+:1
   139 						.else
   140 							lda #[:2 * 16 + :3]
   141 							sta COLPM0+:1
   142 						.endif
   143 					.endif
   144 				.endm
   145
   146 				;
   147 				;**************************************************************************************************
   148 				; VcountSync [0..130]
   149 				; (maximum limit is different on PAL: 155)
   150 				; (could wait forever if there are interrupts activated!)
   151 				; (or if some other "thread" uses "wsync")
   152 				;**************************************************************************************************
   153 				;
   154 				.macro VcountSync
   155 					.if :0 <> 1
   156 						.error "VcountSync error"
   157 				   	.else
   158 						sta WSYNC
   159 				      	lda #:1
   160 				VSync1	cmp VCOUNT
   161 					    bne VSync1
   162 						lda #:1+1
   163 				VSync2	cmp VCOUNT
   164 					    bne VSync2
   165 				      	sta WSYNC
   166 					.endif
   167 				.endm
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; VcountWait [0..130]
   172 				; (maximum limit is different on PAL: 155)
   173 				;**************************************************************************************************
   174 				;
   175 				.macro VcountWait
   176 					.if :0 <> 1
   177 						.error "VcountWait error"
   178 				   	.else
   179 						lda #:1
   180 				VWait1	cmp VCOUNT
   181 					    bne VWait1
   182 					.endif
   183 				.endm
   184
   185 				;
   186 				;**************************************************************************************************
   187 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   188 				; (maximum limit is different on PAL: 155)
   189 				;**************************************************************************************************
   190 				;
   191 				.macro VcountWaitUntilEnter
   192 					.if :0 <> 2 .or :1 >= :2
   193 						.error "VcountWaitUntilEnter error"
   194 					.else
   195 				VWait1	lda VCOUNT
   196 						cmp #:1
   197 						beq VExit
   198 					    bcc VWait1								; VCOUNT < :1
   199 						cmp #:2
   200 						beq VExit
   201 					    bcs VWait1								; VCOUNT >= :2
   202 				VExit
   203 					.endif
   204 				.endm
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   209 				; (maximum limit is different on PAL: 155)
   210 				;**************************************************************************************************
   211 				;
   212 				.macro VcountWaitUntilExit
   213 					.if :0 <> 2 .or :1 >= :2
   214 						.error "VcountWaitUntilExit error"
   215 					.else
   216 				VWait1	lda VCOUNT
   217 						cmp #:1
   218 						beq VWait1
   219 					    bcc VExit								; VCOUNT < :1
   220 						cmp #:2
   221 					    bcc VWait1								; VCOUNT < :2
   222 						beq VWait1
   223 				VExit
   224 					.endif
   225 				.endm
   226
   227 				;
   228 				;**************************************************************************************************
   229 				; MarkScanLine [0..255] [0..255]
   230 				; (mark the current scan line with a color)
   231 				;**************************************************************************************************
   232 				;
   233 				.macro MarkScanLine
   234 					.if :0 <> 0 .and :0 <> 2
   235 						.error "MarkScanLine error"
   236 					.else
   237 						.if :0 = 0
   238 							sta WSYNC
   239 				  	     	lda #255							; mark color
   240 					  	    sta COLBK
   241 							sta WSYNC
   242 				  	     	lda #0								; restore color
   243 					  	    sta COLBK
   244 						.else
   245 							sta WSYNC
   246 						    lda #:1								; mark color
   247 						    sta COLBK
   248 							sta WSYNC
   249 							lda #:2								; restore color
   250 							sta COLBK
   251 						.endif
   252 					.endif
   253 				.endm
   254
   255 				;
   256 				;**************************************************************************************************
   257 				; MarkScanLineIfConsol [0..255] [0..255]
   258 				; (mark the current scan line with a color, if a consol key is pressed)
   259 				;**************************************************************************************************
   260 				;
   261 				.macro MarkScanLineIfConsol
   262 					.if :0 <> 0 .and :0 <> 2
   263 						.error "MarkScanLineIfConsol error"
   264 					.else
   265 						.if :0 = 0
   266 							lda CONSOL
   267 							and #%111
   268 					     	cmp #%111
   269 						    beq ExitMarkScanLineIfConsol
   270 							sta WSYNC
   271 						    lda #255							; mark color
   272 						    sta COLBK
   273 						    sta WSYNC
   274 						    lda #0								; restore color
   275 					     	sta COLBK
   276 						.else
   277 							lda CONSOL
   278 						    and #%111
   279 					     	cmp #%111
   280 						    beq ExitMarkScanLineIfConsol
   281 							sta WSYNC
   282 					     	lda #:1								; mark color
   283 						    sta COLBK
   284 					      	sta WSYNC
   285 					     	lda #:2								; restore color
   286 						    sta COLBK
   287 						.endif
   288 					.endif
   289 				
   290 				ExitMarkScanLineIfConsol
   291 				.endm
   292
   293 				;
   294 				;**************************************************************************************************
   295 				; MarkCyclesIfConsol [0..255] [0..255]
   296 				; (mark the current scan position with a color, for some cycles)
   297 				;**************************************************************************************************
   298 				;
   299 				.macro MarkCyclesIfConsol
   300 					.if :0 = 0
   301 						lda CONSOL
   302 						and #%111
   303 						cmp #%111
   304 						beq ExitMarkCyclesIfConsol
   305 				
   306 						lda #255								; mark color
   307 						sta COLBK
   308 				
   309 						lda ($00),y								; dummy 5 cycles
   310 						lda ($00),y								; dummy 5 cycles
   311 					    lda ($00),y								; dummy 5 cycles
   312 					    lda ($00),y								; dummy 5 cycles
   313 					    lda ($00),y								; dummy 5 cycles
   314 					    lda ($00),y								; dummy 5 cycles
   315 						lda #0									; restore color
   316 					    sta COLBK
   317 					.elseif :0 = 2
   318 						lda CONSOL
   319 						and #%111
   320 						cmp #%111
   321 						beq ExitMarkCyclesIfConsol
   322 				
   323 						lda #:1									; mark color
   324 						sta COLBK
   325 				
   326 						lda ($00),y								; dummy 5 cycles
   327 					    lda ($00),y								; dummy 5 cycles
   328 					    lda ($00),y								; dummy 5 cycles
   329 					    lda ($00),y								; dummy 5 cycles
   330 					    lda ($00),y								; dummy 5 cycles
   331 					    lda ($00),y								; dummy 5 cycles
   332 				
   333 					    lda #:2									; restore color
   334 					    sta COLBK
   335 					.else
   336 						.error "MarkCyclesIfConsol error"
   337 					.endif
   338 				
   339 				ExitMarkCyclesIfConsol
   340 				.endm
   341
   342 				;
   343 				;**************************************************************************************************
   344 				; SetBasic [0,1]
   345 				;**************************************************************************************************
   346 				;
   347 				.macro SetBasic
   348 					.if :0 <> 1
   349 						.error "SetBasic error"
   350 					.else
   351 						.if :1 = 0
   352 							lda PORTB							; deactivate Basic
   353 					        ora #%00000010
   354 					        sta PORTB
   355 						.else
   356 							lda PORTB							; activate Basic
   357 							and #%11111101
   358 							sta PORTB
   359 						.endif
   360 					.endif
   361 				.endm
   362
   363 				;
   364 				;**************************************************************************************************
   365 				; SetOperatingSystem [0,1]
   366 				;**************************************************************************************************
   367 				;
   368 				.macro SetOperatingSystem
   369 					.if :0 <> 1
   370 						.error "SetOperatingSystem error"
   371 					.else
   372 						.if :1 = 0
   373 							lda PORTB							; deactivate Operative System
   374 							and #%11111110
   375 							sta PORTB
   376 						.else
   377 							lda PORTB							; activate Operative System
   378 							ora #%00000001
   379 							sta PORTB
   380 						.endif
   381 					.endif
   382 				.endm
   383
   384 				;
   385 				;**************************************************************************************************
   386 				; EnableBasic
   387 				;**************************************************************************************************
   388 				;
   389 				.macro EnableBasic
   390 					.if :0 <> 0
   391 						.error "EnableBasic error"
   392 					.else
   393 						SetBasic 1
   394 					.endif
   395 				.endm
   396
   397 				;
   398 				;**************************************************************************************************
   399 				; DisableBasic
   400 				;**************************************************************************************************
   401 				;
   402 				.macro DisableBasic
   403 					.if :0 <> 0
   404 						.error "DisableBasic error"
   405 					.else
   406 						SetBasic 0
   407 					.endif
   408 				.endm
   409
   410 				;
   411 				;**************************************************************************************************
   412 				; EnableOperatingSystem
   413 				;**************************************************************************************************
   414 				;
   415 				.macro EnableOperatingSystem
   416 					.if :0 <> 0
   417 						.error "EnableOperatingSystem error"
   418 					.else
   419 						SetOperatingSystem 1
   420 					.endif
   421 				.endm
   422
   423 				;
   424 				;**************************************************************************************************
   425 				; DisableOperatingSystem
   426 				;**************************************************************************************************
   427 				;
   428 				.macro DisableOperatingSystem
   429 					.if :0 <> 0
   430 						.error "DisableOperatingSystem error"
   431 					.else
   432 						SetOperatingSystem 0
   433 					.endif
   434 				.endm
   435
   436 				;
   437 				;**************************************************************************************************
   438 				; EnableNormalInterrupts
   439 				;**************************************************************************************************
   440 				;
   441 				.macro EnableNormalInterrupts
   442 					.if :0 <> 0
   443 						.error "EnableNormalInterrupts error"
   444 					.else
   445 						cli
   446 						lda #$40								; VBI interrupt
   447 						sta NMIEN
   448 					.endif
   449 				.endm
   450
   451 				;
   452 				;**************************************************************************************************
   453 				; DisableNormalInterrupts
   454 				;**************************************************************************************************
   455 				;
   456 				.macro DisableNormalInterrupts
   457 					.if :0 <> 0
   458 						.error "DisableNormalInterrupts error"
   459 					.else
   460 						sei
   461 						lda #0
   462 						sta IRQEN
   463 						sta NMIEN
   464 					.endif
   465 				.endm
   466
   467 				;
   468 				;**************************************************************************************************
   469 				; ClearSystem
   470 				;**************************************************************************************************
   471 				;
   472 				.macro ClearSystem
   473 					.if :0 <> 0
   474 						.error "ClearSystem error"
   475 					.else
   476 						
   477 						clc
   478 					    cld
   479 						sei
   480 				
   481 					    lda #0									; clear interrupts and screen
   482 					    sta IRQEN	
   483 					    sta NMIEN
   484 					    sta DMACTL
   485 					    sta COLBK
   486 				      	sta GRACTL								; clear P/M
   487 						sta GRAFP0
   488 						sta GRAFP1
   489 						sta GRAFP2
   490 						sta GRAFP3
   491 						sta GRAFM
   492 				
   493 						sta HPOSP0
   494 					    sta HPOSP1
   495 					    sta HPOSP2
   496 					    sta HPOSP3
   497 					    sta HPOSM0
   498 					    sta HPOSM1
   499 					    sta HPOSM2
   500 					    sta HPOSM3
   501 				
   502 					    sta PRIOR								; clear GTIA also
   503 				
   504 					    sta AUDCTL								; clear sound
   505 						sta AUDC1
   506 					    sta AUDC2
   507 					    sta AUDC3
   508 					    sta AUDC4
   509 				
   510 					    lda #3
   511 					    sta SKCTL
   512 					    
   513 					.endif
   514 				.endm
   515
   516 				;
   517 				;**************************************************************************************************
   518 				; SetDisplayListAddress [word]
   519 				; (use when the screen is not being displayed!)
   520 				; (remember to not cross the 1K limit..)
   521 				;**************************************************************************************************
   522 				;
   523 				.macro SetDisplayListAddress
   524 					.if :0 <> 1
   525 						.error "SetDisplayListAddress error"
   526 					.else
   527 						SetVector DLISTL, :1
   528 					.endif
   529 				.endm
   530
   531 				;
   532 				;**************************************************************************************************
   533 				; SetDisplayListInterrupt
   534 				;**************************************************************************************************
   535 				;
   536 				.macro SetDisplayListInterrupt
   537 					.if :0 <> 1
   538 						.error "SetDisplayListInterrupt error"
   539 					.else
   540 						SetVector NMIH_VECTOR, :1
   541 					.endif
   542 				.endm
   543
   544 				;
   545 				;**************************************************************************************************
   546 				; SetFontAddress [word]
   547 				; (remember that this transform to a page a number)
   548 				;**************************************************************************************************
   549 				;
   550 				.macro SetFontAddress
   551 					.if :0 <> 1
   552 						.error "SetFontAddress error"
   553 					.else
   554 						lda #>:1
   555 					    sta CHBASE
   556 					.endif
   557 				.endm
   558
   559 				;
   560 				;**************************************************************************************************
   561 				; SetPMBaseAddress [word]
   562 				; (remember that this transform to a page a number)
   563 				;**************************************************************************************************
   564 				;
   565 				.macro SetPMBaseAddress
   566 				   .if :0 <> 1
   567 				      .error "SetPMBaseAddress error"
   568 				   .else
   569 				      lda #>:1
   570 				      sta PMBASE
   571 				   .endif
   572 				.endm
   573
   574 				;
   575 				;**************************************************************************************************
   576 				; NullZeroPage [zeroPageAddress] [size]
   577 				;**************************************************************************************************
   578 				;
   579 				.macro NullZeroPage
   580 				zpage = $FE
   581 					.if :0 <> 2
   582 						.error "NullZeroPage error"
   583 					.else
   584 						lda #<:1
   585 						sta zpage
   586 						
   587 						ldy :2
   588 						lda #$00
   589 				loop
   590 						sta (zpage),y
   591 						dey
   592 						bne loop		
   593 					.endif	
   594 				.endm
   595
   596 				;
   597 				;**************************************************************************************************
   598 				; SetMemory [address] [bytes] [value]
   599 				;**************************************************************************************************
   600 				;
   601 				.macro SetMemory
   602 				
   603 				; warning, using some page zero memory
   604 				setMemPtr		= $FE
   605 				setMemCounter	= $FC
   606 				
   607 					.if :0 <> 3
   608 						.error "SetMemory error"
   609 					.else
   610 						ldy #0
   611 						lda #<:1
   612 						sta setMemPtr
   613 						lda #>:1
   614 						sta setMemPtr+1
   615 				
   616 						.if :2 < $0100
   617 							lda #:3
   618 				
   619 				setMemLoop1
   620 							sta (setMemPtr),y
   621 							iny
   622 					        cpy #:2
   623 					        bne setMemLoop1
   624 				
   625 						.else
   626 							lda #<:2
   627 							sta setMemCounter
   628 							lda #>:2
   629 							sta setMemCounter+1
   630 				
   631 				setMemLoop2
   632 							lda #:3
   633 							sta (setMemPtr),y
   634 							iny
   635 							bne setMemB1
   636 							inc setMemPtr+1
   637 				
   638 				setMemB1
   639 							lda setMemCounter
   640 							bne setMemB2
   641 							dec setMemCounter+1
   642 				
   643 				setMemB2
   644 							dec setMemCounter
   645 							lda setMemCounter
   646 							ora setMemCounter+1
   647 							bne setMemLoop2
   648 						.endif
   649 					.endif
   650 				.endm
   651
   652 				;
   653 				;**************************************************************************************************
   654 				; SetMemoryRandom [address] [bytes]
   655 				;**************************************************************************************************
   656 				;
   657 				.macro SetMemoryRandom
   658 				
   659 				; warning, using some page zero memory
   660 				setMemRPtr		= $FE
   661 				setMemRCounter	= $FC
   662 				
   663 				   .if :0 <> 2
   664 				      .error "SetMemoryRandom error"
   665 				   .else
   666 				      ldy #0
   667 				      lda #<:1
   668 				      sta setMemRPtr
   669 				      lda #>:1
   670 				      sta setMemRPtr+1
   671 						
   672 						.if :2 < $0100
   673 				
   674 				setMemRLoop1
   675 				         	lda RANDOM
   676 				         	sta (setMemRPtr),y
   677 				         	iny
   678 				         	cpy #:2
   679 				         	bne setMemRLoop1
   680 						.else
   681 				        	lda #<:2
   682 				         	sta setMemRCounter
   683 				         	lda #>:2
   684 				         	sta setMemRCounter+1
   685 				
   686 				setMemRLoop2
   687 				         	lda RANDOM
   688 				         	sta (setMemRPtr),y
   689 				         	iny
   690 				         	bne setMemRB1
   691 				         	inc setMemRPtr+1
   692 				
   693 				setMemRB1
   694 				         	lda setMemRCounter
   695 				         	bne setMemRB2
   696 				         	dec setMemRCounter+1
   697 				
   698 				setMemRB2
   699 				         	dec setMemRCounter
   700 				         	lda setMemRCounter
   701 				         	ora setMemRCounter+1
   702 				         	bne setMemRLoop2
   703 					
   704 						.endif
   705 					.endif
   706 				.endm
   707
   708 				;
   709 				;**************************************************************************************************
   710 				; ClampMemory [address] [bytes] [min value] [max value]
   711 				;**************************************************************************************************
   712 				;
   713 				.macro ClampMemory
   714 				
   715 				; warning, using some page zero memory
   716 				clampMemPtr		= $FE
   717 				clampMemCounter	= $FC
   718 				
   719 					.if :0 <> 4
   720 						.error "ClampMemory error"
   721 					.else
   722 						ldy #0
   723 						lda #<:1
   724 						sta clampMemPtr
   725 						lda #>:1
   726 						sta clampMemPtr+1
   727 				
   728 						.if :2 < $0100
   729 				
   730 				clampMemLoop1
   731 							lda (clampMemPtr),y
   732 					        cmp #:3
   733 					        bcs clampMemB3		; if >= min then continue
   734 					        lda #:3
   735 					        jmp clampMemB4
   736 				
   737 				clampMemB3
   738 					        cmp #:4
   739 					        bcc clampMemB4		; if < max then continue
   740 					        lda #:4
   741 				
   742 				clampMemB4
   743 					        sta (clampMemPtr),y
   744 							iny
   745 					        cpy #:2
   746 					        bne clampMemLoop1
   747 				
   748 						.else
   749 					    
   750 					    	lda #<:2
   751 					        sta clampMemCounter
   752 					        lda #>:2
   753 					        sta clampMemCounter+1
   754 				
   755 				clampMemLoop2
   756 					        lda (clampMemPtr),y
   757 					        cmp #:3
   758 					        bcs clampMemB5		; if >= min then continue
   759 					        lda #:3
   760 					        jmp clampMemB6
   761 				
   762 				clampMemB5
   763 					        cmp #:4
   764 					        bcc clampMemB6		; if < max then continue
   765 					        lda #:4
   766 				
   767 				clampMemB6
   768 					        sta (clampMemPtr),y
   769 					        iny
   770 					        bne clampMemB1
   771 					        inc clampMemPtr+1
   772 				
   773 				clampMemB1
   774 					        lda clampMemCounter
   775 					        bne clampMemB2
   776 					        dec clampMemCounter+1
   777 				
   778 				clampMemB2
   779 					        dec clampMemCounter
   780 				         	lda clampMemCounter
   781 					        ora clampMemCounter+1
   782 					        bne clampMemLoop2
   783 						.endif
   784 					.endif
   785 				.endm
   786
   787 				;
   788 				;**************************************************************************************************
   789 				; AndMemory [address] [bytes] [value]
   790 				;**************************************************************************************************
   791 				.macro AndMemory
   792 				
   793 				; warning, using some page zero memory
   794 				andMemPtr		= $FE
   795 				andMemCounter	= $FC
   796 				
   797 					.if :0 <> 3
   798 						.error "AndMemory error"
   799 				   .else
   800 				      	ldy #0
   801 					    lda #<:1
   802 					    sta andMemPtr
   803 					    lda #>:1
   804 					    sta andMemPtr+1
   805 				
   806 					    .if :2 < 256
   807 				andMemLoop1
   808 					    
   809 					    	lda (andMemPtr),y
   810 					        and #:3
   811 					        sta (andMemPtr),y
   812 					        iny
   813 					        cpy #:2
   814 					        bne andMemLoop1
   815 				
   816 					     .else
   817 					     
   818 					        lda #<:2
   819 					        sta andMemCounter
   820 					        lda #>:2
   821 					        sta andMemCounter+1
   822 				
   823 				andMemLoop2
   824 					        lda (andMemPtr),y
   825 					        and #:3
   826 					        sta (andMemPtr),y
   827 					        iny
   828 					        bne andMemB1
   829 					        inc andMemPtr+1
   830 				andMemB1
   831 					        lda andMemCounter
   832 					        bne andMemB2
   833 					        dec andMemCounter+1
   834 				
   835 				andMemB2
   836 							dec andMemCounter
   837 					        lda andMemCounter
   838 					        ora andMemCounter+1
   839 					        bne andMemLoop2
   840 					  	.endif
   841 					.endif
   842 				.endm
   843
   844 				;
   845 				;**************************************************************************************************
   846 				; CopyMemory [source address] [dest address] [bytes]
   847 				;**************************************************************************************************
   848 				;
   849 				.macro CopyMemory
   850 				
   851 				; warning, using some page zero memory
   852 				copyMemPtr1		= $FE
   853 				copyMemPtr2		= $FC
   854 				copyMemCounter	= $FA
   855 				
   856 				   .if :0 <> 3
   857 						.error "CopyMemory error"
   858 				   .else
   859 					    ldy #0
   860 					    lda #<:1
   861 					    sta copyMemPtr1
   862 					    lda #>:1
   863 					    sta copyMemPtr1+1
   864 				
   865 					    lda #<:2
   866 					    sta copyMemPtr2
   867 					    lda #>:2
   868 					    sta copyMemPtr2+1
   869 					
   870 						.if :3 < $0100
   871 				
   872 				copyMemLoop1
   873 					      	lda (copyMemPtr1),y
   874 					       	sta (copyMemPtr2),y
   875 					       	iny
   876 					       	cpy #:3
   877 					       	bne copyMemLoop1
   878 				
   879 					   	.else
   880 					      	
   881 					       	lda #<:3
   882 					       	sta copyMemCounter
   883 					       	lda #>:3
   884 					       	sta copyMemCounter+1
   885 				
   886 				copyMemLoop2
   887 				        	lda (copyMemPtr1),y
   888 				        	sta (copyMemPtr2),y
   889 				        	iny
   890 				        	bne copyMemB1
   891 				        	inc copyMemPtr1+1
   892 				        	inc copyMemPtr2+1
   893 				copyMemB1
   894 				         	lda copyMemCounter
   895 				         	bne copyMemB2
   896 				         	dec copyMemCounter+1
   897 				
   898 				copyMemB2
   899 				         	dec copyMemCounter
   900 				         	lda copyMemCounter
   901 				         	ora copyMemCounter+1
   902 				         	bne copyMemLoop2
   903 				
   904 				     	.endif
   905 					.endif
   906 				.endm
    42 					
    43 				;***** Include Variable Files
    44 				;
    45 						icl "ZeroPage.Asm"
Source: E:\_8BitProjects\Series\Scroller\ZeroPage.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ZeroPage.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;	
    13 				;**************************************************************************************************
    14 				; Zero Page Variables definitions
    15 				;**************************************************************************************************
    16 				;
    17 						org ZeroPageAddress
    18
    19 				;*****	RMT zero page variables
    20 				;
    21 				p_tis						
    22 				p_instrstable				org *+2
    23 				p_trackslbstable			org *+2
    24 				p_trackshbstable			org *+2
    25 				p_song						org *+2
    26 				ns							org *+2
    27 				nr							org *+2
    28 				nt							org *+2
    29 				reg1						org *+1
    30 				reg2						org *+1
    31 				reg3						org *+1
    32 				tmp							org *+1
    33
    34 				;*****	Platform Engine zero page variables
    35 				;
    36 				m_param00					org *+$01
    37 				m_param01					org *+$01
    38 				m_param02					org *+$01
    39 				m_param03					org *+$01
    40
    41 				m_saveRegA					org *+$01
    42 				m_saveRegX					org *+$01
    43 				m_saveRegY					org *+$01
    44
    45 				m_sfxEffect					org *+$01
    46
    47 				m_animMiscWidth				org *+$01
    48 				m_animMiscHeight			org *+$01
    49
    50 				m_redrawPlayerCounter		org *+$01
    51
    52 				m_missleBaseColor00			org *+$01
    53 				m_playerBaseColor00			org *+$01
    54 				m_playerBaseColor1A			org *+$01
    55 				m_playerBaseColor1B			org *+$01
    56
    57 				m_playerLevelLeftX_H2		org *+$01			; left side coordinate
    58 				m_playerLevelLeftX_H1		org *+$01
    59 				m_playerLevelLeftX_L1		org *+$01
    60
    61 				m_playerLevelRightX_H2		org *+$01			; right side coordinate
    62 				m_playerLevelRightX_H1		org *+$01
    63 				m_playerLevelRightX_L1		org *+$01
    64
    65 				m_playerLevelTopY_H2		org *+$01			; top line coordinate
    66 				m_playerLevelTopY_H1		org *+$01
    67 				m_playerLevelTopY_L1		org *+$01
    68
    69 				m_playerLevelBottomY_H2		org *+$01			; bottom line coordinate
    70 				m_playerLevelBottomY_H1		org *+$01
    71 				m_playerLevelBottomY_L1		org *+$01
    72
    73 				m_playerScreenLeftX			org *+$01
    74 				m_playerScreenTopY			org *+$01
    75
    76 				m_oldPlayerScreenLeftX		org *+$01
    77 				m_oldPlayerScreenTopY		org *+$01
    78
    79 				m_playerSizeX				org *+$01
    80 				m_playerSizeY				org *+$01
    81
    82 				m_playerSizeXMinusOne		org *+$01
    83 				m_playerSizeYMinusOne		org *+$01
    84
    85 				m_playerSideSpeed_H1		org *+$01
    86 				m_playerSideSpeed_L1		org *+$01
    87
    88 				m_playerMaxSideSpeed_H1		org *+$01
    89 				m_playerMaxSideSpeed_L1		org *+$01
    90
    91 				m_playerSideAccel_H1		org *+$01
    92 				m_playerSideAccel_L1		org *+$01
    93
    94 				m_playerSideDeaccel_H1		org *+$01
    95 				m_playerSideDeaccel_L1		org *+$01
    96
    97 				m_playerSpeedY_H1			org *+$01
    98 				m_playerSpeedY_L1			org *+$01
    99
   100 				m_playerJumpSpeed_H1		org *+$01
   101 				m_playerJumpSpeed_L1		org *+$01
   102
   103 				m_playerMaxFallSpeed_H1		org *+$01
   104 				m_playerMaxFallSpeed_L1		org *+$01
   105
   106 				m_playerGravityAccel_H1		org *+$01
   107 				m_playerGravityAccel_L1		org *+$01
   108
   109 				m_playerWaterAccelY_H1		org *+$01
   110 				m_playerWaterAccelY_L1		org *+$01
   111
   112 				m_playerMaxWaterSpeedY_H1	org *+$01
   113 				m_playerMaxWaterSpeedY_L1	org *+$01
   114
   115 				m_playerMoveWaterSpeedY_H1	org *+$01
   116 				m_playerMoveWaterSpeedY_L1	org *+$01
   117
   118 				m_playerNoJumpTimer			org *+$01			; for now this is used to disable the jump for some frames, after entering the water
   119 				m_playerHoldJumpCounter		org *+$01
   120
   121 				m_lastPlayerSideDirection	org *+$01			; 0 - none, 1 - right, 2 - left
   122 				m_lastPlayerShootDirection	org *+$01
   123
   124 				m_playerOverPlatformFlag	org *+$01			; is player over platform
   125 				m_playerTopCollisionFlag	org *+$01			; did player hit top
   126 				m_playerSideCollisionFlag	org *+$01			; did player hit side
   127
   128 				m_playerState				org *+$01			; 0-static, 1-over platform, 2-jumping up, 3-falling, 4-climbing, 5-in water, 6-gravity test
   129
   130 				m_pageZeroTempValue			org *+$01
   131
   132 				m_levelCharSizeX			org *+$01			; char size X goes from 1 to 255 characters, 0 = 256 characters
   133 				m_levelCharSizeY			org *+$01			; char size Y goes from 1 to 255 characters, 0 = 256 characters
   134
   135 				m_levelSizeX_H2				org *+$01
   136 				m_levelSizeX_H1				org *+$01
   137
   138 				m_levelSizeY_H2				org *+$01
   139 				m_levelSizeY_H1				org *+$01
   140
   141 				m_levelWindowX_H2			org *+$01
   142 				m_levelWindowX_H1			org *+$01
   143
   144 				m_levelWindowY_H2			org *+$01
   145 				m_levelWindowY_H1			org *+$01
   146
   147 				m_stick0					org *+$01
   148 				m_oldStick0					org *+$01
   149 				m_oldTrigger0				org *+$01
   150 				m_triggerState				org *+$01			; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
   151 				m_currentTrigger0			org *+$01
   152
   153 				m_paramW01					org *+$02
   154 				m_paramW02					org *+$02
   155
   156 				m_ptrLevelAddr				org *+$02
   157 				m_ptrLevelLine				org *+$02
   158 				m_pageZeroTempPointer		org *+$02
   159 				m_playerMethodPointer		org *+$02
   160 				m_platformLevelPointer		org *+$02
   161
   162 				m_currChar					org *+$01
   163 				m_currLevelNum				org *+$01
   164
   165 				.PRINT "Zero Page Start : ", ZeroPageAddress, " Zero Page Length : ", * - ZeroPageAddress, " Total : ", *  
   165 				Zero Page Start : $0080 Zero Page Length : $0073 Total : $00F3
   166
   167 				.if * - ZeroPageAddress > $79
   168 					.error "Zero Page length address greater than $00FA!"
   169 				.endif
   170
    46 						icl "Constants.Asm"
Source: E:\_8BitProjects\Series\Scroller\Constants.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Constants.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;
    16 				; remember, when going from NTSC to PAL:
    17 				;
    18 				; 	colors - 1 (same lum) .. here only color 7 (water blue) was left equal times multiplied by (5/6)
    19 				; 	speeds and accelerations multiplied by (6/5) .. maybe accelerations requires another adjustment
    20 				; 	some animations speed maybe should not (cannot) be converted, if they are not related to gameplay
    21 				; 		(for example the timing for the laser enabled/disabled states was converted)
    22 				; 	also, one extra precison byte (_L2) could be useful to get a better conversion in some cases
    23 				;
    24 				;**************************************************************************************************
    25 				;
    26 = B000			GAME_MEM					= GameMemoryAddress			; used in Camera.Asm. Must set this for camera to work			
    27 = 0E03			GAME_LMS1					= GameDspLstAddr+3			; used in Camera.Asm. Must set this for camera to work
    28
    29 = 0008			PLR_WIDTH					= 8							; must set this for player to work
    30 = 0015			PLR_HEIGHT					= 21						; must set this for player to work
    31
    32 				;*****	Music and Sound constants 
    33 = 0000			STEREOMODE					= 0
    34
    35 = 0000			MUSIC_MENU 					= 0
    36 = 000B			MUSIC_GAME 					= $0B
    37 = 000E			MUSIC_GAME_OVER 			= $0E
    38 = 0010			MUSIC_DUMMY 				= $10
    39
    40 = 0001			SFX_DIAMOND 				= 1
    41 = 000C			SFX_ALL_PICKED 				= 12
    42 = 000E			SFX_DEATH 					= 14
    43 = 0010			SFX_CONGRATULATIONS 		= 16
    44 = 0001			SFX_JUMP 					= 1
    45
    46 				;*****	Open Plat constants
    47 				;
    48 = 0000			PAL_VERSION					= 0
    49
    50 = 0028			MAX_ROWS					= 40
    51
    52 = 0004			CHAR_PIX.else_X				= 4
    53 = 0008			CHAR_PIX.else_Y				= 8
    54
    55 = 0052			LEVEL_CHAR_SIZE_X			= 82				; max level size now should be 256 x 255 lines	
    56 = 0018			LEVEL_CHAR_SIZE_Y			= 24
    57
    58 = 0028			WINDOW_CHAR_SIZE_X			= 40
    59 = 0018			WINDOW_CHAR_SIZE_Y			= 24
    60
    61 = 0030			PM_BASE_SCREEN_X			= 48
    62 = 0020			PM_BASE_SCREEN_Y			= 32
    63
    64 = 0000			PSD_NONE					= 0					; player side direction
    65 = 0001			PSD_RIGHT					= 1
    66 = 0002			PSD_LEFT					= 2
    67
    68 = 0000			PS_STATIC					= 0					; player states
    69 = 0001			PS_OVER_PLATFORM			= 1
    70 = 0002			PS_JUMPING					= 2
    71 = 0003			PS_FALLING					= 3
    72 = 0004			PS_CLIMBING					= 4
    73 = 0005			PS_IN_WATER					= 5
    74 = 0006			PS_GRAVITY_TEST				= 6
    75 = 0007			PS_LOSE						= 7
    76
    77 = 0000			CT_BLANK					= 0					; character types
    78 = 0001			CT_BLOCK					= 1
    79 = 0002			CT_COLLECTABLE				= 2
    80 = 0003			CT_DANGER					= 3
    81 = 0004			CT_LADDER					= 4
    82 = 0005			CT_WATER					= 5
    83 = 0006			CT_HEALTH					= 6
    84 = 0007			CT_FLOATPLATFORMH			= 7
    85 = 0008			CT_VLASER					= 8
    86 = 0009			CT_FLOATPLATFORMV			= 9
    87 = 000A			CT_HLASER					= 10
    88
    89 = 0000			TS_NOT_PRESSED				= 0					; trigger states
    90 = 0000			TS_JUST_RELEASED			= 0
    91 = 0000			TS_PRESSED					= 0
    92 = 0000			TS_JUST_PRESSED				= 0
    93
    94 = 0020			ENEMY_SHOOT_DELTA_Y			= 32
    95
    96 				;*****	Set these constants depending on TV system
    97 				; 
    98 				.if PAL_VERSION = 0
    99
   100 = 0006				TENTH_OF_SECOND_FRAMES	= 6
   101 = 0001				MINIMUM_CAMERA_STEP		= 1
   102 = 0008				JUMP_HOLD_FRAMES		= 8
   103 = 0040				JUMP_HSPEED_SLOWDOWN	= 64
   104 = 001E				WATER_NO_JUMP_FRAMES	= 30
   105
   106 = 0001				SIDE_SPEED_LAND_H1		= 1					; 001.160 --> 97.5 pixels per second (at 60 fps only!)
   107 = 0001				SIDE_SPEED_LAND_L1		= 1 ;64
   108 					
   109 = 0000				SIDE_ACCEL_LAND_H1		= 0					; 6 frames (at 60 fps only!) or 0.x seconds, to reach max speed
   110 = 0020				SIDE_ACCEL_LAND_L1		= 32
   111 					
   112 = 0000				SIDE_DEACCEL_LAND_H1	= 0					; 3 frames (at 60 fps only!) or 0.x seconds, to reach zero speed
   113 = 0080				SIDE_DEACCEL_LAND_L1	= 128
   114
   115 = 0000				SIDE_SPEED_WATER_H1		= 0
   116 = 0080				SIDE_SPEED_WATER_L1		= 128
   117
   118 = 0000				SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 60 fps only!) or _ seconds, to reach max speed
   119 = 0004				SIDE_ACCEL_WATER_L1		= 4
   120
   121 = 0000				SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 60 fps only!) or _ seconds, to reach zero speed
   122 = 0004				SIDE_DEACCEL_WATER_L1	= 4
   123
   124 = 0001				SIDE_SPEED_AIR_H1		= 1					; 001.120 --> 88.125 pixels per second (at 60 fps only!)
   125 = 0020				SIDE_SPEED_AIR_L1		= 32
   126
   127 = 0000				SIDE_ACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach max speed
   128 = 0010				SIDE_ACCEL_AIR_L1		= 16
   129
   130 = 0000				SIDE_DEACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach zero speed
   131 = 0010				SIDE_DEACCEL_AIR_L1		= 16
   132
   133 = 0000				CLIMB_UP_SPEED_Y_H1		= 0
   134 = 00E0				CLIMB_UP_SPEED_Y_L1		= 224
   135
   136 = 0001				CLIMB_DOWN_SPEED_Y_H1	= 1
   137 = 0080				CLIMB_DOWN_SPEED_Y_L1	= 128
   138
   139 = 0280				PLAYER_MISSILE_SPEED_X	= 2*256+128
   140 = 0200				ENEMY_MISSILE_SPEED_X	= 2*256
   141 = 0078				ENEMY_INIT_TIMER		= 120
   142 = 003C				VLASER_DISABLED_INDEX	= 60
   143
   144 				.else
   145
   146 					TENTH_OF_SECOND_FRAMES	= 5
   147 					MINIMUM_CAMERA_STEP		= 1
   148 					JUMP_HOLD_FRAMES		= 6					; 6.67 for pal
   149 					JUMP_HSPEED_SLOWDOWN	= 77
   150 					WATER_NO_JUMP_FRAMES	= 25
   151
   152 					SIDE_SPEED_LAND_H1		= 1					;  pixels per second (at 50 fps only!)
   153 					SIDE_SPEED_LAND_L1		= 128
   154
   155 					SIDE_ACCEL_LAND_H1		= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach max speed
   156 					SIDE_ACCEL_LAND_L1		= 38
   157
   158 					SIDE_DEACCEL_LAND_H1	= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach zero speed
   159 					SIDE_DEACCEL_LAND_L1	= 154
   160
   161 					SIDE_SPEED_WATER_H1		= 0
   162 					SIDE_SPEED_WATER_L1		= 154
   163
   164 					SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 50 fps only!) or _ seconds, to reach max speed
   165 					SIDE_ACCEL_WATER_L1		= 5
   166
   167 					SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 50 fps only!) or _ seconds, to reach zero speed
   168 					SIDE_DEACCEL_WATER_L1	= 5
   169
   170 					SIDE_SPEED_AIR_H1		= 1					;  pixels per second (at 50 fps only!)
   171 					SIDE_SPEED_AIR_L1		= 90
   172 					
   173 					SIDE_ACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach max speed
   174 					SIDE_ACCEL_AIR_L1		= 19
   175
   176 					SIDE_DEACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach zero speed
   177 					SIDE_DEACCEL_AIR_L1		= 19
   178
   179 					CLIMB_UP_SPEED_Y_H1		= 1
   180 					CLIMB_UP_SPEED_Y_L1		= 13
   181
   182 					CLIMB_DOWN_SPEED_Y_H1	= 1
   183 					CLIMB_DOWN_SPEED_Y_L1	= 205
   184
   185 					PLAYER_MISSILE_SPEED_X	= 3*256
   186 					ENEMY_MISSILE_SPEED_X	= 2*256+104
   187 					ENEMY_INIT_TIMER		= 100
   188 					VLASER_DISABLED_INDEX	= 50
   189
   190 				.endif
   191
   192 				;*****	Register bit settings
   193 				;
   194 = 0003			GRACTL_OPTIONS				= [ENABLE_MISSILES 	| ENABLE_PLAYERS]
   195 = 0031			PRIOR_OPTIONS				= [PM_PRIORITY_1   	| F.ifH_PLAYER        			| MULTICOLOR_PM]	
   196 = 003E			DMACTL_OPTIONS				= [ENABLE_DL_DMA 	| PLAYFIELD_WIDTH_NORMAL_MASK 	| ENABLE_PM_DMA 	| PM_1LINE_RESOLUTION] 
   197
   198 				;*****	Player missle address definitions
   199 				;
   200 = A300			ms_area_1 					= PmgAddress + $0300
   201 = A400			p0_area_1 					= PmgAddress + $0400
   202 = A500			p1_area_1 					= PmgAddress + $0500
   203 = A600			p2_area_1 					= PmgAddress + $0600
   204 = A700			p3_area_1 					= PmgAddress + $0700
   205
    47
    48 				;*****	Memory map
    49 				;
    50 = 0080			ZeroPageAddress				= $80				; 122 bytes zero page ($80 to $F9) 
    51 = 0E00			GameDspLstAddr				= $0E00				; 176 bytes for display list
    52
    53 = 0680			HudMemoryAddr				= $0680				; Heads up display are (80 bytes)
    54
    55 = 2400			SoundPlayerAddress			= $2400
    56 = 3000			DataAddress					= $3000				;  4K (size for data)
    57 = 4000			SoundAddress				= $4000
    58 = 4800			CodeAddress					= $4800				; 20K (22K zone)
    59
    60 = A000			PmgAddress					= $A000				; 40K (2K size - 768 bytes)
    61 = A800			GameFontAddress				= $A800				; 42K (1K size)
    62 = AC00			TextFontAddress				= $AC00				; 39K (1K size)
    63
    64 = B000			GameMemoryAddress			= $B000				; 44K (4K size)
    65
    66 				;*****	moved here for better access
    67 				;
    68 = 0001			DEBUG_ON					= 1					 
    69
    70 				;
    71 				;**************************************************************************************************
    72 				; InitSystem - Start of code
    73 				;**************************************************************************************************
    74 				;
    75 						org CodeAddress
    76
    77 				InitSystem
    78
    79 FFFF> 4800-6C82> AD 14 + 		lda PAL									; only run in the correct system
    80 4803 29 0E				and #14
    81
    82 				.if PAL_VERSION = 1
    83
    84 				NO_PAL_loop
    85 						bne NO_PAL_loop
    86
    87 				.else
    88
    89 4805			NO_NTSC_loop
    90 4805 F0 FE				beq NO_NTSC_loop
    91
    92 				.endif
    93
    94 4807					ClearSystem								; begin machine setup
Macro: CLEARSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4807 18					clc
     6 4808 D8				    cld
     7 4809 78					sei
     9 480A A9 00			    lda #0									; clear interrupts and screen
    10 480C 8D 0E D2			    sta IRQEN	
    11 480F 8D 0E D4			    sta NMIEN
    12 4812 8D 00 D4			    sta DMACTL
    13 4815 8D 1A D0			    sta COLBK
    14 4818 8D 1D D0		      	sta GRACTL								; clear P/M
    15 481B 8D 0D D0				sta GRAFP0
    16 481E 8D 0E D0				sta GRAFP1
    17 4821 8D 0F D0				sta GRAFP2
    18 4824 8D 10 D0				sta GRAFP3
    19 4827 8D 11 D0				sta GRAFM
    21 482A 8D 00 D0				sta HPOSP0
    22 482D 8D 01 D0			    sta HPOSP1
    23 4830 8D 02 D0			    sta HPOSP2
    24 4833 8D 03 D0			    sta HPOSP3
    25 4836 8D 04 D0			    sta HPOSM0
    26 4839 8D 05 D0			    sta HPOSM1
    27 483C 8D 06 D0			    sta HPOSM2
    28 483F 8D 07 D0			    sta HPOSM3
    30 4842 8D 1B D0			    sta PRIOR								; clear GTIA also
    32 4845 8D 08 D2			    sta AUDCTL								; clear sound
    33 4848 8D 01 D2				sta AUDC1
    34 484B 8D 03 D2			    sta AUDC2
    35 484E 8D 05 D2			    sta AUDC3
    36 4851 8D 07 D2			    sta AUDC4
    38 4854 A9 03			    lda #3
    39 4856 8D 0F D2			    sta SKCTL
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    95 4859					DisableBasic							; disable to use memory
Macro: DISABLEBASIC [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4859 AD 01 D3					lda PORTB							; deactivate Basic
     6 485C 09 02			        ora #%00000010
     7 485E 8D 01 D3			        sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    96 4861					DisableOperatingSystem					; disable to use memory	
Macro: DISABLEOPERATINGSYSTEM [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     5 4861 AD 01 D3					lda PORTB							; deactivate Operative System
     6 4864 29 FE					and #%11111110
     7 4866 8D 01 D3					sta PORTB
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    97 					
    98 4869					SetRamTop #32							; pull memtop down 32 pages
Macro: SETRAMTOP [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4869 A5 6A		   		lda RAMTOP
     5 486B 38					sec
     6 486C E9 20				sbc #32
     7 486E 85 6A				sta RAMTOP
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
    99 								
   100 4870					SetDisplayListInterrupt GameDli_01		; set the display list interrupts
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4870 A9 7A		      	lda #<GAMEDLI_01
     5 4872 8D FA FF			    sta NMIH_VECTOR
     6 4875 A9 4E			    lda #>GAMEDLI_01
     7 4877 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   101 487A					VcountWait 120							; make sure to wait so the setting takes effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 487A A9 78				lda #120
     5 487C CD 0B D4		VWait1	cmp VCOUNT
     6 487F D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   102 						
   103 4881 A9 58				lda #GameDLEnd							; length of games display list data
   104 4883 85 92				sta m_param00 							; store it for the load routine		
   105 											
   106 4885					SetVector m_paramW01, GameDL			; source of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4885 A9 DB		      	lda #<GAMEDL
     5 4887 85 E3			    sta M_PARAMW01
     6 4889 A9 35			    lda #>GAMEDL
     7 488B 85 E4			    sta M_PARAMW01+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   107 488D					SetVector m_paramW02, GameDspLstAddr	; destination of display list data
Macro: SETVECTOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 488D A9 00		      	lda #<GAMEDSPLSTADDR
     5 488F 85 E5			    sta M_PARAMW02
     6 4891 A9 0E			    lda #>GAMEDSPLSTADDR
     7 4893 85 E6			    sta M_PARAMW02+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   108 						
   109 4895 20 41 6B				jsr LoadDisplayListData					; perform the DL data move
   110
   111 				;*****	Set the addresses
   112 				;
   113 4898			SetAddresses
   114
   115 4898					SetPMBaseAddress PmgAddress				; set the player missile address
Macro: SETPMBASEADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4898 A9 A0		      lda #>PMGADDRESS
     5 489A 8D 07 D4		      sta PMBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   116 489D					SetFontAddress GameFontAddress			; set the starting font address
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 489D A9 A8				lda #>GAMEFONTADDRESS
     5 489F 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   117 48A2					SetDisplayListAddress GameDspLstAddr	; set the display list address	
Macro: SETDISPLAYLISTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48A2 A9 00		      	lda #<GAMEDSPLSTADDR
     5 48A4 8D 02 D4			    sta DLISTL
     6 48A7 A9 0E			    lda #>GAMEDSPLSTADDR
     7 48A9 8D 03 D4			    sta DLISTL+1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   118
   119 48AC					VcountWait 120							; make sure to wait so the setting takes effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48AC A9 78				lda #120
     5 48AE CD 0B D4		VWait1	cmp VCOUNT
     6 48B1 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   120
   121 				;*****	Housekeeping
   122 				;
   123 48B3 20 58 6C				jsr SfxOff
   124 48B6 20 20 4B				jsr InitVars							; begin initialization
   125 48B9 20 DC 4B				jsr InitLevelTable						; set up the level table		
   126 								
   127 				;*****	InitHardware
   128 				;
   129 48BC			InitHardware
   130
   131 48BC A9 00				lda #0									; set the player info
   132 48BE 8D 08 D0				sta SIZEP0
   133
   134 48C1 A9 55				lda #%01010101							; double width for all missiles
   135 48C3 8D 0C D0				sta SIZEM
   136
   137 48C6 A9 0C				lda #12									; set the HSCROL value
   138 48C8 8D 04 D4				sta HSCROL
   139 					
   140 48CB A9 00				lda #0									; set the VSCROL value
   141 48CD 8D 05 D4				sta VSCROL
   142 						
   143 48D0 A9 80				lda #[NMI_DLI]							; enable DLI's (but no VBI's)
   144 48D2 8D 0E D4				sta NMIEN
   145 						
   146 48D5 A9 03				lda #GRACTL_OPTIONS						; apply GRACTL options
   147 48D7 8D 1D D0				sta GRACTL
   148
   149 48DA A9 31				lda #PRIOR_OPTIONS						; apply PRIOR options
   150 48DC 8D 1B D0				sta PRIOR
   151
   152 48DF A9 3E				lda #DMACTL_OPTIONS						; apply DMACTL options
   153 48E1 8D 00 D4				sta DMACTL
   154
   155 48E4 A9 00				lda #0									; clear the hit register
   156 48E6 8D 1E D0				sta HITCLR
   157
   158 				;*****	Load the starting level
   159 				;
   160 48E9 A9 00				lda #$00								; set the starting level
   161 48EB 85 F2				sta m_currLevelNum						; store it off
   162
   163 48ED 85 93				sta m_param01							; store it to the parameter
   164 48EF 20 4E 6B				jsr LoadLevel							; load the level
   165
   166 48F2					VcountWait 120							; make sure to wait so the setting takes effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 48F2 A9 78				lda #120
     5 48F4 CD 0B D4		VWait1	cmp VCOUNT
     6 48F7 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   167
   168 				;*****	Initialize Level
   169 				;
   170 48F9 20 6B 4C				jsr InitPlatforms						; initialize floating platforms if any
   171 48FC 20 15 4C				jsr InitGoldCounter						; gold initialization
   172 48FF 20 FB 4C				jsr InitEnemyManager					; enemy manager initialization
   173 4902 20 AE 4D				jsr InitMissileSystem					; missile system initialization
   174
   175 4905					VcountWait 120							; make sure to wait so the setting takes effect
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4905 A9 78				lda #120
     5 4907 CD 0B D4		VWait1	cmp VCOUNT
     6 490A D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   176 						
   177 				;*****	Set player position and draw
   178 				;		
   179 490C A5 F2				lda m_currLevelNum						; grab the current level
   180 490E 85 92				sta m_param00							; store it in the parameter
   181 4910 20 AE 54				jsr SetSpawnPos							; set the spawn position for this level
   182 						
   183 4913 20 C8 55				jsr SetPlayerScreenPos 					; fill in the players position
   184 4916 20 E7 55				jsr DrawPlayer							; draw the player
   185
   186 4919					VcountWait 120							; make sure to wait so the setting takes effect	
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4919 A9 78				lda #120
     5 491B CD 0B D4		VWait1	cmp VCOUNT
     6 491E D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   187
   188 4920 20 26 49				jsr GameLoop
   189
   190 				;*****	Scroller Loop
   191 				;
   192 4923			ScrollerLoop
   193
   194 4923 4C 23 49				jmp ScrollerLoop						; infinite loop
   195 				;
   196 				;**************************************************************************************************
   197 				; End of Start
   198 				;**************************************************************************************************
   199 				;
   200 										
   201 				;
   202 				;**************************************************************************************************
   203 				;
   204 				;	GameLoop
   205 				;**************************************************************************************************
   206 				;
   207 4926			.proc GameLoop
   208
   209 4926			Loop		
   210 4926 A5 DE				lda m_stick0
   211 4928 29 0F				and #$0F
   212 492A C9 0F				cmp #$0F
   213 492C D0 03				bne CheckState
   214 492E 4C 42 49				jmp CheckUserInput
   215
   216 4931			CheckState
   217 						
   218 4931 A5 D2				lda m_playerState
   219 4933 C9 02				cmp #$02		
   220 4935 F0 07				beq JumpSound
   221
   222 4937 C9 03				cmp #$03
   223 4939 F0 03				beq JumpSound
   224 						
   225 493B 4C 42 49				jmp CheckUserInput
   226 						
   227 493E			JumpSound
   228 						
   229 493E A9 01				lda #SFX_JUMP
   230 4940 85 99				sta m_sfxEffect
   231
   232 				;*****	Check User Input
   233 				;		
   234 4942			CheckUserInput
   235
   236 				.if DEBUG_ON = 1
   237
   238 4942 AE 73 32				ldx m_floatPlatformIdx
   239 4945 CA					dex
   240 						
   241 4946 A5 D2				lda m_playerState
   242 4948 A0 28				ldy #40
   243 494A 20 C5 4A				jsr DisplayDebugInfoHexFF
   244 						
   245 494D AD CD 32				lda m_leftBottomChar
   246 4950 A0 2B				ldy #43
   247 4952 20 C5 4A				jsr DisplayDebugInfoHexFF
   248 						
   249 4955 AD CE 32				lda m_rightBottomChar
   250 4958 A0 2E				ldy #46
   251 495A 20 C5 4A				jsr DisplayDebugInfoHexFF
   252 						
   253 495D A5 A2				lda m_playerLevelLeftX_H1
   254 495F A0 31				ldy #49
   255 4961 20 C5 4A				jsr DisplayDebugInfoHexFF	
   256 						
   257 4964 A5 A1				lda m_playerLevelLeftX_H2
   258 4966 A0 34				ldy #52
   259 4968 20 C5 4A				jsr DisplayDebugInfoHexFF	
   260 						
   261 496B BD 3C 6A				lda PlatformLSB,x
   262 496E A0 37				ldy #55
   263 4970 20 C5 4A				jsr DisplayDebugInfoHexFF	
   264 						 		
   265 4973 BD 44 6A				lda PlatformMSB,x
   266 4976 A0 3A				ldy #58
   267 4978 20 C5 4A				jsr DisplayDebugInfoHexFF	
   268 						 		
   269 497B BD 78 6A				lda PlatformBaseLSB,x
   270 497E A0 3D				ldy #61
   271 4980 20 C5 4A				jsr DisplayDebugInfoHexFF	
   272
   273 4983 BD 80 6A				lda PlatformBaseMSB,x
   274 4986 A0 40				ldy #64
   275 4988 20 C5 4A				jsr DisplayDebugInfoHexFF	
   276
   277 				.endif
   278 						
   279 498B 20 D2 6B				jsr CheckInput
   280 498E 20 73 4E				jsr UpdateTimers
   281 4991 6C ED 00				jmp (m_playerMethodPointer)
   282 					
   283 				;*****	PlayerMethodReturn
   284 				;
   285 4994			PlayerMethodReturn
   286 4994 A5 D2				lda m_playerState
   287 4996 C9 07				cmp #PS_LOSE
   288 4998 F0 2B				beq PlayerEndStates
   289 					
   290 				;*****	PlayerNormalStates	
   291 				;
   292 499A			PlayerNormalStates
   293 499A 20 3B 64				jsr UpdateCameraWindow
   294 499D 20 C8 55				jsr SetPlayerScreenPos
   295 49A0 20 E7 55				jsr DrawPlayer
   296 							
   297 				;*****	EnemyUpdate
   298 				;
   299 49A3			EnemyUpdate
   300 49A3 20 5D 68				jsr UpdateEnemyManager
   301 					
   302 				;*****	MissilesStep
   303 				;
   304 49A6			MissilesStep
   305 49A6 20 A0 5D				jsr UpdateMissileSystem
   306 49A9 20 B6 69				jsr DrawEnemyExplosion
   307 					
   308 				;*****	GameAnimations
   309 				;
   310 49AC			GameAnimations
   311 					
   312 49AC 20 97 62				jsr DoFontAnimations
   313 49AF 20 D7 62				jsr UpdateCoinAnimations
   314 49B2 20 EF 4D				jsr UpdateInfoLine
   315 49B5 20 6E 6C				jsr SfxUpdate
   316 								
   317 49B8					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49B8 A9 78				lda #120
     5 49BA CD 0B D4		VWait1	cmp VCOUNT
     6 49BD D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   318 						
   319 49BF 20 0B 6C				jsr CheckPMCollisions
   320 49C2 4C 26 49				jmp Loop
   321 					
   322 				;*****	PlayerEndStates
   323 				;
   324 49C5			PlayerEndStates
   325 					
   326 49C5 20 4A 56				jsr DrawPlayerExplosion
   327 49C8 20 97 62				jsr DoFontAnimations
   328 49CB 20 D7 62				jsr UpdateCoinAnimations
   329 49CE 20 A0 5D				jsr UpdateMissileSystem
   330 49D1 20 B6 69				jsr DrawEnemyExplosion
   331 49D4 20 EF 4D				jsr UpdateInfoLine
   332 49D7 20 AE 54				jsr SetSpawnPos
   333 49DA 20 6E 6C				jsr SfxUpdate
   334 												
   335 49DD					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 49DD A9 78				lda #120
     5 49DF CD 0B D4		VWait1	cmp VCOUNT
     6 49E2 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   336 						
   337 49E4 A9 00				lda #0
   338 49E6 8D 1E D0				sta HITCLR	
   339 						
   340 49E9 4C 26 49				jmp Loop
   341
   342 49EC 60					rts
   343 						
   344 				.endp
   345
   346 				;*****	Includes base files
   347 				;
   348 49ED					icl "/Lib/SysProcs.Asm"
Source: E:\_8BitProjects\Series\Scroller\\Lib\SysProcs.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		SysProcs.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;****	Storage
    15 				;
    16 49ED 00			_productLo		.byte $00 
    17 49EE 00			_productHi		.byte $00 
    18 49EF 00			_multiplier		.byte $00 
    19 49F0 00			_multiplicand	.byte $00 
    20
    21 49F1 00			_divisor		.byte $00						; DIVISOR
    22 49F2 00			_quitient		.byte $00 						; QUOTIENT
    23 49F3 00			_remainder		.byte $00						; REMAINDER 
    24 49F4 00			_dividenLo		.byte $00						; LOW PART OF DIVIDEND
    25 49F5 00			_dividendHi		.byte $00						; HIGH PART OF DIVIDEND 
    26
    27 49F6			TabHexNibbleToScreenDigit
    28 49F6 10 11 12 13 14 15 + 	.sb "0123456789ABCDEF"
    29
    30 4A06			TabBinaryToBCD
    31 4A06 00 01 02 03 04 05 + 	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
    32 4A10 10 11 12 13 14 15 + 	.byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
    33 4A1A 20 21 22 23 24 25 + 	.byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
    34 4A24 30 31 32 33 34 35 + 	.byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
    35 4A2E 40 41 42 43 44 45 + 	.byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49
    36 4A38 50 51 52 53 54 55 + 	.byte $50, $51, $52, $53, $54, $55, $56, $57, $58, $59
    37 4A42 60 61 62 63 64 65 + 	.byte $60, $61, $62, $63, $64, $65, $66, $67, $68, $69
    38 4A4C 70 71 72 73 74 75 + 	.byte $70, $71, $72, $73, $74, $75, $76, $77, $78, $79
    39 4A56 80 81 82 83 84 85 + 	.byte $80, $81, $82, $83, $84, $85, $86, $87, $88, $89
    40 4A60 90 91 92 93 94 95 + 	.byte $90, $91, $92, $93, $94, $95, $96, $97, $98, $99
    41
    42 				;
    43 				;***************************************************************************************************
    44 				; WaitFrame
    45 				;***************************************************************************************************
    46 				;
    47 4A6A			.proc WaitFrame
    48 						
    49 4A6A A5 14				lda RTCLOK60							; get frame/jiffy counter
    50
    51 4A6C			WaitTick60
    52
    53 4A6C C5 14				cmp RTCLOK60							; Loop until the clock changes
    54 4A6E F0 FC				beq WaitTick60		
    55 4A70 60					rts
    56 				.endp			
    57
    58 				;
    59 				;***************************************************************************************************
    60 				; MultiplyAX
    61 				;***************************************************************************************************
    62 				;
    63 4A71			.proc MultiplyAX  
    64 4A71 8D EF 49				sta _multiplier
    65 4A74 8E F0 49				stx _multiplicand 
    66 4A77 A9 00				lda #0 
    67 4A79 8D ED 49				sta _productLo 
    68 4A7C A2 08				ldx #8 
    69
    70 				;*************************************************
    71 				;		
    72 4A7E			Loop
    73 4A7E 4E EF 49			 	lsr _multiplier 
    74 4A81 90 04				bcc NoAdd 
    75 4A83 18					clc 
    76 4A84 6D F0 49				adc _multiplicand 
    77
    78 				;*************************************************
    79 				;
    80 4A87			NoAdd
    81 4A87 6A				 	ror 
    82 4A88 6E ED 49				ror _productLo 
    83 4A8B CA					dex 
    84 4A8C D0 F0				bne Loop 
    85 4A8E 8D EE 49				sta _productHi 
    86
    87 4A91 60					rts 
    88 				.endp
    89
    90 				;
    91 				;***************************************************************************************************
    92 				; DivideAXY
    93 				;***************************************************************************************************
    94 				;
    95 4A92			.proc DivideAXY
    96 						
    97 4A92 8E F1 49				stx _divisor							; THE DIVISOR
    98 4A95 8C F4 49				sty _dividenLo								
    99 4A98 8D F5 49				sta _dividendHi							; ACCUMULATOR WILL HOLD DVDH
   100 				 
   101 4A9B A2 08				ldx	#$08 								; FOR AN 8-BIT DIVISOR 
   102 4A9D 38					sec 
   103 4A9E ED F1 49				sbc _divisor 
   104
   105 				;************************************************
   106 				;
   107 4AA1 08			DLOOP 	php										; THE LOOP THAT DIVIDES 
   108 4AA2 2E F2 49				rol _quitient 
   109 4AA5 0E F4 49				asl _dividenLo 
   110 4AA8 2A					rol  
   111 4AA9 28					plp 
   112 4AAA 90 06				bcc ADDIT 
   113 4AAC ED F1 49				sbc _divisor 
   114 4AAF 4C B5 4A				jmp NEXT 
   115
   116 				;************************************************
   117 				;
   118 4AB2 6D F1 49		ADDIT 	adc _divisor 
   119
   120 				;************************************************
   121 				;
   122 4AB5 CA			NEXT 	dex 
   123 4AB6 D0 E9				bne	DLOOP 
   124 4AB8 B0 04				bcs FINI 
   125 4ABA 6D F1 49				ADC _divisor 
   126 4ABD 18					clc 
   127
   128 				;************************************************
   129 				;		
   130 4ABE 2E F2 49		FINI 	rol _quitient 
   131 4AC1 8D F3 49				sta _remainder 
   132 4AC4 60					rts 									; ENDIT
   133
   134 				.endp		
   135
   136 				;
   137 				;**************************************************************************************************
   138 				; DisplayDebugInfoHexFF
   139 				;
   140 				; 	display 2 digits with values from 00 to FF
   141 				; 	passs the value in A and the line row in Y
   142 				;
   143 				;**************************************************************************************************
   144 				;
   145 4AC5			.proc DisplayDebugInfoHexFF
   146
   147 4AC5 86 97				stx m_saveRegX
   148 4AC7 8D D6 4A				sta Save_Value+1						; place the value in A 1 location pasted the lda.   
   149 					
   150 4ACA 4A					lsr										; display 2 digits (from 0 to F)
   151 4ACB 4A					lsr
   152 4ACC 4A					lsr
   153 4ACD 4A					lsr
   154 4ACE AA					tax
   155 4ACF BD F6 49				lda TabHexNibbleToScreenDigit,x
   156 4AD2 99 80 06				sta HudMemoryAddr,y
   157
   158 4AD5			Save_Value
   159
   160 4AD5 A9 FF				lda #$FF								; will hold the value in A on entry
   161 4AD7 29 0F				and #15
   162 4AD9 AA					tax
   163 4ADA BD F6 49				lda TabHexNibbleToScreenDigit,x
   164 4ADD 99 81 06				sta HudMemoryAddr+1,y
   165 4AE0 A6 97				ldx m_saveRegX
   166 4AE2 60					rts
   167 				.endp	
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; DisplayDebugInfoBinary99
   172 				;
   173 				;	display 2 digits with values from 00 to 99
   174 				; 	passs the value in A and the line row in Y
   175 				;
   176 				;**************************************************************************************************
   177 				;
   178 4AE3			.proc DisplayDebugInfoBinary99
   179
   180 4AE3 86 97				stx m_saveRegX
   181 4AE5 AA					tax
   182 4AE6 E0 64				cpx #100
   183 4AE8 90 02				bcc NoOverflow
   184 4AEA A2 63				ldx #99
   185
   186 4AEC			NoOverflow
   187 4AEC BD 06 4A				lda TabBinaryToBCD,x
   188 4AEF AA					tax
   189
   190 4AF0 4A					lsr										; display 2 digits (from 0 to 9)
   191 4AF1 4A					lsr
   192 4AF2 4A					lsr
   193 4AF3 4A					lsr
   194 4AF4 09 10				ora #16									; add the "0" character value
   195 4AF6 99 80 06				sta HudMemoryAddr,y
   196
   197 4AF9 8A					txa
   198 4AFA 29 0F				and #15
   199 4AFC 09 10				ora #16									; add the "0" character value
   200 4AFE 99 81 06				sta HudMemoryAddr+1,y
   201
   202 4B01 A6 97				ldx m_saveRegX
   203 4B03 60					rts
   204 				.endp		
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; DisplayDebugInfoBinary9
   209 				;**************************************************************************************************
   210 				;
   211 4B04			.proc DisplayDebugInfoBinary9
   212
   213 4B04 C9 0A				cmp #10
   214 4B06 90 02				bcc NoOverflow2
   215 4B08 A9 09				lda #9
   216
   217 				;*************************************************
   218 				;
   219 4B0A			NoOverflow2
   220 					
   221 4B0A 09 10				ora #16									; display 1 digit (from 0 to 9) add the "0" character value
   222 4B0C 99 80 06				sta HudMemoryAddr,y
   223
   224 4B0F 60				rts
   225
   226 				.endp	
   227
   228 				;
   229 				;**************************************************************************************************
   230 				; ClearDebugLineInfo
   231 				;**************************************************************************************************
   232 				;
   233 4B10			.proc ClearDebugLineInfo
   234
   235 4B10 86 97				stx m_saveRegX
   236 4B12 A9 00				lda #0
   237 4B14 AA					tax
   238
   239 4B15			CDI_loop
   240
   241 4B15 9D 80 06				sta HudMemoryAddr,x
   242 4B18 E8					inx
   243 4B19 E0 28				cpx #40
   244 4B1B D0 F8				bne CDI_loop
   245 4B1D A6 97				ldx m_saveRegX
   246 						
   247 4B1F 60					rts
   248
   249 				.endp
   349
   350 4B20					icl "Initialize.Asm"
Source: E:\_8BitProjects\Series\Scroller\Initialize.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Initialize.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; InitVars
    15 				;**************************************************************************************************
    16 				;
    17 4B20			.proc InitVars
    18 					
    19 4B20 A9 01				lda #1									; input info
    20 4B22 85 E2				sta m_currentTrigger0
    21 4B24 85 E0				sta m_oldTrigger0
    22
    23 4B26 A9 00				lda #0
    24 4B28 85 E1				sta m_triggerState
    25
    26 4B2A A9 0F				lda #15
    27 4B2C 85 DE				sta m_stick0
    28 4B2E 85 DF				sta m_oldStick0
    29 						
    30 4B30 A9 00				lda #>[CHAR_PIX.else_X]					; level info
    31 4B32 85 DA				sta m_levelWindowX_H2
    32 						
    33 4B34 A9 04				lda #<[CHAR_PIX.else_X]
    34 4B36 85 DB				sta m_levelWindowX_H1
    35 						
    36 4B38 A9 00				lda #0
    37 4B3A 85 DC				sta m_levelWindowY_H2
    38 						
    39 4B3C A9 00				lda #0
    40 4B3E 85 DD				sta m_levelWindowY_H1
    41
    42 4B40 A9 52				lda #LEVEL_CHAR_SIZE_X
    43 4B42 85 D4				sta m_levelCharSizeX
    44 						
    45 4B44 A9 18				lda #LEVEL_CHAR_SIZE_Y
    46 4B46 85 D5				sta m_levelCharSizeY
    47
    48 4B48 A9 01				lda #>[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    49 4B4A 85 D6				sta m_levelSizeX_H2
    50 						
    51 4B4C A9 48				lda #<[LEVEL_CHAR_SIZE_X*CHAR_PIX.else_X]
    52 4B4E 85 D7				sta m_levelSizeX_H1
    53
    54 4B50 A9 00				lda #>[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    55 4B52 85 D8				sta m_levelSizeY_H2
    56 						
    57 4B54 A9 C0				lda #<[LEVEL_CHAR_SIZE_Y*CHAR_PIX.else_Y]
    58 4B56 85 D9				sta m_levelSizeY_H1
    59
    60 4B58 A9 00				lda #<GameMemoryAddress
    61 4B5A 8D D9 32				sta m_currentLineAddress
    62 						
    63 4B5D A9 B0				lda #>GameMemoryAddress
    64 4B5F 8D DA 32				sta m_currentLineAddress+1
    65 							
    66 						;************************************************
    67 						;
    68 						; player info
    69 						;
    70 						; 	remember that we don't use any speed over 1 char per frame right now,
    71 						; 	because we don't want to lose collisions (in that case case we should
    72 						; 	use 2 or more steps per frame, or a "sweep" collision method)
    73 						;
    74 						;************************************************
    75 						;
    76
    77 				.if PAL_VERSION = 0
    78 					
    79 4B62 A9 03				lda #3									; air vertical movement 240 pixels per second (at 60 fps only!)
    80 4B64 85 BF				sta m_playerJumpSpeed_H1
    81 						
    82 4B66 A9 80				lda #128
    83 4B68 85 C0				sta m_playerJumpSpeed_L1
    84
    85 4B6A A9 06				lda #6									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
    86 4B6C 85 C1				sta m_playerMaxFallSpeed_H1
    87 					
    88 4B6E A9 AA				lda #170
    89 4B70 85 C2				sta m_playerMaxFallSpeed_L1
    90
    91 4B72 A9 00				lda #0									; 12.8 frames (at 60 fps only!) to reach max speed (from zero)
    92 4B74 85 C3				sta m_playerGravityAccel_H1
    93 					
    94 4B76 A9 70				lda #112
    95 4B78 85 C4				sta m_playerGravityAccel_L1
    96 								
    97 4B7A A9 00				lda #0									; water vertical movement
    98 4B7C 85 C5				sta m_playerWaterAccelY_H1
    99 						
   100 4B7E A9 20				lda #32
   101 4B80 85 C6				sta m_playerWaterAccelY_L1
   102
   103 4B82 A9 00				lda #0
   104 4B84 85 C7				sta m_playerMaxWaterSpeedY_H1
   105 					
   106 4B86 A9 80				lda #128
   107 4B88 85 C8				sta m_playerMaxWaterSpeedY_L1
   108
   109 4B8A A9 01				lda #1
   110 4B8C 85 C9				sta m_playerMoveWaterSpeedY_H1
   111 					
   112 4B8E A9 00				lda #0
   113 4B90 85 CA				sta m_playerMoveWaterSpeedY_L1
   114
   115 				.else
   116
   117 						lda #4									; air vertical movement pixels per second (at 50 fps only!)
   118 						sta m_playerJumpSpeed_H1
   119 					
   120 						lda #51
   121 						sta m_playerJumpSpeed_L1
   122
   123 						lda #7									; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
   124 						sta m_playerMaxFallSpeed_H1
   125 					
   126 						lda #255
   127 						sta m_playerMaxFallSpeed_L1
   128
   129 						lda #0									;  frames (at 50 fps only!) to reach max speed (from zero)
   130 						sta m_playerGravityAccel_H1
   131 						
   132 						lda #134
   133 						sta m_playerGravityAccel_L1
   134
   135 						lda #0									; water vertical movement
   136 						sta m_playerWaterAccelY_H1
   137 						
   138 						lda #38
   139 						sta m_playerWaterAccelY_L1
   140
   141 						lda #0
   142 						sta m_playerMaxWaterSpeedY_H1
   143 					
   144 						lda #154
   145 						sta m_playerMaxWaterSpeedY_L1
   146
   147 						lda #1
   148 						sta m_playerMoveWaterSpeedY_H1
   149 					
   150 						lda #51
   151 						sta m_playerMoveWaterSpeedY_L1
   152
   153 				.endif
   154 					
   155 4B92 A2 08				ldx #PLR_WIDTH							; set size in pixels
   156 4B94 86 B1				stx m_playerSizeX
   157 4B96 CA					dex
   158 4B97 86 B3				stx m_playerSizeXMinusOne
   159 					
   160 4B99 A2 15				ldx #PLR_HEIGHT
   161 4B9B 86 B2				stx m_playerSizeY
   162 4B9D CA					dex
   163 4B9E 86 B4				stx m_playerSizeYMinusOne
   164 					
   165 4BA0 20 A4 4B				jsr InitPlayerInfo
   166 						
   167 4BA3 60					rts
   168 					
   169 				.endp	
   170
   171 				;
   172 				;**************************************************************************************************
   173 				; InitPlayerInfo
   174 				;**************************************************************************************************
   175 				;
   176 4BA4			.proc InitPlayerInfo
   177
   178 4BA4 A9 00				lda #0
   179 4BA6 85 CB				sta m_playerNoJumpTimer
   180 4BA8 85 CC				sta m_playerHoldJumpCounter
   181 4BAA 85 CF				sta m_playerOverPlatformFlag
   182 4BAC 85 D0				sta m_playerTopCollisionFlag
   183 4BAE 85 D1				sta m_playerSideCollisionFlag
   184
   185 4BB0 A2 01				ldx #PS_OVER_PLATFORM
   186 4BB2 20 FD 4E				jsr SetPlayerMethod
   187
   188
   189 4BB5 A9 00				lda #0
   190 4BB7 85 B5				sta m_playerSideSpeed_H1
   191 4BB9 85 B6				sta m_playerSideSpeed_L1
   192 						
   193 						; set uo spawn position
   194 4BBB 20 AE 54				jsr SetSpawnPos
   195 4BBE A9 02				lda #PSD_LEFT	
   196 4BC0 85 CD				sta m_lastPlayerSideDirection
   197 4BC2 85 CE				sta m_lastPlayerShootDirection
   198 4BC4 A9 01				lda #1
   199 4BC6 85 9C				sta m_redrawPlayerCounter
   200 4BC8 20 E7 55				jsr DrawPlayer
   201 						
   202 4BCB A9 01				lda #PSD_RIGHT	
   203 4BCD 85 CD				sta m_lastPlayerSideDirection
   204 4BCF 85 CE				sta m_lastPlayerShootDirection
   205 4BD1 A9 01				lda #1
   206 4BD3 85 9C				sta m_redrawPlayerCounter
   207 4BD5 20 E7 55				jsr DrawPlayer	
   208
   209 4BD8 20 AD 55				jsr SetPlayerInfo	
   210 						
   211 4BDB 60					rts
   212
   213 				.endp		
   214
   215 				;
   216 				;**************************************************************************************************
   217 				; InitLevelTable
   218 				;**************************************************************************************************
   219 				;
   220 4BDC			.proc InitLevelTable
   221 						
   222 4BDC A0 00				ldy #0
   223
   224 				;************************************************
   225 				;
   226 4BDE			ILTL_loop
   227
   228 4BDE AD D9 32				lda m_currentLineAddress
   229 4BE1 99 DB 32				sta TabLevelLineAddressLSB,y
   230 						
   231 4BE4 AD DA 32				lda m_currentLineAddress+1
   232 4BE7 99 DB 33				sta TabLevelLineAddressMSB,y
   233
   234 4BEA A5 D4				lda m_levelCharSizeX
   235 4BEC D0 06				bne ILTL_below_256
   236
   237 4BEE EE DA 32				inc m_currentLineAddress+1				; if m_levelCharSizeX = 0, then add 256 chars
   238 4BF1 4C 03 4C				jmp ILTL_check_loop
   239
   240 				;************************************************
   241 				;
   242 4BF4			ILTL_below_256
   243
   244 4BF4 18					clc
   245 4BF5 6D D9 32				adc m_currentLineAddress				; from 1 to 255 chars
   246 4BF8 8D D9 32				sta m_currentLineAddress
   247
   248 4BFB AD DA 32				lda m_currentLineAddress+1
   249 4BFE 69 00				adc #0
   250 4C00 8D DA 32				sta m_currentLineAddress+1
   251
   252 				;************************************************
   253 				;
   254 4C03			ILTL_check_loop
   255
   256 4C03 C8					iny
   257 4C04 C4 D5				cpy m_levelCharSizeY					; from 1 to 255 lines, 0 = 256 lines in this case
   258 4C06 D0 D6				bne ILTL_loop
   259 					
   260 4C08 AD D9 32				lda m_currentLineAddress				; add one more line definition to fix problem of ladders in the last line, but this is not going to work if there are 256 lines!
   261 4C0B 99 DB 32				sta TabLevelLineAddressLSB,y
   262 					
   263 4C0E AD DA 32				lda m_currentLineAddress+1
   264 4C11 99 DB 33				sta TabLevelLineAddressMSB,y
   265 					
   266 4C14 60					rts
   267 						
   268 				.endp		
   269
   270 				;
   271 				;**************************************************************************************************
   272 				; InitGoldCounter
   273 				;**************************************************************************************************
   274 				;
   275 4C15			.proc InitGoldCounter
   276
   277 4C15 A2 00				ldx #0									; line index
   278
   279 				;****	1st Loop
   280 				; 
   281 4C17			IGC_loop1
   282 					
   283 4C17 A0 00				ldy #0									; column index
   284 					
   285 4C19 BD DB 32				lda TabLevelLineAddressLSB,x
   286 4C1C 85 E9				sta m_ptrLevelLine
   287 						
   288 4C1E BD DB 33				lda TabLevelLineAddressMSB,x
   289 4C21 85 EA				sta m_ptrLevelLine+1
   290
   291 				;*****	2nd Loop
   292 				;
   293 4C23			IGC_loop2
   294
   295 4C23 B1 E9				lda (m_ptrLevelLine),y
   296 4C25 85 F1				sta m_currChar	
   297 4C27 86 D3				stx m_pageZeroTempValue
   298 4C29 AA					tax
   299 4C2A BD DB 34				lda TabCharDefinition,x
   300 4C2D A6 D3				ldx m_pageZeroTempValue
   301 					
   302 4C2F 29 0F				and #15
   303 4C31 C9 02				cmp #CT_COLLECTABLE
   304 4C33 D0 06				bne WaterCheck
   305 					
   306 4C35 EE 78 32				inc m_goldCounter
   307 4C38 4C 60 4C				jmp IGC_no_gold
   308 						
   309 				;*****	Water Check
   310 				;		
   311 4C3B			WaterCheck
   312
   313 4C3B C9 05				cmp #CT_WATER
   314 4C3D D0 06				bne HealthCheck
   315 						
   316 4C3F EE 7A 32				inc m_waterAvailable
   317 4C42 4C 60 4C				jmp IGC_no_gold
   318 						
   319 				;*****	Health Check
   320 				;		
   321 4C45			HealthCheck
   322
   323 4C45 C9 06				cmp #CT_HEALTH
   324 4C47 D0 06				bne VertLaserCheck
   325 						
   326 4C49 EE 79 32				inc m_healthCounter
   327 4C4C 4C 60 4C				jmp IGC_no_gold		
   328 						
   329 				;*****	Vertical Check
   330 				;		
   331 4C4F			VertLaserCheck
   332
   333 4C4F C9 08				cmp #CT_VLASER
   334 4C51 D0 06				bne HoriLaserCheck
   335 						
   336 4C53 EE 76 32				inc m_verticalLaserOn
   337 4C56 4C 60 4C				jmp IGC_no_gold
   338
   339 				;*****	Horizontal Check
   340 				;		
   341 4C59			HoriLaserCheck
   342
   343 4C59 C9 0A				cmp #CT_HLASER
   344 4C5B D0 03				bne IGC_no_gold
   345
   346 4C5D EE 77 32				inc m_horizontalLaserOn
   347 							
   348 				;*****	No Gold
   349 				;	
   350 4C60			IGC_no_gold
   351
   352 4C60 C8					iny
   353 4C61 C4 D4				cpy m_levelCharSizeX
   354 4C63 D0 BE				bne IGC_loop2
   355
   356 				;*****	Check Loop Y
   357 				;
   358 4C65			IGC_check_loop_Y
   359
   360 4C65 E8					inx
   361 4C66 E4 D5				cpx m_levelCharSizeY
   362 4C68 D0 AD				bne IGC_loop1	
   363 4C6A 60					rts
   364
   365 				.endp	
   366
   367 				;
   368 				;**************************************************************************************************
   369 				; UpdateInfoLine
   370 				;**************************************************************************************************
   371 				;
   372 4C6B			.proc InitPlatforms
   373
   374 4C6B A2 00				ldx #$00
   375 4C6D 8E 71 32				stx m_floatPlatformV
   376 4C70 8E 72 32				stx m_floatPlatformH
   377 4C73 8E 73 32				stx m_floatPlatformIdx		
   378 						
   379 				;*****	Beging loop
   380 				;
   381 4C76			loop
   382 4C76 A0 00				ldy #0									; column index
   383 					
   384 4C78 BD DB 32				lda TabLevelLineAddressLSB,x		
   385 4C7B 85 E9				sta m_ptrLevelLine
   386 						
   387 4C7D BD DB 33				lda TabLevelLineAddressMSB,x
   388 4C80 85 EA				sta m_ptrLevelLine+1
   389
   390 				;*****	Middle loop
   391 				;
   392 4C82			loop1
   393
   394 4C82 B1 E9				lda (m_ptrLevelLine),y
   395 4C84 85 F1				sta m_currChar	
   396 4C86 86 D3				stx m_pageZeroTempValue
   397 4C88 AA					tax
   398 4C89 BD DB 34				lda TabCharDefinition,x
   399 4C8C A6 D3				ldx m_pageZeroTempValue
   400
   401 4C8E 29 0F				and #15
   402 4C90 C9 07				cmp #CT_FLOATPLATFORMH
   403 4C92 F0 07				beq loopH
   404 						
   405 4C94 C9 09				cmp #CT_FLOATPLATFORMV
   406 4C96 F0 4F				beq loopV		
   407 4C98 4C ED 4C				jmp loop2	
   408
   409 4C9B			loopH
   410 4C9B AD 74 6A				lda PlatformCharH
   411 4C9E C5 F1				cmp m_currChar
   412 4CA0 F0 0A				beq StartH
   413
   414 4CA2 AD 75 6A				lda PlatformCharH+1
   415 4CA5 C5 F1				cmp m_currChar
   416 4CA7 F0 03				beq StartH
   417 4CA9 4C ED 4C				jmp loop2
   418 									
   419 4CAC			StartH	
   420 											 
   421 4CAC 8A					txa										; move x to a
   422 4CAD 48					pha										; store a
   423
   424 4CAE 98					tya										; move y to a
   425 4CAF 48					pha										; store a
   426 						
   427 4CB0 AC 73 32				ldy m_floatPlatformIdx					; put the current index in y
   428
   429 4CB3 48					pha
   430 4CB4 BD DB 32				lda TabLevelLineAddressLSB,x
   431 4CB7 99 78 6A				sta PlatformBaseLSB,y
   432 4CBA BD DB 33				lda TabLevelLineAddressMSB,x
   433 4CBD 99 80 6A				sta PlatformBaseMSB,y
   434 						
   435 4CC0 68					pla		
   436 4CC1 18					clc										; clear the carry
   437 4CC2 7D DB 32				adc TabLevelLineAddressLSB,x			; add the lsb screen address		
   438 4CC5 99 3C 6A				sta PlatformLSB,y						; store it by index		
   439 						
   440 4CC8 BD DB 33				lda TabLevelLineAddressMSB,x			; get the msb screen address
   441 4CCB 69 00				adc #00									; account for carry
   442 4CCD 99 44 6A				sta PlatformMSB,y						; store it by index
   443 						
   444 4CD0 A9 01				lda #01									; type 01 is horizontal
   445 4CD2 99 54 6A				sta PlatformType,y						; store it by index
   446 						
   447 4CD5 A9 00				lda #$00								; initialize the step
   448 4CD7 99 64 6A				sta PlatformStepX,y						; store it by index
   449 								
   450 4CDA EE 73 32				inc m_floatPlatformIdx					; increment the index
   451 4CDD EE 72 32				inc m_floatPlatformH
   452 						
   453 4CE0 68					pla										; pull y
   454 4CE1 A8					tay										; restore y
   455
   456 4CE2 68					pla										; pull x
   457 4CE3 AA					tax										; restore x
   458
   459 4CE4 4C ED 4C				jmp loop2
   460 						
   461 4CE7			loopV	
   462 4CE7 BD DB 34				lda TabCharDefinition,x			
   463 4CEA EE 71 32				inc m_floatPlatformV
   464 						
   465 				;*****	Loop on X 
   466 				;		
   467 4CED			loop2	
   468 4CED C8					iny
   469 4CEE C4 D4				cpy m_levelCharSizeX
   470 4CF0 D0 90				bne loop1
   471 						
   472 4CF2 E8					inx
   473 4CF3 E4 D5				cpx m_levelCharSizeY
   474 4CF5 F0 03				beq Exit
   475 4CF7 4C 76 4C				jmp loop
   476 						
   477 4CFA			Exit		
   478 4CFA 60					rts
   479
   480 				.endp
   481
   482 				;
   483 				;**************************************************************************************************
   484 				; InitEnemyManager
   485 				;
   486 				; parse every type of enemy, init its life, state, char index and position
   487 				; update total and active enemies
   488 				;
   489 				;**************************************************************************************************
   490 				;
   491 4CFB			.proc InitEnemyManager
   492
   493 						; parse enemy type 1 (only one for now)
   494 4CFB A2 01				ldx #1							; enemy type index
   495 4CFD BD 59 68				lda TabEnemyDefBaseChar,x
   496 4D00 8D A3 32				sta m_searchEnemyChar
   497 4D03 BD 57 68				lda TabEnemyDefLife,x
   498 4D06 8D A4 32				sta m_defEnemyLife
   499 					
   500 4D09 A6 D4				ldx m_levelCharSizeX
   501 4D0B CA					dex										; we search in a shorter line because this enemy has a width of 2 chars
   502 4D0C 8E A5 32				stx m_numberOfValidRows
   503 					
   504 4D0F A2 00				ldx #0									; line index
   505 				;
   506 				;************************************************
   507 				;
   508 4D11			IEM_loop1
   509 					
   510 4D11 A0 00				ldy #0									; column index	
   511 4D13 BD DB 32				lda TabLevelLineAddressLSB,x
   512 4D16 85 E9				sta m_ptrLevelLine
   513 4D18 BD DB 33				lda TabLevelLineAddressMSB,x
   514 4D1B 85 EA				sta m_ptrLevelLine+1
   515
   516 				;************************************************
   517 				;
   518 4D1D			IEM_loop2
   519 					
   520 4D1D B1 E9				lda (m_ptrLevelLine),y
   521 4D1F CD A3 32				cmp m_searchEnemyChar
   522 4D22 D0 78				bne IEM_no_enemy
   523
   524 4D24 8E A6 32				stx m_tempByte
   525 4D27 AE A1 32				ldx m_totalEnemies
   526
   527 						; init info for this enemy
   528 4D2A A9 01				lda #1
   529 4D2C 9D 77 66				sta TabEnemyType,x
   530 						
   531 4D2F AD A4 32				lda m_defEnemyLife
   532 4D32 9D 97 66				sta TabEnemyLife,x
   533 						
   534 4D35 A9 01				lda #1
   535 4D37 9D B7 66				sta TabEnemyState,x
   536 						
   537 4D3A A9 78				lda #ENEMY_INIT_TIMER					; dont allow enemy actions for the first 4 seconds
   538 4D3C 9D D7 66				sta TabEnemyStateTimer,x
   539 						
   540 4D3F AD A3 32				lda m_searchEnemyChar
   541 4D42 9D F7 66				sta TabEnemyBaseCharIndex,x
   542 4D45 98					tya
   543 4D46 9D 17 67				sta TabEnemyBaseCharX,x
   544 						
   545 4D49 AD A6 32				lda m_tempByte
   546 4D4C 9D 37 67				sta TabEnemyBaseCharY,x
   547
   548 						; init level position
   549 						; TabEnemyLevelTopY_H2 starts as 0, now multiply by 8 to get the line
   550 4D4F 0A					asl
   551 4D50 3E B7 67				rol TabEnemyLevelTopY_H2,x
   552 4D53 0A					asl
   553 4D54 3E B7 67				rol TabEnemyLevelTopY_H2,x
   554 4D57 0A					asl
   555 4D58 3E B7 67				rol TabEnemyLevelTopY_H2,x
   556 4D5B 9D 97 67				sta TabEnemyLevelTopY_H1,x
   557 					
   558 						; TabEnemyLevelLeftX_H2 starts as 0, now multiply by 4 to get the horizontal pixel
   559 4D5E 98					tya
   560 4D5F 0A					asl
   561 4D60 3E 77 67				rol TabEnemyLevelLeftX_H2,x
   562 4D63 0A					asl
   563 4D64 3E 77 67				rol TabEnemyLevelLeftX_H2,x
   564 4D67 9D 57 67				sta TabEnemyLevelLeftX_H1,x
   565
   566 						; init shot creation position (offset x: 3, offset y: 1)
   567 4D6A BD 57 67				lda TabEnemyLevelLeftX_H1,x
   568 4D6D 18					clc
   569 4D6E 69 03				adc #3
   570 4D70 9D D7 67				sta TabEnemyShotLevelLeftX_H1,x
   571 4D73 BD 77 67				lda TabEnemyLevelLeftX_H2,x
   572 4D76 69 00				adc #0
   573 4D78 9D F7 67				sta TabEnemyShotLevelLeftX_H2,x
   574 					
   575 4D7B BD 97 67				lda TabEnemyLevelTopY_H1,x
   576 4D7E 18					clc
   577 4D7F 69 01				adc #1
   578 4D81 9D 17 68				sta TabEnemyShotLevelTopY_H1,x
   579 						
   580 4D84 BD B7 67				lda TabEnemyLevelTopY_H2,x
   581 4D87 69 00				adc #0
   582 4D89 9D 37 68				sta TabEnemyShotLevelTopY_H2,x
   583
   584 						; update number of enemies	
   585 4D8C EE A1 32				inc m_totalEnemies
   586 4D8F EE A2 32				inc m_activeEnemies
   587
   588 4D92 AD A1 32				lda m_totalEnemies
   589 4D95 C9 20				cmp #MAX_ENEMIES_PER_LEVEL
   590 4D97 F0 14				beq IEM_exit
   591 					
   592 4D99 AE A6 32				ldx m_tempByte
   593
   594 				;************************************************
   595 				;
   596 4D9C			IEM_no_enemy
   597 						
   598 4D9C C8					iny
   599 4D9D CC A5 32				cpy m_numberOfValidRows
   600 4DA0 F0 03				beq IEM_check_loop_Y
   601 4DA2 4C 1D 4D				jmp IEM_loop2
   602
   603 				;************************************************
   604 				;
   605 4DA5			IEM_check_loop_Y
   606
   607 4DA5 E8					inx
   608 4DA6 E4 D5				cpx m_levelCharSizeY
   609 4DA8 F0 03				beq IEM_exit
   610 4DAA 4C 11 4D				jmp IEM_loop1
   611
   612 				;************************************************
   613 				;
   614 4DAD			IEM_exit
   615 					
   616 4DAD 60					rts
   617 						
   618 				.endp		
   619
   620 				;
   621 				;**************************************************************************************************
   622 				; InitMissileSystem
   623 				;	
   624 				; 	Right now, the missile system is using a 1-on-1 relationship between
   625 				; 	a virtual missile and a hardware missile, so we have a max of 4 virtual
   626 				; 	missiles. If we want more virtual missiles we can only draw 4 every frame,
   627 				; 	so some of them can lose hardware collisions and they are going to flicker
   628 				;
   629 				;**************************************************************************************************
   630 				;
   631 4DAE			.proc InitMissileSystem
   632
   633 				.if PAL_VERSION = 0
   634 4DAE A9 24				lda #[32+4]		; red color, change for pal
   635 				.else
   636 						lda #[16+4]
   637 				.endif
   638 4DB0 85 9D				sta m_missleBaseColor00
   639 						
   640 4DB2 A9 00				lda #0
   641 4DB4 8D A3 5C				sta m_currentVirtualMissiles
   642
   643 4DB7 A2 00				ldx #0
   644
   645 4DB9			IMS_loop
   646 4DB9 9D A4 5C				sta TabMissileScreenLeftX,x
   647 4DBC 9D A8 5C				sta TabMissileScreenTopY,x
   648 4DBF 9D AC 5C				sta TabOldMissileScreenLeftX,x
   649 4DC2 9D B0 5C				sta TabOldMissileScreenTopY,x
   650
   651 4DC5 9D B4 5C				sta TabMissileLevelLeftX_H2,x
   652 4DC8 9D B8 5C				sta TabMissileLevelLeftX_H1,x
   653 4DCB 9D BC 5C				sta TabMissileLevelLeftX_L1,x
   654 4DCE 9D C0 5C				sta TabMissileLevelTopY_H2,x
   655 4DD1 9D C4 5C				sta TabMissileLevelTopY_H1,x
   656 4DD4 9D C8 5C				sta TabMissileLevelTopY_L1,x
   657
   658 4DD7 9D CC 5C				sta TabMissileSpeedX_H1,x
   659 4DDA 9D D0 5C				sta TabMissileSpeedX_L1,x
   660
   661 4DDD 9D D4 5C				sta TabMissileDirection,x
   662
   663 4DE0 9D D8 5C				sta TabMissileFrameCounter_H2,x
   664 4DE3 9D DC 5C				sta TabMissileFrameCounter_H1,x
   665
   666 4DE6 9D E0 5C				sta TabMissileOwner,x
   667
   668 4DE9 E8					inx
   669 4DEA E0 04				cpx #MAX_VIRTUAL_MISSILES
   670 4DEC D0 CB				bne IMS_loop
   671
   672 4DEE 60					rts
   673
   674 				.endp	
   675 					
   351 4DEF					icl "Utilities.Asm"				
Source: E:\_8BitProjects\Series\Scroller\Utilities.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Utilities.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; UpdateInfoLine
    15 				;**************************************************************************************************
    16 				;
    17 4DEF			.proc UpdateInfoLine
    18 					
    19 4DEF AD 78 32				lda m_goldCounter						; assuming 99 or less
    20 4DF2 A0 04				ldy #4
    21 4DF4 20 E3 4A				jsr DisplayDebugInfoBinary99
    22
    23 4DF7 AD A2 32				lda m_activeEnemies
    24 4DFA A0 0C				ldy #12
    25 4DFC 20 E3 4A				jsr DisplayDebugInfoBinary99
    26
    27 4DFF AD 79 32				lda m_healthCounter						; assuming 99 or less
    28 4E02 A0 1F				ldy #31
    29 4E04 20 E3 4A				jsr DisplayDebugInfoBinary99
    30
    31 4E07 AD 7B 32				lda m_disableGameTimer					; update the time here also
    32 4E0A D0 66				bne UIL_exit
    33 					
    34 4E0C AD 78 32				lda m_goldCounter
    35 4E0F D0 0A				bne UIL_update_timer
    36 						
    37 4E11 AD A2 32				lda m_activeEnemies
    38 4E14 D0 05				bne UIL_update_timer
    39 					
    40 4E16 A9 01				lda #1
    41 4E18 8D 7B 32				sta m_disableGameTimer					; my record? 1:16.1 (NTSC, lost one life)
    42
    43 				;*****	allow the final update..
    44 				;
    45 4E1B			UIL_update_timer
    46 					
    47 4E1B EE 7F 32				inc m_gameTSFrameCounter
    48 4E1E AD 7F 32				lda m_gameTSFrameCounter
    49 4E21 C9 06				cmp #TENTH_OF_SECOND_FRAMES
    50 4E23 D0 35				bne UIL_draw_timer
    51 					
    52 4E25 A9 00				lda #0
    53 4E27 8D 7F 32				sta m_gameTSFrameCounter
    54 4E2A EE 7E 32				inc m_gameTimerTSeconds
    55 						
    56 4E2D AD 7E 32				lda m_gameTimerTSeconds
    57 4E30 C9 0A				cmp #10
    58 4E32 D0 26				bne UIL_draw_timer
    59 					
    60 4E34 A9 00				lda #0
    61 4E36 8D 7E 32				sta m_gameTimerTSeconds
    62 4E39 EE 7C 32				inc m_gameTimerSeconds
    63 					
    64 4E3C AD 7C 32				lda m_gameTimerSeconds
    65 4E3F C9 3C				cmp #60
    66 4E41 D0 17				bne UIL_draw_timer
    67 					
    68 4E43 A9 00				lda #0
    69 4E45 8D 7C 32				sta m_gameTimerSeconds
    70 4E48 EE 7D 32				inc m_gameTimerMinutes
    71
    72 4E4B AD 7D 32				lda m_gameTimerMinutes
    73 4E4E C9 64				cmp #100
    74 4E50 D0 08				bne UIL_draw_timer
    75 					
    76 4E52 A9 01				lda #1
    77 4E54 8D 7B 32				sta m_disableGameTimer
    78 4E57 4C 72 4E				jmp UIL_exit							; final timer would be 99:99.9 in this case
    79
    80 				;*****	Draw Timer
    81 				;
    82 4E5A			UIL_draw_timer
    83 					
    84 4E5A AD 7D 32				lda m_gameTimerMinutes
    85 4E5D A0 14				ldy #20
    86 4E5F 20 E3 4A				jsr DisplayDebugInfoBinary99
    87 					
    88 4E62 AD 7C 32				lda m_gameTimerSeconds
    89 4E65 A0 17				ldy #23
    90 4E67 20 E3 4A				jsr DisplayDebugInfoBinary99
    91 					
    92 4E6A AD 7E 32				lda m_gameTimerTSeconds
    93 4E6D A0 1A				ldy #26
    94 4E6F 20 04 4B				jsr DisplayDebugInfoBinary9
    95
    96 				;*****	Exit
    97 				;
    98 4E72			UIL_exit
    99 						
   100 4E72 60					rts
   101 					
   102 				.endp	
   103
   104 				;
   105 				;**************************************************************************************************
   106 				; UpdateTimers
   107 				;**************************************************************************************************
   108 				;
   109 4E73			.proc UpdateTimers
   110 						
   111 4E73 A5 CB				lda m_playerNoJumpTimer
   112 4E75 F0 02				beq UT_end_no_jump
   113 4E77 C6 CB				dec m_playerNoJumpTimer
   114 					
   115 				;************************************************
   116 				;	
   117 4E79			UT_end_no_jump		
   118 						
   119 4E79 60					rts
   120
   121 				.endp	
   122
   352 4E7A					icl "DisplayListInterrupts.asm"
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		DisplayListInterrupts.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	Color			Dec			HEX    	Color			Dec				HEX
    14 				;	-------------------------------		-----------------------------------
    15 				;	Black           00,			$00		Medium blue      08,    		$08
    16 				;	Rust            01,			$01		Dark blue        09,    		$09
    17 				;	Red-orange      02,			$02		Blue-grey      	 10,    		$0A
    18 				;	Dark orange     03,			$03		Olive green    	 11,    		$0B
    19 				;	Red             04,			$04		Medium green   	 12,    		$0C
    20 				;	Dk lavender     05,			$05		Dark green     	 13,    		$0D
    21 				;	Cobalt blue     06,			$06		Orange-green   	 14,    		$0E
    22 				;	Ultramarine     07,			$07		Orange         	 15,    		$0F
    23 				;
    24 				;**************************************************************************************************
    25 				; Display list 1 interruptions code
    26 				;**************************************************************************************************
    27 				;
    28 4E7A			GameDli_01
    29 						
    30 4E7A 48					pha
    31 4E7B 98					tya
    32 4E7C 48					pha
    33 						
    34 				.if PAL_VERSION = 0
    35
    36 4E7D					SetColor $00, $03, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E7D A9 34					lda #[$03 * 16 + $04]
     9 4E7F 8D 16 D0					sta COLPF0+$00
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    37 4E82					SetColor $01, $00, $0F
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E82 A9 0F					lda #[$00 * 16 + $0F]
     9 4E84 8D 17 D0					sta COLPF0+$01
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    38 4E87					SetColor $02, $0D, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E87 A9 D4					lda #[$0D * 16 + $04]
     9 4E89 8D 18 D0					sta COLPF0+$02
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    39 4E8C					SetColor $03, $0F, $0C		
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4E8C A9 FC					lda #[$0F * 16 + $0C]
     9 4E8E 8D 19 D0					sta COLPF0+$03
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    40 						
    41 				.else
    42
    43 						SetColor 1, 15, 14		; yellow (collectables)
    44 						SetColor 2, 7, 2		; blue (water)
    45
    46 				.endif
    47 						
    48 4E91 A5 AD				lda m_playerScreenLeftX
    49 4E93 8D 00 D0				sta HPOSP0
    50 4E96 8D 01 D0				sta HPOSP1
    51 4E99 8D 02 D0				sta HPOSP2
    52
    53 4E9C					SetFontAddress GameFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4E9C A9 A8				lda #>GAMEFONTADDRESS
     5 4E9E 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    54 4EA1 8D 0A D4		    	sta WSYNC   			; Wait off-screen
    55
    56 						
    57 4EA4					SetDisplayListInterrupt TextDli 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4EA4 A9 B2		      	lda #<TEXTDLI
     5 4EA6 8D FA FF			    sta NMIH_VECTOR
     6 4EA9 A9 4E			    lda #>TEXTDLI
     7 4EAB 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    58
    59 4EAE 68					pla
    60 4EAF A8					tay
    61 4EB0 68					pla
    62 						
    63 4EB1 40					rti
    64 				;
    65 				;**************************************************************************************************
    66 				; Display list 2 interruptions code
    67 				;**************************************************************************************************
    68 				;
    69 4EB2			TextDli
    70
    71 4EB2 48					pha
    72 4EB3 98					tya
    73 4EB4 48					pha
    74 							
    75 				.if PAL_VERSION = 0
    76
    77 4EB5					SetColor 1, $03, $0A
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4EB5 A9 3A					lda #[$03 * 16 + $0A]
     9 4EB7 8D 17 D0					sta COLPF0+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    78 4EBA					SetColor 2, $04, $01			
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     8 4EBA A9 41					lda #[$04 * 16 + $01]
     9 4EBC 8D 18 D0					sta COLPF0+2
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    79 				.else
    80
    81 						SetColor 1, 15, 14		; yellow (collectables)
    82 						SetColor 2, 7, 2		; blue (water)
    83
    84 				.endif
    85 						
    86 4EBF					SetFontAddress TextFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4EBF A9 AC				lda #>TEXTFONTADDRESS
     5 4EC1 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    87 4EC4 8D 0A D4				STA WSYNC 				;Wait off-screen
    88
    89 						
    90 4EC7					SetDisplayListInterrupt GameDli_01 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Scroller\\Lib\SysMacros.Asm]
     4 4EC7 A9 7A		      	lda #<GAMEDLI_01
     5 4EC9 8D FA FF			    sta NMIH_VECTOR
     6 4ECC A9 4E			    lda #>GAMEDLI_01
     7 4ECE 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Scroller\DisplayListInterrupts.asm
    91
    92 4ED1 68					pla
    93 4ED2 A8					tay
    94 4ED3 68					pla
    95 						
    96 4ED4 40					rti
   353 4ED5					icl "PlayerStates.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerStates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerStates.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 4ED5			TabPlayerMethodColor
    18 				.if PAL_VERSION = 0
    19 4ED5 0A BA 9A 9A 1C 78 + 	.byte 10, 11*16+10, 9*16+10, 9*16+10, 1*16+12, 7*16+8, 4, 2*16+6
    20 				.else
    21 					.byte 10, 10*16+10, 8*16+10, 8*16+10, 15*16+12, 7*16+8, 4, 1*16+6
    22 				.endif
    23
    24 4EDD			TabPlayerMethodLSB
    25 4EDD CB C9			.byte <PlayerMethodStatic, <PlayerMethodOverPlatform
    26 4EDF 03 79			.byte <PlayerMethodJumping, <PlayerMethodFalling
    27 4EE1 F2 AE			.byte <PlayerMethodClimbing, <PlayerMethodInWater
    28 4EE3 A8 AB			.byte <PlayerMethodGravityTest, <PlayerMethodLose
    29
    30 4EE5			TabPlayerMethodMSB
    31 4EE5 4F 50			.byte >PlayerMethodStatic, >PlayerMethodOverPlatform
    32 4EE7 52 52			.byte >PlayerMethodJumping, >PlayerMethodFalling
    33 4EE9 52 53			.byte >PlayerMethodClimbing, >PlayerMethodInWater
    34 4EEB 54 54			.byte >PlayerMethodGravityTest, >PlayerMethodLose
    35
    36 4EED			TabPlayerMethodInitLSB
    37 4EED 22 23			.byte <PlayerMethodInitStatic, <PlayerMethodInitOverPlatform
    38 4EEF 42 67			.byte <PlayerMethodInitJumping, <PlayerMethodInitFalling
    39 4EF1 80 8B			.byte <PlayerMethodInitClimbing, <PlayerMethodInitInWater
    40 4EF3 BA BB			.byte <PlayerMethodInitGravityTest, <PlayerMethodInitLose
    41
    42 4EF5			TabPlayerMethodInitMSB
    43 4EF5 4F 4F			.byte >PlayerMethodInitStatic, >PlayerMethodInitOverPlatform
    44 4EF7 4F 4F			.byte >PlayerMethodInitJumping, >PlayerMethodInitFalling
    45 4EF9 4F 4F			.byte >PlayerMethodInitClimbing, >PlayerMethodInitInWater
    46 4EFB 4F 4F			.byte >PlayerMethodInitGravityTest, >PlayerMethodInitLose
    47 				;
    48 				;**************************************************************************************************
    49 				; SetPlayerMethod
    50 				;**************************************************************************************************
    51 				;
    52 4EFD			SetPlayerMethod
    53 4EFD 86 D2			stx m_playerState
    54 					
    55 4EFF BD DD 4E			lda TabPlayerMethodLSB,x
    56 4F02 85 ED			sta m_playerMethodPointer
    57 					
    58 4F04 BD E5 4E			lda TabPlayerMethodMSB,x
    59 4F07 85 EE			sta m_playerMethodPointer+1
    60
    61 4F09 A9 8A			lda #$8A
    62 4F0B 85 9E			sta m_playerBaseColor00	
    63 					
    64 4F0D A9 3A			lda #$3A
    65 4F0F 85 9F			sta m_playerBaseColor1A
    66 						
    67 4F11 A9 0F			lda #$0F
    68 4F13 85 A0			sta m_playerBaseColor1B
    69 						
    70 4F15 BD ED 4E			lda TabPlayerMethodInitLSB,x
    71 4F18 85 EB			sta m_pageZeroTempPointer
    72 					
    73 4F1A BD F5 4E			lda TabPlayerMethodInitMSB,x
    74 4F1D 85 EC			sta m_pageZeroTempPointer+1
    75 					
    76 4F1F 6C EB 00			jmp (m_pageZeroTempPointer)
    77 				;
    78 				;**************************************************************************************************
    79 				; PlayerMethodInitStatic
    80 				;**************************************************************************************************
    81 				;
    82 4F22			PlayerMethodInitStatic
    83 4F22 60				rts
    84 				;
    85 				;**************************************************************************************************
    86 				; PlayerMethodInitOverPlatform
    87 				;**************************************************************************************************
    88 				;
    89 4F23			PlayerMethodInitOverPlatform
    90 4F23 A9 00			lda #0										; clear player speed in Y
    91 4F25 85 BD			sta m_playerSpeedY_H1
    92 4F27 85 BE			sta m_playerSpeedY_L1
    93 					
    94 4F29 A9 01			lda #SIDE_SPEED_LAND_H1						; init max side speed
    95 4F2B 85 B7			sta m_playerMaxSideSpeed_H1
    96 4F2D A9 01			lda #SIDE_SPEED_LAND_L1
    97 4F2F 85 B8			sta m_playerMaxSideSpeed_L1
    98 					
    99 4F31 A9 00			lda #SIDE_ACCEL_LAND_H1						; init side accelerations
   100 4F33 85 B9			sta m_playerSideAccel_H1
   101 4F35 A9 20			lda #SIDE_ACCEL_LAND_L1
   102 4F37 85 BA			sta m_playerSideAccel_L1
   103
   104 4F39 A9 00			lda #SIDE_DEACCEL_LAND_H1
   105 4F3B 85 BB			sta m_playerSideDeaccel_H1
   106 4F3D A9 80			lda #SIDE_DEACCEL_LAND_L1
   107 4F3F 85 BC			sta m_playerSideDeaccel_L1
   108 4F41 60				rts
   109 				;
   110 				;**************************************************************************************************
   111 				; PlayerMethodInitJumping
   112 				;**************************************************************************************************
   113 				;
   114 4F42			PlayerMethodInitJumping
   115
   116 4F42 A9 08			lda #JUMP_HOLD_FRAMES						; hold jump for this number of frames, if the button is still pressed
   117 4F44 85 CC			sta m_playerHoldJumpCounter
   118
   119 4F46 A5 BF			lda m_playerJumpSpeed_H1
   120 4F48 85 BD			sta m_playerSpeedY_H1
   121 4F4A A5 C0			lda m_playerJumpSpeed_L1
   122 4F4C 85 BE			sta m_playerSpeedY_L1
   123
   124 4F4E A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   125 4F50 85 B7			sta m_playerMaxSideSpeed_H1
   126 4F52 A9 20			lda #SIDE_SPEED_AIR_L1
   127 4F54 85 B8			sta m_playerMaxSideSpeed_L1
   128
   129 4F56 A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   130 4F58 85 B9			sta m_playerSideAccel_H1
   131 4F5A A9 10			lda #SIDE_ACCEL_AIR_L1
   132 4F5C 85 BA			sta m_playerSideAccel_L1
   133
   134 4F5E A9 00			lda #SIDE_DEACCEL_AIR_H1
   135 4F60 85 BB			sta m_playerSideDeaccel_H1
   136 4F62 A9 10			lda #SIDE_DEACCEL_AIR_L1
   137 4F64 85 BC			sta m_playerSideDeaccel_L1
   138 4F66 60				rts
   139 				;
   140 				;**************************************************************************************************
   141 				; PlayerMethodInitFalling
   142 				;**************************************************************************************************
   143 				;
   144 4F67			PlayerMethodInitFalling
   145
   146 4F67 A9 01			lda #SIDE_SPEED_AIR_H1						; init max side speed
   147 4F69 85 B7			sta m_playerMaxSideSpeed_H1
   148 4F6B A9 20			lda #SIDE_SPEED_AIR_L1
   149 4F6D 85 B8			sta m_playerMaxSideSpeed_L1
   150
   151 4F6F A9 00			lda #SIDE_ACCEL_AIR_H1						; init side accelerations
   152 4F71 85 B9			sta m_playerSideAccel_H1
   153 4F73 A9 10			lda #SIDE_ACCEL_AIR_L1
   154 4F75 85 BA			sta m_playerSideAccel_L1
   155
   156 4F77 A9 00			lda #SIDE_DEACCEL_AIR_H1
   157 4F79 85 BB			sta m_playerSideDeaccel_H1
   158 4F7B A9 10			lda #SIDE_DEACCEL_AIR_L1
   159 4F7D 85 BC			sta m_playerSideDeaccel_L1
   160
   161 4F7F 60				rts
   162 				;
   163 				;**************************************************************************************************
   164 				; PlayerMethodInitClimbing
   165 				;**************************************************************************************************
   166 				;
   167 4F80			PlayerMethodInitClimbing
   168
   169 4F80 A9 00			lda #0										; clear player speed in X and Y
   170 4F82 85 B5			sta m_playerSideSpeed_H1
   171 4F84 85 B6			sta m_playerSideSpeed_L1
   172 4F86 85 BD			sta m_playerSpeedY_H1
   173 4F88 85 BE			sta m_playerSpeedY_L1
   174
   175 4F8A 60				rts
   176 				;
   177 				;**************************************************************************************************
   178 				; PlayerMethodInitInWater
   179 				;**************************************************************************************************
   180 				;
   181 4F8B			PlayerMethodInitInWater
   182
   183 4F8B A9 01			lda #1										; set starting direction going down (0 = going up, 1 = going down)
   184 4F8D 8D D4 32			sta m_waterPlayerDirectionFlag
   185
   186 4F90 A9 00			lda #0
   187 4F92 8D D5 32			sta m_playerOnWaterSurfaceFlag
   188
   189 4F95 46 BD			lsr m_playerSpeedY_H1						; reduce in half current falling speed
   190 4F97 66 BE			ror m_playerSpeedY_L1
   191
   192 4F99 46 B5			lsr m_playerSideSpeed_H1					; reduce in half current side speed
   193 4F9B 66 B6			ror m_playerSideSpeed_L1
   194
   195 4F9D A9 00			lda #SIDE_SPEED_WATER_H1					; init max side speed
   196 4F9F 85 B7			sta m_playerMaxSideSpeed_H1
   197 4FA1 A9 80			lda #SIDE_SPEED_WATER_L1
   198 4FA3 85 B8			sta m_playerMaxSideSpeed_L1
   199
   200 4FA5 A9 00			lda #SIDE_ACCEL_WATER_H1					; init side accelerations
   201 4FA7 85 B9			sta m_playerSideAccel_H1
   202 4FA9 A9 04			lda #SIDE_ACCEL_WATER_L1
   203 4FAB 85 BA			sta m_playerSideAccel_L1
   204
   205 4FAD A9 00			lda #SIDE_DEACCEL_WATER_H1
   206 4FAF 85 BB			sta m_playerSideDeaccel_H1
   207 4FB1 A9 04			lda #SIDE_DEACCEL_WATER_L1
   208 4FB3 85 BC			sta m_playerSideDeaccel_L1
   209
   210 4FB5 A9 1E			lda #WATER_NO_JUMP_FRAMES					; disable jump for some frames
   211 4FB7 85 CB			sta m_playerNoJumpTimer
   212 					
   213 4FB9 60				rts
   214 				;
   215 				;**************************************************************************************************
   216 				; PlayerMethodInitGravityTest
   217 				;**************************************************************************************************
   218 				;
   219 4FBA			PlayerMethodInitGravityTest
   220 4FBA 60				rts
   221 				;
   222 				;**************************************************************************************************
   223 				; PlayerMethodInitLose
   224 				;**************************************************************************************************
   225 				;
   226 4FBB			PlayerMethodInitLose
   227 4FBB A5 AE			lda m_playerScreenTopY
   228 4FBD 8D D6 32			sta m_playerExplosionScreenTopY_H1
   229 4FC0 A9 00			lda #0
   230 4FC2 8D D7 32			sta m_playerExplosionScreenTopY_L1
   231
   232 4FC5 A9 01			lda #1
   233 4FC7 8D D2 32			sta m_playerExplosionStep
   234
   235 4FCA 60				rts
   236 				;
   237 				;**************************************************************************************************
   238 				; PlayerMethodInitLose
   239 				;**************************************************************************************************
   240 				;
   241 4FCB			PlayerMethodStatic
   242 4FCB 4C 94 49			jmp GameLoop.PlayerMethodReturn
   243
   244 				;
   245 				;**************************************************************************************************
   246 				;
   247 				; 	CheckCollectable
   248 				;
   249 				;**************************************************************************************************
   250 				;
   251 4FCE			.proc CheckCollectable
   252
   253 4FCE A9 04			lda #[PLR_WIDTH / 2]						; check middle left center pixel, to see if there is a collectable
   254 4FD0 8D D0 32			sta m_bottomPosOffsetX
   255 					
   256 4FD3 A9 0A			lda #[PLR_HEIGHT / 2]
   257 4FD5 8D D1 32			sta m_bottomPosOffsetY
   258 					
   259 4FD8 20 32 5C			jsr CheckPlayerBottomUpPos
   260
   261 4FDB 29 0F			and #15
   262 4FDD C9 02			cmp #CT_COLLECTABLE
   263 4FDF F0 07			beq DecrementCoins
   264 					
   265 4FE1 C9 06			cmp	#CT_HEALTH
   266 4FE3 F0 0D			beq DecrementHealth
   267 					
   268 				;	lda m_playerLevelLeftX_H1					; check if right side pixel is in other char
   269 				;	and #%11									; "m_playerSizeXMinusOne"
   270 				;	beq CC_exit
   271 				;
   272 				;	iny											; check the right side char then
   273 				;	lda (m_ptrLevelLine),y
   274 				;	tax
   275 				;	lda TabCharDefinition,x
   276 				;	
   277 				;	and #15	
   278 				;	cmp #CT_COLLECTABLE
   279 				;	beq DecrementCoins
   280 				;	
   281 				;	cmp	#CT_HEALTH
   282 				;	beq DecrementHealth
   283 					
   284 				;	inc m_middleBottomCharPosX
   285
   286 4FE5 4C 0A 50			jmp CC_exit
   287 					
   288 				;***** Decrement Coins
   289 				;	
   290 4FE8			DecrementCoins
   291 					
   292 4FE8 CE 78 32			dec m_goldCounter
   293 4FEB A9 01			lda #SFX_DIAMOND
   294 4FED 85 99			sta m_sfxEffect
   295 4FEF 4C F9 4F			jmp CC_start_animation
   296 					
   297 				;***** Decrement Health
   298 				;	
   299 4FF2			DecrementHealth	
   300 					
   301 4FF2 CE 79 32			dec m_healthCounter
   302 4FF5 A9 01			lda #SFX_DIAMOND
   303 4FF7 85 99			sta m_sfxEffect
   304 						
   305 				;*****	Start Animation
   306 				;
   307 4FF9			CC_start_animation								; erase the collectable with the correct animation
   308 4FF9 A5 E9			lda m_ptrLevelLine
   309 4FFB 18				clc
   310 4FFC 6D D3 32			adc m_middleBottomCharPosX
   311 4FFF 85 EB			sta m_pageZeroTempPointer
   312 5001 A5 EA			lda m_ptrLevelLine+1
   313 5003 69 00			adc #0
   314 5005 85 EC			sta m_pageZeroTempPointer+1
   315
   316 5007 20 A7 62			jsr AddCoinAnimation
   317 					
   318 				;*****	Exit Proc
   319 				;
   320 500A			CC_exit
   321 						
   322 500A 60					rts
   323 						
   324 				.endp
   325 						
   326 				;
   327 				;**************************************************************************************************
   328 				; DoSideMovement
   329 				;**************************************************************************************************
   330 				;
   331 500B			DoSideMovement
   332
   333 500B A5 DE			lda m_stick0
   334 500D 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   335 500F C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   336 5011 D0 1F			bne DSM_check_right							; if one or both are pressed, just continue
   337
   338 				;**************************************************
   339 				;
   340 5013			DSM_check_deaccel_right
   341 5013 A5 CD			lda m_lastPlayerSideDirection
   342 5015 C9 01			cmp #PSD_RIGHT
   343 5017 D0 09			bne DSM_check_deaccel_left
   344
   345 5019 20 52 5A			jsr SubstractSideDeaccelToSpeed
   346 501C 20 66 5A			jsr AddSideSpeedToPosition
   347 501F 4C 6B 50			jmp DSM_exit
   348
   349 				;**************************************************
   350 				;
   351 5022			DSM_check_deaccel_left
   352 5022 C9 02			cmp #PSD_LEFT
   353 5024 F0 03			beq DSM_cdl1
   354 5026 4C 6B 50			jmp DSM_exit
   355
   356 				;**************************************************
   357 				;
   358 5029			DSM_cdl1
   359 5029 20 52 5A			jsr SubstractSideDeaccelToSpeed
   360 502C 20 92 5A			jsr SubstractSideSpeedToPosition
   361 502F 4C 6B 50			jmp DSM_exit
   362
   363 				;**************************************************
   364 				;
   365 5032			DSM_check_right
   366 5032 29 08			and #STICK_RIGHT	; check right
   367 5034 D0 19			bne DSM_check_left
   368
   369 5036 A5 CD			lda m_lastPlayerSideDirection
   370 5038 C9 02			cmp #PSD_LEFT
   371 503A D0 06			bne DSM_move_to_right
   372
   373 503C A9 00			lda #0
   374 503E 85 B5			sta m_playerSideSpeed_H1
   375 5040 85 B6			sta m_playerSideSpeed_L1
   376
   377 				;**************************************************
   378 				;
   379 5042			DSM_move_to_right
   380 5042 A9 01			lda #PSD_RIGHT
   381 5044 85 CD			sta m_lastPlayerSideDirection
   382 5046 20 30 5A			jsr AddSideAccelToSpeed
   383 5049 20 66 5A			jsr AddSideSpeedToPosition
   384 504C 4C 6B 50			jmp DSM_exit
   385
   386 				;**************************************************
   387 				;
   388 504F			DSM_check_left
   389 504F A5 DE			lda m_stick0
   390 5051 29 04			and #STICK_LEFT						; check left
   391 5053 D0 16			bne DSM_exit
   392
   393 5055 A5 CD			lda m_lastPlayerSideDirection
   394 5057 C9 01			cmp #PSD_RIGHT
   395 5059 D0 06			bne DSM_move_to_left
   396
   397 505B A9 00			lda #0
   398 505D 85 B5			sta m_playerSideSpeed_H1
   399 505F 85 B6			sta m_playerSideSpeed_L1
   400
   401 				;**************************************************
   402 				;
   403 5061			DSM_move_to_left
   404 5061 A9 02			lda #PSD_LEFT
   405 5063 85 CD			sta m_lastPlayerSideDirection
   406 5065 20 30 5A			jsr AddSideAccelToSpeed
   407 5068 20 92 5A			jsr SubstractSideSpeedToPosition
   408
   409 				;**************************************************
   410 				;
   411 506B			DSM_exit
   412 506B 60				rts
   413 				;
   414 				;**************************************************************************************************
   415 				; DoSideControl
   416 				;**************************************************************************************************
   417 				;
   418 506C			DoSideControl
   419
   420 506C A5 DE			lda m_stick0
   421 506E 29 0C			and #[STICK_RIGHT | STICK_LEFT]
   422 5070 C9 0C			cmp #[STICK_RIGHT | STICK_LEFT]
   423 5072 F0 41			beq DSC_check_right							; if neither is pressed, just continue
   424
   425 				;**************************************************
   426 				;
   427 5074			DSC_side_control_right
   428 5074 29 08			and #STICK_RIGHT
   429 5076 D0 20			bne DSC_side_control_left
   430 5078 A5 CD			lda m_lastPlayerSideDirection
   431 507A C9 01			cmp #PSD_RIGHT
   432 507C D0 06			bne DSC_scr1
   433 507E 20 30 5A			jsr AddSideAccelToSpeed
   434 5081 4C B5 50			jmp DSC_check_right
   435
   436 				;**************************************************
   437 				;
   438 5084			DSC_scr1
   439 5084 C9 02			cmp #PSD_LEFT
   440 5086 D0 06			bne DSC_scr2
   441 5088 20 52 5A			jsr SubstractSideDeaccelToSpeed
   442 508B 4C B5 50			jmp DSC_check_right
   443
   444 				;**************************************************
   445 				;
   446 508E			DSC_scr2
   447 508E A9 01			lda #PSD_RIGHT
   448 5090 85 CD			sta m_lastPlayerSideDirection
   449 5092 20 30 5A			jsr AddSideAccelToSpeed
   450 5095 4C B5 50			jmp DSC_check_right
   451
   452 				;**************************************************
   453 				;
   454 5098			DSC_side_control_left
   455 5098 A5 CD			lda m_lastPlayerSideDirection
   456 509A C9 02			cmp #PSD_LEFT
   457 509C D0 06			bne DSC_scl1
   458 509E 20 30 5A			jsr AddSideAccelToSpeed
   459 50A1 4C B5 50			jmp DSC_check_right
   460
   461 				;**************************************************
   462 				;
   463 50A4			DSC_scl1
   464 50A4 C9 01			cmp #PSD_RIGHT
   465 50A6 D0 06			bne DSC_scl2
   466 50A8 20 52 5A			jsr SubstractSideDeaccelToSpeed
   467 50AB 4C B5 50			jmp DSC_check_right
   468
   469 				;**************************************************
   470 				;
   471 50AE			DSC_scl2
   472 50AE A9 02			lda #PSD_LEFT
   473 50B0 85 CD			sta m_lastPlayerSideDirection
   474 50B2 20 30 5A			jsr AddSideAccelToSpeed
   475
   476 				;**************************************************
   477 				;
   478 50B5			DSC_check_right
   479 50B5 A5 CD			lda m_lastPlayerSideDirection
   480 50B7 C9 01			cmp #PSD_RIGHT
   481 50B9 D0 06			bne DSC_check_left
   482 50BB 20 66 5A			jsr AddSideSpeedToPosition
   483 50BE 4C C8 50			jmp DSC_exit
   484
   485 				;**************************************************
   486 				;
   487 50C1			DSC_check_left
   488 50C1 C9 02			cmp #PSD_LEFT
   489 50C3 D0 03			bne DSC_exit
   490 50C5 20 92 5A			jsr SubstractSideSpeedToPosition
   491
   492 				;**************************************************
   493 				;
   494 50C8			DSC_exit
   495 50C8 60				rts
   496 				;
   497 				;**************************************************************************************************
   498 				; Include Files
   499 				;**************************************************************************************************
   500 				;
   501 50C9				icl "StateInPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 50C9			PlayerMethodOverPlatform
    14
    15 50C9 20 CE 4F				jsr CheckCollectable
    16 50CC 20 E4 5C				jsr CheckCreatePlayerMissile
    17 50CF 20 0B 50				jsr DoSideMovement	
    18
    19 				;************************************************
    20 				;
    21 50D2			PMGT_check_up
    22 						
    23 50D2 A5 DE				lda m_stick0
    24 50D4 29 01				and #STICK_UP						; check up
    25 50D6 D0 66				bne PMGT_check_fall
    26
    27 50D8 A5 DF				lda m_oldStick0
    28 50DA 29 01				and #STICK_UP						; check old up (looking for "just pressed")
    29 50DC F0 60				beq PMGT_check_fall
    30
    31
    32 50DE A9 00				lda #0									; check bottom of a stair (left pixel)
    33 50E0 8D D0 32				sta m_bottomPosOffsetX
    34 					
    35 50E3 A9 00				lda #0
    36 50E5 8D D1 32				sta m_bottomPosOffsetY
    37 						
    38 50E8 20 E5 5B				jsr CheckPlayerBottomDownPos
    39
    40 50EB AD CF 32				lda m_middleBottomChar
    41 50EE 29 0F				and #15
    42 50F0 C9 04				cmp #CT_LADDER
    43 50F2 F0 16				beq PMGT_snap_ladder_up
    44
    45 50F4 A9 03				lda #3									; check bottom of a stair (right pixel)
    46 50F6 8D D0 32				sta m_bottomPosOffsetX
    47 						
    48 50F9 A9 00				lda #0
    49 50FB 8D D1 32				sta m_bottomPosOffsetY
    50 						
    51 50FE 20 E5 5B				jsr CheckPlayerBottomDownPos
    52
    53 5101 AD CF 32				lda m_middleBottomChar
    54 5104 29 0F				and #15
    55 5106 C9 04				cmp #CT_LADDER
    56 5108 D0 19				bne PMGT_check_jump
    57
    58 				;************************************************
    59 				; snap player to center of the ladder
    60 				;
    61 510A			PMGT_snap_ladder_up
    62
    63 510A A9 00				lda #0
    64 510C 85 A3				sta m_playerLevelLeftX_L1
    65 510E 85 A1				sta m_playerLevelLeftX_H2
    66
    67 5110 AD D3 32				lda m_middleBottomCharPosX
    68 5113 0A					asl
    69 5114 26 A1				rol m_playerLevelLeftX_H2				; x2
    70 5116 0A					asl
    71 5117 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
    72 5119 85 A2				sta m_playerLevelLeftX_H1
    73
    74 511B A2 04				ldx #PS_CLIMBING						; start climbing state
    75 511D 20 FD 4E				jsr SetPlayerMethod
    76
    77 5120 4C FD 51				jmp PMGT_end
    78
    79 				;************************************************
    80 				; start jumping state
    81 				;
    82 5123			PMGT_check_jump
    83
    84 5123 A2 02				ldx #PS_JUMPING
    85 5125 20 FD 4E				jsr SetPlayerMethod
    86
    87 5128 A5 B6				lda m_playerSideSpeed_L1				; reduce side speed a little
    88 512A 38					sec
    89 512B E9 40				sbc #JUMP_HSPEED_SLOWDOWN
    90 512D 85 B6				sta m_playerSideSpeed_L1
    91 						
    92 512F A5 B5				lda m_playerSideSpeed_H1
    93 5131 E9 00				sbc #0
    94 5133 B0 04				bcs PMGT_jump_side_speed
    95 						
    96 5135 A9 00				lda #0
    97 5137 85 B6				sta m_playerSideSpeed_L1
    98
    99 				;************************************************
   100 				;
   101 5139			PMGT_jump_side_speed
   102 						
   103 5139 85 B5				sta m_playerSideSpeed_H1
   104 513B 4C FD 51				jmp PMGT_end
   105
   106 				;************************************************
   107 				;
   108 513E			PMGT_check_fall
   109
   110 513E 20 06 57				jsr CheckHoleBelowPlayer
   111
   112 5141 A5 CF				lda m_playerOverPlatformFlag
   113 5143 D0 0C				bne CheckPlatformLeft
   114 					
   115 5145 A2 03				ldx #PS_FALLING							; start falling state
   116 5147 20 FD 4E				jsr SetPlayerMethod
   117
   118 514A 46 B5				lsr m_playerSideSpeed_H1				; divide by 2 the side speed, if there was any movement previous to falling
   119 514C 66 B6				ror m_playerSideSpeed_L1
   120
   121 514E 4C FD 51				jmp PMGT_end
   122
   123 				;*****	Check Platform Left
   124 				;
   125 5151			CheckPlatformLeft
   126 						
   127 5151 AD CD 32				lda m_leftBottomChar					; float Platform check
   128 5154 29 07				and #%00000111
   129 5156 C9 07				cmp #CT_FLOATPLATFORMH
   130 5158 D0 03				bne CheckPlatformRight
   131 						
   132 515A 4C C8 51				jmp ClampPlayer
   133
   134 				;*****	Check Platform Right		
   135 515D			CheckPlatformRight		
   136 						
   137 515D AD CE 32				lda m_rightBottomChar
   138 5160 29 07				and #%00000111
   139 5162 C9 07				cmp #CT_FLOATPLATFORMH
   140 5164 D0 03				bne PMGT_check_down	
   141
   142 5166 4C C8 51				jmp ClampPlayer
   143 						
   144 				;*****	Check down
   145 				;						
   146 5169			PMGT_check_down		
   147 5169 A5 DE				lda m_stick0
   148 516B 29 02				and #STICK_DOWN	
   149 516D F0 03				beq SearchLadder
   150 						
   151 516F 4C FD 51				jmp PMGT_end
   152
   153 5172			SearchLadder
   154 5172 A9 00				lda #0									; search for a ladder one char below (left pixel)
   155 5174 8D D0 32				sta m_bottomPosOffsetX
   156 5177 A9 09				lda #[CHAR_PIX.else_Y+1]
   157 5179 8D D1 32				sta m_bottomPosOffsetY
   158 517C 20 E5 5B				jsr CheckPlayerBottomDownPos
   159
   160 517F AD CF 32				lda m_middleBottomChar
   161 5182 29 0F				and #15
   162 5184 C9 04				cmp #CT_LADDER
   163 5186 F0 16				beq PMGT_snap_ladder_down
   164
   165 5188 A9 03				lda #3									; search for a ladder one char below (right pixel)
   166 518A 8D D0 32				sta m_bottomPosOffsetX
   167 518D A9 09				lda #[CHAR_PIX.else_Y+1]
   168 518F 8D D1 32				sta m_bottomPosOffsetY
   169 5192 20 E5 5B				jsr CheckPlayerBottomDownPos
   170
   171 5195 AD CF 32				lda m_middleBottomChar
   172 5198 29 0F				and #15
   173 519A C9 04				cmp #CT_LADDER
   174 519C D0 5F				bne PMGT_end
   175
   176 				;************************************************
   177 				; snap player to center of the ladder
   178 				;
   179 519E			PMGT_snap_ladder_down
   180 					
   181 519E A9 00				lda #0
   182 51A0 85 A3				sta m_playerLevelLeftX_L1
   183 51A2 85 A1				sta m_playerLevelLeftX_H2
   184
   185 51A4 AD D3 32				lda m_middleBottomCharPosX
   186 51A7 0A					asl
   187 51A8 26 A1				rol m_playerLevelLeftX_H2				; x2
   188 51AA 0A					asl
   189 51AB 26 A1				rol m_playerLevelLeftX_H2				; x4 = CHAR_PIX.else_X
   190 51AD 85 A2				sta m_playerLevelLeftX_H1
   191
   192 51AF A9 00				lda #0									; put player one line below
   193 51B1 85 AC				sta m_playerLevelBottomY_L1
   194 						
   195 51B3 A5 AB				lda m_playerLevelBottomY_H1
   196 51B5 18					clc
   197 51B6 69 01				adc #1
   198 51B8 85 AB				sta m_playerLevelBottomY_H1
   199 					
   200 51BA A5 AA				lda m_playerLevelBottomY_H2
   201 51BC 69 00				adc #0
   202 51BE 85 AA				sta m_playerLevelBottomY_H2
   203
   204 51C0 A2 04				ldx #PS_CLIMBING						; start climbing state
   205 51C2 20 FD 4E				jsr SetPlayerMethod
   206 						
   207 51C5 4C FD 51				jmp PMGT_end
   208 						
   209 				;***** Clamp Player to platform
   210 51C8			ClampPlayer
   211
   212 51C8 A5 DE				lda m_stick0
   213 51CA C9 0F				cmp #$0F
   214 51CC D0 2F				bne PMGT_end
   215 						 
   216 51CE AE 73 32				ldx m_floatPlatformIdx
   217 51D1 CA					dex
   218 						
   219 51D2 BD 4C 6A				lda PlatformTime,x
   220 51D5 C9 06				cmp #FLOAT_PLATFORM_TIMER
   221 51D7 D0 24				bne PMGT_end
   222 						
   223 51D9 BD 5C 6A				lda PlatformDirX,x
   224 51DC C9 00				cmp #00
   225 51DE D0 10				bne ClampLeft
   226 						
   227 51E0 18					clc		
   228 						
   229 51E1 A5 A2				lda m_playerLevelLeftX_H1	
   230 51E3 69 04				adc #$04
   231 51E5 85 A2				sta m_playerLevelLeftX_H1
   232 51E7 A5 A1				lda m_playerLevelLeftX_H2
   233 51E9 69 00				adc #00
   234 51EB 85 A1				sta m_playerLevelLeftX_H2		
   235
   236 51ED 4C FD 51				jmp PMGT_end 
   237 						
   238 51F0			ClampLeft		
   239 51F0 38					sec
   240 51F1 A5 A2				lda m_playerLevelLeftX_H1
   241 51F3 E9 04				sbc #$04
   242 51F5 85 A2				sta m_playerLevelLeftX_H1
   243 51F7 A5 A1				lda m_playerLevelLeftX_H2
   244 51F9 E9 00				sbc #00
   245 51FB 85 A1				sta m_playerLevelLeftX_H2		
   246 						
   247 				;************************************************
   248 				;
   249 51FD			PMGT_end
   250 						
   251 51FD 20 AD 55				jsr SetPlayerInfo
   252 5200 4C 94 49				jmp GameLoop.PlayerMethodReturn
   502 5203				icl "StateJumping.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateJumping.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateJumping.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5203			PlayerMethodJumping
    14
    15 5203 20 CE 4F			jsr CheckCollectable
    16
    17 5206 20 E4 5C			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while jumping
    21 5209 A5 DE			lda m_stick0
    22 520B 29 01			and #STICK_UP		; check if up is still pressed
    23 520D D0 3B			bne PMJ_air_control
    24
    25 520F A5 DE			lda m_stick0
    26 5211 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 5213 C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 5215 D0 33			bne PMJ_air_control
    29
    30
    31 				;----------------------------------------
    32 5217			PMJ_check_ladder
    33 				; search for a ladder (middle pixel)
    34 5217 A9 02			lda #2
    35 5219 8D D0 32			sta m_bottomPosOffsetX
    36 521C A9 00			lda #0
    37 521E 8D D1 32			sta m_bottomPosOffsetY
    38 5221 20 E5 5B			jsr CheckPlayerBottomDownPos
    39
    40 5224 AD CF 32			lda m_middleBottomChar
    41 5227 29 0F			and #15
    42 5229 C9 04			cmp #CT_LADDER
    43 522B D0 1D			bne PMJ_air_control
    44
    45 				; snap player to center of the ladder
    46 522D			PMJ_snap_ladder
    47 522D A9 00			lda #0
    48 522F 85 A3			sta m_playerLevelLeftX_L1
    49 5231 85 A1			sta m_playerLevelLeftX_H2
    50
    51 5233 AD D3 32			lda m_middleBottomCharPosX
    52 5236 0A				asl
    53 5237 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 5239 0A				asl
    55 523A 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 523C 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; abort jumping state
    59 523E A9 00			lda #0
    60 5240 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    61
    62 				; start climbing state
    63 5242 A2 04			ldx #PS_CLIMBING
    64 5244 20 FD 4E			jsr SetPlayerMethod
    65
    66 5247 4C 76 52			jmp PMJ_exit
    67
    68
    69 				;----------------------------------------
    70 524A			PMJ_air_control
    71 524A 20 6C 50			jsr DoSideControl
    72
    73
    74 				;----------------------------------------
    75 524D			PMJ_update_jumping
    76 524D A5 CC			lda m_playerHoldJumpCounter
    77 524F F0 0F			beq PMJ_decay_jump_speed
    78
    79 5251 A5 DE			lda m_stick0
    80 5253 29 01			and #STICK_UP		; check if up is still pressed
    81 5255 D0 05			bne PMJ_stick_not_up
    82
    83 5257 C6 CC			dec m_playerHoldJumpCounter	; update hold jump counter
    84 5259 4C 63 52			jmp PMJ_hold_jump_speed
    85
    86 525C			PMJ_stick_not_up
    87 525C A9 00			lda #0
    88 525E 85 CC			sta m_playerHoldJumpCounter	; forget hold jump counter
    89
    90 5260			PMJ_decay_jump_speed
    91 5260 20 E6 5A			jsr SubstractGravityAccelToSpeed
    92
    93 5263			PMJ_hold_jump_speed
    94 5263 20 1C 5B			jsr SubstractSpeedYToPosition
    95
    96 5266 20 AD 55			jsr SetPlayerInfo
    97
    98 				; check if the speed in Y is already 0
    99 5269 A5 BD			lda m_playerSpeedY_H1
   100 526B D0 09			bne PMJ_exit
   101 526D A5 BE			lda m_playerSpeedY_L1
   102 526F D0 05			bne PMJ_exit
   103
   104 				; change to the falling state
   105 5271 A2 03			ldx #PS_FALLING
   106 5273 20 FD 4E			jsr SetPlayerMethod
   107
   108 5276			PMJ_exit
   109 5276 4C 94 49			jmp GameLoop.PlayerMethodReturn
   503 5279				icl "StateFalling.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateFalling.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateFalling.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 5279			PlayerMethodFalling
    14
    15 5279 20 CE 4F			jsr CheckCollectable
    16
    17 527C 20 E4 5C			jsr CheckCreatePlayerMissile
    18
    19
    20 				; check input to grab a ladder while falling
    21 527F A5 DE			lda m_stick0
    22 5281 29 01			and #STICK_UP		; check if up is still pressed
    23 5283 D0 37			bne PMF_check_restart_jump
    24
    25 5285 A5 DE			lda m_stick0
    26 5287 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    27 5289 C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    28 528B D0 2F			bne PMF_check_restart_jump
    29
    30
    31 				;----------------------------------------
    32 528D			PMF_check_ladder
    33 				; search for a ladder (bottom middle pixel)
    34 528D A9 02			lda #2
    35 528F 8D D0 32			sta m_bottomPosOffsetX
    36 5292 A9 00			lda #0
    37 5294 8D D1 32			sta m_bottomPosOffsetY
    38 5297 20 E5 5B			jsr CheckPlayerBottomDownPos
    39
    40 529A AD CF 32			lda m_middleBottomChar
    41 529D 29 0F			and #15
    42 529F C9 04			cmp #CT_LADDER
    43 52A1 D0 19			bne PMF_check_restart_jump
    44
    45 				; snap player to center of the ladder
    46 52A3			PMF_snap_ladder
    47 52A3 A9 00			lda #0
    48 52A5 85 A3			sta m_playerLevelLeftX_L1
    49 52A7 85 A1			sta m_playerLevelLeftX_H2
    50
    51 52A9 AD D3 32			lda m_middleBottomCharPosX
    52 52AC 0A				asl
    53 52AD 26 A1			rol m_playerLevelLeftX_H2	; x2
    54 52AF 0A				asl
    55 52B0 26 A1			rol m_playerLevelLeftX_H2	; x4 = CHAR_PIX.else_X
    56 52B2 85 A2			sta m_playerLevelLeftX_H1
    57
    58 				; start climbing state
    59 52B4 A2 04			ldx #PS_CLIMBING
    60 52B6 20 FD 4E			jsr SetPlayerMethod
    61
    62 52B9 4C EF 52			jmp PMF_exit
    63
    64
    65 				;----------------------------------------
    66 52BC			PMF_check_restart_jump
    67 				;
    68 				;	; uncomment this to allow infinite jumping
    69 				; 	lda m_stick0
    70 				; 	and #STICK_UP	; check up
    71 				; 	bne PMF_check_in_water
    72 				; 
    73 				; 	lda m_oldStick0
    74 				; 	and #STICK_UP	; check old up (looking for "just pressed")
    75 				; 	beq PMF_check_in_water
    76 				; 
    77 				;	; start jumping state
    78 				; 	ldx #PS_JUMPING
    79 				; 	jsr SetPlayerMethod
    80 				; 
    81 				; 	jmp PMF_exit
    82
    83
    84 				;----------------------------------------
    85 52BC			PMF_check_in_water
    86 				; search for water (center pixel)
    87 52BC A9 02			lda #2
    88 52BE 8D D0 32			sta m_bottomPosOffsetX
    89 52C1 A9 02			lda #2
    90 52C3 8D D1 32			sta m_bottomPosOffsetY
    91 52C6 20 32 5C			jsr CheckPlayerBottomUpPos
    92
    93 52C9 AD CF 32			lda m_middleBottomChar
    94 52CC 29 0F			and #15
    95 52CE C9 05			cmp #CT_WATER
    96 52D0 D0 08			bne PMF_air_control
    97
    98 				; start in water state
    99 52D2 A2 05			ldx #PS_IN_WATER
   100 52D4 20 FD 4E			jsr SetPlayerMethod
   101
   102 52D7 4C EF 52			jmp PMF_exit
   103
   104
   105 				;----------------------------------------
   106 52DA			PMF_air_control
   107 52DA 20 6C 50			jsr DoSideControl
   108
   109
   110 				;----------------------------------------
   111 52DD			PMF_update_falling
   112 52DD 20 C4 5A			jsr AddGravityAccelToSpeed
   113
   114 52E0 20 FA 5A			jsr AddSpeedYToPosition
   115
   116 52E3 20 AD 55			jsr SetPlayerInfo
   117
   118 52E6 A5 CF			lda m_playerOverPlatformFlag
   119 52E8 F0 05			beq PMF_exit
   120
   121
   122 				; change to the over platform state
   123 52EA A2 01			ldx #PS_OVER_PLATFORM
   124 52EC 20 FD 4E			jsr SetPlayerMethod
   125
   126
   127 52EF			PMF_exit
   128 52EF 4C 94 49			jmp GameLoop.PlayerMethodReturn
   504 52F2				icl "StateClimbing.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateClimbing.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateClimbing.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; PlayerMethodClimbing
    15 				;**************************************************************************************************
    16 				;
    17 52F2			PlayerMethodClimbing
    18
    19 52F2 20 E4 5C				jsr CheckCreatePlayerMissile
    20
    21 				;************************************************
    22 				;
    23 52F5			PMC_check_up
    24 						
    25 52F5 A5 DE				lda m_stick0
    26 52F7 29 01				and #STICK_UP						; check up
    27 52F9 D0 41				bne PMC_check_down
    28
    29 52FB A9 E0				lda #CLIMB_UP_SPEED_Y_L1
    30 52FD 85 BE				sta m_playerSpeedY_L1
    31 52FF A9 00				lda #CLIMB_UP_SPEED_Y_H1
    32 5301 85 BD				sta m_playerSpeedY_H1
    33
    34 						; update player position in Y
    35 5303 A5 AC				lda m_playerLevelBottomY_L1
    36 5305 38					sec
    37 5306 E5 BE				sbc m_playerSpeedY_L1
    38 5308 85 AC				sta m_playerLevelBottomY_L1
    39 530A A5 AB				lda m_playerLevelBottomY_H1
    40 530C E5 BD				sbc m_playerSpeedY_H1
    41 530E 85 AB				sta m_playerLevelBottomY_H1
    42 5310 A5 AA				lda m_playerLevelBottomY_H2
    43 5312 E9 00				sbc #0
    44 5314 85 AA				sta m_playerLevelBottomY_H2
    45
    46 						; search for an empty space at the middle bottom point of the player
    47 5316 A9 06				lda #[PLR_WIDTH/2 + 2]
    48 5318 8D D0 32				sta m_bottomPosOffsetX
    49 531B A9 00				lda #0
    50 531D 8D D1 32				sta m_bottomPosOffsetY
    51 5320 20 E5 5B				jsr CheckPlayerBottomDownPos
    52
    53 5323 AD CF 32				lda m_middleBottomChar
    54 5326 29 0F				and #15
    55 5328 D0 0F				bne PMC_end_move_up
    56
    57 						; snap to the bottom and go to the platform state
    58 532A A5 AB				lda m_playerLevelBottomY_H1
    59 532C 09 07				ora #[CHAR_PIX.else_Y-1]
    60 532E 85 AB				sta m_playerLevelBottomY_H1
    61
    62 5330 A9 00				lda #0
    63 5332 85 AC				sta m_playerLevelBottomY_L1
    64
    65 5334 A2 01				ldx #PS_OVER_PLATFORM
    66 5336 20 FD 4E				jsr SetPlayerMethod
    67
    68 				;************************************************
    69 				;
    70 5339			PMC_end_move_up
    71 5339 4C A8 53				jmp PMC_exit
    72
    73
    74 				;************************************************
    75 				;
    76 533C			PMC_check_down
    77
    78 533C A5 DE				lda m_stick0
    79 533E 29 02				and #STICK_DOWN					; check down
    80 5340 D0 66				bne PMC_exit
    81
    82 5342 A9 80				lda #CLIMB_DOWN_SPEED_Y_L1
    83 5344 85 BE				sta m_playerSpeedY_L1
    84 5346 A9 01				lda #CLIMB_DOWN_SPEED_Y_H1
    85 5348 85 BD				sta m_playerSpeedY_H1
    86
    87 						; update player position in Y
    88 534A A5 AC				lda m_playerLevelBottomY_L1
    89 534C 18					clc
    90 534D 65 BE				adc m_playerSpeedY_L1
    91 534F 85 AC				sta m_playerLevelBottomY_L1
    92 5351 A5 AB				lda m_playerLevelBottomY_H1
    93 5353 65 BD				adc m_playerSpeedY_H1
    94 5355 85 AB				sta m_playerLevelBottomY_H1
    95 5357 A5 AA				lda m_playerLevelBottomY_H2
    96 5359 69 00				adc #0
    97 535B 85 AA				sta m_playerLevelBottomY_H2
    98
    99 						; special check for the top char of a ladder (that is a platform)
   100 535D A9 06				lda #[PLR_WIDTH/2 + 2]
   101 535F 8D D0 32				sta m_bottomPosOffsetX
   102 5362 A9 08				lda #CHAR_PIX.else_Y
   103 5364 8D D1 32				sta m_bottomPosOffsetY
   104 5367 20 E5 5B				jsr CheckPlayerBottomDownPos
   105
   106 536A AD CF 32				lda m_middleBottomChar
   107 536D 29 0F				and #15
   108 536F C9 04				cmp #CT_LADDER
   109 5371 F0 35				beq PMC_exit
   110
   111 						; search for a platform at the middle bottom point of the player
   112 5373 A9 06				lda #[PLR_WIDTH/2 + 2]
   113 5375 8D D0 32				sta m_bottomPosOffsetX
   114 5378 A9 00				lda #0
   115 537A 8D D1 32				sta m_bottomPosOffsetY
   116 537D 20 E5 5B				jsr CheckPlayerBottomDownPos
   117
   118 5380 AD CF 32				lda m_middleBottomChar
   119 5383 29 01				and #01
   120 5385 C9 01				cmp #CT_BLOCK
   121 5387 D0 1F				bne PMC_exit
   122
   123 5389 AD CF 32				lda m_middleBottomChar
   124 538C 29 10				and #%00010000
   125 538E F0 18				beq PMC_exit
   126
   127 						; snap to the bottom and go to the platform state
   128 5390 A5 AB				lda m_playerLevelBottomY_H1
   129 5392 29 F8				and #%11111000
   130 5394 38					sec
   131 5395 E9 01				sbc #1
   132 5397 85 AB				sta m_playerLevelBottomY_H1
   133 5399 A5 AA				lda m_playerLevelBottomY_H2
   134 539B E9 00				sbc #0
   135 539D 85 AA				sta m_playerLevelBottomY_H2
   136
   137 539F A9 00				lda #0
   138 53A1 85 AC				sta m_playerLevelBottomY_L1
   139 					
   140 53A3 A2 01				ldx #PS_OVER_PLATFORM
   141 53A5 20 FD 4E				jsr SetPlayerMethod
   142
   143 				;************************************************
   144 				;
   145 53A8			PMC_exit
   146
   147 53A8 20 AD 55				jsr SetPlayerInfo
   148 53AB 4C 94 49				jmp GameLoop.PlayerMethodReturn
   505 53AE				icl "StateInWater.Asm"
Source: E:\_8BitProjects\Series\Scroller\StateInWater.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		StateInWater.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;***************************************************************************************************
    14 				;	PlayerMethodInWater
    15 				;***************************************************************************************************
    16 				;
    17 53AE			PlayerMethodInWater
    18
    19 53AE 20 CE 4F				jsr CheckCollectable					; add collectables in water for this	
    20 53B1 20 E4 5C				jsr CheckCreatePlayerMissile
    21
    22 						; search for water (top center pixel)		 
    23 53B4 A9 02				lda #2
    24 53B6 8D D0 32				sta m_bottomPosOffsetX
    25 53B9 A9 07				lda #7
    26 53BB 8D D1 32				sta m_bottomPosOffsetY
    27 53BE 20 32 5C				jsr CheckPlayerBottomUpPos
    28
    29 53C1 AD CF 32				lda m_middleBottomChar
    30 53C4 29 0F				and #15
    31 53C6 C9 05				cmp #CT_WATER
    32 53C8 F0 12				beq PMIW_check_water_moves
    33
    34 						; check jump input to go out of the water
    35 53CA A5 DE				lda m_stick0
    36 53CC 29 01				and #STICK_UP							; check up
    37 53CE D0 0C				bne PMIW_check_water_moves
    38
    39 53D0 A5 CB				lda m_playerNoJumpTimer
    40 53D2 D0 08				bne PMIW_check_water_moves
    41 					
    42 						; start jumping state
    43 53D4 A2 02				ldx #PS_JUMPING
    44 53D6 20 FD 4E				jsr SetPlayerMethod
    45
    46 53D9 4C A5 54				jmp PMIW_exit
    47
    48 53DC			PMIW_check_water_moves
    49
    50 53DC AD D5 32				lda m_playerOnWaterSurfaceFlag
    51 53DF F0 03				beq PMIW_check_move_up
    52 53E1 4C 65 54				jmp PMIW_on_surface
    53
    54 				;*****	check vertical movement
    55 				; 
    56 53E4			PMIW_check_move_up
    57 					
    58 53E4 A5 DE				lda m_stick0
    59 53E6 29 01				and #STICK_UP							; check up
    60 53E8 D0 0E				bne PMIW_check_move_down
    61
    62 53EA AD D4 32				lda m_waterPlayerDirectionFlag
    63 53ED D0 06				bne PMIW_move_up_down
    64
    65 53EF			PMIW_move_up_up
    66 					
    67 53EF 20 93 5B				jsr AddWaterMoveUpAccelToSpeed
    68 53F2 4C 32 54				jmp PMIW_going_up_speed
    69
    70 53F5			PMIW_move_up_down
    71 					
    72 53F5 4C 51 54				jmp PMIW_going_down
    73
    74 53F8			PMIW_check_move_down
    75
    76 53F8 A5 DE				lda m_stick0
    77 53FA 29 02				and #STICK_DOWN							; check down
    78 53FC D0 2C				bne PMIW_under_surface
    79
    80 53FE AD D4 32				lda m_waterPlayerDirectionFlag
    81 5401 D0 14				bne PMIW_move_down_down
    82
    83 5403			PMIW_move_down_up
    84 					
    85 5403 20 7F 5B				jsr SubstractWaterAccelToSpeed
    86 5406 20 1C 5B				jsr SubstractSpeedYToPosition
    87
    88 5409 A5 BD				lda m_playerSpeedY_H1
    89 540B 05 BE				ora m_playerSpeedY_L1
    90 540D D0 18				bne PMIW_check_move_exit
    91
    92 540F A9 01				lda #1
    93 5411 8D D4 32				sta m_waterPlayerDirectionFlag
    94
    95 5414 4C 9F 54				jmp PMIW_check_side_moves
    96
    97 5417			PMIW_move_down_down
    98 						
    99 5417 20 B5 5B				jsr AddWaterMoveDownAccelToSpeed
   100 541A 20 FA 5A				jsr AddSpeedYToPosition
   101
   102 541D A5 CF				lda m_playerOverPlatformFlag
   103 541F F0 06				beq PMIW_check_move_exit
   104
   105 						; reset speed in Y after a bottom collision
   106 5421 A9 00				lda #0
   107 5423 85 BD				sta m_playerSpeedY_H1
   108 5425 85 BE				sta m_playerSpeedY_L1
   109
   110 5427			PMIW_check_move_exit
   111 					
   112 5427 4C 9F 54				jmp PMIW_check_side_moves
   113
   114 542A			PMIW_under_surface
   115
   116 542A AD D4 32				lda m_waterPlayerDirectionFlag
   117 542D D0 22				bne PMIW_going_down
   118
   119 542F			PMIW_going_up
   120 						
   121 542F 20 5D 5B				jsr AddWaterAccelToSpeed
   122
   123 5432			PMIW_going_up_speed
   124 						
   125 5432 20 1C 5B				jsr SubstractSpeedYToPosition
   126
   127 				;*****	check if we are emerging from water (middle height, center pixel)
   128 				;
   129 5435			PMIW_emerging
   130 					
   131 5435 A9 02				lda #2
   132 5437 8D D0 32				sta m_bottomPosOffsetX
   133 543A A9 03				lda #3
   134 543C 8D D1 32				sta m_bottomPosOffsetY
   135 543F 20 32 5C				jsr CheckPlayerBottomUpPos
   136
   137 5442 AD CF 32				lda m_middleBottomChar
   138 5445 29 0F				and #15
   139 5447 D0 56				bne PMIW_check_side_moves
   140
   141 5449 A9 01				lda #1
   142 544B 8D D5 32				sta m_playerOnWaterSurfaceFlag
   143
   144 544E 4C 9F 54				jmp PMIW_check_side_moves
   145
   146 5451			PMIW_going_down
   147
   148 5451 20 7F 5B				jsr SubstractWaterAccelToSpeed
   149
   150 5454			PMIW_going_down_speed
   151 					
   152 5454 20 FA 5A				jsr AddSpeedYToPosition
   153
   154 5457			PMIW_check_down_speed
   155 					
   156 5457 A5 BD				lda m_playerSpeedY_H1
   157 5459 05 BE				ora m_playerSpeedY_L1
   158 545B D0 42				bne PMIW_check_side_moves
   159
   160 545D			PMIW_change_dir_to_up
   161 						
   162 545D A9 00				lda #0
   163 545F 8D D4 32				sta m_waterPlayerDirectionFlag
   164
   165 5462 4C 9F 54				jmp PMIW_check_side_moves
   166
   167 5465			PMIW_on_surface
   168
   169 						; check water "buoyancy"
   170 5465 AD D4 32				lda m_waterPlayerDirectionFlag
   171 5468 D0 14				bne PMIW_going_down_surface
   172
   173 546A			PMIW_going_up_surface
   174
   175 546A 20 7F 5B				jsr SubstractWaterAccelToSpeed
   176 546D 20 1C 5B				jsr SubstractSpeedYToPosition
   177
   178 5470 A5 BD				lda m_playerSpeedY_H1
   179 5472 05 BE				ora m_playerSpeedY_L1
   180 5474 D0 29				bne PMIW_check_side_moves
   181
   182 5476 A9 01				lda #1
   183 5478 8D D4 32				sta m_waterPlayerDirectionFlag
   184
   185 547B 4C 9F 54				jmp PMIW_check_side_moves
   186
   187 547E			PMIW_going_down_surface
   188
   189 547E 20 5D 5B				jsr AddWaterAccelToSpeed
   190 5481 20 FA 5A				jsr AddSpeedYToPosition
   191
   192 						; search for water (top center pixel)
   193 5484 A9 02				lda #2
   194 5486 8D D0 32				sta m_bottomPosOffsetX
   195 5489 A9 07				lda #7
   196 548B 8D D1 32				sta m_bottomPosOffsetY
   197 548E 20 32 5C				jsr CheckPlayerBottomUpPos
   198
   199 5491 AD CF 32				lda m_middleBottomChar
   200 5494 29 0F				and #15
   201 5496 C9 05				cmp #CT_WATER
   202 5498 D0 05				bne PMIW_check_side_moves
   203
   204 549A A9 00				lda #0
   205 549C 8D D5 32				sta m_playerOnWaterSurfaceFlag
   206
   207 549F			PMIW_check_side_moves
   208
   209 549F 20 0B 50				jsr DoSideMovement
   210
   211 54A2			PMIW_update_pos
   212 						
   213 54A2 20 AD 55				jsr SetPlayerInfo
   214
   215 54A5			PMIW_exit
   216 						
   217 54A5 4C 94 49				jmp GameLoop.PlayerMethodReturn
   506 				;	
   507 				;**************************************************************************************************
   508 				;
   509 				;**************************************************************************************************
   510 				; PlayerMethodGravityTest
   511 				;**************************************************************************************************
   512 				;
   513 54A8			PlayerMethodGravityTest
   514 54A8 4C 94 49			jmp GameLoop.PlayerMethodReturn
   515 				;
   516 				;**************************************************************************************************
   517 				; PlayerMethodLose
   518 				;**************************************************************************************************
   519 				;
   520 54AB			PlayerMethodLose
   521 54AB 4C 94 49			jmp GameLoop.PlayerMethodReturn
   354 54AE					icl "PlayerMovement.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerMovement.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerMoveent.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				;
    15 				;	SetSpawnPos
    16 				;
    17 				;		Set the initial position of the player.
    18 				;		Uses PARAM00 as the level number.		
    19 				;
    20 				;**************************************************************************************************
    21 				;
    22 54AE			.proc SetSpawnPos
    23
    24 						; set spawn position
    25 54AE A6 92				ldx m_param00
    26 						
    27 54B0 A9 00				lda #0
    28 54B2 85 A1				sta m_playerLevelLeftX_H2
    29 54B4 BD 00 30				lda LevelsPlayer_X,x
    30 54B7 85 A2				sta m_playerLevelLeftX_H1
    31 						
    32 54B9 A9 00				lda #0
    33 54BB 85 A3				sta m_playerLevelLeftX_L1				; fractional part
    34 54BD 85 AA				sta m_playerLevelBottomY_H2
    35 						
    36 54BF A6 F2				ldx m_currLevelNum
    37 54C1 BD 01 30				lda LevelsPlayer_Y,x
    38 54C4 A2 08				ldx #8 
    39 54C6 20 71 4A				jsr MultiplyAX
    40 54C9 AD ED 49				lda _productLo
    41 54CC 69 07				adc #7		
    42 54CE 85 AB				sta m_playerLevelBottomY_H1
    43 						
    44 54D0 A9 00				lda #0
    45 54D2 85 AC				sta m_playerLevelBottomY_L1				; fractional part
    46
    47 54D4 20 AD 55				jsr SetPlayerInfo						; Set the players info	
    48 					
    49 54D7 60					rts
    50
    51 				.endp	
    52
    53 				;
    54 				;**************************************************************************************************
    55 				; SetAnimationIndex
    56 				;**************************************************************************************************
    57 				;
    58 54D8			.proc SetAnimationIndex
    59
    60 54D8			CheckState
    61 54D8 A5 D2				lda m_playerState
    62 54DA C9 01				cmp #PS_OVER_PLATFORM
    63 54DC F0 19				beq CheckWalking	
    64 54DE C9 00				cmp #PS_STATIC
    65 54E0 F0 5B				beq StandingIndex
    66 54E2 C9 02				cmp #PS_JUMPING
    67 54E4 F0 52				beq JumpFallIndex
    68 54E6 C9 03				cmp #PS_FALLING
    69 54E8 F0 4E				beq JumpFallIndex		
    70 54EA C9 04				cmp #PS_CLIMBING
    71 54EC F0 4F				beq StandingIndex		
    72 54EE C9 05				cmp #PS_IN_WATER
    73 54F0 F0 4B				beq StandingIndex		
    74 54F2 C9 07				cmp #PS_LOSE
    75 54F4 4C 3D 55				jmp StandingIndex		
    76 						 
    77 54F7			CheckWalking
    78 54F7 A5 DE				lda m_stick0
    79 54F9 29 0C				and #[STICK_RIGHT | STICK_LEFT]
    80 54FB C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
    81 54FD D0 03				bne ProcessFrame
    82 54FF 4C 3D 55				jmp StandingIndex
    83 							
    84 5502			ProcessFrame		
    85 						; Process frame 
    86 5502 AD C6 32				lda m_animFrame
    87 5505 69 01				adc #$01
    88 5507 8D C6 32				sta m_animFrame
    89 						
    90 550A			IsWalking
    91 550A 29 0C				and #12
    92 550C C9 0C				cmp #12
    93 550E D0 03				bne check_one
    94 5510 4C 33 55				jmp WalkingIndex1
    95 						
    96 5513			check_one
    97 5513 AD C6 32				lda m_animFrame
    98 5516 29 08				and #8		
    99 5518 C9 08				cmp #8
   100 551A D0 03				bne check_two
   101 551C 4C 3D 55				jmp StandingIndex
   102 						
   103 551F			check_two
   104 551F AD C6 32				lda m_animFrame
   105 5522 29 04				and #4
   106 5524 C9 04				cmp #4
   107 5526 D0 03				bne check_three		
   108 5528 4C 2E 55				jmp WalkingIndex
   109
   110 552B			check_three
   111 552B 4C 3D 55				jmp StandingIndex		
   112
   113 552E			WalkingIndex
   114 552E A9 03				lda #$03
   115 5530 4C 3F 55				jmp Return_Exit		
   116
   117 5533			WalkingIndex1
   118 5533 A9 06				lda #$06
   119 5535 4C 3F 55				jmp Return_Exit		
   120
   121 5538			JumpFallIndex
   122 5538 A9 09				lda #$09
   123 553A 4C 3F 55				jmp Return_Exit
   124 						
   125 553D			StandingIndex
   126 553D A9 00				lda #0	
   127 								
   128 553F			Return_Exit
   129 553F 8D C7 32				sta m_animIndex
   130 5542 AA					tax	
   131 5543 BD 33 36				lda TabAnimationMap,x
   132 5546 8D C9 32				sta m_animOffset
   133 5549 BD 34 36				lda TabAnimationMap+1,x
   134 554C 8D C8 32				sta m_animHeight
   135 								
   136 554F 60					rts		
   137 				.endp
   138 				;
   139 				;**************************************************************************************************
   140 				; FlipPlayer
   141 				;**************************************************************************************************
   142 				;
   143 5550			.proc FlipPlayer
   144 					
   145 5550 48					pha
   146 5551 8A					txa
   147 5552 48					pha
   148 5553 98					tya
   149 5554 48					pha	
   150 							
   151 5555 BD 35 36				lda TabAnimationMap[0]+2,x	
   152 5558 C5 CD				cmp m_lastplayerSideDirection
   153 555A F0 38				beq FlipExit
   154
   155 555C BD 33 36				lda TabAnimationMap[0],x
   156 555F 8D C4 32				sta m_revOffset
   157 								
   158 5562 BD 34 36				lda TabAnimationMap[0]+1,x
   159 5565 8D C3 32				sta m_revHeight
   160 						
   161 5568 A5 CD				lda m_lastPlayerSideDirection
   162 556A 9D 35 36				sta TabAnimationMap[0]+2,x		
   163 						
   164 556D A0 00				ldy #0
   165 556F AE C4 32				ldx m_revOffset				
   166 5572 BD 49 36		Flip	lda TabPlayerShape_01,x
   167 5575 20 9A 55				jsr ReverseSprite 
   168 5578 9D 49 36				sta TabPlayerShape_01,x
   169 						
   170 557B BD 9D 36				lda TabPlayerShape_01A,x
   171 557E 20 9A 55				jsr ReverseSprite 
   172 5581 9D 9D 36				sta TabPlayerShape_01A,x
   173 						
   174 5584 BD F1 36				lda TabPlayerShape_01B,x
   175 5587 20 9A 55				jsr ReverseSprite 
   176 558A 9D F1 36				sta TabPlayerShape_01B,x
   177 558D E8					inx
   178 558E C8					iny
   179 558F CC C3 32				cpy m_revHeight
   180 5592 D0 DE				bne Flip
   181 						
   182 5594			FlipExit
   183 5594 68					pla
   184 5595 A8					tay
   185 5596 68					pla
   186 5597 AA					tax
   187 5598 68					pla
   188 5599 60					rts
   189 				.endp
   190 				;
   191 				;**************************************************************************************************
   192 				; ReverseSprite
   193 				;**************************************************************************************************
   194 				;
   195 559A			.proc ReverseSprite
   196 559A 8D BE 32				sta m_hldA
   197 559D 8C BF 32				sty m_hldY
   198 55A0 A0 07			 	ldy #$07 
   199 55A2 0E BE 32		loop1   asl m_hldA
   200 55A5 6A			        ror 
   201 55A6 88			        dey 
   202 55A7 10 F9		        bpl loop1        
   203 55A9 AC BF 32		        ldy m_hldY
   204 55AC 60			        rts
   205 				.endp         	
   206 				;
   207 				;**************************************************************************************************
   208 				; SetPlayerInfo
   209 				;**************************************************************************************************
   210 				;
   211 55AD			.proc SetPlayerInfo
   212
   213 55AD A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   214 55AF 18					clc
   215 55B0 65 B3				adc m_playerSizeXMinusOne
   216 55B2 85 A5				sta m_playerLevelRightX_H1
   217 55B4 A5 A1				lda m_playerLevelLeftX_H2
   218 55B6 69 00				adc #0
   219 55B8 85 A4				sta m_playerLevelRightX_H2
   220
   221 55BA A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   222 55BC 38					sec
   223 55BD E5 B4				sbc m_playerSizeYMinusOne
   224 55BF 85 A8				sta m_playerLevelTopY_H1
   225 55C1 A5 AA				lda m_playerLevelBottomY_H2
   226 55C3 E9 00				sbc #0
   227 55C5 85 A7				sta m_playerLevelTopY_H2
   228
   229 55C7 60					rts
   230 						
   231 				.endp		
   232 				;
   233 				;**************************************************************************************************
   234 				; SetPlayerScreenPos
   235 				;**************************************************************************************************
   236 				;
   237 55C8			.proc SetPlayerScreenPos
   238
   239 55C8 A5 AD				lda m_playerScreenLeftX					; save old screen pos
   240 55CA 85 AF				sta m_oldPlayerScreenLeftX
   241
   242 55CC A5 AE				lda m_playerScreenTopY
   243 55CE 85 B0				sta m_oldPlayerScreenTopY
   244 						;
   245 						; get new screen pos
   246 						;
   247 						; 	(this should use the "_H2" positions if the delta between the player
   248 						; 	and the camera is too big, 64 chars in X, or 32 chars in Y)
   249 						;
   250 55D0 A5 A2				lda m_playerLevelLeftX_H1
   251 55D2 38					sec
   252 55D3 E5 DB				sbc m_levelWindowX_H1
   253 55D5 18					clc
   254 55D6 69 30				adc #PM_BASE_SCREEN_X
   255 55D8 85 AD				sta m_playerScreenLeftX
   256
   257 55DA A5 A8				lda m_playerLevelTopY_H1
   258 55DC 38					sec
   259 55DD E5 DD				sbc m_levelWindowY_H1
   260 55DF 18					clc
   261 55E0 69 20				adc #PM_BASE_SCREEN_Y
   262 55E2 85 AE				sta m_playerScreenTopY
   263
   264 55E4 E6 9C				inc m_redrawPlayerCounter				; signal for the DLI to redraw the player
   265
   266 55E6 60					rts
   267
   268 				.endp		
   269 				;
   270 				;**************************************************************************************************
   271 				; DrawPlayer
   272 				;**************************************************************************************************
   273 				;
   274 55E7			.proc DrawPlayer
   275
   276 55E7 A5 9E				lda m_playerBaseColor00
   277 55E9 8D 12 D0				sta COLPM0
   278 55EC A5 9F				lda m_playerBaseColor1A
   279 55EE 8D 13 D0				sta COLPM1
   280 55F1 A5 A0				lda m_playerBaseColor1B
   281 55F3 8D 14 D0				sta COLPM2
   282
   283 55F6 A5 9C				lda m_redrawPlayerCounter
   284 55F8 D0 03				bne zdraw		
   285 55FA 4C 49 56				jmp DP_exit				
   286
   287 55FD			zdraw
   288 55FD A9 00				lda #0
   289 55FF 85 9C				sta m_redrawPlayerCounter
   290 						
   291 5601 20 D8 54				jsr SetAnimationIndex
   292
   293 5604 A9 00				lda #0
   294 5606 A2 00				ldx #0
   295 5608 A4 B0				ldy m_oldPlayerScreenTopY	
   296 560A			zfill	
   297 560A 99 00 A4				sta p0_area_1,y
   298 560D 99 00 A5				sta p1_area_1,y
   299 5610 99 00 A6				sta p2_area_1,y
   300 5613 C8					iny
   301 5614 E8					inx
   302 5615 EC C3 32				cpx m_revHeight
   303 5618 D0 F0				bne zfill
   304
   305 561A AE C7 32				ldx m_animIndex
   306 561D 20 50 55				jsr FlipPlayer		
   307
   308 5620 A9 00				lda #$00
   309 5622 8D C5 32				sta m_animCount
   310 5625 AE C9 32				ldx m_animOffset
   311 5628 A4 AE				ldy m_playerScreenTopY	
   312 562A			fill01
   313 562A BD 49 36				lda TabPlayerShape_01,x
   314 562D 99 00 A4				sta p0_area_1,y		
   315 						
   316 5630 BD 9D 36				lda TabPlayerShape_01A,x
   317 5633 99 00 A5				sta p1_area_1,y
   318 						
   319 5636 BD F1 36				lda TabPlayerShape_01B,x
   320 5639 99 00 A6				sta p2_area_1,y
   321 						
   322 563C C8					iny
   323 563D E8					inx
   324 563E EE C5 32				inc m_animCount
   325 5641 AD C5 32				lda m_animCount
   326 5644 CD C8 32				cmp m_animHeight
   327 5647 90 E1				bcc fill01
   328
   329 5649			DP_exit
   330 5649 60					rts
   331 				.endp		
   332 				;
   333 				;**************************************************************************************************
   334 				; DrawPlayerExplosion
   335 				;**************************************************************************************************
   336 				;
   337 564A			.proc DrawPlayerExplosion
   338 564A A5 9D				lda m_missleBaseColor00
   339 564C 8D 12 D0				sta COLPM0
   340
   341 				;************************************************
   342 				;
   343 564F			DPE_erase										; erase previous player explosion frame
   344 564F A2 00				ldx #0
   345 5651 AC D6 32				ldy m_playerExplosionScreenTopY_H1
   346
   347 				;************************************************
   348 				;
   349 5654			DPE_erase_loop
   350 5654 A9 00				lda #0
   351 5656 99 00 A4				sta p0_area_1,y
   352 5659 99 00 A5				sta p1_area_1,y
   353 565C 99 00 A6				sta p2_area_1,y
   354 						
   355 565F 98					tya
   356 5660 18					clc
   357 5661 6D D2 32				adc m_playerExplosionStep
   358 5664 B0 06				bcs DPE_update_frame
   359 5666 A8					tay
   360
   361 5667 E8					inx
   362 5668 E4 B2				cpx m_playerSizeY
   363 566A D0 E8				bne DPE_erase_loop
   364
   365 				;************************************************
   366 				; 	update step and explosion starting line
   367 				; 	if step +1 --> line - 3.5
   368 				; 	if step +2 --> line - 7.0
   369 				;
   370 566C			DPE_update_frame
   371 566C AD D7 32				lda m_playerExplosionScreenTopY_L1
   372 566F 38					sec
   373 5670 E9 80				sbc #$80
   374 5672 8D D7 32				sta m_playerExplosionScreenTopY_L1
   375
   376 5675 AD D6 32				lda m_playerExplosionScreenTopY_H1
   377 5678 E9 03				sbc #$03
   378 567A B0 06				bcs DPE_do_update
   379
   380 567C 20 A4 4B				jsr InitPlayerInfo						; reached top of the screen, end explosion, respawn player
   381 567F 4C B2 56				jmp DPE_exit
   382 					
   383 				;************************************************
   384 				;
   385 5682			DPE_do_update
   386 5682 8D D6 32				sta m_playerExplosionScreenTopY_H1
   387 5685 EE D2 32				inc m_playerExplosionStep				; step +1
   388
   389 				;************************************************
   390 				; draw new player explosion frame
   391 5688			DPE_draw										
   392 5688 A2 00				ldx #0
   393 568A AC D6 32				ldy m_playerExplosionScreenTopY_H1
   394
   395 				;************************************************
   396 				;
   397 568D			DPE_draw_loop
   398 568D BD 49 36				lda TabPlayerShape_01,x
   399 5690 F0 03				beq DPE_draw_p1
   400 5692 99 00 A4				sta p0_area_1,y
   401
   402 				;************************************************
   403 				;
   404 5695			DPE_draw_p1
   405 5695 BD 9D 36				lda TabPlayerShape_01A,x
   406 5698 F0 03				beq DPE_draw_p2	
   407 569A 99 00 A5				sta p1_area_1,y
   408
   409 				;************************************************
   410 				;
   411 569D			DPE_draw_p2	
   412 569D BD F1 36				lda TabPlayerShape_01B,x
   413 56A0 F0 03				beq DPE_draw_end
   414 56A2 99 00 A6				sta p2_area_1,y
   415
   416 				;************************************************
   417 				;
   418 56A5			DPE_draw_end
   419 56A5 98					tya
   420 56A6 18					clc
   421 56A7 6D D2 32				adc m_playerExplosionStep
   422 56AA B0 06				bcs DPE_exit
   423 56AC A8					tay
   424 56AD E8					inx
   425 56AE E4 B2				cpx m_playerSizeY
   426 56B0 D0 DB				bne DPE_draw_loop
   427
   428 				;************************************************
   429 				;
   430 56B2			DPE_exit
   431 						
   432 56B2 60					rts
   433
   434 				.endp		
   435 				;
   436 				;**************************************************************************************************
   437 				; CheckPlayerInLevelRightLimit
   438 				;**************************************************************************************************
   439 				;
   440 56B3			.proc CheckPlayerInLevelRightLimit
   441
   442 56B3 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   443 56B5 18					clc
   444 56B6 65 B3				adc m_playerSizeXMinusOne
   445 56B8 85 A5				sta m_playerLevelRightX_H1
   446 56BA A5 A1				lda m_playerLevelLeftX_H2
   447 56BC 69 00				adc #0
   448 56BE 85 A4				sta m_playerLevelRightX_H2
   449
   450 56C0 C5 D6				cmp m_levelSizeX_H2
   451 56C2 90 1D				bcc CPILRL_exit
   452 56C4 D0 06				bne CPILRL_reset_pos
   453
   454 56C6 A5 A5				lda m_playerLevelRightX_H1
   455 56C8 C5 D7				cmp m_levelSizeX_H1
   456 56CA 90 15				bcc CPILRL_exit
   457
   458 				;************************************************
   459 				;
   460 56CC			CPILRL_reset_pos
   461 56CC A9 00				lda #0
   462 56CE 85 A3				sta m_playerLevelLeftX_L1
   463
   464 56D0 A5 D7				lda m_levelSizeX_H1
   465 56D2 38					sec
   466 56D3 E5 B1				sbc m_playerSizeX
   467 56D5 85 A2				sta m_playerLevelLeftX_H1
   468 56D7 A5 D6				lda m_levelSizeX_H2
   469 56D9 E9 00				sbc #0
   470 56DB 85 A1				sta m_playerLevelLeftX_H2
   471
   472 56DD A9 01				lda #1
   473 56DF 85 D1				sta m_playerSideCollisionFlag
   474
   475 				;************************************************
   476 				;
   477 56E1			CPILRL_exit
   478 					
   479 56E1 60				rts
   480 					
   481 				.endp	
   482 				;
   483 				;**************************************************************************************************
   484 				; CheckPlayerInLevelBottomLimit
   485 				;**************************************************************************************************
   486 				;
   487 56E2			.proc CheckPlayerInLevelBottomLimit
   488
   489 56E2 A5 AA				lda m_playerLevelBottomY_H2
   490 56E4 C5 D8				cmp m_levelSizeY_H2
   491 56E6 90 1D				bcc Exit
   492 56E8 D0 06				bne Reset_Pos
   493
   494 56EA A5 AB				lda m_playerLevelBottomY_H1
   495 56EC C5 D9				cmp m_levelSizeY_H1
   496 56EE 90 15				bcc Exit
   497
   498 				;************************************************
   499 				;
   500 56F0			Reset_Pos
   501 56F0 A9 00				lda #0
   502 56F2 85 AC				sta m_playerLevelBottomY_L1
   503
   504 56F4 A5 D9				lda m_levelSizeY_H1
   505 56F6 38					sec
   506 56F7 E9 01				sbc #1
   507 56F9 85 AB				sta m_playerLevelBottomY_H1
   508 56FB A5 D8				lda m_levelSizeY_H2
   509 56FD E9 00				sbc #0
   510 56FF 85 AA				sta m_playerLevelBottomY_H2
   511
   512 5701 A9 01				lda #1
   513 5703 85 CF				sta m_playerOverPlatformFlag
   514
   515 				;************************************************
   516 				;
   517 5705			Exit
   518 5705 60					rts
   519
   520 				.endp		
   521 				;
   522 				;**************************************************************************************************
   523 				; CheckHoleBelowPlayer
   524 				;**************************************************************************************************
   525 				;
   526 5706			.proc CheckHoleBelowPlayer
   527
   528 						; get bottom char line
   529 5706 A5 AA				lda m_playerLevelBottomY_H2
   530 5708 8D CC 32				sta m_charBuffer_H2
   531 570B A5 AB				lda m_playerLevelBottomY_H1
   532 570D 18					clc
   533 570E 69 01				adc #1									; check one pixel below the bottom line of the player
   534 5710 90 03				bcc CHBP_get_char_line
   535 5712 EE CC 32				inc m_charBuffer_H2
   536
   537 				;************************************************
   538 				;
   539 5715			CHBP_get_char_line
   540 						
   541 5715 4E CC 32				lsr m_charBuffer_H2						; /2
   542 5718 6A					ror
   543 5719 4E CC 32				lsr m_charBuffer_H2						; /4
   544 571C 6A					ror
   545 571D 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   546 5720 6A					ror
   547
   548 						; check bottom level limit
   549 5721 C5 D5				cmp m_levelCharSizeY
   550 5723 B0 6F				bcs CHBP_no_hole
   551
   552 5725			GetLevelLine
   553
   554 5725 AA					tax
   555 5726 BD DB 32				lda TabLevelLineAddressLSB,x
   556 5729 85 E9				sta m_ptrLevelLine
   557 572B BD DB 33				lda TabLevelLineAddressMSB,x
   558 572E 85 EA				sta m_ptrLevelLine+1
   559
   560 						; update right coordinate
   561 5730 A5 A2				lda m_playerLevelLeftX_H1
   562 5732 18					clc
   563 5733 65 B3				adc m_playerSizeXMinusOne
   564 5735 85 A5				sta m_playerLevelRightX_H1
   565 5737 A5 A1				lda m_playerLevelLeftX_H2
   566 5739 69 00				adc #0
   567 573B 85 A4				sta m_playerLevelRightX_H2
   568
   569 						; get left point char column
   570 573D A5 A1				lda m_playerLevelLeftX_H2
   571 573F 8D CC 32				sta m_charBuffer_H2
   572 5742 A5 A2				lda m_playerLevelLeftX_H1
   573 5744 4E CC 32				lsr m_charBuffer_H2						; /2
   574 5747 6A					ror
   575 5748 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   576 574B 6A					ror
   577
   578 574C A8					tay
   579 574D B1 E9				lda (m_ptrLevelLine),y
   580 574F AA					tax
   581 5750 BD DB 34				lda TabCharDefinition,x
   582 5753 8D CD 32				sta m_leftBottomChar
   583
   584 						; get right point char column
   585 5756 A5 A4				lda m_playerLevelRightX_H2
   586 5758 8D CC 32				sta m_charBuffer_H2
   587 575B A5 A5				lda m_playerLevelRightX_H1
   588 575D 4E CC 32				lsr m_charBuffer_H2						; /2
   589 5760 6A					ror
   590 5761 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   591 5764 6A					ror
   592
   593 5765 A8					tay
   594 5766 B1 E9				lda (m_ptrLevelLine),y
   595 5768 AA					tax
   596 5769 BD DB 34				lda TabCharDefinition,x
   597 576C 8D CE 32				sta m_rightBottomChar
   598 					
   599 						; fast collision check
   600 576F AD CD 32				lda m_leftBottomChar
   601 5772 29 01				and #01
   602 5774 C9 01				cmp #CT_BLOCK
   603 5776 D0 07				bne CHBP_check_next_char
   604
   605 5778 AD CD 32				lda m_leftBottomChar
   606 577B 29 10				and #%00010000
   607 577D D0 15				bne CHBP_no_hole
   608
   609 				;************************************************
   610 				;
   611 577F			CHBP_check_next_char
   612 						
   613 577F AD CE 32				lda m_rightBottomChar
   614 5782 29 01				and #01
   615 5784 C9 01				cmp #CT_BLOCK
   616 5786 D0 07				bne CHBP_hole
   617
   618 5788 AD CE 32				lda m_rightBottomChar
   619 578B 29 10				and #%00010000
   620 578D D0 05				bne CHBP_no_hole
   621
   622 				;************************************************
   623 				;
   624 578F			CHBP_hole
   625
   626 						; need to change the player to the falling state
   627 578F A9 00				lda #0
   628 5791 85 CF				sta m_playerOverPlatformFlag
   629 5793 60					rts
   630
   631 				;************************************************
   632 				;
   633 5794			CHBP_no_hole
   634
   635 5794 A9 01				lda #1
   636 5796 85 CF				sta m_playerOverPlatformFlag
   637 5798 60					rts
   638 				.endp
   639 				;
   640 				;**************************************************************************************************
   641 				; CheckPlayerBottomCollision
   642 				;**************************************************************************************************
   643 				;
   644 5799			.proc CheckPlayerBottomCollision
   645
   646 						; get bottom char line
   647 5799 A5 AA				lda m_playerLevelBottomY_H2
   648 579B 8D CC 32				sta m_charBuffer_H2
   649 579E A5 AB				lda m_playerLevelBottomY_H1
   650
   651 57A0 4E CC 32				lsr m_charBuffer_H2						; /2
   652 57A3 6A					ror
   653 57A4 4E CC 32				lsr m_charBuffer_H2						; /4
   654 57A7 6A					ror
   655 57A8 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   656 57AB 6A					ror
   657
   658 57AC AA					tax
   659 57AD BD DB 32				lda TabLevelLineAddressLSB,x
   660 57B0 85 E9				sta m_ptrLevelLine
   661 57B2 BD DB 33				lda TabLevelLineAddressMSB,x
   662 57B5 85 EA				sta m_ptrLevelLine+1
   663
   664 						; update right coordinate
   665 57B7 A5 A2				lda m_playerLevelLeftX_H1
   666 57B9 18					clc
   667 57BA 65 B3				adc m_playerSizeXMinusOne
   668 57BC 85 A5				sta m_playerLevelRightX_H1
   669 57BE A5 A1				lda m_playerLevelLeftX_H2
   670 57C0 69 00				adc #0
   671 57C2 85 A4				sta m_playerLevelRightX_H2
   672
   673 						; get left point char column
   674 57C4 A5 A1				lda m_playerLevelLeftX_H2
   675 57C6 8D CC 32				sta m_charBuffer_H2
   676 57C9 A5 A2				lda m_playerLevelLeftX_H1
   677 57CB 4E CC 32				lsr m_charBuffer_H2						; /2
   678 57CE 6A					ror
   679 57CF 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   680 57D2 6A					ror
   681
   682 57D3 A8					tay
   683 57D4 B1 E9				lda (m_ptrLevelLine),y
   684 57D6 AA					tax
   685 57D7 BD DB 34				lda TabCharDefinition,x
   686 57DA 8D CD 32				sta m_leftBottomChar
   687
   688 						; get right point char column
   689 57DD A5 A4				lda m_playerLevelRightX_H2
   690 57DF 8D CC 32				sta m_charBuffer_H2
   691 57E2 A5 A5				lda m_playerLevelRightX_H1
   692 57E4 4E CC 32				lsr m_charBuffer_H2						; /2
   693 57E7 6A					ror
   694 57E8 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   695 57EB 6A					ror
   696
   697 57EC A8					tay
   698 57ED B1 E9				lda (m_ptrLevelLine),y
   699 57EF AA					tax
   700 57F0 BD DB 34				lda TabCharDefinition,x
   701 57F3 8D CE 32				sta m_rightBottomChar
   702
   703 						; fast collision check
   704 57F6 AD CD 32				lda m_leftBottomChar
   705 57F9 29 01				and #01
   706 57FB C9 01				cmp #CT_BLOCK
   707 57FD D0 07				bne CPBC_check_next_char
   708
   709 57FF AD CD 32				lda m_leftBottomChar
   710 5802 29 10				and #%00010000
   711 5804 D0 10				bne CPBC_found_collision
   712
   713 				;************************************************
   714 				;
   715 5806			CPBC_check_next_char
   716
   717 5806 AD CE 32				lda m_rightBottomChar
   718 5809 29 01				and #01
   719 580B C9 01				cmp #CT_BLOCK
   720 580D D0 1E				bne CPBC_exit
   721
   722 580F AD CE 32				lda m_rightBottomChar
   723 5812 29 10				and #%00010000
   724 5814 F0 17				beq CPBC_exit
   725
   726 				;************************************************
   727 				;
   728 5816			CPBC_found_collision
   729
   730 						; need to move the player up and change to the platform state
   731 5816 A9 01				lda #1
   732 5818 85 CF				sta m_playerOverPlatformFlag
   733
   734 581A A9 00				lda #0
   735 581C 85 AC				sta m_playerLevelBottomY_L1
   736
   737 581E A5 AB				lda m_playerLevelBottomY_H1
   738 5820 29 F8				and #%11111000		; mask for CHAR_PIX.else_Y
   739 5822 38					sec
   740 5823 E9 01				sbc #1
   741 5825 85 AB				sta m_playerLevelBottomY_H1
   742 5827 A5 AA				lda m_playerLevelBottomY_H2
   743 5829 E9 00				sbc #0
   744 582B 85 AA				sta m_playerLevelBottomY_H2
   745
   746 				;************************************************
   747 				;
   748 582D			CPBC_exit
   749 582D 60					rts
   750
   751 				.endp		
   752 				;
   753 				;**************************************************************************************************
   754 				; CheckPlayerTopCollision
   755 				;**************************************************************************************************
   756 				;
   757 582E			.proc CheckPlayerTopCollision
   758
   759 582E A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   760 5830 38					sec
   761 5831 E5 B4				sbc m_playerSizeYMinusOne
   762 5833 85 A8				sta m_playerLevelTopY_H1
   763 						
   764 5835 A5 AA				lda m_playerLevelBottomY_H2
   765 5837 E9 00				sbc #0
   766 5839 85 A7				sta m_playerLevelTopY_H2
   767
   768 583B A5 A7				lda m_playerLevelTopY_H2				; get top char line
   769 583D 8D CC 32				sta m_charBuffer_H2
   770 5840 A5 A8				lda m_playerLevelTopY_H1
   771
   772 5842 4E CC 32				lsr m_charBuffer_H2						; /2
   773 5845 6A					ror
   774 5846 4E CC 32				lsr m_charBuffer_H2						; /4
   775 5849 6A					ror
   776 584A 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   777 584D 6A					ror
   778
   779 584E AA					tax
   780 584F BD DB 32				lda TabLevelLineAddressLSB,x
   781 5852 85 E9				sta m_ptrLevelLine
   782 						
   783 5854 BD DB 33				lda TabLevelLineAddressMSB,x
   784 5857 85 EA				sta m_ptrLevelLine+1
   785
   786 5859 A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
   787 585B 18					clc
   788 585C 65 B3				adc m_playerSizeXMinusOne
   789 585E 85 A5				sta m_playerLevelRightX_H1
   790 						
   791 5860 A5 A1				lda m_playerLevelLeftX_H2
   792 5862 69 00				adc #0
   793 5864 85 A4				sta m_playerLevelRightX_H2
   794
   795 5866 A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   796 5868 8D CC 32				sta m_charBuffer_H2
   797 						
   798 586B A5 A2				lda m_playerLevelLeftX_H1
   799 586D 4E CC 32				lsr m_charBuffer_H2						; /2
   800 5870 6A					ror
   801 5871 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   802 5874 6A					ror
   803
   804 5875 A8					tay
   805 5876 B1 E9				lda (m_ptrLevelLine),y
   806 						
   807 5878 AA					tax		
   808 5879 BD DB 34				lda TabCharDefinition,x
   809 587C 8D CA 32				sta m_leftTopChar
   810
   811 587F A5 A4				lda m_playerLevelRightX_H2				; get right point char column	
   812 5881 8D CC 32				sta m_charBuffer_H2
   813 						
   814 5884 A5 A5				lda m_playerLevelRightX_H1
   815 5886 4E CC 32				lsr m_charBuffer_H2						; /2
   816 5889 6A					ror
   817 588A 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   818 588D 6A					ror
   819
   820 588E A8					tay
   821 588F B1 E9				lda (m_ptrLevelLine),y
   822 5891 AA					tax
   823 5892 BD DB 34				lda TabCharDefinition,x
   824 5895 8D CB 32				sta m_rightTopChar
   825
   826 5898 AD CA 32				lda m_leftTopChar						; fast collision check	
   827 589B 29 01				and #01
   828 589D C9 01				cmp #CT_BLOCK
   829 589F D0 07				bne CPTC_check_next_char
   830
   831 58A1 AD CA 32				lda m_leftTopChar
   832 58A4 29 20				and #%00100000
   833 58A6 D0 10				bne CPTC_found_collision
   834
   835 				;**************************************************
   836 				;
   837 58A8			CPTC_check_next_char
   838 						
   839 58A8 AD CB 32				lda m_rightTopChar
   840 58AB 29 01				and #01
   841 58AD C9 01				cmp #CT_BLOCK
   842 58AF D0 2B				bne CPTC_exit
   843
   844 58B1 AD CB 32				lda m_rightTopChar
   845 58B4 29 20				and #%00100000
   846 58B6 F0 24				beq CPTC_exit
   847
   848 				;**************************************************
   849 				;
   850 58B8			CPTC_found_collision
   851
   852 58B8 A9 01				lda #1									; need to move the player down
   853 58BA 85 D0				sta m_playerTopCollisionFlag
   854
   855 58BC A9 00				lda #0
   856 58BE 85 AC				sta m_playerLevelBottomY_L1
   857
   858 58C0 A5 A8				lda m_playerLevelTopY_H1
   859 58C2 29 F8				and #%11111000							; mask for CHAR_PIX.else_Y
   860 58C4 18					clc
   861 58C5 69 08				adc #CHAR_PIX.else_Y 						; +m_playerSizeY
   862 58C7 85 AB				sta m_playerLevelBottomY_H1
   863 						
   864 58C9 A5 A7				lda m_playerLevelTopY_H2
   865 58CB 69 00				adc #0
   866 58CD 85 AA				sta m_playerLevelBottomY_H2
   867
   868 58CF A5 AB				lda m_playerLevelBottomY_H1
   869 58D1 18					clc
   870 58D2 65 B4				adc m_playerSizeYMinusOne
   871 58D4 85 AB				sta m_playerLevelBottomY_H1
   872 						
   873 58D6 A5 AA				lda m_playerLevelBottomY_H2
   874 58D8 69 00				adc #0
   875 58DA 85 AA				sta m_playerLevelBottomY_H2
   876
   877 				;**************************************************
   878 				;
   879 58DC			CPTC_exit
   880 58DC 60					rts
   881
   882 				.endp		
   883 				;
   884 				;**************************************************************************************************
   885 				; CheckPlayerLeftCollision
   886 				;**************************************************************************************************
   887 				;
   888 58DD			.proc CheckPlayerLeftCollision
   889
   890 58DD A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
   891 58DF 38					sec
   892 58E0 E5 B4				sbc m_playerSizeYMinusOne
   893 58E2 85 A8				sta m_playerLevelTopY_H1
   894 						
   895 58E4 A5 AA				lda m_playerLevelBottomY_H2
   896 58E6 E9 00				sbc #0
   897 58E8 85 A7				sta m_playerLevelTopY_H2
   898
   899 58EA A5 A1				lda m_playerLevelLeftX_H2				; get left point char column
   900 58EC 8D CC 32				sta m_charBuffer_H2
   901 58EF A5 A2				lda m_playerLevelLeftX_H1
   902
   903 58F1 4E CC 32				lsr m_charBuffer_H2						; /2
   904 58F4 6A					ror
   905 58F5 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
   906 58F8 6A					ror
   907
   908 58F9 A8					tay
   909 58FA A5 A7				lda m_playerLevelTopY_H2				; get top char line	
   910 58FC 8D CC 32				sta m_charBuffer_H2
   911 58FF A5 A8				lda m_playerLevelTopY_H1
   912
   913 5901 4E CC 32				lsr m_charBuffer_H2						; /2
   914 5904 6A					ror
   915 5905 4E CC 32				lsr m_charBuffer_H2						; /4
   916 5908 6A					ror
   917 5909 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   918 590C 6A					ror
   919
   920 590D AA					tax
   921 590E BD DB 32				lda TabLevelLineAddressLSB,x
   922 5911 85 E9				sta m_ptrLevelLine
   923 5913 BD DB 33				lda TabLevelLineAddressMSB,x
   924 5916 85 EA				sta m_ptrLevelLine+1
   925
   926 5918 B1 E9				lda (m_ptrLevelLine),y
   927 591A AA					tax
   928 591B BD DB 34				lda TabCharDefinition,x
   929 591E 8D CA 32				sta m_leftTopChar
   930
   931 5921 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
   932 5923 8D CC 32				sta m_charBuffer_H2
   933 5926 A5 AB				lda m_playerLevelBottomY_H1
   934
   935 5928 4E CC 32				lsr m_charBuffer_H2						; /2
   936 592B 6A					ror
   937 592C 4E CC 32				lsr m_charBuffer_H2						; /4
   938 592F 6A					ror
   939 5930 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
   940 5933 6A					ror
   941
   942 5934 AA					tax
   943 5935 BD DB 32				lda TabLevelLineAddressLSB,x
   944 5938 85 E9				sta m_ptrLevelLine
   945 						
   946 593A BD DB 33				lda TabLevelLineAddressMSB,x
   947 593D 85 EA				sta m_ptrLevelLine+1
   948
   949 593F B1 E9				lda (m_ptrLevelLine),y
   950 5941 AA					tax
   951 						
   952 5942 BD DB 34				lda TabCharDefinition,x
   953 5945 8D CD 32				sta m_leftBottomChar
   954
   955 5948 AD CA 32				lda m_leftTopChar						; fast collision check
   956 594B 29 0F				and #15
   957 594D C9 01				cmp #CT_BLOCK
   958 594F D0 07				bne CPLC_check_next_char
   959
   960 5951 AD CA 32				lda m_leftTopChar
   961 5954 29 80				and #%10000000
   962 5956 D0 10				bne CPLC_found_collision
   963
   964 				;**************************************************
   965 				;
   966 5958			CPLC_check_next_char
   967
   968 5958 AD CD 32				lda m_leftBottomChar
   969 595B 29 01				and #01
   970 595D C9 01				cmp #CT_BLOCK
   971 595F D0 1E				bne CPLC_exit
   972
   973 5961 AD CD 32				lda m_leftBottomChar
   974 5964 29 80				and #%10000000
   975 5966 F0 17				beq CPLC_exit
   976
   977 				;**************************************************
   978 				;
   979 5968			CPLC_found_collision
   980
   981 5968 A9 01				lda #1
   982 596A 85 D1				sta m_playerSideCollisionFlag
   983
   984 596C A9 00				lda #0									; need to move the player to the right
   985 596E 85 A3				sta m_playerLevelLeftX_L1
   986
   987 5970 A5 A2				lda m_playerLevelLeftX_H1
   988 5972 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
   989 5974 18					clc
   990 5975 69 04				adc #CHAR_PIX.else_X
   991 5977 85 A2				sta m_playerLevelLeftX_H1
   992 						
   993 5979 A5 A1				lda m_playerLevelLeftX_H2
   994 597B 69 00				adc #0
   995 597D 85 A1				sta m_playerLevelLeftX_H2
   996
   997 				;**************************************************
   998 				;
   999 597F			CPLC_exit	
  1000 597F 60					rts
  1001
  1002 				.endp	
  1003 				;
  1004 				;**************************************************************************************************
  1005 				; CheckPlayerRightCollision
  1006 				;**************************************************************************************************
  1007 				;
  1008 5980			.proc CheckPlayerRightCollision
  1009
  1010 5980 A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1011 5982 38					sec
  1012 5983 E5 B4				sbc m_playerSizeYMinusOne
  1013 5985 85 A8				sta m_playerLevelTopY_H1
  1014 					
  1015 5987 A5 AA				lda m_playerLevelBottomY_H2
  1016 5989 E9 00				sbc #0
  1017 598B 85 A7				sta m_playerLevelTopY_H2
  1018
  1019 598D A5 A2				lda m_playerLevelLeftX_H1				; update right coordinate
  1020 598F 18					clc
  1021 5990 65 B3				adc m_playerSizeXMinusOne
  1022 5992 85 A5				sta m_playerLevelRightX_H1
  1023 					
  1024 5994 A5 A1				lda m_playerLevelLeftX_H2
  1025 5996 69 00				adc #0
  1026 5998 85 A4				sta m_playerLevelRightX_H2
  1027
  1028 599A A5 A4				lda m_playerLevelRightX_H2				; get right point char column
  1029 599C 8D CC 32				sta m_charBuffer_H2
  1030 						
  1031 599F A5 A5				lda m_playerLevelRightX_H1
  1032 59A1 4E CC 32				lsr m_charBuffer_H2						; /2
  1033 59A4 6A					ror
  1034 59A5 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1035 59A8 6A					ror
  1036 59A9 A8					tay
  1037
  1038 59AA A5 A7				lda m_playerLevelTopY_H2				; get top char line
  1039 59AC 8D CC 32				sta m_charBuffer_H2
  1040 					
  1041 59AF A5 A8				lda m_playerLevelTopY_H1
  1042 59B1 4E CC 32				lsr m_charBuffer_H2						; /2
  1043 59B4 6A					ror
  1044 59B5 4E CC 32				lsr m_charBuffer_H2						; /4
  1045 59B8 6A					ror
  1046 59B9 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1047 59BC 6A					ror	
  1048
  1049 59BD AA					tax
  1050 59BE BD DB 32				lda TabLevelLineAddressLSB,x
  1051 59C1 85 E9				sta m_ptrLevelLine
  1052 					
  1053 59C3 BD DB 33				lda TabLevelLineAddressMSB,x
  1054 59C6 85 EA				sta m_ptrLevelLine+1
  1055
  1056 59C8 B1 E9				lda (m_ptrLevelLine),y
  1057 59CA AA					tax
  1058 					
  1059 59CB BD DB 34				lda TabCharDefinition,x
  1060 59CE 8D CB 32				sta m_rightTopChar
  1061
  1062 59D1 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1063 59D3 8D CC 32				sta m_charBuffer_H2
  1064 59D6 A5 AB				lda m_playerLevelBottomY_H1
  1065
  1066 59D8 4E CC 32				lsr m_charBuffer_H2						; /2
  1067 59DB 6A					ror
  1068 59DC 4E CC 32				lsr m_charBuffer_H2						; /4
  1069 59DF 6A					ror
  1070 59E0 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1071 59E3 6A					ror
  1072
  1073 59E4 AA					tax
  1074 59E5 BD DB 32				lda TabLevelLineAddressLSB,x
  1075 59E8 85 E9				sta m_ptrLevelLine
  1076 					
  1077 59EA BD DB 33				lda TabLevelLineAddressMSB,x
  1078 59ED 85 EA				sta m_ptrLevelLine+1
  1079
  1080 59EF B1 E9				lda (m_ptrLevelLine),y
  1081 59F1 AA					tax	
  1082 59F2 BD DB 34				lda TabCharDefinition,x
  1083 59F5 8D CE 32				sta m_rightBottomChar
  1084
  1085 59F8 AD CB 32				lda m_rightTopChar						; fast collision check
  1086 59FB 29 01				and #01
  1087 59FD C9 01				cmp #CT_BLOCK
  1088 59FF D0 07				bne CPRC_check_next_char
  1089
  1090 5A01 AD CB 32				lda m_rightTopChar
  1091 5A04 29 40				and #%01000000
  1092 5A06 D0 10				bne CPRC_found_collision
  1093
  1094 				;**************************************************
  1095 				;
  1096 5A08			CPRC_check_next_char
  1097 						
  1098 5A08 AD CE 32				lda m_rightBottomChar
  1099 5A0B 29 01				and #01
  1100 5A0D C9 01				cmp #CT_BLOCK
  1101 5A0F D0 1E				bne CPRC_exit
  1102
  1103 5A11 AD CE 32				lda m_rightBottomChar
  1104 5A14 29 40				and #%01000000
  1105 5A16 F0 17				beq CPRC_exit
  1106
  1107 				;**************************************************
  1108 				;
  1109 5A18			CPRC_found_collision
  1110 5A18 A9 01				lda #1
  1111 5A1A 85 D1				sta m_playerSideCollisionFlag
  1112
  1113 5A1C A9 00				lda #0									; need to move the player to the left
  1114 5A1E 85 A3				sta m_playerLevelLeftX_L1
  1115 					
  1116 5A20 A5 A5				lda m_playerLevelRightX_H1
  1117 5A22 29 FC				and #%11111100							; mask for CHAR_PIX.else_X
  1118 5A24 38					sec
  1119 5A25 E5 B1				sbc m_playerSizeX
  1120 5A27 85 A2				sta m_playerLevelLeftX_H1
  1121 					
  1122 5A29 A5 A4				lda m_playerLevelRightX_H2
  1123 5A2B E9 00				sbc #0
  1124 5A2D 85 A1				sta m_playerLevelLeftX_H2
  1125
  1126 				;**************************************************
  1127 				;
  1128 5A2F			CPRC_exit
  1129 5A2F 60					rts
  1130 						
  1131 				.endp		
  1132 				;
  1133 				;**************************************************************************************************
  1134 				; AddSideAccelToSpeed
  1135 				;**************************************************************************************************
  1136 				;
  1137 5A30			.proc AddSideAccelToSpeed
  1138
  1139 5A30 A5 B6				lda m_playerSideSpeed_L1				; update frame speed with frame accel	
  1140 5A32 18					clc
  1141 5A33 65 BA				adc m_playerSideAccel_L1
  1142 5A35 85 B6				sta m_playerSideSpeed_L1
  1143 						
  1144 5A37 A5 B5				lda m_playerSideSpeed_H1
  1145 5A39 65 B9				adc m_playerSideAccel_H1
  1146
  1147 				;**************************************************
  1148 				;
  1149 5A3B			ASATS_entry_point
  1150 						
  1151 5A3B 85 B5				sta m_playerSideSpeed_H1
  1152 5A3D C5 B7				cmp m_playerMaxSideSpeed_H1				; check max frame speed
  1153 5A3F 90 10				bcc ASATS_exit							; lower than max speed
  1154 5A41 D0 06				bne ASATS_max_speed						; greater than max speed
  1155
  1156 5A43 A5 B8				lda m_playerMaxSideSpeed_L1				; need to check the low byte
  1157 5A45 C5 B6				cmp m_playerSideSpeed_L1
  1158 5A47 B0 08				bcs ASATS_exit							; lower or equal to max speed
  1159
  1160 				;**************************************************
  1161 				;
  1162 5A49			ASATS_max_speed									
  1163 						
  1164 5A49 A5 B7				lda m_playerMaxSideSpeed_H1				; is higher than the max speed
  1165 5A4B 85 B5				sta m_playerSideSpeed_H1
  1166 						
  1167 5A4D A5 B8				lda m_playerMaxSideSpeed_L1
  1168 5A4F 85 B6				sta m_playerSideSpeed_L1
  1169
  1170 				;**************************************************
  1171 				;
  1172 5A51			ASATS_exit		
  1173 5A51 60					rts
  1174
  1175 				.endp
  1176 				;
  1177 				;**************************************************************************************************
  1178 				; SubstractSideDeaccelToSpeed
  1179 				;**************************************************************************************************
  1180 				;
  1181 5A52			SubstractSideDeaccelToSpeed
  1182
  1183 5A52 A5 B6				lda m_playerSideSpeed_L1					; update frame speed with frame accel
  1184 5A54 38					sec
  1185 5A55 E5 BC				sbc m_playerSideDeaccel_L1
  1186 5A57 85 B6				sta m_playerSideSpeed_L1
  1187
  1188 5A59 A5 B5				lda m_playerSideSpeed_H1
  1189 5A5B E5 BB				sbc m_playerSideDeaccel_H1
  1190 5A5D B0 04				bcs SSDTS_dont_reset_speed
  1191
  1192 				;************************************************
  1193 				;
  1194 5A5F			SSDTS_reset_speed
  1195 5A5F A9 00				lda #0
  1196 5A61 85 B6				sta m_playerSideSpeed_L1
  1197
  1198 				;************************************************
  1199 				;
  1200 5A63			SSDTS_dont_reset_speed
  1201 5A63 85 B5				sta m_playerSideSpeed_H1
  1202
  1203 5A65 60					rts	
  1204 				;
  1205 				;**************************************************************************************************
  1206 				; AddSideSpeedToPosition
  1207 				;**************************************************************************************************
  1208 				;
  1209 5A66			.proc AddSideSpeedToPosition
  1210
  1211 5A66 A5 A3				lda m_playerLevelLeftX_L1				; update player side position
  1212 5A68 18					clc
  1213 5A69 65 B6				adc m_playerSideSpeed_L1
  1214 5A6B 85 A3				sta m_playerLevelLeftX_L1
  1215 						
  1216 5A6D A5 A2				lda m_playerLevelLeftX_H1		
  1217 5A6F 65 B5				adc m_playerSideSpeed_H1
  1218 5A71 85 A2				sta m_playerLevelLeftX_H1
  1219 						
  1220 5A73 A5 A1				lda m_playerLevelLeftX_H2
  1221 5A75 69 00				adc #0
  1222 5A77 85 A1				sta m_playerLevelLeftX_H2
  1223
  1224 5A79 A9 00				lda #0									; check collisions for a player moving to the right	
  1225 5A7B 85 D1				sta m_playerSideCollisionFlag
  1226
  1227 5A7D 20 B3 56				jsr CheckPlayerInLevelRightLimit		; check level right side limit
  1228 					
  1229 5A80 A5 D1				lda m_playerSideCollisionFlag
  1230 5A82 D0 07				bne ASSTP_found_collision
  1231
  1232 5A84 20 80 59				jsr CheckPlayerRightCollision
  1233
  1234 5A87 A5 D1				lda m_playerSideCollisionFlag
  1235 5A89 F0 06				beq ASSTP_exit
  1236
  1237 				;************************************************
  1238 				;
  1239 5A8B			ASSTP_found_collision
  1240 						
  1241 5A8B A9 00				lda #0
  1242 5A8D 85 B5				sta m_playerSideSpeed_H1
  1243 5A8F 85 B6				sta m_playerSideSpeed_L1
  1244
  1245 				;************************************************
  1246 				;
  1247 5A91			ASSTP_exit
  1248 						
  1249 5A91 60					rts
  1250
  1251 				.endp
  1252 				;
  1253 				;**************************************************************************************************
  1254 				; SubstractSideSpeedToPosition
  1255 				;**************************************************************************************************
  1256 				;
  1257 5A92			.proc SubstractSideSpeedToPosition
  1258
  1259 5A92 A5 A3				lda m_playerLevelLeftX_L1	; update player side position
  1260 5A94 38					sec
  1261 5A95 E5 B6				sbc m_playerSideSpeed_L1
  1262 5A97 85 A3				sta m_playerLevelLeftX_L1
  1263 						
  1264 5A99 A5 A2				lda m_playerLevelLeftX_H1
  1265 5A9B E5 B5				sbc m_playerSideSpeed_H1
  1266 5A9D 85 A2				sta m_playerLevelLeftX_H1
  1267 						
  1268 5A9F A5 A1				lda m_playerLevelLeftX_H2
  1269 5AA1 E9 00				sbc #0
  1270 5AA3 85 A1				sta m_playerLevelLeftX_H2
  1271
  1272 						; check collisions for a player moving to the left
  1273 5AA5 B0 0B				bcs SSSTP_check_left_collision			; check level left side limit
  1274 5AA7 A9 00				lda #0
  1275 5AA9 85 A1				sta m_playerLevelLeftX_H2
  1276 5AAB 85 A2				sta m_playerLevelLeftX_H1
  1277 5AAD 85 A3				sta m_playerLevelLeftX_L1
  1278 5AAF 4C BD 5A				jmp SSSTP_found_collision
  1279
  1280 				;************************************************
  1281 				;
  1282 5AB2			SSSTP_check_left_collision
  1283 						
  1284 5AB2 A9 00				lda #0
  1285 5AB4 85 D1				sta m_playerSideCollisionFlag
  1286
  1287 5AB6 20 DD 58				jsr CheckPlayerLeftCollision
  1288
  1289 5AB9 A5 D1				lda m_playerSideCollisionFlag
  1290 5ABB F0 06				beq SSSTP_exit
  1291
  1292 				;************************************************
  1293 				;
  1294 5ABD			SSSTP_found_collision
  1295 						
  1296 5ABD A9 00				lda #0
  1297 5ABF 85 B5				sta m_playerSideSpeed_H1
  1298 5AC1 85 B6				sta m_playerSideSpeed_L1
  1299
  1300 5AC3			SSSTP_exit
  1301 5AC3 60					rts
  1302 						
  1303 				.endp		
  1304 				;
  1305 				;**************************************************************************************************
  1306 				; AddGravityAccelToSpeed
  1307 				;**************************************************************************************************
  1308 				;
  1309 5AC4			.proc AddGravityAccelToSpeed
  1310
  1311 5AC4 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1312 5AC6 18					clc
  1313 5AC7 65 C4				adc m_playerGravityAccel_L1
  1314 5AC9 85 BE				sta m_playerSpeedY_L1
  1315 						
  1316 5ACB A5 BD				lda m_playerSpeedY_H1
  1317 5ACD 65 C3				adc m_playerGravityAccel_H1
  1318 5ACF 85 BD				sta m_playerSpeedY_H1
  1319
  1320 5AD1 C5 C1				cmp m_playerMaxFallSpeed_H1				; check max frame speed
  1321 5AD3 90 10				bcc AGATS_exit							; lower than max speed
  1322 5AD5 D0 06				bne AGATS_max_speed						; greater than max speed
  1323
  1324 5AD7 A5 C2				lda m_playerMaxFallSpeed_L1				; need to check the low byte
  1325 5AD9 C5 BE				cmp m_playerSpeedY_L1
  1326 5ADB B0 08				bcs AGATS_exit							; lower or equal to max speed
  1327
  1328 				;************************************************
  1329 				;
  1330 5ADD			AGATS_max_speed			
  1331
  1332 5ADD A5 C1				lda m_playerMaxFallSpeed_H1				; is higher than the max speed
  1333 5ADF 85 BD				sta m_playerSpeedY_H1
  1334 						
  1335 5AE1 A5 C2				lda m_playerMaxFallSpeed_L1
  1336 5AE3 85 BE				sta m_playerSpeedY_L1
  1337
  1338 				;************************************************
  1339 				;
  1340 5AE5			AGATS_exit
  1341 5AE5 60					rts
  1342 						
  1343 				.endp		
  1344 				;
  1345 				;**************************************************************************************************
  1346 				; SubstractGravityAccelToSpeed
  1347 				;**************************************************************************************************
  1348 				;
  1349 5AE6			.proc SubstractGravityAccelToSpeed
  1350 						
  1351 5AE6 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1352 5AE8 38					sec
  1353 5AE9 E5 C4				sbc m_playerGravityAccel_L1
  1354 5AEB 85 BE				sta m_playerSpeedY_L1
  1355 						
  1356 5AED A5 BD				lda m_playerSpeedY_H1
  1357 5AEF E5 C3				sbc m_playerGravityAccel_H1
  1358 5AF1 B0 04				bcs SGATS_dont_reset_speed
  1359
  1360 				;************************************************
  1361 				;
  1362 5AF3			SGATS_reset_speed
  1363 5AF3 A9 00				lda #0
  1364 5AF5 85 BE				sta m_playerSpeedY_L1
  1365
  1366 				;************************************************
  1367 				;
  1368 5AF7			SGATS_dont_reset_speed
  1369 5AF7 85 BD				sta m_playerSpeedY_H1
  1370 5AF9 60					rts
  1371
  1372 				.endp
  1373 				;
  1374 				;**************************************************************************************************
  1375 				; AddSpeedYToPosition
  1376 				;**************************************************************************************************
  1377 				;
  1378 5AFA			.proc AddSpeedYToPosition
  1379
  1380 5AFA A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1381 5AFC 18					clc
  1382 5AFD 65 BE				adc m_playerSpeedY_L1
  1383 5AFF 85 AC				sta m_playerLevelBottomY_L1
  1384 						
  1385 5B01 A5 AB				lda m_playerLevelBottomY_H1
  1386 5B03 65 BD				adc m_playerSpeedY_H1
  1387 5B05 85 AB				sta m_playerLevelBottomY_H1
  1388 						
  1389 5B07 A5 AA				lda m_playerLevelBottomY_H2
  1390 5B09 69 00				adc #0
  1391 5B0B 85 AA				sta m_playerLevelBottomY_H2
  1392
  1393 5B0D A9 00				lda #0									; check collisions for a player moving down
  1394 5B0F 85 CF				sta m_playerOverPlatformFlag
  1395
  1396 5B11 20 E2 56				jsr CheckPlayerInLevelBottomLimit		; check level bottom limit collision
  1397
  1398 5B14 A5 CF				lda m_playerOverPlatformFlag
  1399 5B16 D0 03				bne ASYTP_exit
  1400
  1401 5B18 20 99 57				jsr CheckPlayerBottomCollision			; check collision with the top of a platform
  1402
  1403 				;************************************************
  1404 				;
  1405 5B1B			ASYTP_exit
  1406 5B1B 60					rts
  1407 						
  1408 				.endp		
  1409 				;
  1410 				;**************************************************************************************************
  1411 				; SubstractSpeedYToPosition
  1412 				;**************************************************************************************************
  1413 				;
  1414 5B1C			.proc SubstractSpeedYToPosition
  1415
  1416 5B1C A5 AC				lda m_playerLevelBottomY_L1				; update player position in Y
  1417 5B1E 38					sec
  1418 5B1F E5 BE				sbc m_playerSpeedY_L1
  1419 5B21 85 AC				sta m_playerLevelBottomY_L1
  1420 5B23 A5 AB				lda m_playerLevelBottomY_H1
  1421 5B25 E5 BD				sbc m_playerSpeedY_H1
  1422 5B27 85 AB				sta m_playerLevelBottomY_H1
  1423 5B29 A5 AA				lda m_playerLevelBottomY_H2
  1424 5B2B E9 00				sbc #0
  1425 5B2D 85 AA				sta m_playerLevelBottomY_H2
  1426
  1427 5B2F A5 AB				lda m_playerLevelBottomY_H1				; update top coordinate
  1428 5B31 38					sec
  1429 5B32 E5 B4				sbc m_playerSizeYMinusOne
  1430 5B34 85 A8				sta m_playerLevelTopY_H1
  1431 5B36 A5 AA				lda m_playerLevelBottomY_H2
  1432 5B38 E9 00				sbc #0
  1433 5B3A 85 A7				sta m_playerLevelTopY_H2
  1434
  1435 5B3C B0 0D				bcs SSYTP_check_platform_bottom			; check collisions for a player moving up check level top limit collision
  1436
  1437 5B3E A9 00				lda #0
  1438 5B40 85 AC				sta m_playerLevelBottomY_L1
  1439 5B42 85 AA				sta m_playerLevelBottomY_H2
  1440
  1441 5B44 A5 B4				lda m_playerSizeYMinusOne
  1442 5B46 85 AB				sta m_playerLevelBottomY_H1
  1443
  1444 5B48 4C 56 5B				jmp SSYTP_found_collision
  1445
  1446 5B4B			SSYTP_check_platform_bottom
  1447 					
  1448 5B4B A9 00				lda #0									; check collision with the bottom of a platform
  1449 5B4D 85 D0				sta m_playerTopCollisionFlag
  1450
  1451 5B4F 20 2E 58				jsr CheckPlayerTopCollision
  1452
  1453 5B52 A5 D0				lda m_playerTopCollisionFlag
  1454 5B54 F0 06				beq SSYTP_exit
  1455
  1456 5B56			SSYTP_found_collision
  1457 5B56 A9 00				lda #0
  1458 5B58 85 BD				sta m_playerSpeedY_H1
  1459 5B5A 85 BE				sta m_playerSpeedY_L1
  1460
  1461 5B5C			SSYTP_exit
  1462 5B5C 60					rts
  1463
  1464 				.endp		
  1465 				;
  1466 				;**************************************************************************************************
  1467 				; AddWaterAccelToSpeed
  1468 				;**************************************************************************************************
  1469 				;
  1470 5B5D			.proc AddWaterAccelToSpeed
  1471
  1472 5B5D A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1473 5B5F 18					clc
  1474 5B60 65 C6				adc m_playerWaterAccelY_L1
  1475 5B62 85 BE				sta m_playerSpeedY_L1
  1476 5B64 A5 BD				lda m_playerSpeedY_H1
  1477 5B66 65 C5				adc m_playerWaterAccelY_H1
  1478 5B68 85 BD				sta m_playerSpeedY_H1
  1479
  1480
  1481 5B6A C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1482 5B6C 90 10				bcc AWATS_exit							; lower than max speed
  1483 5B6E D0 06				bne AWATS_max_speed						; greater than max speed
  1484
  1485 					
  1486 5B70 A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1487 5B72 C5 BE				cmp m_playerSpeedY_L1
  1488 5B74 B0 08				bcs AWATS_exit							; lower or equal to max speed
  1489
  1490 				;************************************************
  1491 				;
  1492 5B76			AWATS_max_speed			
  1493
  1494 5B76 A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1495 5B78 85 BD				sta m_playerSpeedY_H1
  1496 5B7A A5 C8				lda m_playerMaxWaterSpeedY_L1
  1497 5B7C 85 BE				sta m_playerSpeedY_L1
  1498
  1499 				;************************************************
  1500 				;
  1501 5B7E			AWATS_exit
  1502 5B7E 60					rts
  1503 					
  1504 				.endp	
  1505 				;
  1506 				;**************************************************************************************************
  1507 				; SubstractWaterAccelToSpeed
  1508 				;**************************************************************************************************
  1509 				;
  1510 5B7F			.proc SubstractWaterAccelToSpeed
  1511
  1512 5B7F A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1513 5B81 38					sec
  1514 5B82 E5 C6				sbc m_playerWaterAccelY_L1
  1515 5B84 85 BE				sta m_playerSpeedY_L1
  1516 5B86 A5 BD				lda m_playerSpeedY_H1
  1517 5B88 E5 C5				sbc m_playerWaterAccelY_H1
  1518 5B8A B0 04				bcs SWATS_dont_reset_speed
  1519
  1520 				;************************************************
  1521 				;
  1522 5B8C			SWATS_reset_speed
  1523 5B8C A9 00				lda #0
  1524 5B8E 85 BE				sta m_playerSpeedY_L1
  1525
  1526 				;************************************************
  1527 				;
  1528 5B90			SWATS_dont_reset_speed
  1529 5B90 85 BD				sta m_playerSpeedY_H1
  1530
  1531 5B92 60					rts
  1532 						
  1533 				.endp		
  1534 				;
  1535 				;**************************************************************************************************
  1536 				; AddWaterMoveUpAccelToSpeed
  1537 				;**************************************************************************************************
  1538 				;
  1539 5B93			.proc AddWaterMoveUpAccelToSpeed
  1540
  1541 5B93 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1542 5B95 18					clc
  1543 5B96 65 C6				adc m_playerWaterAccelY_L1
  1544 5B98 85 BE				sta m_playerSpeedY_L1
  1545 5B9A A5 BD				lda m_playerSpeedY_H1
  1546 5B9C 65 C5				adc m_playerWaterAccelY_H1
  1547 5B9E 85 BD				sta m_playerSpeedY_H1
  1548
  1549 5BA0 C5 C9				cmp m_playerMoveWaterSpeedY_H1			; check max frame speed
  1550 5BA2 90 10				bcc AWMUATS_exit						; lower than max speed
  1551 5BA4 D0 06				bne AWMUATS_max_speed					; greater than max speed
  1552
  1553 5BA6 A5 CA				lda m_playerMoveWaterSpeedY_L1			; need to check the low byte
  1554 5BA8 C5 BE				cmp m_playerSpeedY_L1
  1555 5BAA B0 08				bcs AWMUATS_exit						; lower or equal to max speed
  1556
  1557 				;************************************************
  1558 				;
  1559 5BAC			AWMUATS_max_speed								; is higher than the max speed
  1560 						
  1561 5BAC A5 C9				lda m_playerMoveWaterSpeedY_H1
  1562 5BAE 85 BD				sta m_playerSpeedY_H1
  1563 5BB0 A5 CA				lda m_playerMoveWaterSpeedY_L1
  1564 5BB2 85 BE				sta m_playerSpeedY_L1
  1565
  1566 				;************************************************
  1567 				;
  1568 5BB4			AWMUATS_exit
  1569 5BB4 60					rts
  1570
  1571 				.endp	
  1572 				;
  1573 				;**************************************************************************************************
  1574 				; AddWaterMoveDownAccelToSpeed
  1575 				;**************************************************************************************************
  1576 				;
  1577 5BB5			.proc AddWaterMoveDownAccelToSpeed
  1578
  1579 5BB5 A5 C7				lda m_playerMaxWaterSpeedY_H1			; check max frame speed
  1580 5BB7 C5 BD				cmp m_playerSpeedY_H1
  1581 5BB9 90 29				bcc AWMAATS_exit						; greater than max speed, exit
  1582 5BBB D0 06				bne AWMAATS_add							; lower than the max, continue with the add
  1583
  1584 5BBD A5 BE				lda m_playerSpeedY_L1					; need to check the low byte
  1585 5BBF C5 C8				cmp m_playerMaxWaterSpeedY_L1
  1586 5BC1 B0 21				bcs AWMAATS_exit						; greater or equal to max speed, exit
  1587
  1588 				;************************************************
  1589 				;
  1590 5BC3			AWMAATS_add
  1591
  1592 5BC3 A5 BE				lda m_playerSpeedY_L1					; update frame speed with frame accel
  1593 5BC5 18					clc
  1594 5BC6 65 C6				adc m_playerWaterAccelY_L1
  1595 5BC8 85 BE				sta m_playerSpeedY_L1
  1596 5BCA A5 BD				lda m_playerSpeedY_H1
  1597 5BCC 65 C5				adc m_playerWaterAccelY_H1
  1598 5BCE 85 BD				sta m_playerSpeedY_H1
  1599
  1600 5BD0 C5 C7				cmp m_playerMaxWaterSpeedY_H1			; check max frame speed
  1601 5BD2 90 10				bcc AWMAATS_exit						; lower than max speed
  1602 5BD4 D0 06				bne AWMAATS_max_speed					; greater than max speed
  1603
  1604 5BD6 A5 C8				lda m_playerMaxWaterSpeedY_L1			; need to check the low byte
  1605 5BD8 C5 BE				cmp m_playerSpeedY_L1
  1606 5BDA B0 08				bcs AWMAATS_exit						; lower or equal to max speed
  1607
  1608 				;************************************************
  1609 				;
  1610 5BDC			AWMAATS_max_speed			
  1611 5BDC A5 C7				lda m_playerMaxWaterSpeedY_H1			; is higher than the max speed
  1612 5BDE 85 BD				sta m_playerSpeedY_H1
  1613 5BE0 A5 C8				lda m_playerMaxWaterSpeedY_L1
  1614 5BE2 85 BE				sta m_playerSpeedY_L1
  1615
  1616 				;************************************************
  1617 				;
  1618 5BE4			AWMAATS_exit
  1619 						
  1620 5BE4 60					rts
  1621 					
  1622 				.endp	
  1623 				;
  1624 				;**************************************************************************************************
  1625 				; CheckPlayerBottomDownPos
  1626 				;**************************************************************************************************
  1627 				;
  1628 5BE5			.proc CheckPlayerBottomDownPos
  1629
  1630 5BE5 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1631 5BE7 8D CC 32				sta m_charBuffer_H2
  1632
  1633 5BEA A5 AB				lda m_playerLevelBottomY_H1
  1634 5BEC 18					clc
  1635 5BED 6D D1 32				adc m_bottomPosOffsetY
  1636 5BF0 90 03				bcc CPBDP_offset_no_carry
  1637 5BF2 EE CC 32				inc m_charBuffer_H2
  1638
  1639 				;************************************************
  1640 				;
  1641 5BF5			CPBDP_offset_no_carry
  1642 5BF5 4E CC 32				lsr m_charBuffer_H2						; /2
  1643 5BF8 6A					ror
  1644 5BF9 4E CC 32				lsr m_charBuffer_H2						; /4
  1645 5BFC 6A					ror
  1646 5BFD 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1647 5C00 6A					ror
  1648
  1649 5C01 AA					tax
  1650 5C02 BD DB 32				lda TabLevelLineAddressLSB,x
  1651 5C05 85 E9				sta m_ptrLevelLine
  1652 						
  1653 5C07 BD DB 33				lda TabLevelLineAddressMSB,x
  1654 5C0A 85 EA				sta m_ptrLevelLine+1
  1655 					
  1656 5C0C A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1657 5C0E 8D CC 32				sta m_charBuffer_H2
  1658
  1659 5C11 A5 A2				lda m_playerLevelLeftX_H1
  1660 5C13 18					clc
  1661 5C14 6D D0 32				adc m_bottomPosOffsetX
  1662 5C17 90 03				bcc CPBDP_no_carry
  1663 5C19 EE CC 32				inc m_charBuffer_H2
  1664 					
  1665 				;************************************************
  1666 				;
  1667 5C1C			CPBDP_no_carry
  1668
  1669 5C1C 4E CC 32				lsr m_charBuffer_H2						; /2
  1670 5C1F 6A					ror
  1671 5C20 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1672 5C23 6A					ror
  1673
  1674 5C24 A8					tay
  1675 5C25 8C D3 32				sty m_middleBottomCharPosX
  1676 5C28 B1 E9				lda (m_ptrLevelLine),y
  1677 5C2A AA					tax
  1678 5C2B BD DB 34				lda TabCharDefinition,x
  1679 5C2E 8D CF 32				sta m_middleBottomChar
  1680
  1681 5C31 60					rts
  1682 					
  1683 				.endp	
  1684 				;
  1685 				;**************************************************************************************************
  1686 				; CheckPlayerBottomUpPos
  1687 				;**************************************************************************************************
  1688 				;
  1689 5C32			.proc CheckPlayerBottomUpPos
  1690
  1691 5C32 A5 AA				lda m_playerLevelBottomY_H2				; get bottom char line
  1692 5C34 8D CC 32				sta m_charBuffer_H2
  1693
  1694 5C37 A5 AB				lda m_playerLevelBottomY_H1
  1695 5C39 38					sec
  1696 5C3A ED D1 32				sbc m_bottomPosOffsetY
  1697 5C3D B0 03				bcs CPBUP_offset_no_carry
  1698 5C3F CE CC 32				dec m_charBuffer_H2
  1699
  1700 				;************************************************
  1701 				;
  1702 5C42			CPBUP_offset_no_carry
  1703
  1704 5C42 4E CC 32				lsr m_charBuffer_H2						; /2
  1705 5C45 6A					ror
  1706 5C46 4E CC 32				lsr m_charBuffer_H2						; /4
  1707 5C49 6A					ror
  1708 5C4A 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIX.else_Y
  1709 5C4D 6A					ror
  1710
  1711 5C4E AA					tax
  1712 5C4F BD DB 32				lda TabLevelLineAddressLSB,x
  1713 5C52 85 E9				sta m_ptrLevelLine
  1714 					
  1715 5C54 BD DB 33				lda TabLevelLineAddressMSB,x
  1716 5C57 85 EA				sta m_ptrLevelLine+1
  1717
  1718 5C59 A5 A1				lda m_playerLevelLeftX_H2				; get left to right point char column
  1719 5C5B 8D CC 32				sta m_charBuffer_H2
  1720
  1721 5C5E A5 A2				lda m_playerLevelLeftX_H1
  1722 5C60 18					clc
  1723 5C61 6D D0 32				adc m_bottomPosOffsetX
  1724 5C64 90 03				bcc CPBUP_no_carry
  1725 5C66 EE CC 32				inc m_charBuffer_H2
  1726
  1727 				;************************************************
  1728 				;
  1729 5C69			CPBUP_no_carry
  1730
  1731 5C69 4E CC 32				lsr m_charBuffer_H2						; /2
  1732 5C6C 6A					ror
  1733 5C6D 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIX.else_X
  1734 5C70 6A					ror
  1735
  1736 5C71 A8					tay
  1737 5C72 8C D3 32				sty m_middleBottomCharPosX
  1738 5C75 B1 E9				lda (m_ptrLevelLine),y
  1739 5C77 AA					tax
  1740 5C78 BD DB 34				lda TabCharDefinition,x
  1741 5C7B 8D CF 32				sta m_middleBottomChar
  1742
  1743 5C7E 60					rts
  1744
  1745 				.endp	
   355 5C7F					icl "MissileSystem.Asm"	
Source: E:\_8BitProjects\Series\Scroller\MissileSystem.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		MissileSystem.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Missle Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 00FC			CLEAR_MASK_M0 				= %11111100
    18 = 00F3			CLEAR_MASK_M1 				= %11110011
    19 = 00CF			CLEAR_MASK_M2 				= %11001111
    20 = 003F			CLEAR_MASK_M3 				= %00111111
    21
    22 = 0003			SET_MASK_M0 				= %00000011
    23 = 000C			SET_MASK_M1 				= %00001100
    24 = 0030			SET_MASK_M2 				= %00110000
    25 = 00C0			SET_MASK_M3 				= %11000000
    26
    27 = 0002			SET_MASK_M0_R_L1 			= %00000010
    28 = 0001			SET_MASK_M0_R_L2 			= %00000001
    29 = 0002			SET_MASK_M0_R_L3 			= %00000010
    30 = 0001			SET_MASK_M0_L_L1 			= %00000001
    31 = 0002			SET_MASK_M0_L_L2 			= %00000010
    32 = 0001			SET_MASK_M0_L_L3 			= %00000001
    33
    34 = 0008			SET_MASK_M1_R_L1 			= %00001000
    35 = 0004			SET_MASK_M1_R_L2 			= %00000100
    36 = 0008			SET_MASK_M1_R_L3 			= %00001000
    37 = 0004			SET_MASK_M1_L_L1 			= %00000100
    38 = 0008			SET_MASK_M1_L_L2 			= %00001000
    39 = 0004			SET_MASK_M1_L_L3 			= %00000100
    40
    41 = 0020			SET_MASK_M2_R_L1 			= %00100000
    42 = 0010			SET_MASK_M2_R_L2 			= %00010000
    43 = 0020			SET_MASK_M2_R_L3 			= %00100000
    44 = 0010			SET_MASK_M2_L_L1 			= %00010000
    45 = 0020			SET_MASK_M2_L_L2 			= %00100000
    46 = 0010			SET_MASK_M2_L_L3 			= %00010000
    47
    48 = 0080			SET_MASK_M3_R_L1 			= %10000000
    49 = 0040			SET_MASK_M3_R_L2 			= %01000000
    50 = 0080			SET_MASK_M3_R_L3 			= %10000000
    51 = 0040			SET_MASK_M3_L_L1 			= %01000000
    52 = 0080			SET_MASK_M3_L_L2 			= %10000000
    53 = 0040			SET_MASK_M3_L_L3 			= %01000000
    54
    55 				; virtual missiles tables
    56 = 0004			MAX_VIRTUAL_MISSILES = 4
    57
    58 5C7F FC F3 CF 3F		TabClearMissileMask			.byte CLEAR_MASK_M0, CLEAR_MASK_M1, CLEAR_MASK_M2, CLEAR_MASK_M3
    59
    60 5C83 02 08 20 80		TabSetMissileToRightMaskL1	.byte SET_MASK_M0_R_L1, SET_MASK_M1_R_L1, SET_MASK_M2_R_L1, SET_MASK_M3_R_L1
    61
    62 5C87 01 04 10 40		TabSetMissileToRightMaskL2	.byte SET_MASK_M0_R_L2, SET_MASK_M1_R_L2, SET_MASK_M2_R_L2, SET_MASK_M3_R_L2
    63
    64 5C8B 02 08 20 80		TabSetMissileToRightMaskL3	.byte SET_MASK_M0_R_L3, SET_MASK_M1_R_L3, SET_MASK_M2_R_L3, SET_MASK_M3_R_L3
    65
    66 5C8F 01 04 10 40		TabSetMissileToLeftMaskL1	.byte SET_MASK_M0_L_L1, SET_MASK_M1_L_L1, SET_MASK_M2_L_L1, SET_MASK_M3_L_L1
    67
    68 5C93 02 08 20 80		TabSetMissileToLeftMaskL2	.byte SET_MASK_M0_L_L2, SET_MASK_M1_L_L2, SET_MASK_M2_L_L2, SET_MASK_M3_L_L2
    69
    70 5C97 01 04 10 40		TabSetMissileToLeftMaskL3	.byte SET_MASK_M0_L_L3, SET_MASK_M1_L_L3, SET_MASK_M2_L_L3, SET_MASK_M3_L_L3
    71
    72 5C9B 0F 38 61 9E		TabDrawMissileMethodLSB		.byte <DrawMissileM0, <DrawMissileM1, <DrawMissileM2, <DrawMissileM3
    73
    74 5C9F 5F 5F 5F 5F		TabDrawMissileMethodMSB		.byte >DrawMissileM0, >DrawMissileM1, >DrawMissileM2, >DrawMissileM3
    75
    76 5CA3 00			m_currentVirtualMissiles 	.byte 0
    77
    78 5CA4 00 00 00 00		TabMissileScreenLeftX		:MAX_VIRTUAL_MISSILES .byte 0
    79
    80 5CA8 00 00 00 00		TabMissileScreenTopY		:MAX_VIRTUAL_MISSILES .byte 0
    81
    82 5CAC 00 00 00 00		TabOldMissileScreenLeftX	:MAX_VIRTUAL_MISSILES .byte 0
    83
    84 5CB0 00 00 00 00		TabOldMissileScreenTopY		:MAX_VIRTUAL_MISSILES .byte 0
    85
    86 5CB4 00 00 00 00		TabMissileLevelLeftX_H2		:MAX_VIRTUAL_MISSILES .byte 0
    87
    88 5CB8 00 00 00 00		TabMissileLevelLeftX_H1		:MAX_VIRTUAL_MISSILES .byte 0
    89
    90 5CBC 00 00 00 00		TabMissileLevelLeftX_L1		:MAX_VIRTUAL_MISSILES .byte 0
    91
    92 5CC0 00 00 00 00		TabMissileLevelTopY_H2		:MAX_VIRTUAL_MISSILES .byte 0
    93
    94 5CC4 00 00 00 00		TabMissileLevelTopY_H1		:MAX_VIRTUAL_MISSILES .byte 0
    95
    96 5CC8 00 00 00 00		TabMissileLevelTopY_L1		:MAX_VIRTUAL_MISSILES .byte 0
    97
    98 5CCC 00 00 00 00		TabMissileSpeedX_H1			:MAX_VIRTUAL_MISSILES .byte 0
    99
   100 5CD0 00 00 00 00		TabMissileSpeedX_L1			:MAX_VIRTUAL_MISSILES .byte 0
   101
   102 5CD4 00 00 00 00		TabMissileDirection			:MAX_VIRTUAL_MISSILES .byte 0
   103
   104 5CD8 00 00 00 00		TabMissileFrameCounter_H2	:MAX_VIRTUAL_MISSILES .byte 0
   105
   106 5CDC 00 00 00 00		TabMissileFrameCounter_H1	:MAX_VIRTUAL_MISSILES .byte 0
   107
   108 5CE0 00 00 00 00		TabMissileOwner				:MAX_VIRTUAL_MISSILES .byte 0
   109
   110 				;
   111 				;**************************************************************************************************
   112 				;	CheckCreatePlayerMissile	
   113 				;**************************************************************************************************
   114 				;
   115 5CE4			.proc CheckCreatePlayerMissile
   116
   117 5CE4 A5 E1				lda m_triggerState
   118 5CE6 C9 02				cmp #2									; check just pressed
   119 5CE8 D0 4D				bne CCPM_exit
   120
   121 5CEA 20 7F 5D				jsr GetFreeMissileIndex
   122 5CED E0 02				cpx #2									; only use index 0 and 1 for the player missiles
   123 5CEF B0 46				bcs CCPM_exit
   124 					
   125 5CF1 A9 02				lda #>[PLAYER_MISSILE_SPEED_X]
   126 5CF3 9D CC 5C				sta TabMissileSpeedX_H1,x
   127 5CF6 A9 80				lda #<[PLAYER_MISSILE_SPEED_X]
   128 5CF8 9D D0 5C				sta TabMissileSpeedX_L1,x
   129
   130 5CFB A5 CE				lda m_lastPlayerShootDirection
   131 5CFD C9 01				cmp #PSD_RIGHT
   132 5CFF F0 08				beq CCPM_shoot_right
   133
   134 5D01			CCPM_shoot_left
   135
   136 5D01 A9 02				lda #2
   137 5D03 9D D4 5C				sta TabMissileDirection,x
   138
   139 5D06 4C 0E 5D				jmp CCPM_init_position
   140
   141 5D09			CCPM_shoot_right
   142 					
   143 5D09 A9 01				lda #1
   144 5D0B 9D D4 5C				sta TabMissileDirection,x
   145
   146 5D0E			CCPM_init_position
   147 					
   148 5D0E A5 A2				lda m_playerLevelLeftX_H1
   149 5D10 9D B8 5C				sta TabMissileLevelLeftX_H1,x
   150 					
   151 5D13 A5 A1				lda m_playerLevelLeftX_H2
   152 5D15 9D B4 5C				sta TabMissileLevelLeftX_H2,x
   153
   154 5D18 A5 A8				lda m_playerLevelTopY_H1
   155 5D1A 18					clc
   156 5D1B 69 02				adc #2
   157 5D1D 9D C4 5C				sta TabMissileLevelTopY_H1,x
   158 					
   159 5D20 A5 A7				lda m_playerLevelTopY_H2
   160 5D22 69 00				adc #0
   161 5D24 9D C0 5C				sta TabMissileLevelTopY_H2,x
   162
   163 5D27 A9 00				lda #0
   164 5D29 9D BC 5C				sta TabMissileLevelLeftX_L1,x
   165 5D2C 9D C8 5C				sta TabMissileLevelTopY_L1,x
   166
   167 5D2F A9 01				lda #1									; player owner
   168 5D31 9D E0 5C				sta TabMissileOwner,x
   169
   170 						; before this, call GetFreeMissileIndex and then init..
   171 5D34 20 8E 5D				jsr CreateMissile
   172
   173 5D37			CCPM_exit
   174 						
   175 5D37 60					rts
   176
   177 				.endp
   178
   179 				;
   180 				;**************************************************************************************************
   181 				;	CheckCreateEnemyMissile	
   182 				;**************************************************************************************************
   183 				;
   184 5D38			.proc CheckCreateEnemyMissile
   185
   186 						; check for a free missile index
   187 5D38 A2 02				ldx #2
   188 5D3A BD E0 5C				lda TabMissileOwner,x
   189 5D3D F0 07				beq CCEM_found_one_free
   190 					
   191 5D3F A2 03				ldx #3
   192 5D41 BD E0 5C				lda TabMissileOwner,x
   193 5D44 D0 38				bne CCEM_exit
   194 					
   195 5D46			CCEM_found_one_free
   196 						
   197 5D46 A9 02				lda #>[ENEMY_MISSILE_SPEED_X]
   198 5D48 9D CC 5C				sta TabMissileSpeedX_H1,x
   199 						
   200 5D4B A9 00				lda #<[ENEMY_MISSILE_SPEED_X]
   201 5D4D 9D D0 5C				sta TabMissileSpeedX_L1,x
   202 					
   203 5D50 AD A9 32				lda m_enemyShootDirection
   204 5D53 9D D4 5C				sta TabMissileDirection,x
   205
   206 						; init position
   207 5D56 AD AA 32				lda m_enemyShotLevelLeftX_H1
   208 5D59 9D B8 5C				sta TabMissileLevelLeftX_H1,x
   209 						
   210 5D5C AD AB 32				lda m_enemyShotLevelLeftX_H2
   211 5D5F 9D B4 5C				sta TabMissileLevelLeftX_H2,x
   212
   213 5D62 AD AC 32				lda m_enemyShotLevelTopY_H1
   214 5D65 9D C4 5C				sta TabMissileLevelTopY_H1,x
   215 					
   216 5D68 AD AD 32				lda m_enemyShotLevelTopY_H2
   217 5D6B 9D C0 5C				sta TabMissileLevelTopY_H2,x
   218
   219 5D6E A9 00				lda #0
   220 5D70 9D BC 5C				sta TabMissileLevelLeftX_L1,x
   221 5D73 9D C8 5C				sta TabMissileLevelTopY_L1,x
   222
   223 5D76 A9 02				lda #2									; enemy owner
   224 5D78 9D E0 5C				sta TabMissileOwner,x
   225
   226 5D7B 20 8E 5D				jsr CreateMissile
   227
   228 5D7E			CCEM_exit
   229
   230 5D7E 60					rts
   231 					
   232 				.endp
   233
   234 				;
   235 				;**************************************************************************************************
   236 				;	GetFreeMissileIndex	
   237 				;**************************************************************************************************
   238 				;
   239 5D7F			.proc GetFreeMissileIndex
   240
   241 						; return in X the index of the free virtual missile
   242 5D7F A2 00				ldx #0
   243
   244 5D81			GFMI_loop
   245 5D81 BD E0 5C				lda TabMissileOwner,x	; if the owner is 0, the slot is free
   246 5D84 F0 07				beq GFMI_exit
   247
   248 5D86 E8					inx
   249 5D87 E0 04				cpx #MAX_VIRTUAL_MISSILES
   250 5D89 D0 F6				bne GFMI_loop
   251
   252 5D8B A2 FF				ldx #255		; value for: "there is no free index"
   253
   254 5D8D			GFMI_exit
   255 						
   256 5D8D 60					rts
   257
   258 				.endp
   259
   260 				;
   261 				;**************************************************************************************************
   262 				;	CreateMissile	
   263 				;
   264 				; 		before this, call GetFreeMissileIndex and then init:
   265 				; 		TabMissileLevelLeftX_H2/H1/L1, TabMissileLevelTopY_H2/H1/L1,
   266 				; 		TabMissileSpeedX_H1/L1 (negative if going to the left)
   267 				; 		and TabMissileOwner (different than 0)
   268 				;
   269 				;**************************************************************************************************
   270 				;
   271 5D8E			.proc CreateMissile
   272
   273 						; use X as a parameter (the index of the virtual missile)
   274 5D8E A9 00				lda #0
   275 5D90 9D D8 5C				sta TabMissileFrameCounter_H2,x
   276 5D93 9D DC 5C				sta TabMissileFrameCounter_H1,x
   277
   278 5D96 20 A3 5E				jsr SetMissileScreenPos
   279
   280 						; maybe should check screen position before creating the missile
   281 5D99 20 FB 5E				jsr DrawMissileMX
   282 5D9C EE A3 5C				inc m_currentVirtualMissiles
   283
   284 5D9F 60					rts
   285 						
   286 				.endp
   287
   288 				;
   289 				;**************************************************************************************************
   290 				;	UpdateMissileSystem
   291 				;
   292 				; 		should call this every frame, before calling CreateMissile in that frame (?)
   293 				;
   294 				;**************************************************************************************************
   295 				;	
   296 5DA0			.proc UpdateMissileSystem
   297
   298 5DA0 A2 00				ldx #0
   299
   300 5DA2			UMS_loop
   301 5DA2 BD E0 5C				lda TabMissileOwner,x	; if the owner is 0, the slot is free
   302 5DA5 D0 03				bne UMS_update
   303 5DA7 4C 9A 5E				jmp UMS_next
   304
   305 				;*****	update frame counter (life time)
   306 				;
   307 5DAA			UMS_update
   308 						
   309 5DAA FE DC 5C				inc TabMissileFrameCounter_H1,x
   310 5DAD D0 03				bne UMS_check_collision
   311 5DAF FE D8 5C				inc TabMissileFrameCounter_H2,x
   312
   313 				;*****	check if we need to destroy the missile by a hardware collision
   314 				;
   315 5DB2			UMS_check_collision
   316
   317 5DB2 20 45 60				jsr GetPlayerMissileFrontChar
   318
   319 5DB5 BD E0 5C				lda TabMissileOwner,x
   320 5DB8 C9 01				cmp #1
   321 5DBA F0 0C				beq UMS_player_owner
   322
   323 				;******	the collision check is a lot simpler for enemies
   324 				;
   325 5DBC			UMS_enemy_owner			
   326
   327 5DBC AD BB 32				lda m_charDef
   328 5DBF 29 0F				and #15
   329 5DC1 C9 01				cmp #CT_BLOCK
   330 5DC3 D0 55				bne UMS_update_position
   331 5DC5 4C 76 5E				jmp UMS_destroy
   332 					
   333 5DC8			UMS_player_owner
   334 					
   335 5DC8 AD BB 32				lda m_charDef
   336 5DCB 29 0F				and #15
   337
   338 5DCD			UMS_check_block
   339 						
   340 5DCD C9 01				cmp #CT_BLOCK
   341 5DCF D0 05				bne UMS_check_danger
   342 						
   343 5DD1 A9 04				lda #4									; gray color
   344 5DD3 4C 17 5E				jmp TEST_B1
   345
   346 5DD6			UMS_check_danger
   347 						
   348 5DD6 C9 03				cmp #CT_DANGER
   349 5DD8 D0 40				bne UMS_update_position
   350
   351 				;*****	check for a disabed vertical laser
   352 				;
   353 5DDA			UMS_check_vlaser
   354 						
   355 5DDA AD BA 32				lda m_charRaw
   356 5DDD C9 90				cmp #[128+16]							; danger plus vertical laser char index
   357 5DDF D0 0A				bne UMS_check_enemy1_left
   358 					
   359 5DE1 AD 87 32				lda m_animLaserCurrentFrame
   360 5DE4 C9 3C				cmp #VLASER_DISABLED_INDEX				; disabled state index
   361 5DE6 F0 32				beq UMS_update_position
   362 5DE8 4C 17 5E				jmp UMS_danger
   363
   364 5DEB			UMS_check_enemy1_left
   365
   366 5DEB C9 C0				cmp #[128+64]							; danger plus enemy 1 left char index
   367 5DED D0 12				bne UMS_check_enemy1_right
   368 					
   369 5DEF AD B6 32				lda m_charPositionX
   370 5DF2 8D 9C 32				sta m_enemyCharPosX
   371 5DF5 AD B7 32				lda m_charPositionY
   372 5DF8 8D 9D 32				sta m_enemyCharPosY
   373 					
   374 5DFB 20 03 69				jsr HitEnemy	
   375 5DFE 4C 17 5E				jmp UMS_danger
   376 					
   377 5E01			UMS_check_enemy1_right
   378 					
   379 5E01 C9 C1				cmp #[128+65]							; danger plus enemy 1 right char index
   380 5E03 D0 12				bne UMS_danger
   381 					
   382 5E05 AD B6 32				lda m_charPositionX
   383 5E08 8D 9C 32				sta m_enemyCharPosX
   384 5E0B CE 9C 32				dec m_enemyCharPosX
   385 5E0E AD B7 32				lda m_charPositionY
   386 5E11 8D 9D 32				sta m_enemyCharPosY
   387 					
   388 5E14 20 03 69				jsr HitEnemy
   389 								
   390 5E17			UMS_danger
   391 5E17			TEST_B1	
   392 5E17 4C 76 5E				jmp UMS_destroy
   393
   394 				;*****	update position using the missile speed
   395 5E1A			UMS_update_position
   396 					
   397 5E1A BD D4 5C				lda TabMissileDirection,x
   398 5E1D C9 01				cmp #1
   399 5E1F D0 21				bne UMS_move_left
   400
   401 5E21			UMS_move_right
   402 						
   403 5E21 BD BC 5C				lda TabMissileLevelLeftX_L1,x
   404 5E24 18					clc
   405 5E25 7D D0 5C				adc TabMissileSpeedX_L1,x
   406 5E28 9D BC 5C				sta TabMissileLevelLeftX_L1,x
   407
   408 5E2B BD B8 5C				lda TabMissileLevelLeftX_H1,x
   409 5E2E 7D CC 5C				adc TabMissileSpeedX_H1,x
   410 5E31 9D B8 5C				sta TabMissileLevelLeftX_H1,x
   411
   412 5E34 BD B4 5C				lda TabMissileLevelLeftX_H2,x
   413 5E37 69 00				adc #0
   414 5E39 9D B4 5C				sta TabMissileLevelLeftX_H2,x
   415
   416 5E3C 20 A3 5E				jsr SetMissileScreenPos
   417 5E3F 4C 60 5E				jmp UMS_check_screen_limits
   418
   419 5E42			UMS_move_left
   420
   421 5E42 BD BC 5C				lda TabMissileLevelLeftX_L1,x
   422 5E45 38					sec
   423 5E46 FD D0 5C				sbc TabMissileSpeedX_L1,x
   424 5E49 9D BC 5C				sta TabMissileLevelLeftX_L1,x
   425
   426 5E4C BD B8 5C				lda TabMissileLevelLeftX_H1,x
   427 5E4F FD CC 5C				sbc TabMissileSpeedX_H1,x
   428 5E52 9D B8 5C				sta TabMissileLevelLeftX_H1,x
   429
   430 5E55 BD B4 5C				lda TabMissileLevelLeftX_H2,x
   431 5E58 E9 00				sbc #0
   432 5E5A 9D B4 5C				sta TabMissileLevelLeftX_H2,x
   433
   434 5E5D 20 A3 5E				jsr SetMissileScreenPos
   435
   436 				;*****	check outside screen position, to destroy the missile
   437 				;
   438 5E60			UMS_check_screen_limits
   439
   440 5E60 BD A4 5C				lda TabMissileScreenLeftX,x
   441 5E63 C9 30				cmp #[PM_BASE_SCREEN_X]					; screen left limit
   442 5E65 90 0F				bcc UMS_destroy
   443 5E67 C9 CD				cmp #[PM_BASE_SCREEN_X+160-3]			; screen right limit (minus width of the missile)
   444 5E69 B0 0B				bcs UMS_destroy
   445
   446 5E6B BD A8 5C				lda TabMissileScreenTopY,x
   447 5E6E C9 20				cmp #[PM_BASE_SCREEN_Y]					; screen top limit
   448 5E70 90 04				bcc UMS_destroy
   449 5E72 C9 DE				cmp #[PM_BASE_SCREEN_Y+192-2]			; screen bottom limit (minus height of the missile)
   450 					
   451 5E74 90 21				bcc UMS_draw
   452
   453 5E76			UMS_destroy
   454
   455 5E76 BD E0 5C				lda TabMissileOwner,x
   456 5E79 C9 02				cmp #2
   457 5E7B D0 03				bne UMS_not_from_enemy
   458 5E7D CE A8 32				dec m_enemyMissilesActive
   459 					
   460 5E80			UMS_not_from_enemy
   461 					
   462 5E80 A9 00				lda #0
   463 5E82 9D E0 5C				sta TabMissileOwner,x
   464
   465 5E85 BC B0 5C				ldy TabOldMissileScreenTopY,x
   466 5E88 20 13 60				jsr ClearMissileLines
   467
   468 5E8B BC A8 5C				ldy TabMissileScreenTopY,x
   469 5E8E 20 13 60				jsr ClearMissileLines
   470
   471 5E91 CE A3 5C				dec m_currentVirtualMissiles
   472
   473 5E94 4C 9A 5E				jmp UMS_next
   474
   475 				;*****	draw the missile
   476 				;
   477 5E97			UMS_draw
   478 					
   479 5E97 20 FB 5E				jsr DrawMissileMX
   480
   481 5E9A			UMS_next
   482
   483 5E9A E8					inx
   484 5E9B E0 04				cpx #MAX_VIRTUAL_MISSILES
   485 5E9D F0 03				beq UMS_exit
   486 5E9F 4C A2 5D				jmp UMS_loop
   487
   488 5EA2			UMS_exit
   489 						
   490 5EA2 60					rts
   491
   492 				.endp
   493
   494 				;
   495 				;**************************************************************************************************
   496 				;	SetMissileScreenPos
   497 				;
   498 				; 		use X as a parameter (the index of the virtual missile)
   499 				;
   500 				;**************************************************************************************************
   501 				;	
   502 5EA3			.proc SetMissileScreenPos
   503
   504 						; save old screen pos
   505 5EA3 BD A4 5C				lda TabMissileScreenLeftX,x
   506 5EA6 9D AC 5C				sta TabOldMissileScreenLeftX,x
   507 						
   508 5EA9 BD A8 5C				lda TabMissileScreenTopY,x
   509 5EAC 9D B0 5C				sta TabOldMissileScreenTopY,x
   510
   511 						; get new screen pos
   512 						; this must use the "_H2" positions for 
   513 						; when the delta between the missile and 
   514 						; the camera is too big (64 chars in X, or 32 chars in Y)
   515 						;
   516 5EAF BD B8 5C				lda TabMissileLevelLeftX_H1,x
   517 5EB2 38					sec
   518 5EB3 E5 DB				sbc m_levelWindowX_H1
   519 5EB5 8D BD 32				sta m_screenDelta_H1
   520 5EB8 BD B4 5C				lda TabMissileLevelLeftX_H2,x
   521 5EBB E5 DA				sbc m_levelWindowX_H2
   522 5EBD 90 33				bcc SMSP_set_outside					; this is not totally correct, because it doesn't use the width of the missile
   523 5EBF 8D BC 32				sta m_screenDelta_H2					; (but if we do it correctly we should clip the missile graphics)
   524
   525 5EC2 D0 2E				bne SMSP_set_outside					; could remove the bcc and only use this..
   526 5EC4 AD BD 32				lda m_screenDelta_H1
   527 5EC7 C9 9F				cmp #[160-1]							; 40 chars x 4 pixels, minus (missile width - 1)
   528 5EC9 B0 27				bcs SMSP_set_outside
   529 					
   530 5ECB 69 30				adc #PM_BASE_SCREEN_X
   531 5ECD 9D A4 5C				sta TabMissileScreenLeftX,x
   532 					
   533 5ED0 BD C4 5C				lda TabMissileLevelTopY_H1,x
   534 5ED3 38					sec
   535 5ED4 E5 DD				sbc m_levelWindowY_H1
   536 5ED6 8D BD 32				sta m_screenDelta_H1
   537 5ED9 BD C0 5C				lda TabMissileLevelTopY_H2,x
   538 5EDC E5 DC				sbc m_levelWindowY_H2
   539 5EDE 90 12				bcc SMSP_set_outside					; this is not totally correct, because it doesn't use the height of the missile
   540 5EE0 8D BC 32				sta m_screenDelta_H2					; (but if we do it correctly we should clip the missile graphics)
   541
   542 5EE3 D0 0D				bne SMSP_set_outside					; could remove the bcc and only use this..
   543 5EE5 AD BD 32				lda m_screenDelta_H1
   544 5EE8 C9 BF				cmp #[193-2]							; 24 chars x 8 scan lines, plus one extra scan line, minus (missile height - 1)
   545 5EEA B0 06				bcs SMSP_set_outside
   546 					
   547 5EEC 69 20				adc #PM_BASE_SCREEN_Y
   548 5EEE 9D A8 5C				sta TabMissileScreenTopY,x
   549
   550 5EF1 60					rts
   551 					
   552 				; if outside the visible range in X or Y, just set it out of the screen (for a p/m the screen coordinate 0 is outside the visible range)
   553 5EF2			SMSP_set_outside
   554 						
   555 5EF2 A9 00				lda #0
   556 5EF4 9D A4 5C				sta TabMissileScreenLeftX,x
   557 5EF7 9D A8 5C				sta TabMissileScreenTopY,x
   558 					
   559 5EFA 60					rts
   560 					
   561 				.endp
   562 					
   563 				;
   564 				;**************************************************************************************************
   565 				;	DrawMissileMX
   566 				;
   567 				; 		draw missiles, use X as a parameter (the index of the virtual missile)
   568 				;
   569 				;**************************************************************************************************
   570 				;	
   571 5EFB			.proc DrawMissileMX
   572 					
   573 5EFB BD 9B 5C				lda TabDrawMissileMethodLSB,x
   574 5EFE 85 EB				sta m_pageZeroTempPointer
   575 						
   576 5F00 BD 9F 5C				lda TabDrawMissileMethodMSB,x
   577 5F03 85 EC				sta m_pageZeroTempPointer+1
   578
   579 5F05 A9 5F				lda #>(Exit -1)
   580 5F07 48					pha
   581 5F08 A9 0D				lda #<(Exit -1)
   582 5F0A 48					pha
   583
   584 5F0B 6C EB 00				jmp (m_pageZeroTempPointer)
   585
   586 5F0E			Exit
   587
   588 5F0E 60					rts
   589
   590 				.endp
   591
   592 				;
   593 				;**************************************************************************************************
   594 				;	DrawMissileM0
   595 				;**************************************************************************************************
   596 				;	
   597 5F0F			.proc DrawMissileM0
   598 						
   599 5F0F BD A4 5C				lda TabMissileScreenLeftX,x
   600 5F12 8D 04 D0				sta HPOSM0
   601
   602 						; clear old position first
   603 5F15 BC B0 5C				ldy TabOldMissileScreenTopY,x
   604
   605 5F18 20 13 60				jsr ClearMissileLines
   606
   607 						; draw shape in new position
   608 5F1B BC A8 5C				ldy TabMissileScreenTopY,x
   609
   610 5F1E BD D4 5C				lda TabMissileDirection,x
   611 5F21 C9 01				cmp #1
   612 						
   613 5F23 D0 09				bne DMM0_left
   614 						
   615 5F25 A9 5F				lda #>(Exit -1)
   616 5F27 48					pha
   617 5F28 A9 36				lda #<(Exit -1)
   618 5F2A 48					pha
   619
   620 5F2B 4C DB 5F				jmp SetMissileToRightLines
   621
   622 5F2E			DMM0_left
   623 						
   624 5F2E A9 5F				lda #>(Exit -1)
   625 5F30 48					pha
   626 5F31 A9 36				lda #<(Exit -1)
   627 5F33 48					pha
   628
   629 5F34 4C F7 5F				jmp SetMissileToLeftLines
   630
   631 5F37			Exit
   632
   633 5F37 60					rts
   634
   635 				.endp
   636
   637 				;
   638 				;**************************************************************************************************
   639 				;	DrawMissileM1
   640 				;**************************************************************************************************
   641 				;	
   642 5F38			.proc DrawMissileM1
   643 					
   644 5F38 BD A4 5C				lda TabMissileScreenLeftX,x
   645 5F3B 8D 05 D0				sta HPOSM1
   646
   647 						; clear old position first
   648 5F3E BC B0 5C				ldy TabOldMissileScreenTopY,x
   649
   650 5F41 20 13 60				jsr ClearMissileLines
   651
   652 						; draw shape in new position
   653 5F44 BC A8 5C				ldy TabMissileScreenTopY,x
   654
   655 5F47 BD D4 5C				lda TabMissileDirection,x
   656 5F4A C9 01				cmp #1
   657 5F4C D0 09				bne DMM1_left
   658
   659 5F4E A9 5F				lda #>(Exit -1)
   660 5F50 48					pha
   661 5F51 A9 5F				lda #<(Exit -1)
   662 5F53 48					pha
   663 5F54 4C DB 5F				jmp SetMissileToRightLines
   664
   665 5F57			DMM1_left
   666
   667 5F57 A9 5F				lda #>(Exit -1)
   668 5F59 48					pha
   669 5F5A A9 5F				lda #<(Exit -1)
   670 5F5C 48					pha
   671 5F5D 4C F7 5F				jmp SetMissileToLeftLines
   672
   673 5F60			Exit
   674
   675 5F60 60					rts
   676
   677 				.endp
   678
   679 				;
   680 				;**************************************************************************************************
   681 				;	DrawMissileM2
   682 				;**************************************************************************************************
   683 				;	
   684 5F61			.proc DrawMissileM2
   685 						
   686 5F61 BD A4 5C				lda TabMissileScreenLeftX,x
   687 5F64 8D 06 D0				sta HPOSM2
   688
   689 						; clear old position first
   690 5F67 BC B0 5C				ldy TabOldMissileScreenTopY,x
   691
   692 5F6A B9 00 A3				lda ms_area_1,y
   693 5F6D 29 CF				and #CLEAR_MASK_M2
   694 5F6F 99 00 A3				sta ms_area_1,y
   695 						
   696 5F72 B9 01 A3				lda ms_area_1+1,y
   697 5F75 29 CF				and #CLEAR_MASK_M2
   698 5F77 99 01 A3				sta ms_area_1+1,y
   699 						
   700 5F7A B9 02 A3				lda ms_area_1+2,y
   701 5F7D 29 CF				and #CLEAR_MASK_M2
   702 5F7F 99 02 A3				sta ms_area_1+2,y
   703
   704 						; draw shape in new position
   705 5F82 BC A8 5C				ldy TabMissileScreenTopY,x
   706
   707 5F85 B9 00 A3				lda ms_area_1,y
   708 5F88 09 30				ora #SET_MASK_M2
   709 5F8A 99 00 A3				sta ms_area_1,y
   710 						
   711 5F8D B9 01 A3				lda ms_area_1+1,y
   712 5F90 09 30				ora #SET_MASK_M2
   713 5F92 99 01 A3				sta ms_area_1+1,y
   714 						
   715 5F95 B9 02 A3				lda ms_area_1+2,y
   716 5F98 09 30				ora #SET_MASK_M2
   717 5F9A 99 02 A3				sta ms_area_1+2,y
   718
   719 5F9D 60					rts
   720
   721 				.endp
   722
   723 				;
   724 				;**************************************************************************************************
   725 				;	DrawMissileM3
   726 				;**************************************************************************************************
   727 				;	
   728 5F9E			.proc DrawMissileM3
   729 					
   730 5F9E BD A4 5C				lda TabMissileScreenLeftX,x
   731 5FA1 8D 07 D0				sta HPOSM3
   732
   733 						; clear old position first
   734 5FA4 BC B0 5C				ldy TabOldMissileScreenTopY,x
   735
   736 5FA7 B9 00 A3				lda ms_area_1,y
   737 5FAA 29 3F				and #CLEAR_MASK_M3
   738 5FAC 99 00 A3				sta ms_area_1,y
   739 						
   740 5FAF B9 01 A3				lda ms_area_1+1,y
   741 5FB2 29 3F				and #CLEAR_MASK_M3
   742 5FB4 99 01 A3				sta ms_area_1+1,y
   743 					
   744 5FB7 B9 02 A3				lda ms_area_1+2,y
   745 5FBA 29 3F				and #CLEAR_MASK_M3
   746 5FBC 99 02 A3				sta ms_area_1+2,y
   747
   748 						; draw shape in new position
   749 5FBF BC A8 5C				ldy TabMissileScreenTopY,x
   750
   751 5FC2 B9 00 A3				lda ms_area_1,y
   752 5FC5 09 C0				ora #SET_MASK_M3
   753 5FC7 99 00 A3				sta ms_area_1,y
   754 					
   755 5FCA B9 01 A3				lda ms_area_1+1,y
   756 5FCD 09 C0				ora #SET_MASK_M3
   757 5FCF 99 01 A3				sta ms_area_1+1,y
   758 					
   759 5FD2 B9 02 A3				lda ms_area_1+2,y
   760 5FD5 09 C0				ora #SET_MASK_M3
   761 5FD7 99 02 A3				sta ms_area_1+2,y
   762
   763 5FDA 60					rts
   764
   765 				.endp
   766
   767 				;
   768 				;**************************************************************************************************
   769 				;	SetMissileToRightLines
   770 				;**************************************************************************************************
   771 				;	
   772 5FDB			.proc SetMissileToRightLines
   773
   774 5FDB B9 00 A3				lda ms_area_1,y
   775 5FDE 1D 83 5C				ora TabSetMissileToRightMaskL1,x	; this "x" should be a hardware missile index
   776 5FE1 99 00 A3				sta ms_area_1,y
   777 						
   778 5FE4 B9 01 A3				lda ms_area_1+1,y
   779 5FE7 1D 87 5C				ora TabSetMissileToRightMaskL2,x	; this "x" should be a hardware missile index
   780 5FEA 99 01 A3				sta ms_area_1+1,y
   781 						
   782 5FED B9 02 A3				lda ms_area_1+2,y
   783 5FF0 1D 8B 5C				ora TabSetMissileToRightMaskL3,x	; this "x" should be a hardware missile index
   784 5FF3 99 02 A3				sta ms_area_1+2,y
   785
   786 5FF6 60					rts
   787
   788 				.endp
   789 						
   790 				;
   791 				;**************************************************************************************************
   792 				;	SetMissileToLeftLines
   793 				;**************************************************************************************************
   794 				;	
   795 5FF7			.proc SetMissileToLeftLines
   796
   797 5FF7 B9 00 A3				lda ms_area_1,y
   798 5FFA 1D 8F 5C				ora TabSetMissileToLeftMaskL1,x	; this "x" should be a hardware missile index
   799 5FFD 99 00 A3				sta ms_area_1,y
   800 						
   801 6000 B9 01 A3				lda ms_area_1+1,y
   802 6003 1D 93 5C				ora TabSetMissileToLeftMaskL2,x	; this "x" should be a hardware missile index
   803 6006 99 01 A3				sta ms_area_1+1,y
   804 						
   805 6009 B9 02 A3				lda ms_area_1+2,y
   806 600C 1D 97 5C				ora TabSetMissileToLeftMaskL3,x	; this "x" should be a hardware missile index
   807 600F 99 02 A3				sta ms_area_1+2,y
   808
   809 6012 60					rts
   810
   811 				.endp
   812
   813 				;
   814 				;**************************************************************************************************
   815 				;	ClearMissileLines
   816 				;**************************************************************************************************
   817 				;	
   818 6013			.proc ClearMissileLines
   819
   820 6013 B9 00 A3				lda ms_area_1,y
   821 6016 3D 7F 5C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   822 6019 99 00 A3				sta ms_area_1,y
   823 						
   824 601C B9 01 A3				lda ms_area_1+1,y
   825 601F 3D 7F 5C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   826 6022 99 01 A3				sta ms_area_1+1,y
   827 						
   828 6025 B9 02 A3				lda ms_area_1+2,y
   829 6028 3D 7F 5C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   830 602B 99 02 A3				sta ms_area_1+2,y
   831
   832 602E 60					rts
   833 						
   834 				.endp
   835
   836 				;
   837 				;**************************************************************************************************
   838 				;	ClearAllMissiles
   839 				;**************************************************************************************************
   840 				;	
   841 602F			.proc ClearAllMissiles
   842 						
   843 602F A2 00				ldx #0
   844 6031 A9 00				lda #0
   845
   846 6033			CAM_loop
   847 						
   848 6033 BC A8 5C				ldy TabMissileScreenTopY,x
   849 6036 99 00 A3				sta ms_area_1,y
   850 6039 99 01 A3				sta ms_area_1+1,y
   851 603C 99 02 A3				sta ms_area_1+2,y
   852
   853 603F E8					inx
   854 6040 E0 04				cpx #MAX_VIRTUAL_MISSILES
   855 6042 D0 EF				bne CAM_loop
   856
   857 6044 60					rts
   858 						
   859 				.endp
   860 						
   861 				;
   862 				;**************************************************************************************************
   863 				;
   864 				;	GetPlayerMissileFrontChar
   865 				;
   866 				; 		use X as a parameter (the index of the virtual missile)
   867 				; 		return in A the character definition value
   868 				;
   869 				;**************************************************************************************************
   870 				;
   871 6045			.proc GetPlayerMissileFrontChar
   872
   873 						; get front point char column
   874 6045 BD D4 5C				lda TabMissileDirection,x
   875 6048 C9 01				cmp #1
   876 604A D0 14				bne GMFC_left
   877
   878 				;*****	moving to the right, use right side pixel
   879 				;
   880 604C			GMFC_right
   881 					
   882 604C BD B8 5C				lda TabMissileLevelLeftX_H1,x
   883 604F 18					clc
   884 6050 69 03				adc #3									; missile X size minus one
   885 6052 8D B3 32				sta m_pixelPositionX_H1
   886 6055 BD B4 5C				lda TabMissileLevelLeftX_H2,x
   887 6058 69 00				adc #0
   888 605A 8D B2 32				sta m_pixelPositionX_H2
   889
   890 605D 4C 6C 60				jmp GMFC_middle_line
   891
   892 				;*****	moving to the left, use left side pixel
   893 				;
   894 6060			GMFC_left
   895 						
   896 6060 BD B8 5C				lda TabMissileLevelLeftX_H1,x
   897 6063 8D B3 32				sta m_pixelPositionX_H1
   898 6066 BD B4 5C				lda TabMissileLevelLeftX_H2,x
   899 6069 8D B2 32				sta m_pixelPositionX_H2
   900
   901 				;*****	get middle char line
   902 				;
   903 606C			GMFC_middle_line
   904 					
   905 606C BD C4 5C				lda TabMissileLevelTopY_H1,x
   906 606F 18					clc
   907 6070 69 01				adc #1									; because the height is 3 lines
   908 6072 8D B5 32				sta m_pixelPositionY_H1
   909 6075 BD C0 5C				lda TabMissileLevelTopY_H2,x
   910 6078 69 00				adc #0
   911 607A 8D B4 32				sta m_pixelPositionY_H2
   912
   913 607D A9 60				lda #>(Exit -1)
   914 607F 48					pha
   915 6080 A9 85				lda #<(Exit -1)
   916 6082 48					pha
   917
   918 6083 4C 87 60				jmp GetCharDefinitionFromPixelPos
   919
   920 6086			Exit
   921 6086 60					rts
   922
   923 				.endp		
   924
   925 				;
   926 				;**************************************************************************************************
   927 				;
   928 				;	GetCharDefinitionFromPixelPos
   929 				;
   930 				; 		put coord "x" in m_pixelPositionX_H2/_H1 and coord "y" in m_pixelPositionY_H2/_H1
   931 				; 		return in A the character definition value (and also use the Y register)
   932 				; 		(this assume that there no more than 256 chars in x or in y, in a room)
   933 				;
   934 				;**************************************************************************************************
   935 				;
   936 6087			.proc GetCharDefinitionFromPixelPos
   937
   938
   939 						; get char line, divide by 8 (put in Y)
   940 6087 AD B4 32				lda m_pixelPositionY_H2
   941 608A 8D CC 32				sta m_charBuffer_H2
   942 608D AD B5 32				lda m_pixelPositionY_H1
   943 6090 4E CC 32				lsr m_charBuffer_H2						; /2
   944 6093 6A					ror
   945 6094 4E CC 32				lsr m_charBuffer_H2						; /4
   946 6097 6A					ror
   947 6098 4E CC 32				lsr m_charBuffer_H2						; /8 = CHAR_PIXELS_Y
   948 609B 6A					ror
   949
   950 609C 8D B7 32				sta m_charPositionY
   951 609F A8					tay
   952
   953 						; init pointer to char
   954 60A0 B9 DB 32				lda TabLevelLineAddressLSB,y
   955 60A3 8D C8 60				sta GCDFPP_pointer+1
   956 60A6 8D B8 32				sta m_lineAddressLSB
   957 					
   958 60A9 B9 DB 33				lda TabLevelLineAddressMSB,y
   959 60AC 8D C9 60				sta GCDFPP_pointer+2
   960 60AF 8D B9 32				sta m_lineAddressMSB
   961
   962 						; get char column, divide by 4 (put in Y)
   963 60B2 AD B2 32				lda m_pixelPositionX_H2
   964 60B5 8D CC 32				sta m_charBuffer_H2
   965 60B8 AD B3 32				lda m_pixelPositionX_H1
   966 60BB 4E CC 32				lsr m_charBuffer_H2						; /2
   967 60BE 6A					ror
   968 60BF 4E CC 32				lsr m_charBuffer_H2						; /4 = CHAR_PIXELS_X
   969 60C2 6A					ror
   970
   971 60C3 8D B6 32				sta m_charPositionX
   972 60C6 A8					tay
   973
   974 60C7			GCDFPP_pointer
   975 						
   976 60C7 B9 FF FF				lda $FFFF,y
   977 60CA 8D BA 32				sta m_charRaw
   978
   979 60CD A8					tay
   980 60CE B9 DB 34				lda TabCharDefinition,y
   981 60D1 8D BB 32				sta m_charDef
   982
   983 60D4 60					rts
   984
   985 				.endp
   356 60D5					icl "AnimationsLogic.Asm"	
Source: E:\_8BitProjects\Series\Scroller\AnimationsLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AnimationsLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;*****	Local to Animations Logic
    14 				;
    15 = 000A			ANIM_COIN_CHAR1 			= $0A
    16 = 0006			ANIM_COIN_FRAMES 			= $06
    17 = 0008			ANIM_COIN_MAX_NUMBER 		= $08
    18
    19 = 0004			ANIM_MISC_FRAME_TIME		= $04
    20 = 0004			ANIM_SEA_TOP_FRAME_TIME 	= $04
    21
    22 60D5 00 00 00 00 00 00 + TabCoinAnimFrame			.byte $00, $00, $00, $00, $00, $00, $00, $00
    23
    24 60DD 00 00 00 00 00 00 + TabCoinAnimTimer			.byte $00, $00, $00, $00, $00, $00, $00, $00
    25
    26 60E5 02 02 02 02 02 02	TabCoinAnimCharTime			.byte $02, $02, $02, $02, $02, $02
    27
    28 60EB 00 00 00 00 00 00 + TabCoinAnimAddressLSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    29 60F3 00 00 00 00 00 00 + TabCoinAnimAddressMSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    30
    31 				; vertical line, dither (red)
    32 60FB 30 0C 30 0C 30 0C + TabAnimLaserFrame_01		.byte %00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100
    33 6103 0C 30 0C 30 0C 30 + TabAnimLaserFrame_02		.byte %00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000
    34 610B 00 00 00 00 00 00 + TabAnimLaserFrame_03		.byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
    35
    36 				; hoizontal line, dither (red)
    37 6113 33 CC 33		TabAnimHLaserFrame_01		.byte %00110011, %11001100, %00110011
    38 6116 CC 33 CC		TabAnimHLaserFrame_02		.byte %11001100, %00110011, %11001100
    39 6119 00 00 00 00 00 00 + TabAnimHLaserFrame_03		.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
    40
    41 				; sea top (blue)
    42 6121 0F			TabAnimSeaTopLeftFrame_01	.byte %00001111
    43 6122 3F										.byte %00111111
    44 6123 FF										.byte %11111111
    45 6124 FF										.byte %11111111
    46
    47 6125 00			TabAnimSeaTopRightFrame_01	.byte %00000000
    48 6126 C0										.byte %11000000
    49 6127 F0										.byte %11110000
    50 6128 FF										.byte %11111111
    51
    52 				.if PAL_VERSION = 0
    53 					
    54 = 003D				ANIM_LASER_FRAMES 		= $3D
    55 = 003D				ANIM_HLASER_FRAMES 		= $3D
    56 					
    57 6129 FB 03 FB 03 FB 03 + TabAnimLaserFrameAddressLSB		:30 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    58 6165 0B												.byte <TabAnimLaserFrame_03
    59 										
    60 6166 60 61 60 61 60 61 + TabAnimLaserFrameAddressMSB		:30 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    61 61A2 61												.byte >TabAnimLaserFrame_03
    62
    63 61A3 13 16 13 16 13 16 + TabAnimHLaserFrameAddressLSB	:30 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    64 61DF 19												.byte <TabAnimHLaserFrame_03
    65
    66 61E0 61 61 61 61 61 61 + TabAnimHLaserFrameAddressMSB	:30 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    67 621C 61												.byte >TabAnimHLaserFrame_03
    68
    69 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    70 621D 01 01 01 01 01 01 + TabAnimHLaserFrameTime			:30 .byte $01, $01
    71 6259 5A												.byte $5A
    72
    73 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    74 625A 01 01 01 01 01 01 + TabAnimLaserFrameTime			:30 .byte $01, $01
    75 6296 3C												.byte $3C
    76
    77 				.else
    78
    79 					ANIM_LASER_FRAMES 		= $33
    80 					ANIM_HLASER_FRAMES 		= $33
    81
    82 				TabAnimLaserFrameAddressLSB		:25 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    83 													.byte <TabAnimLaserFrame_03
    84 											
    85 				TabAnimLaserFrameAddressMSB		:25 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    86 													.byte >TabAnimLaserFrame_03
    87
    88 				TabAnimHLaserFrameAddressLSB	:25 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    89 													.byte <TabAnimHLaserFrame_03
    90
    91 				TabAnimHLaserFrameAddressMSB	:25 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    92 													.byte >TabAnimHLaserFrame_03
    93
    94 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    95 				TabAnimHLaserFrameTime			:25 .byte $01, $01
    96 													.byte $4B
    97
    98 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    99 				TabAnimLaserFrameTime			:25 .byte $01, $01
   100 													.byte $32
   101
   102 				.endif
   103
   104 				;
   105 				;**************************************************************************************************
   106 				; DoFontAnimations	
   107 				;**************************************************************************************************
   108 				;
   109 6297			.proc DoFontAnimations
   110 					
   111 6297 20 30 63				jsr AnimateWater
   112 629A 20 70 63				jsr AnimateVerticalLaser
   113 629D 20 A5 63				jsr AnimateHorizontalLaser
   114 62A0 20 DA 63				jsr AnimateMisc		
   115 62A3 20 88 6A				jsr PlatformControlH
   116 						
   117 62A6 60					rts
   118 						
   119 				.endp
   120
   121 				;
   122 				;**************************************************************************************************
   123 				;
   124 				;	AddCoinAnimation
   125 				;
   126 				;		the word "m_pageZeroTempPointer" has the address of the char to animate
   127 				;	
   128 				;**************************************************************************************************
   129 				;
   130 62A7			.proc AddCoinAnimation
   131 					
   132 62A7 AD 83 32				lda m_currentCoinAnimations					
   133 62AA C9 08				cmp #ANIM_COIN_MAX_NUMBER
   134 62AC F0 28				beq Exit
   135 						
   136 62AE EE 83 32				inc m_currentCoinAnimations
   137 62B1 AE 82 32				ldx m_emptyCoinAnimIndex
   138 					
   139 62B4 A5 EB				lda m_pageZeroTempPointer
   140 62B6 9D EB 60				sta TabCoinAnimAddressLSB,x
   141 						
   142 62B9 A5 EC				lda m_pageZeroTempPointer+1
   143 62BB 9D F3 60				sta TabCoinAnimAddressMSB,x
   144
   145 62BE A9 00				lda #0										; use first frame
   146 62C0 9D D5 60				sta TabCoinAnimFrame,x
   147 					
   148 62C3 AD E5 60				lda TabCoinAnimCharTime						; use first element of the table
   149 62C6 9D DD 60				sta TabCoinAnimTimer,x
   150
   151 62C9 A0 00				ldy #0
   152 62CB A9 0A				lda #ANIM_COIN_CHAR1
   153 62CD 91 EB				sta (m_pageZeroTempPointer),y				; update screen
   154
   155 62CF E8					inx
   156 62D0 8A					txa
   157 62D1 29 07				and #%111
   158 62D3 8D 82 32				sta m_emptyCoinAnimIndex
   159
   160 				;*****	Add Coin Animation Exit
   161 				;
   162 62D6			Exit
   163 62D6 60					rts
   164
   165 				.endp
   166 					
   167 				;
   168 				;**************************************************************************************************
   169 				; 	UpdateCoinAnimations	
   170 				;
   171 				;		update coin animations every frame
   172 				;
   173 				;**************************************************************************************************
   174 				;
   175 62D7			.proc UpdateCoinAnimations
   176
   177 62D7 AD 83 32				lda m_currentCoinAnimations					
   178 62DA F0 53				beq UCA_exit
   179 						
   180 62DC AE 81 32				ldx m_firstCoinAnimIndex
   181
   182 				;*****	UCA Loop
   183 				;
   184 62DF			UCA_loop
   185 					
   186 62DF DE DD 60				dec TabCoinAnimTimer,x
   187 62E2 D0 41				bne UCA_check_loop
   188
   189 62E4 FE D5 60				inc TabCoinAnimFrame,x
   190 62E7 BD D5 60				lda TabCoinAnimFrame,x
   191 62EA C9 06				cmp #ANIM_COIN_FRAMES
   192 62EC F0 19				beq UCA_clear_anim
   193
   194 				;*****	UCA Update Animation
   195 				;
   196 62EE			UCA_update_anim
   197 					
   198 62EE A8					tay
   199 62EF B9 E5 60				lda TabCoinAnimCharTime,y					; #ANIM_COIN_TIME
   200 62F2 9D DD 60				sta TabCoinAnimTimer,x
   201
   202 62F5 BD EB 60				lda TabCoinAnimAddressLSB,x
   203 62F8 8D 02 63				sta UCA_char_pointer+1
   204 62FB BD F3 60				lda TabCoinAnimAddressMSB,x
   205 62FE 8D 03 63				sta UCA_char_pointer+2
   206
   207 				;*****	UCA Character Pointer
   208 				;
   209 6301			UCA_char_pointer
   210 					
   211 6301 EE FF FF				inc $FFFF									; update the animation frame, increment the char on screen
   212 6304 4C 25 63				jmp UCA_check_loop
   213
   214 				;*****	UCA Clear Animation
   215 				;
   216 6307			UCA_clear_anim
   217 					
   218 6307 BD EB 60				lda TabCoinAnimAddressLSB,x
   219 630A 8D 16 63				sta UCA_clear_char_pointer+1
   220 630D BD F3 60				lda TabCoinAnimAddressMSB,x
   221 6310 8D 17 63				sta UCA_clear_char_pointer+2
   222 6313 A9 00				lda #0
   223
   224 				;*****	UCA Clear Character Pointer
   225 				;
   226 6315			UCA_clear_char_pointer
   227 					
   228 6315 8D FF FF				sta $FFFF									; clear the char on screen
   229 6318 CE 83 32				dec m_currentCoinAnimations
   230 631B AC 81 32				ldy m_firstCoinAnimIndex
   231 631E C8					iny
   232 631F 98					tya
   233 6320 29 07				and #%111
   234 6322 8D 81 32				sta m_firstCoinAnimIndex
   235
   236 				;*****	UCA Check Loop
   237 				;
   238 6325			UCA_check_loop
   239 						
   240 6325 E8					inx
   241 6326 8A					txa
   242 6327 29 07				and #%111
   243 6329 AA					tax
   244 632A EC 82 32				cpx m_emptyCoinAnimIndex
   245 632D D0 B0				bne UCA_loop
   246
   247 				;*****	UCA Exit
   248 				;
   249 632F			UCA_exit
   250 						
   251 632F 60					rts
   252 					
   253 				.endp	
   254
   255 				;
   256 				;***************************************************************************************************
   257 				;	
   258 				;	AnimateWater
   259 				;	
   260 				; 		do sea top animation (chars 70, 71)
   261 				; 
   262 				;***************************************************************************************************
   263 				;	
   264 6330			.proc AnimateWater
   265
   266 6330 AD 7A 32			lda m_waterAvailable
   267 6333 F0 3A			beq Exit
   268 					
   269 6335 CE 80 32			dec m_animSeaTopTimer
   270 6338 D0 35			bne Exit
   271
   272 633A A9 04			lda #ANIM_SEA_TOP_FRAME_TIME
   273 633C 8D 80 32			sta m_animSeaTopTimer
   274
   275 633F AD 38 AA			lda GameFontAddress+8*71
   276 6342 4A				lsr											; put left bit in the carry
   277 6343 6E 30 AA			ror GameFontAddress+8*70
   278 6346 6E 38 AA			ror GameFontAddress+8*71
   279 6349 6E 30 AA			ror GameFontAddress+8*70
   280 634C 6E 38 AA			ror GameFontAddress+8*71
   281
   282 634F AD 39 AA			lda GameFontAddress+8*71+1
   283 6352 4A				lsr											; put left bit in the carry
   284 6353 6E 31 AA			ror GameFontAddress+8*70+1
   285 6356 6E 39 AA			ror GameFontAddress+8*71+1
   286 6359 6E 31 AA			ror GameFontAddress+8*70+1
   287 635C 6E 39 AA			ror GameFontAddress+8*71+1
   288
   289 635F AD 3A AA			lda GameFontAddress+8*71+2
   290 6362 4A				lsr											; put left bit in the carry
   291 6363 6E 32 AA			ror GameFontAddress+8*70+2
   292 6366 6E 3A AA			ror GameFontAddress+8*71+2
   293 6369 6E 32 AA			ror GameFontAddress+8*70+2
   294 636C 6E 3A AA			ror GameFontAddress+8*71+2
   295
   296 				;*****	Exit
   297 				;
   298 636F			Exit
   299 636F 60					rts
   300
   301 				.endp	
   302
   303 				;
   304 				;***************************************************************************************************
   305 				;	
   306 				;	AnimateVerticalLaser
   307 				;	
   308 				; 		do vertical line dither, laser animation (char 20, 21, 22)
   309 				; 
   310 				;***************************************************************************************************
   311 				;	
   312 6370			.proc AnimateVerticalLaser
   313
   314 6370 AD 76 32				lda m_verticalLaserOn
   315 6373 F0 2F				beq Exit
   316 						
   317 6375 CE 86 32				dec m_animLaserTimer						
   318 6378 D0 2A				bne Exit
   319
   320 637A AE 87 32				ldx m_animLaserCurrentFrame
   321 637D E8					inx
   322 637E E0 3D				cpx #ANIM_LASER_FRAMES
   323 6380 D0 02				bne NextFrame
   324 						
   325 6382 A2 00				ldx #0
   326
   327 				;*****	Animate Vertical Laser Next Frame
   328 				;
   329 6384			NextFrame
   330
   331 6384 8E 87 32				stx m_animLaserCurrentFrame
   332
   333 6387 BD 5A 62				lda TabAnimLaserFrameTime,x
   334 638A 8D 86 32				sta m_animLaserTimer
   335
   336 638D BD 29 61				lda TabAnimLaserFrameAddressLSB,x
   337 6390 8D 9C 63				sta CopyFrame+1
   338
   339 6393 BD 66 61				lda TabAnimLaserFrameAddressMSB,x
   340 6396 8D 9D 63				sta CopyFrame+2
   341
   342 6399 A0 07				ldy #7
   343 					
   344 				;*****	Animate Vertical Laser Copy Frame
   345 				;
   346 639B			CopyFrame
   347 					
   348 639B B9 FF FF				lda $FFFF,y
   349 639E 99 A8 A8				sta GameFontAddress+8*21,y
   350 63A1 88					dey
   351 63A2 10 F7				bpl CopyFrame
   352
   353 				;*****	Animate Vertical Laser End
   354 				;
   355 63A4			Exit
   356 						
   357 63A4 60					rts
   358
   359 				.endp
   360
   361 				;
   362 				;***************************************************************************************************
   363 				;	
   364 				;	AnimateHorizontalLaser
   365 				;	
   366 				; 		do horizontal line dither, laser animation (char 23, 24, 25)
   367 				; 
   368 				;***************************************************************************************************
   369 				;	
   370 63A5			.proc AnimateHorizontalLaser
   371
   372 63A5 AD 77 32				lda m_horizontalLaserOn
   373 63A8 F0 2F				beq Exit
   374
   375 63AA CE 84 32				dec m_animHLaserTimer						
   376 63AD D0 2A				bne Exit
   377
   378 63AF AE 85 32				ldx m_animHLaserCurrentFrame
   379 63B2 E8					inx
   380 63B3 E0 3D				cpx #ANIM_HLASER_FRAMES
   381 63B5 D0 02				bne NextFrame
   382 						
   383 63B7 A2 00				ldx #0
   384
   385 				;******	Animate Horizontal Laser Next Frame
   386 				;
   387 63B9			NextFrame
   388 						
   389 63B9 8E 85 32				stx m_animHLaserCurrentFrame
   390 63BC BD 1D 62				lda TabAnimHLaserFrameTime,x
   391 63BF 8D 84 32				sta m_animHLaserTimer
   392
   393 63C2 BD A3 61				lda TabAnimHLaserFrameAddressLSB,x
   394 63C5 8D D1 63				sta CopyFrame+1
   395 						
   396 63C8 BD E0 61				lda TabAnimHLaserFrameAddressMSB,x
   397 63CB 8D D2 63				sta CopyFrame+2
   398
   399 63CE A0 02				ldy #2
   400
   401 				;*****	Animate Horizontal Laser Copy Frame
   402 				;
   403 63D0			CopyFrame
   404 					
   405 63D0 B9 FF FF				lda $FFFF,y
   406 63D3 99 CA A8				sta GameFontAddress+8*25+2,y
   407 63D6 88					dey
   408 63D7 10 F7				bpl CopyFrame
   409
   410 				;*****	Animate Horizontal Laser Exit
   411 				;
   412 63D9			Exit
   413 63D9 60					rts
   414
   415 				.endp
   416
   417 				;
   418 				;***************************************************************************************************
   419 				;	
   420 				;	AnimateMisc
   421 				;	
   422 				; 		do misc animation
   423 				; 
   424 				;***************************************************************************************************
   425 				;	
   426 63DA			.proc AnimateMisc
   427
   428 63DA A2 00				ldx #$00
   429
   430 63DC BD 3F 36				lda TabAnimationMiscMap[0], x
   431 63DF 85 E3				sta m_paramW01
   432
   433 63E1 BD 40 36				lda TabAnimationMiscMap[0]+1, x
   434 63E4 85 E4				sta m_paramW01+1
   435 						
   436 63E6 BD 42 36				lda TabAnimationMiscMap[0]+3, x
   437 63E9 85 9A				sta m_animMiscWidth
   438
   439 63EB BD 43 36				lda TabAnimationMiscMap[0]+4, x
   440 63EE 85 9B				sta m_animMiscHeight
   441 					
   442 63F0 A5 AE				lda m_playerScreenTopY
   443 63F2 A4 9B				ldy m_animMiscHeight		
   444 63F4			Sub1
   445 63F4 38					sec
   446 63F5 E9 01				sbc #$01
   447 63F7 88					dey
   448 63F8 D0 FA				bne Sub1
   449 						
   450 								 
   451 						
   452 63FA			Loop
   453 								
   454
   455 				;*****	Exit Method
   456 63FA			Exit
   457
   458 63FA 60					rts
   459
   460 				.endp
   357 63FB					icl "CameraLogic.Asm"
Source: E:\_8BitProjects\Series\Scroller\CameraLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		CameraLogic.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 63FB 0C 0B 0A 09		TabOffsetForHSCROL			.byte 12,11,10,9
    18 63FF 00 01 02 03 04 05 + TabOffsetForVSCROL			.byte 0,1,2,3,4,5,6,7
    19
    20 6407			TabMultiply82_LSB			
    21 6407 00 52 A4 F6 48 9A + 	:26 .byte <[#*LEVEL_CHAR_SIZE_X]
    22
    23 6421			TabMultiply82_MSB
    24 6421 00 00 00 00 01 01 + 	:26 .byte >[#*LEVEL_CHAR_SIZE_X]
    25 				;
    26 				;**************************************************************************************************
    27 				; UpdateCameraWindow
    28 				;
    29 				; 	update target window pos (m_windowTargetPos*_*), using the player level position,
    30 				; 	correct (clamp) target window pos with level limits if necessary
    31 				;
    32 				;**************************************************************************************************
    33 				;
    34 643B			.proc UpdateCameraWindow
    35
    36 				;************************************************
    37 				;
    38 643B			UCW_check_left_limit
    39 					
    40 						; check left limit (clamp to the left)
    41 643B A5 A1				lda m_playerLevelLeftX_H2				
    42 643D C9 00				cmp #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    43 643F 90 08				bcc UCW_force_left_limit
    44 6441 D0 13				bne UCW_check_right_limit
    45 						
    46 6443 A5 A2				lda m_playerLevelLeftX_H1
    47 6445 C9 52				cmp #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2+CHAR_PIX.else_X]-2]						; [[[40 * 4] / 2 + 4] - 2]
    48 6447 B0 0D				bcs UCW_check_right_limit
    49
    50 				;************************************************
    51 				;
    52 6449			UCW_force_left_limit
    53 						
    54 6449 A9 00				lda #>[CHAR_PIX.else_X]
    55 644B 8D 8D 32				sta m_windowTargetPosX_H2
    56 						
    57 644E A9 04				lda #<[CHAR_PIX.else_X]
    58 6450 8D 8C 32				sta m_windowTargetPosX_H1
    59 						
    60 6453 4C 80 64				jmp UCW_check_top_limit
    61
    62 				;************************************************
    63 				;
    64 6456			UCW_check_right_limit
    65 					
    66 						; check right limit (clamp to the right)
    67 6456 A9 00				lda #>[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    68 																											; [[[ 62 ] * 4 - 4] + 1]
    69 																											; [ 244 + 1] = 245	
    70 6458 C5 A4				cmp m_playerLevelRightX_H2	
    71 645A 90 08				bcc UCW_force_right_limit
    72 645C D0 13				bne UCW_set_target_x
    73 						
    74 645E A9 F5				lda #<[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIX.else_X-CHAR_PIX.else_X]+1]	; [[[82-40 / 2] * 4 - 4] + 1]
    75 																											; [[[ 62 ] * 4 - 4] + 1]
    76 																											; [ 244 + 1] = 245	
    77 6460 C5 A5				cmp m_playerLevelRightX_H1
    78 6462 B0 0D				bcs UCW_set_target_x
    79
    80 				;************************************************
    81 				;
    82 6464			UCW_force_right_limit
    83 					
    84 6464 A9 00				lda #>[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    85 6466 8D 8D 32				sta m_windowTargetPosX_H2
    86 					
    87 6469 A9 A4				lda #<[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIX.else_X-CHAR_PIX.else_X]
    88 646B 8D 8C 32				sta m_windowTargetPosX_H1
    89 					
    90 646E 4C 80 64				jmp UCW_check_top_limit
    91
    92 				;************************************************
    93 				; no clamp, use current player X position 
    94 				; and substract half the window size
    95 				;
    96 6471			UCW_set_target_x
    97 					
    98 6471 A5 A2				lda m_playerLevelLeftX_H1
    99 6473 38					sec
   100 6474 E9 4E				sbc #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   101 6476 8D 8C 32				sta m_windowTargetPosX_H1
   102 					
   103 6479 A5 A1				lda m_playerLevelLeftX_H2
   104 647B E9 00				sbc #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIX.else_X]/2]-2]
   105 647D 8D 8D 32				sta m_windowTargetPosX_H2
   106
   107 				;************************************************
   108 				; check top limit (clamp to the top)
   109 				; 
   110 6480			UCW_check_top_limit
   111 						
   112 6480 A5 A7				lda m_playerLevelTopY_H2
   113 6482 C9 00				cmp #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   114 6484 90 08				bcc UCW_force_top_limit
   115 6486 D0 13				bne UCW_check_bottom_limit
   116 						
   117 6488 A5 A8				lda m_playerLevelTopY_H1
   118 648A C9 5C				cmp #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   119 648C B0 0D				bcs UCW_check_bottom_limit
   120
   121 				;************************************************
   122 				;
   123 648E			UCW_force_top_limit
   124 						
   125 648E A9 00				lda #>[0]
   126 6490 8D 8F 32				sta m_windowTargetPosY_H2
   127 					
   128 6493 A9 00				lda #<[0]
   129 6495 8D 8E 32				sta m_windowTargetPosY_H1
   130 					
   131 6498 4C C5 64				jmp UCW_get_deltas
   132
   133 				;************************************************
   134 				; check bottom limit (clamp to the bottom)
   135 				;
   136 649B			UCW_check_bottom_limit
   137 						
   138 649B A9 00				lda #>[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   139 649D C5 AA				cmp m_playerLevelBottomY_H2
   140 649F 90 08				bcc UCW_force_bottom_limit
   141 64A1 D0 13				bne UCW_set_target_y
   142 						
   143 64A3 A9 63				lda #<[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIX.else_Y]+3]
   144 64A5 C5 AB				cmp m_playerLevelBottomY_H1
   145 64A7 B0 0D				bcs UCW_set_target_y
   146
   147 				;************************************************
   148 				;
   149 64A9			UCW_force_bottom_limit
   150 					
   151 64A9 A9 00				lda #>[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   152 64AB 8D 8F 32				sta m_windowTargetPosY_H2
   153 					
   154 64AE A9 00				lda #<[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIX.else_Y]
   155 64B0 8D 8E 32				sta m_windowTargetPosY_H1
   156 						
   157 64B3 4C C5 64				jmp UCW_get_deltas
   158
   159 				;************************************************
   160 				; no clamp, use current player Y position and substract half the window size
   161 				;
   162 64B6			UCW_set_target_y
   163 					
   164 64B6 A5 A8				lda m_playerLevelTopY_H1
   165 64B8 38					sec		
   166 64B9 E9 5C				sbc #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   167 64BB 8D 8E 32				sta m_windowTargetPosY_H1
   168 					
   169 64BE A5 A7				lda m_playerLevelTopY_H2
   170 64C0 E9 00				sbc #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIX.else_Y/2]-4]
   171 64C2 8D 8F 32				sta m_windowTargetPosY_H2
   172
   173 				;************************************************
   174 				; calculate deltas in X and Y for the current and
   175 				; the target window pos, update the current window
   176 				; pos according to the distance to the target
   177 				; (compare the level window with the target pos, 
   178 				; get the delta and divide it by 8, so the movement 
   179 				; speed is proportional to the distance, with a minimum step of 1)
   180 				;
   181 64C5			UCW_get_deltas
   182
   183 				;************************************************
   184 				;
   185 64C5			UCW_check_deltaX								
   186 						
   187 64C5 A5 DA				lda m_levelWindowX_H2					; compare target X and current X
   188 64C7 CD 8D 32				cmp m_windowTargetPosX_H2
   189 64CA 90 4D				bcc UCW_deltaX_positive
   190 64CC D0 0C				bne UCW_deltaX_negative
   191 					
   192 64CE A5 DB				lda m_levelWindowX_H1
   193 64D0 CD 8C 32				cmp m_windowTargetPosX_H1
   194 												
   195 64D3 90 44				bcc UCW_deltaX_positive					; target X equal to current X
   196 64D5 D0 03				bne UCW_deltaX_negative
   197 64D7 4C 55 65				jmp UCW_deltaX_exit						; target X equal to current X
   198
   199 				;************************************************
   200 				;
   201 64DA			UCW_deltaX_negative								
   202 64DA A5 DB				lda m_levelWindowX_H1 					; target X lower than current X
   203 64DC 38					sec
   204 64DD ED 8C 32				sbc m_windowTargetPosX_H1
   205 64E0 8D 90 32				sta m_windowTargetDeltaX_H1
   206 					
   207 64E3 A5 DA				lda m_levelWindowX_H2
   208 64E5 ED 8D 32				sbc m_windowTargetPosX_H2
   209 64E8 8D 91 32				sta m_windowTargetDeltaX_H2
   210
   211 				;************************************************
   212 				;
   213 64EB			UCW_dxn_divide
   214
   215 64EB AD 91 32				lda m_windowTargetDeltaX_H2
   216 64EE 4A					lsr
   217 64EF 6E 90 32				ror m_windowTargetDeltaX_H1				; /2
   218 64F2 4A					lsr
   219 64F3 6E 90 32				ror m_windowTargetDeltaX_H1				; /4
   220 64F6 4A					lsr
   221 64F7 6E 90 32				ror m_windowTargetDeltaX_H1				; /8
   222 64FA 8D 91 32				sta m_windowTargetDeltaX_H2
   223
   224 64FD 0D 90 32				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   225 6500 D0 05				bne UCW_apply_negative_deltaX
   226 						
   227 6502 A9 01				lda #MINIMUM_CAMERA_STEP
   228 6504 8D 90 32				sta m_windowTargetDeltaX_H1
   229 					
   230 				;************************************************
   231 				;
   232 6507			UCW_apply_negative_deltaX
   233 					
   234 6507 A5 DB				lda m_levelWindowX_H1
   235 6509 38					sec
   236 650A ED 90 32				sbc m_windowTargetDeltaX_H1
   237 650D 85 DB				sta m_levelWindowX_H1
   238 650F A5 DA				lda m_levelWindowX_H2
   239 6511 ED 91 32				sbc m_windowTargetDeltaX_H2
   240 6514 85 DA				sta m_levelWindowX_H2
   241
   242 				;************************************************
   243 				;
   244 6516			UCW_deltaX_exit_jmp
   245 					
   246 6516 4C 55 65				jmp UCW_deltaX_exit
   247
   248 				;************************************************
   249 				;
   250 6519			UCW_deltaX_positive								
   251 						
   252 6519 AD 8C 32				lda m_windowTargetPosX_H1				; target X greater than current X
   253 651C 38					sec
   254 651D E5 DB				sbc m_levelWindowX_H1
   255 651F 8D 90 32				sta m_windowTargetDeltaX_H1
   256 					
   257 6522 AD 8D 32				lda m_windowTargetPosX_H2
   258 6525 E5 DA				sbc m_levelWindowX_H2
   259 6527 8D 91 32				sta m_windowTargetDeltaX_H2
   260
   261 				;************************************************
   262 				;
   263 652A			UCW_dxp_divide
   264 						
   265 652A AD 91 32				lda m_windowTargetDeltaX_H2
   266 652D 4A					lsr
   267 652E 6E 90 32				ror m_windowTargetDeltaX_H1				; /2
   268 6531 4A					lsr
   269 6532 6E 90 32				ror m_windowTargetDeltaX_H1				; /4
   270 6535 4A					lsr
   271 6536 6E 90 32				ror m_windowTargetDeltaX_H1				; /8
   272 6539 8D 91 32				sta m_windowTargetDeltaX_H2
   273
   274 653C 0D 90 32				ora m_windowTargetDeltaX_H1				; check that delta X is greater than zero
   275 653F D0 05				bne UCW_apply_positive_deltaX
   276 						
   277 6541 A9 01				lda #MINIMUM_CAMERA_STEP
   278 6543 8D 90 32				sta m_windowTargetDeltaX_H1
   279
   280 				;************************************************
   281 				;
   282 6546			UCW_apply_positive_deltaX
   283 						
   284 6546 A5 DB				lda m_levelWindowX_H1
   285 6548 18					clc
   286 6549 6D 90 32				adc m_windowTargetDeltaX_H1
   287 654C 85 DB				sta m_levelWindowX_H1
   288 						
   289 654E A5 DA				lda m_levelWindowX_H2
   290 6550 6D 91 32				adc m_windowTargetDeltaX_H2
   291 6553 85 DA				sta m_levelWindowX_H2
   292
   293 				;************************************************
   294 				;
   295 6555			UCW_deltaX_exit
   296
   297 				;************************************************
   298 				;
   299 6555			UCW_check_deltaY								
   300 						
   301 6555 A5 DC				lda m_levelWindowY_H2					; compare target Y and current Y	
   302 6557 CD 8F 32				cmp m_windowTargetPosY_H2
   303 655A 90 44				bcc UCW_deltaY_positive
   304 655C D0 09				bne UCW_deltaY_negative
   305 					
   306 655E A5 DD				lda m_levelWindowY_H1
   307 6560 CD 8E 32				cmp m_windowTargetPosY_H1
   308 6563 F0 71				beq UCW_deltaY_exit						; target Y equal to current Y
   309 6565 90 39				bcc UCW_deltaY_positive
   310
   311 				;************************************************
   312 				;
   313 6567			UCW_deltaY_negative								
   314 						
   315 6567 A5 DD				lda m_levelWindowY_H1					; target Y lower than current Y
   316 6569 38					sec
   317 656A ED 8E 32				sbc m_windowTargetPosY_H1
   318 656D 8D 92 32				sta m_windowTargetDeltaY_H1
   319 						
   320 6570 A5 DC				lda m_levelWindowY_H2
   321 6572 ED 8F 32				sbc m_windowTargetPosY_H2
   322
   323 6575 4A					lsr
   324 6576 6E 92 32				ror m_windowTargetDeltaY_H1				; /2
   325 6579 4A					lsr
   326 657A 6E 92 32				ror m_windowTargetDeltaY_H1				; /4
   327 657D 4A					lsr
   328 657E 6E 92 32				ror m_windowTargetDeltaY_H1				; /8
   329 6581 8D 93 32				sta m_windowTargetDeltaY_H2
   330
   331 6584 0D 92 32				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   332 6587 D0 05				bne UCW_apply_negative_deltaY
   333 						
   334 6589 A9 01				lda #MINIMUM_CAMERA_STEP
   335 658B 8D 92 32				sta m_windowTargetDeltaY_H1
   336 				;
   337 				;**************************************************************************************************
   338 				;
   339 658E			UCW_apply_negative_deltaY
   340 						
   341 658E A5 DD				lda m_levelWindowY_H1
   342 6590 38					sec
   343 6591 ED 92 32				sbc m_windowTargetDeltaY_H1
   344 6594 85 DD				sta m_levelWindowY_H1
   345 						
   346 6596 A5 DC				lda m_levelWindowY_H2
   347 6598 ED 93 32				sbc m_windowTargetDeltaY_H2
   348 659B 85 DC				sta m_levelWindowY_H2
   349
   350 659D 4C D6 65				jmp UCW_deltaY_exit
   351 				;
   352 				;**************************************************************************************************
   353 				;
   354 65A0			UCW_deltaY_positive								
   355 						
   356 65A0 AD 8E 32				lda m_windowTargetPosY_H1				; target Y greater than current Y
   357 65A3 38					sec
   358 65A4 E5 DD				sbc m_levelWindowY_H1
   359 65A6 8D 92 32				sta m_windowTargetDeltaY_H1
   360 						
   361 65A9 AD 8F 32				lda m_windowTargetPosY_H2
   362 65AC E5 DC				sbc m_levelWindowY_H2
   363
   364 65AE 4A					lsr
   365 65AF 6E 92 32				ror m_windowTargetDeltaY_H1				; /2
   366 65B2 4A					lsr
   367 65B3 6E 92 32				ror m_windowTargetDeltaY_H1				; /4
   368 65B6 4A					lsr
   369 65B7 6E 92 32				ror m_windowTargetDeltaY_H1				; /8
   370 65BA 8D 93 32				sta m_windowTargetDeltaY_H2
   371
   372 65BD 0D 92 32				ora m_windowTargetDeltaY_H1				; check that delta Y is greater than zero
   373 65C0 D0 05				bne UCW_apply_positive_deltaY
   374 						
   375 65C2 A9 01				lda #MINIMUM_CAMERA_STEP
   376 65C4 8D 92 32				sta m_windowTargetDeltaY_H1
   377
   378 				;************************************************
   379 				;
   380 65C7			UCW_apply_positive_deltaY
   381 						
   382 65C7 A5 DD				lda m_levelWindowY_H1
   383 65C9 18					clc
   384 65CA 6D 92 32				adc m_windowTargetDeltaY_H1
   385 65CD 85 DD				sta m_levelWindowY_H1
   386 						
   387 65CF A5 DC				lda m_levelWindowY_H2
   388 65D1 6D 93 32				adc m_windowTargetDeltaY_H2
   389 65D4 85 DC				sta m_levelWindowY_H2
   390
   391 				;************************************************
   392 				;
   393 65D6			UCW_deltaY_exit
   394
   395 				;************************************************
   396 				; update all LMS in the display list
   397 				;
   398 65D6			UCW_update_LMS
   399 						
   400 65D6 A5 DA				lda m_levelWindowX_H2
   401 65D8 8D 89 32				sta m_screenBaseAddress1+1
   402 						
   403 65DB A5 DB				lda m_levelWindowX_H1
   404 65DD 4E 89 32				lsr m_screenBaseAddress1+1
   405 65E0 6A					ror										; /2
   406 65E1 4E 89 32				lsr m_screenBaseAddress1+1
   407 65E4 6A					ror										; /4 == CHAR_PIX.else_X
   408
   409 65E5 18					clc
   410 65E6 69 FF				adc #<[GAME_MEM-1]
   411 65E8 8D 8A 32				sta m_screenBaseAddress2
   412 						
   413 65EB AD 89 32				lda m_screenBaseAddress1+1
   414 65EE 69 AF				adc #>[GAME_MEM-1]
   415 65F0 8D 8B 32				sta m_screenBaseAddress2+1
   416
   417
   418 65F3 A5 DC				lda m_levelWindowY_H2
   419 65F5 8D 89 32				sta m_screenBaseAddress1+1
   420 65F8 A5 DD				lda m_levelWindowY_H1
   421
   422 65FA 4E 89 32				lsr m_screenBaseAddress1+1
   423 65FD 6A					ror										; /2
   424 65FE 4E 89 32				lsr m_screenBaseAddress1+1
   425 6601 6A					ror										; /4
   426 6602 4E 89 32				lsr m_screenBaseAddress1+1
   427 6605 6A					ror										; /8 == CHAR_PIX.else_Y
   428
   429 6606 AA					tax
   430 6607 BD 07 64				lda TabMultiply82_LSB,x
   431 660A 18					clc
   432 660B 6D 8A 32				adc m_screenBaseAddress2
   433 660E 8D 8A 32				sta m_screenBaseAddress2
   434 					
   435 6611 BD 21 64				lda TabMultiply82_MSB,x
   436 6614 6D 8B 32				adc m_screenBaseAddress2+1
   437 6617 8D 8B 32				sta m_screenBaseAddress2+1
   438
   439 661A A2 00				ldx #0
   440
   441 				;************************************************
   442 				;
   443 661C			UCW_update_LMS_loop
   444
   445 661C AD 8A 32				lda m_screenBaseAddress2
   446 661F 9D 04 0E				sta GAME_LMS1+1,x						; should update this outside the screen zone!
   447 						
   448 6622 AD 8B 32				lda m_screenBaseAddress2+1
   449 6625 9D 05 0E				sta GAME_LMS1+2,x						; should update this outside the screen zone!
   450
   451 6628 AD 8A 32				lda m_screenBaseAddress2
   452 662B 18					clc
   453 662C 69 52				adc #LEVEL_CHAR_SIZE_X
   454 662E 8D 8A 32				sta m_screenBaseAddress2
   455 						
   456 6631 AD 8B 32				lda m_screenBaseAddress2+1
   457 6634 69 00				adc #0
   458 6636 8D 8B 32				sta m_screenBaseAddress2+1
   459
   460 6639 E8					inx
   461 663A E8					inx
   462 663B E8					inx
   463 663C E0 4B				cpx #[[WINDOW_CHAR_SIZE_Y+1]*3]
   464 663E D0 DC				bne UCW_update_LMS_loop
   465
   466 				;************************************************
   467 				; update HSCROL and VSCROL with the offsets of the window pos
   468 				;
   469 6640 A5 DB				lda m_levelWindowX_H1
   470 6642 29 03				and #[CHAR_PIX.else_X-1]
   471 6644 AA					tax
   472 						
   473 6645 BD FB 63				lda TabOffsetForHSCROL,x
   474 6648 8D 04 D4				sta HSCROL								; should update this outside the screen zone!
   475
   476 664B A5 DD				lda m_levelWindowY_H1
   477 664D 29 07				and #[CHAR_PIX.else_Y-1]
   478 664F AA					tax
   479 					
   480 6650 BD FF 63				lda TabOffsetForVSCROL,x
   481 6653 8D 05 D4				sta VSCROL								; should update this outside the screen zone!
   482 						
   483 6656 60					rts
   484 					
   485 				.endp	
   358 6657					icl "EnemyManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\EnemyManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		EnemyManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 0020			MAX_ENEMIES_PER_LEVEL 			= 32
    18 = 0002			MAX_ENEMY_MISSILES 				= 2
    19 = 0016			MAX_EXPLOSION_STEPS 			= 22
    20
    21 				.if PAL_VERSION = 0
    22 = 002A			ENEMY_EXPLOSION_COLOR 			= 32+10
    23 				.else
    24 				ENEMY_EXPLOSION_COLOR 			= 16+10
    25 				.endif
    26
    27 6657			TabEnemyExplosionColor
    28 				.if PAL_VERSION = 0
    29 6657 20 0E 0E 0E 0C 0C + 								.byte +32, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    30 				.else
    31 												.byte +16, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
    32 				.endif
    33
    34 666E 08			TabEnemyShapeSizeY				.byte 8
    35
    36 666F			TabEnemyShape_01
    37 666F 3C											.byte %00111100
    38 6670 E7											.byte %11100111
    39 6671 18											.byte %00011000
    40 6672 E7											.byte %11100111
    41 6673 3C											.byte %00111100
    42 6674 00											.byte %00000000
    43 6675 3C											.byte %00111100
    44 6676 7E											.byte %01111110
    45
    46
    47 6677 00 00 00 00 00 00 + TabEnemyType					:MAX_ENEMIES_PER_LEVEL .byte $00
    48 					
    49
    50 				; this table could be per level, if we can go back to the same screen
    51 6697 00 00 00 00 00 00 + TabEnemyLife					:MAX_ENEMIES_PER_LEVEL .byte $00
    52 					                        	
    53 				                            	
    54 66B7 00 00 00 00 00 00 + TabEnemyState					:MAX_ENEMIES_PER_LEVEL .byte $00
    55 					                        	
    56 66D7 00 00 00 00 00 00 + TabEnemyStateTimer				:MAX_ENEMIES_PER_LEVEL .byte $00
    57 					                        	
    58 				                            	
    59 66F7 00 00 00 00 00 00 + TabEnemyBaseCharIndex			:MAX_ENEMIES_PER_LEVEL .byte $00	
    60 					
    61 6717 00 00 00 00 00 00 + TabEnemyBaseCharX				:MAX_ENEMIES_PER_LEVEL .byte $00
    62 6737 00 00 00 00 00 00 + TabEnemyBaseCharY				:MAX_ENEMIES_PER_LEVEL .byte $00
    63
    64 6757 00 00 00 00 00 00 + TabEnemyLevelLeftX_H1			:MAX_ENEMIES_PER_LEVEL .byte $00
    65 6777 00 00 00 00 00 00 + TabEnemyLevelLeftX_H2			:MAX_ENEMIES_PER_LEVEL .byte $00
    66 6797 00 00 00 00 00 00 + TabEnemyLevelTopY_H1			:MAX_ENEMIES_PER_LEVEL .byte $00
    67 67B7 00 00 00 00 00 00 + TabEnemyLevelTopY_H2			:MAX_ENEMIES_PER_LEVEL .byte $00
    68
    69 67D7 00 00 00 00 00 00 + TabEnemyShotLevelLeftX_H1		:MAX_ENEMIES_PER_LEVEL .byte $00
    70 67F7 00 00 00 00 00 00 + TabEnemyShotLevelLeftX_H2		:MAX_ENEMIES_PER_LEVEL .byte $00
    71 6817 00 00 00 00 00 00 + TabEnemyShotLevelTopY_H1		:MAX_ENEMIES_PER_LEVEL .byte $00
    72 6837 00 00 00 00 00 00 + TabEnemyShotLevelTopY_H2		:MAX_ENEMIES_PER_LEVEL .byte $00
    73
    74
    75 				; enemy definition tables (index or type 0 is not used)
    76 6857 00 01		TabEnemyDefLife					.byte $00, $01
    77
    78 6859 00 C0		TabEnemyDefBaseChar				.byte $00, $C0
    79
    80 685B			TabEnemyDefShootCooldown		
    81 				.if PAL_VERSION = 0
    82 685B 00 78										.byte $00, $78
    83 				.else
    84 												.byte $00, $64
    85 				.endif
    86
    87 685D			UpdateEnemyManager
    88
    89 				; update one enemy per frame, rotate through all active enemies
    90 685D AD A2 32			lda m_activeEnemies
    91 6860 D0 03			bne UEM_active_enemies
    92 6862 4C 02 69			jmp UEM_exit
    93
    94 6865			UEM_active_enemies
    95 				; update state timer for all enemies (if we don't want to do this, we should use a general time stamp system)
    96 6865 A2 00			ldx #0
    97 6867			UEM_loop1
    98 6867 BD D7 66			lda TabEnemyStateTimer,x
    99 686A F0 03			beq UEM_next_timer
   100 686C DE D7 66			dec TabEnemyStateTimer,x
   101 686F			UEM_next_timer
   102 686F E8				inx
   103 6870 EC A1 32			cpx m_totalEnemies
   104 6873 D0 F2			bne UEM_loop1
   105
   106 				; iterate until we find the next active enemy
   107 6875 AE A7 32			ldx m_lastEnemyIndexUpdated
   108 					
   109 6878			UEM_loop2
   110 6878 E8				inx
   111 6879 EC A1 32			cpx m_totalEnemies
   112 687C D0 02			bne UEM_no_loop_back
   113 687E A2 00			ldx #0
   114 6880			UEM_no_loop_back
   115 6880 BD B7 66			lda TabEnemyState,x		; state 0 implies a disabled enemy
   116 6883 F0 F3			beq UEM_loop2
   117 6885 8E A7 32			stx m_lastEnemyIndexUpdated
   118
   119 				; should use the enemy type to jump to the correct update for that type
   120
   121 				; check state timer, update state if is 0
   122 6888 BD D7 66			lda TabEnemyStateTimer,x
   123 688B D0 75			bne UEM_exit
   124
   125 				; timer is 0, check if the player is near enough to shoot, in what direction, and if there are missiles available
   126 				; (maybe check against the maximum number of enemy missiles possible)
   127 688D			UEM_check_shoot
   128 688D AD A8 32			lda m_enemyMissilesActive
   129 6890 C9 02			cmp #MAX_ENEMY_MISSILES
   130 6892 F0 6E			beq UEM_exit
   131 					
   132 				; check delta Y between the player and the enemy
   133 6894 A5 A8			lda m_playerLevelTopY_H1
   134 6896 38				sec
   135 6897 FD 97 67			sbc TabEnemyLevelTopY_H1,x
   136 689A 85 EB			sta m_pageZeroTempPointer
   137 689C A5 A7			lda m_playerLevelTopY_H2
   138 689E FD B7 67			sbc TabEnemyLevelTopY_H2,x
   139 68A1 85 EC			sta m_pageZeroTempPointer+1
   140
   141 68A3 A5 EB			lda m_pageZeroTempPointer
   142 68A5 18				clc
   143 68A6 69 20			adc #ENEMY_SHOOT_DELTA_Y
   144 68A8 85 EB			sta m_pageZeroTempPointer
   145 68AA A5 EC			lda m_pageZeroTempPointer+1
   146 68AC 69 00			adc #0
   147 68AE 85 EC			sta m_pageZeroTempPointer+1
   148 68B0 D0 50			bne UEM_exit	; abort if the high byte is already greater than 0
   149
   150 				; this works for a delta Y lower than 128 (lines)
   151 68B2 A5 EB			lda m_pageZeroTempPointer
   152 68B4 C9 40			cmp #[ENEMY_SHOOT_DELTA_Y*2]
   153 68B6 B0 4A			bcs UEM_exit
   154 					
   155 68B8			UEM_shot
   156 68B8 BC 77 66			ldy TabEnemyType,x
   157 68BB B9 5B 68			lda TabEnemyDefShootCooldown,y
   158 68BE 9D D7 66			sta TabEnemyStateTimer,x					; set shoot cooldown
   159
   160 				; update m_enemyShootDirection (1 - right, 2 - left)
   161
   162 				; player width = 4 pixels, enemy1 width = 8 pixels
   163 				; compare to see if: px + (pw/2) == ex + (ew/2) (the center of the player and the enemy)
   164 				; if player info is equal or greater, then player is to the right of the enemy
   165 68C1 A5 A2			lda m_playerLevelLeftX_H1
   166 68C3 38				sec
   167 68C4 E9 04			sbc #4
   168 68C6 85 D3			sta m_pageZeroTempValue
   169 68C8 A5 A1			lda m_playerLevelLeftX_H2
   170 68CA E9 00			sbc #0
   171
   172 68CC DD 77 67			cmp TabEnemyLevelLeftX_H2,x
   173 68CF 90 0E			bcc UEM_shoot_left
   174 68D1 D0 07			bne UEM_shoot_right
   175 					
   176 68D3 A5 D3			lda m_pageZeroTempValue
   177 68D5 DD 57 67			cmp TabEnemyLevelLeftX_H1,x
   178 68D8 90 05			bcc UEM_shoot_left
   179 					
   180 68DA			UEM_shoot_right
   181 68DA A9 01			lda #1
   182 68DC 4C E1 68			jmp UEM_just_shoot
   183 68DF			UEM_shoot_left
   184 68DF A9 02			lda #2
   185 68E1			UEM_just_shoot
   186 68E1 8D A9 32			sta m_enemyShootDirection
   187
   188 				; update shot creation pos (assuming left and right pos are the same in this case)
   189 68E4 BD D7 67			lda TabEnemyShotLevelLeftX_H1,x
   190 68E7 8D AA 32			sta m_enemyShotLevelLeftX_H1
   191 68EA BD F7 67			lda TabEnemyShotLevelLeftX_H2,x
   192 68ED 8D AB 32			sta m_enemyShotLevelLeftX_H2
   193 					
   194 68F0 BD 17 68			lda TabEnemyShotLevelTopY_H1,x
   195 68F3 8D AC 32			sta m_enemyShotLevelTopY_H1
   196 68F6 BD 37 68			lda TabEnemyShotLevelTopY_H2,x
   197 68F9 8D AD 32			sta m_enemyShotLevelTopY_H2
   198
   199 68FC 20 38 5D			jsr CheckCreateEnemyMissile
   200 					
   201 68FF EE A8 32			inc m_enemyMissilesActive
   202 					
   203 6902			UEM_exit
   204 				/*
   205 					lda m_lastEnemyIndexUpdated
   206 					ldy #23
   207 					jsr DisplayDebugInfoHexFF	
   208 				*/
   208
   209 6902 60				rts
   210
   211 					
   212 				;================================================================================
   213
   214 6903			HitEnemy
   215
   216 				; should not use x register
   217 6903 8E 9F 32			stx m_hitEnemySaveX
   218
   219 				; pass parameters in m_enemyCharPosX and m_enemyCharPosY
   220 				; get address of that char (clear it and the next one) --> comes in m_lineAddressLSB, m_lineAddressMSB
   221 				; get pixel xpos for pm hpos, get pixel ypos for explosion start line
   222
   223 				; search for enemy index at the left char position
   224 6906 A2 00			ldx #0
   225
   226 6908			HE_loop	
   227 6908 BD 17 67			lda TabEnemyBaseCharX,x
   228 690B CD 9C 32			cmp m_enemyCharPosX
   229 690E D0 1A			bne HE_next_enemy
   230 6910 BD 37 67			lda TabEnemyBaseCharY,x
   231 6913 CD 9D 32			cmp m_enemyCharPosY
   232 6916 D0 12			bne HE_next_enemy
   233
   234 6918			HE_found_pos
   235 6918 BD B7 66			lda TabEnemyState,x
   236 691B F0 66			beq HE_exit				; already disabled
   237 					
   238 691D BD 97 66			lda TabEnemyLife,x
   239 6920 F0 61			beq HE_exit				; already destroyed
   240
   241 6922 DE 97 66			dec TabEnemyLife,x
   242 6925 F0 0C			beq HE_destroy_enemy	; life reached 0
   243 					
   244 6927 4C 83 69			jmp HE_exit				; still alive (no feedback for now?)
   245
   246 692A			HE_next_enemy
   247 692A E8				inx
   248 692B EC A1 32			cpx m_totalEnemies
   249 692E D0 D8			bne HE_loop
   250 6930 4C 83 69			jmp HE_exit
   251 					
   252 6933			HE_destroy_enemy
   253 6933 A9 00			lda #0
   254 6935 9D B7 66			sta TabEnemyState,x
   255 					
   256 6938 CE A2 32			dec m_activeEnemies
   257 					
   258 693B AD B8 32			lda m_lineAddressLSB
   259 693E 85 E9			sta m_ptrLevelLine
   260 6940 AD B9 32			lda m_lineAddressMSB
   261 6943 85 EA			sta m_ptrLevelLine+1
   262 					
   263 6945 AC 9C 32			ldy m_enemyCharPosX
   264 6948 A9 00			lda #0
   265 694A 91 E9			sta (m_ptrLevelLine),y
   266 694C C8				iny
   267 694D 91 E9			sta (m_ptrLevelLine),y
   268
   269 				; init explosion info (clear previous explosion if there was one active)
   270 694F AD A0 32			lda m_numEnemyExplosions
   271 6952 F0 03			beq HE_no_explosions
   272 					
   273 6954 20 87 69			jsr EraseExplosionFrame
   274
   275 6957			HE_no_explosions
   276 6957 BD 77 67			lda TabEnemyLevelLeftX_H2,x
   277 695A 8D 95 32			sta m_enemyExplosionLevelLeftX_H2
   278 695D BD 57 67			lda TabEnemyLevelLeftX_H1,x
   279 6960 8D 94 32			sta m_enemyExplosionLevelLeftX_H1
   280 					
   281 6963 BD B7 67			lda TabEnemyLevelTopY_H2,x
   282 6966 8D 97 32			sta m_enemyExplosionLevelTopY_H2
   283 6969 BD 97 67			lda TabEnemyLevelTopY_H1,x
   284 696C 8D 96 32			sta m_enemyExplosionLevelTopY_H1
   285 696F A9 00			lda #0
   286 6971 8D 98 32			sta m_enemyExplosionLevelTopY_L1
   287
   288 6974 A9 01			lda #1
   289 6976 8D 9B 32			sta m_enemyExplosionStep
   290 6979 A9 00			lda #0
   291 697B 8D 9E 32			sta m_enemyExplosionStepIndex
   292
   293 697E A9 01			lda #1
   294 6980 8D A0 32			sta m_numEnemyExplosions		; 1 max for now
   295
   296 6983			HE_exit
   297 6983 AE 9F 32			ldx m_hitEnemySaveX
   298 					
   299 6986 60				rts
   300
   301 				;------------------------------------------------------------
   302 				; also clear enemy explosion if the player respawns
   303 				; also clear enemy missiles and m_enemyMissilesActive
   304
   305 6987			EraseExplosionFrame
   306 6987 A2 00			ldx #0
   307 6989 AC 99 32			ldy m_enemyExplosionScreenTopY_H1
   308
   309 698C			EEF_loop
   310 698C A9 00			lda #0
   311 698E 99 00 A5			sta p1_area_1,y
   312
   313 6991 98				tya
   314 6992 18				clc
   315 6993 6D 9B 32			adc m_enemyExplosionStep
   316 					;bcs EEF_exit				; comment this to allow "wrap around"
   317 6996 A8				tay
   318
   319 6997 E8				inx
   320 6998 EC 6E 66			cpx TabEnemyShapeSizeY		; should use and index here, if there is more than one enemy explosion
   321 699B D0 EF			bne EEF_loop
   322
   323 699D			EEF_exit
   324 699D 60				rts
   325
   326 				;------------------------------------------------------------
   327 699E			DrawExplosionFrame
   328 699E A2 00			ldx #0
   329 69A0 AC 99 32			ldy m_enemyExplosionScreenTopY_H1
   330
   331 69A3			DEF_loop
   332 69A3 BD 6F 66			lda TabEnemyShape_01,x
   333 69A6 99 00 A5			sta p1_area_1,y
   334
   335 69A9 98				tya
   336 69AA 18				clc
   337 69AB 6D 9B 32			adc m_enemyExplosionStep
   338 					;bcs DEF_exit				; comment this to allow "wrap around"
   339 69AE A8				tay
   340
   341 69AF E8				inx
   342 69B0 EC 6E 66			cpx TabEnemyShapeSizeY		; should use and index here, if there is more than one enemy explosion
   343 69B3 D0 EE			bne DEF_loop
   344
   345 69B5			DEF_exit
   346 69B5 60				rts
   347
   348 				;------------------------------------------------------------
   349 69B6			DrawEnemyExplosion
   350 69B6 AD A0 32			lda m_numEnemyExplosions
   351 69B9 D0 03			bne DEE_erase
   352 69BB 4C 35 6A			jmp DEE_exit
   353 					
   354 				; erase previous enemy explosion frame
   355 69BE			DEE_erase
   356 69BE 20 87 69			jsr EraseExplosionFrame
   357
   358 69C1			DEE_update_frame
   359 69C1 EE 9E 32			inc m_enemyExplosionStepIndex
   360 69C4 AE 9E 32			ldx m_enemyExplosionStepIndex
   361 69C7 E0 16			cpx #MAX_EXPLOSION_STEPS
   362 69C9 90 08			bcc DEE_do_update
   363 					
   364 				; reached end of the explosion
   365 69CB A9 00			lda #0
   366 69CD 8D A0 32			sta m_numEnemyExplosions
   367
   368 69D0 4C 35 6A			jmp DEE_exit
   369
   370 69D3			DEE_do_update
   371 69D3 BD 57 66			lda TabEnemyExplosionColor,x
   372 69D6 8D 13 D0			sta COLPM1
   373
   374 				; update step and explosion starting line
   375 				; if step +1 --> line - 3.5
   376 				; if step +2 --> line - 7.0
   377 69D9 AD 98 32			lda m_enemyExplosionLevelTopY_L1
   378 69DC 38				sec
   379 69DD E9 80			sbc #128
   380 69DF 8D 98 32			sta m_enemyExplosionLevelTopY_L1
   381
   382 69E2 AD 96 32			lda m_enemyExplosionLevelTopY_H1
   383 69E5 E9 03			sbc #3
   384 69E7 8D 96 32			sta m_enemyExplosionLevelTopY_H1
   385
   386 69EA AD 97 32			lda m_enemyExplosionLevelTopY_H2
   387 69ED E9 00			sbc #0
   388 69EF 8D 97 32			sta m_enemyExplosionLevelTopY_H2
   389
   390 69F2 EE 9B 32			inc m_enemyExplosionStep	; step +1 (delta between every explosion line, in this frame)
   391
   392 				; get new screen pos for the explosion
   393 				; this must use the "_H2" positions for when the delta between the explosion and the camera is too big (64 chars in X, or 32 chars in Y)
   394
   395 69F5 AD 94 32			lda m_enemyExplosionLevelLeftX_H1
   396 69F8 38				sec
   397 69F9 E5 DB			sbc m_levelWindowX_H1
   398 69FB 8D BD 32			sta m_screenDelta_H1
   399
   400 69FE AD 95 32			lda m_enemyExplosionLevelLeftX_H2
   401 6A01 E5 DA			sbc m_levelWindowX_H2
   402 6A03 90 1F			bcc DEE_set_outside			; this is not totally correct, because it doesn't use the width of the missile
   403 6A05 8D BC 32			sta m_screenDelta_H2		; (but if we do it correctly we should clip the missile graphics)
   404
   405 6A08 D0 1A			bne DEE_set_outside			; could remove the bcc and only use this..
   406 6A0A AD BD 32			lda m_screenDelta_H1
   407 6A0D C9 A0			cmp #[160]					; 40 chars x 4 pixels
   408 6A0F B0 13			bcs DEE_set_outside
   409 					
   410 6A11 69 30			adc #PM_BASE_SCREEN_X
   411 6A13 8D 9A 32			sta m_enemyExplosionScreenLeftX_H1
   412 					
   413
   414 6A16 AD 96 32			lda m_enemyExplosionLevelTopY_H1
   415 6A19 38				sec
   416 6A1A E5 DD			sbc m_levelWindowY_H1
   417
   418 6A1C 69 20			adc #PM_BASE_SCREEN_Y
   419 6A1E 8D 99 32			sta m_enemyExplosionScreenTopY_H1
   420
   421 6A21 4C 2C 6A			jmp DEE_update_hpos
   422
   423
   424 				; if outside the visible range in X or Y, just set it out of the screen (for a p/m the screen coordinate 0 is outside the visible range)
   425 6A24			DEE_set_outside
   426 6A24 A9 00			lda #0
   427 6A26 8D 9A 32			sta m_enemyExplosionScreenLeftX_H1
   428 6A29 8D 99 32			sta m_enemyExplosionScreenTopY_H1
   429
   430
   431 6A2C			DEE_update_hpos
   432 6A2C AD 9A 32			lda m_enemyExplosionScreenLeftX_H1
   433 6A2F 8D 01 D0			sta HPOSP1
   434
   435 				; draw new enemy explosion frame
   436 6A32			DEE_draw
   437 6A32 20 9E 69			jsr DrawExplosionFrame
   438
   439
   440 6A35			DEE_exit
   441 6A35 60				rts
   442
   359 6A36					icl "FloatPlatform.Asm"
Source: E:\_8BitProjects\Series\Scroller\FloatPlatform.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		FloatPlatform.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Local Storage
    15 				;**************************************************************************************************
    16 				;
    17 = 0006			FLOAT_PLATFORM_CHR_X    = 6
    18
    19 = 000F			FLOAT_PLATFORM_MAX_X	= 15
    20
    21 = 0005			FLOAT_PLATFORM_MAX_Y	= 5
    22
    23 = 0006			FLOAT_PLATFORM_TIMER	= 6
    24
    25 6A36 00 26 27 28 29 00	PlatformCharX			.byte $00, $26, $27, $28, $29, $00
    26
    27 6A3C 00 00 00 00 00 00 + PlatformLSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    28
    29 6A44 00 00 00 00 00 00 + PlatformMSB				.byte $00, $00, $00, $00, $00, $00, $00, $00 
    30
    31 6A4C 00 00 00 00 00 00 + PlatformTime 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    32
    33 6A54 00 00 00 00 00 00 + PlatformType 			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    34
    35 6A5C 00 00 00 00 00 00 + PlatformDirX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    36
    37 6A64 00 00 00 00 00 00 + PlatformStepX			.byte $00, $00, $00, $00, $00, $00, $00, $00
    38
    39 6A6C 00 00 00 00 00 00 + PlatformStepY			.byte $00, $00, $00, $00, $00, $00, $00, $00
    40
    41 6A74 26 A6		PlatformCharH			.byte $26, $A6
    42
    43 6A76 00 00		PlatformCharY			.byte $00, $00
    44
    45 6A78 00 00 00 00 00 00 + PlatformBaseLSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    46
    47 6A80 00 00 00 00 00 00 + PlatformBaseMSB			.byte $00, $00, $00, $00, $00, $00, $00, $00 
    48
    49 				;
    50 				;**************************************************************************************************
    51 				; PlatformControlH
    52 				;**************************************************************************************************
    53 6A88			.proc PlatformControlH
    54
    55 6A88 85 96				sta m_SaveRegA
    56 6A8A 86 97				stx m_SaveRegX
    57 6A8C 84 98				sty m_SaveRegY
    58 					
    59 6A8E AD 72 32				lda m_floatPlatformH
    60 6A91 D0 03				bne LoadIndex
    61 6A93 4C 3A 6B				jmp Exit 
    62 					
    63 6A96			LoadIndex
    64 				 
    65 6A96 AE 73 32				ldx m_floatPlatformIdx
    66 6A99 CA					dex 
    67 6A9A 86 92				stx m_param00
    68 					
    69 6A9C BD 4C 6A				lda PlatformTime, x
    70 6A9F C9 06				cmp #FLOAT_PLATFORM_TIMER
    71 6AA1 F0 09				beq PerformAnimation
    72 					
    73 6AA3 18					clc
    74 6AA4 69 01				adc #01
    75 6AA6 9D 4C 6A				sta PlatformTime, x
    76
    77 6AA9 4C 3A 6B				jmp Exit
    78 					
    79 6AAC			PerformAnimation
    80 					
    81 6AAC BD 3C 6A				lda PlatformLSB,x
    82 6AAF 85 EF				sta m_platformLevelPointer
    83 						
    84 6AB1 BD 44 6A				lda PlatformMSB,x
    85 6AB4 85 F0				sta m_platformLevelPointer+1
    86
    87 6AB6 BD 5C 6A				lda PlatformDirX, x
    88 6AB9 C9 00				cmp #$00
    89 6ABB F0 07				beq MoveForward
    90 					
    91 6ABD C5 01				cmp $01
    92 6ABF F0 35				beq MoveBack 		
    93 					
    94 6AC1 4C 3A 6B				jmp Exit
    95 						
    96 6AC4			MoveForward
    97 					
    98 6AC4 A0 00				ldy #$00	
    99 6AC6 A2 00				ldx #$00	
   100
   101 6AC8			moveF
   102 					
   103 6AC8 BD 36 6A				lda PlatformCharX, x
   104 6ACB 91 EF				sta (m_platformLevelPointer), y
   105 6ACD C8					iny
   106 6ACE E8					inx
   107 6ACF E0 06				cpx #FLOAT_PLATFORM_CHR_X
   108 6AD1 D0 F5				bne moveF
   109
   110 6AD3 A6 92				ldx m_param00		
   111
   112 6AD5 18					clc
   113 6AD6 BD 64 6A				lda PlatformStepX, x
   114 6AD9 69 01				adc #$01		
   115 6ADB 9D 64 6A				sta PlatformStepX, x
   116 6ADE C9 0F				cmp #FLOAT_PLATFORM_MAX_X	
   117 6AE0 F0 46				beq SetBackDir	
   118 					
   119 6AE2 18					clc
   120 6AE3 BD 3C 6A				lda PlatformLSB,x
   121 6AE6 69 01				adc #$01
   122 6AE8 9D 3C 6A				sta PlatformLSB,x
   123 6AEB BD 44 6A				lda PlatformMSB,x
   124 6AEE 69 00				adc #$00
   125 6AF0 9D 44 6A				sta PlatformMSB,x
   126 					
   127 6AF3 4C 35 6B				jmp ResetTime
   128 								 	
   129 6AF6			MoveBack
   130 					
   131 6AF6 A0 05				ldy #FLOAT_PLATFORM_CHR_X - 1	
   132 6AF8 A2 05				ldx #FLOAT_PLATFORM_CHR_X - 1
   133 					
   134 6AFA			moveB
   135 					
   136 6AFA BD 36 6A				lda PlatformCharX, x
   137 6AFD 91 EF				sta (m_platformLevelPointer), y
   138 6AFF 88					dey
   139 6B00 CA					dex
   140 6B01 E0 00				cpx #$00
   141 6B03 D0 F5				bne moveB
   142 					
   143 6B05 A6 92				ldx m_param00	
   144 					
   145 6B07 38					sec
   146 6B08 BD 64 6A				lda PlatformStepX, x
   147 6B0B E9 01				sbc #$01
   148 6B0D 9D 64 6A				sta PlatformStepX, x
   149 6B10 C9 00				cmp #$00
   150 6B12 F0 1C				beq SetForwardDir	
   151 						
   152 6B14 38					sec
   153 6B15 BD 3C 6A				lda PlatformLSB,x
   154 6B18 E9 01				sbc #$01
   155 6B1A 9D 3C 6A				sta PlatformLSB,x
   156 6B1D BD 44 6A				lda PlatformMSB,x	
   157 6B20 E9 00				sbc #0
   158 6B22 9D 44 6A				sta PlatformMSB,x
   159 						
   160 6B25 4C 35 6B				jmp ResetTime
   161
   162 6B28			SetBackDir
   163 					
   164 6B28 A9 01				lda #$01
   165 6B2A 9D 5C 6A				sta PlatformDirX, x
   166 6B2D 4C 35 6B				jmp ResetTime
   167
   168 6B30			SetForwardDir
   169 					
   170 6B30 A9 00				lda #$00
   171 6B32 9D 5C 6A				sta PlatformDirX, x
   172 					
   173 6B35			ResetTime
   174
   175 6B35 A9 00				lda #00
   176 6B37 9D 4C 6A				sta PlatformTime, x
   177 					
   178
   179 				;*****	Exit
   180 				;
   181 6B3A			Exit
   182
   183 6B3A A5 96				lda m_SaveRegA
   184 6B3C A6 97				ldx m_SaveRegX
   185 6B3E A4 98				ldy m_SaveRegY
   186 					
   187 6B40 60					rts
   188
   189 				.endp	
   360 6B41					icl "LevelLoader.Asm"
Source: E:\_8BitProjects\Series\Scroller\LevelLoader.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		LevelLoader.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; Constants
    15 				;**************************************************************************************************
    16 				;
    17 = 00FD			LN_BRK				= $FD
    18 = 00FE			LN_CRG				= $FE
    19 = 00FF			LN_EOD				= $FF
    20
    21 				;
    22 				;**************************************************************************************************
    23 				; 	LoadDisplayListData
    24 				;
    25 				;		Routine to load the desired display list data to Atari's LISTL and LISTH location.
    26 				;
    27 				;		Parameters:		m_param00	-	Length of data
    28 				;						m_paramW01	-	Source of data
    29 				;						m_paramW02	-	Destination of data
    30 				;
    31 				;		Destroy's A, X, and Y registers 
    32 				;
    33 				;**************************************************************************************************
    34 6B41			.proc LoadDisplayListData
    35
    36 6B41 A6 92				ldx m_param00
    37 6B43 A0 00				ldy #$00
    38
    39 				;*****	Loop until data length is reached	
    40 6B45			loop
    41 6B45 B1 E3				lda (m_paramW01), y
    42 6B47 91 E5				sta (m_paramW02), y
    43 6B49 C8					iny
    44 6B4A CA					dex
    45 6B4B D0 F8				bne loop
    46 						
    47 6B4D 60					rts
    48
    49 				.endp
    50
    51 				;
    52 				;**************************************************************************************************
    53 				; LoadLevel
    54 				;
    55 				;	Level index is passed in zero page PARAM01
    56 				;
    57 				;**************************************************************************************************
    58 6B4E			.proc LoadLevel
    59
    60 6B4E A6 93				ldx m_param01
    61 								
    62 6B50 BD 02 30				lda LevelsAddr_LSB,x					; get the LSB for the requested levels data
    63 6B53 85 E7				sta m_ptrLevelAddr						; store it in our zero page pointer
    64 6B55 BD 03 30				lda LevelsAddr_MSB,x					; get the MSB for the requested levels data
    65 6B58 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
    66 						
    67 6B5A A9 00				lda #$00								; initialize the counters
    68 6B5C 8D B0 32				sta m_scrYCount		
    69 6B5F 8D B1 32				sta m_datYCount
    70 						
    71 6B62 A8					tay										; begin with the Y register set
    72
    73 				;************************************************
    74 				;
    75 6B63			GetNextRowCol		
    76 						
    77 6B63 AC B1 32				ldy m_datYCount		
    78 6B66 B1 E7				lda (m_ptrLevelAddr), y					; make sure this level is valid (while not EOD)
    79 6B68 C9 FF				cmp #LN_EOD								; check for eof of level data
    80 6B6A F0 65				beq ExitLoadLevel						; true jump to exit
    81
    82 6B6C			StoreRow
    83 						
    84 6B6C 8D AE 32				sta	m_currRow							; save off the first byte the current row
    85
    86 6B6F EE B1 32				inc m_datYCount							; increment for COLS value
    87 6B72 AC B1 32				ldy m_datYCount							; use it
    88 6B75 B1 E7				lda (m_ptrLevelAddr),y					; make sure this level is valid
    89 6B77 8D AF 32				sta m_currCol							; now we have the current column
    90 						
    91 6B7A AE AF 32				ldx m_currCol
    92 6B7D BD DB 32				lda TabLevelLineAddressLSB,x			; get the low part of the screen address by row
    93 6B80 18					clc
    94 6B81 6D AE 32				adc m_currRow		
    95 6B84 85 E9				sta m_ptrLevelLine						; save it off to the current line address		
    96 6B86 BD DB 33				lda TabLevelLineAddressMSB,x			; get the low part of the screen address by row
    97 6B89 69 00				adc #$00
    98 6B8B 85 EA				sta m_ptrLevelLine + 1					; save it off to the current line address
    99
   100 				;************************************************
   101 				;
   102 6B8D			SetCharacter
   103 				  		
   104 6B8D EE B1 32		  		inc m_datYCount							; increment for next COLS value
   105 6B90 AC B1 32				ldy m_datYCount							; use the value
   106
   107 6B93 B1 E7				lda (m_ptrLevelAddr),y					; check for line break
   108 6B95 C9 FD				cmp #LN_BRK								; did we hit it 
   109 6B97 F0 0B				beq GetNextDataLine						; go reset the counters and test for carriage return  
   110
   111 				;		sta mm_currChar							; hold the maps character		
   112 				;		lda mm_currChar							; get the character back
   113
   114 6B99 AC B0 32				ldy m_scrYCount
   115 6B9C 91 E9				sta (m_ptrLevelLine),y					; store it at location
   116 6B9E EE B0 32				inc m_scrYCount
   117 						
   118 6BA1 4C 8D 6B				jmp SetCharacter						; do the process all over
   119 						
   120 				;************************************************
   121 				;
   122 6BA4			GetNextDataLine
   123 						
   124 6BA4 A9 00				lda #$00
   125 6BA6 8D B0 32				sta m_scrYCount
   126 						
   127 6BA9 EE B1 32		  		inc m_datYCount							; increment for next COLS value
   128 6BAC AC B1 32				ldy m_datYCount							; use the value
   129 6BAF B1 E7				lda (m_ptrLevelAddr), y					; load up the next level data item
   130 						
   131 6BB1 C9 FE				cmp #LN_CRG								; check for carraige return
   132 6BB3 F0 03				beq SetNextRowCol						; true get the next row of data
   133 						
   134 6BB5 4C 6C 6B				jmp StoreRow		
   135
   136 6BB8			SetNextRowCol
   137 6BB8 EE B1 32				inc m_datYCount		
   138 						
   139 6BBB 18					clc
   140 6BBC A5 E7				lda m_ptrLevelAddr					; get the LSB for the requested levels data
   141 6BBE 6D B1 32				adc m_datYCount
   142 6BC1 85 E7				sta m_ptrLevelAddr
   143 6BC3 A5 E8				lda m_ptrLevelAddr + 1
   144 6BC5 69 00				adc #$00
   145 6BC7 85 E8				sta m_ptrLevelAddr + 1					; store it in our zero page pointer
   146
   147 6BC9 A9 00				lda #$00
   148 6BCB 8D B1 32				sta m_datYCount
   149
   150 6BCE 4C 63 6B				jmp GetNextRowCol			
   151 				 
   152 				;************************************************
   153 				;
   154 6BD1			ExitLoadLevel
   155
   156 6BD1 60					rts
   157 					
   158 				.endp			
   361 6BD2					icl "JoyKeyAndCollision.Asm"
Source: E:\_8BitProjects\Series\Scroller\JoyKeyAndCollision.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		JoyKeyAndCollision.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				; CheckInput
    15 				;**************************************************************************************************
    16 				;
    17 6BD2			.proc CheckInput
    18
    19 				;*****	Check Stick
    20 				;
    21 6BD2			CI_check_stick
    22 						
    23 6BD2 A5 DE				lda m_stick0
    24 6BD4 85 DF				sta m_oldStick0
    25
    26 6BD6 AD 00 D3				lda PORTA
    27 6BD9 29 0F				and #15
    28 6BDB 85 DE				sta m_stick0
    29
    30 				;*****	Check Shoot Right
    31 				;
    32 6BDD			CI_check_shoot_right
    33 						
    34 6BDD C9 08				cmp #%1000								; right
    35 6BDF B0 07				bcs CI_check_shoot_left
    36 						
    37 6BE1 A9 01				lda #PSD_RIGHT
    38 6BE3 85 CE				sta m_lastPlayerShootDirection
    39 6BE5 4C F0 6B				jmp CI_check_trigger
    40
    41 				;*****	Check Shoot Left
    42 				;
    43 6BE8			CI_check_shoot_left
    44 						
    45 6BE8 29 04				and #%0100								; left
    46 6BEA D0 04				bne CI_check_trigger
    47 					
    48 6BEC A9 02				lda #PSD_LEFT
    49 6BEE 85 CE				sta m_lastPlayerShootDirection
    50
    51 				;*****	Check Trigger
    52 				;
    53 6BF0			CI_check_trigger
    54 					
    55 6BF0 A5 E2				lda m_currentTrigger0
    56 6BF2 85 E0				sta m_oldTrigger0
    57
    58 6BF4 AD 10 D0				lda TRIG0								; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
    59 6BF7 85 E2				sta m_currentTrigger0	
    60 6BF9 0A					asl
    61 6BFA 05 E0				ora m_oldTrigger0
    62 6BFC 49 03				eor #%11
    63 6BFE 85 E1				sta m_triggerState
    64 							
    65 6C00 A9 03				lda #0+GRACTL_OPTIONS					; reset trigger latches	
    66 6C02 8D 1D D0				sta GRACTL								; reset triggers latch mode
    67 					
    68 6C05 A9 07				lda #4+GRACTL_OPTIONS
    69 6C07 8D 1D D0				sta GRACTL								; set triggers latch mode
    70
    71 6C0A 60					rts
    72 						
    73 				.endp	
    74 					
    75 				;
    76 				;**************************************************************************************************
    77 				; CheckPMCollisions
    78 				;**************************************************************************************************
    79 				;
    80 6C0B			.proc CheckPMCollisions
    81 					
    82 				;*****	Check Player 0 Playfield 3
    83 				;
    84 6C0B AD 0A D0				lda M2PL
    85 6C0E 29 0B				and #%1011
    86 6C10 F0 08				beq check_p0_pf3
    87 								
    88 6C12 A2 07				ldx #PS_LOSE
    89 6C14 20 FD 4E				jsr SetPlayerMethod
    90 6C17 4C 44 6C				jmp CPMC_check_m0_pf0_3
    91
    92 				;*****	Check Player 0 Playfield 3
    93 				;
    94 6C1A			check_p0_pf3
    95 						
    96 6C1A AD 04 D0				lda P0PF
    97 6C1D 29 08				and #%1000
    98 6C1F F0 08				beq CPMC_check_m2_pl0
    99
   100 6C21 A2 07				ldx #PS_LOSE
   101 6C23 20 FD 4E				jsr SetPlayerMethod
   102 6C26 4C 44 6C				jmp CPMC_check_m0_pf0_3
   103 						
   104 				;*****	Check Missile 2 Player 0
   105 				;
   106 6C29			CPMC_check_m2_pl0
   107 					
   108 6C29 AD 0A D0				lda M2PL
   109 6C2C 29 01				and #%0001
   110 6C2E F0 08				beq CPMC_check_m3_pl0
   111
   112 6C30 A2 07				ldx #PS_LOSE
   113 6C32 20 FD 4E				jsr SetPlayerMethod
   114 6C35 4C 44 6C				jmp CPMC_check_m0_pf0_3
   115
   116 				;*****	Check Missile 3 Player 0
   117 				;
   118 6C38			CPMC_check_m3_pl0
   119
   120 6C38 AD 0B D0				lda M3PL
   121 6C3B 29 01				and #%0001
   122 6C3D F0 05				beq CPMC_check_m0_pf0_3
   123
   124 6C3F A2 07				ldx #PS_LOSE
   125 6C41 20 FD 4E				jsr SetPlayerMethod
   126
   127 				;*****	Check Missile 0 Player 0-3
   128 				;
   129 6C44			CPMC_check_m0_pf0_3
   130 					
   131 6C44 AD 00 D0				lda M0PF
   132 6C47 29 09				and #%1001
   133 6C49 F0 00				beq CPMC_check_m1_pf0_3
   134
   135 				;*****	Check Missile 1 Player 0-3
   136 				;
   137 6C4B			CPMC_check_m1_pf0_3
   138 					
   139 6C4B AD 01 D0				lda M1PF
   140 6C4E 29 09				and #%1001
   141 6C50 F0 00				beq ClearPMCollisions
   142
   143 				;*****	Check PM Collisions
   144 				;
   145 6C52			ClearPMCollisions
   146
   147 6C52 A9 00				lda #0
   148 6C54 8D 1E D0				sta HITCLR		
   149 						
   150 6C57 60					rts
   151
   152 				.endp		
   153
   362 6C58					icl "AudioManager.Asm"
Source: E:\_8BitProjects\Series\Scroller\AudioManager.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AudioManager.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13
    14 6C58			.proc	SfxOff
    15
    16 6C58 A9 F0			lda #$f0					;initial value
    17 6C5A 8D 4E 25			sta RMTSFXVOLUME			;sfx note volume * 16 (0,16,32,...,240)
    18 				;
    19 6C5D A9 FF			lda #$ff					;initial value
    20 6C5F 85 99			sta m_sfxEffect
    21 				;
    22 6C61 A2 00			ldx #<SoundAddress					;low byte of RMT module to X reg
    23 6C63 A0 40			ldy #>SoundAddress					;hi byte of RMT module to Y reg
    24 6C65 A9 02			lda #$02						;starting song line 0-255 to A reg
    25 6C67 20 00 24			jsr RASTERMUSICTRACKER		;Init
    26
    27 				; 		 lda #0             ; silence sound output
    28 				;	     sta m_sfxBusy
    29 				;         sta m_sfxLEFT
    30 				;         sta m_sfxRIGHT
    31 				;         
    32 				;         sta AUDCTL								; clear sound
    33 				;		 
    34 				;		 sta AUDC1
    35 				;	     sta AUDC2
    36 				;	     sta AUDC3
    37 				;	     sta AUDF4
    38 				;		 
    39 				;		 sta AUDF1
    40 				;	     sta AUDF2
    41 				;	     sta AUDF3
    42 				;	     sta AUDF4
    43 					     
    44 6C6A 60			         rts
    45 				.endp
    46
    47 6C6B			.proc SfxTrigger
    48 						 
    49 				;		 lda m_sfxBusy
    50 				;		 cmp #$01
    51 				;	 	 bne seteffect
    52 				;		 
    53 				;		 rts
    54 				;		 
    55 6C6B			seteffect
    56 				;         ldx m_sfxLEFT       ; test left channel
    57 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle 
    58 				;         bne leftnotfree   ; if not 0 then skip ahead
    59 				;         sty m_sfxLEFT       ; channel is idle, use it
    60 				;		 lda #$01
    61 				;		 sta m_sfxBusy
    62 				;         rts                ; all done
    63 				;
    64 6C6B			leftnotfree 
    65 				;         ldx m_sfxRIGHT      ; test right channel
    66 				;         lda SFX_CV,x        ; CV value will be 0 if channel is idle
    67 				;         bne rightnotfree  ; if not 0 then skip ahead
    68 				;         sty m_sfxRIGHT      ; channel is idle, use it
    69 				;		 lda #$01
    70 				;		 sta m_sfxBusy
    71 6C6B 60			         rts                ; all done
    72
    73 6C6C			rightnotfree
    74 				;         cpy m_sfxLEFT       ; test sfx priority with left channel
    75 				;         bcc leftnotlower  ; skip ahead if new sfx has lower priority than active sfx
    76 				;         sty m_sfxLEFT       ; new sfx has higher priority so use left channel
    77 				;		 lda #$01
    78 				;		 sta m_sfxBusy
    79 6C6C 60			         rts                ; all done
    80
    81 6C6D			leftnotlower 
    82 				;         cpy m_sfxRIGHT      ; test sfx with right channel
    83 				;         bcc rightnotlower ; skip ahead if new sfx has lower priority than active sfx
    84 				;         sty m_sfxRIGHT      ; new sfx has higher priority so use right channel
    85 				; 		 lda #$01
    86 				;		 sta m_sfxBusy
    87 						 
    88 6C6D			rightnotlower
    89 						
    90 						
    91 6C6D 60			        rts
    92
    93 				.endp
    94
    95
    96 6C6E			.proc SfxUpdate
    97 6C6E A5 99			lda m_sfxEffect
    98 6C70 30 0D			bmi lab2
    99 6C72 0A				asl 						; * 2
   100 6C73 A8				tay							;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   101 6C74 A2 03			ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   102 6C76 A9 0C			lda #12						;A = 12			note (0..60)
   103 6C78 20 0F 24			jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   104 				;
   105 6C7B A9 FF			lda #$ff
   106 6C7D 85 99			sta m_sfxEffect				;reinit value
   107 				;
   108 6C7F			lab2
   109 6C7F 20 03 24			jsr RASTERMUSICTRACKER+3	;1 play
   110 6C82 60				rts
   111 					
   112 				;	lda #%11101010
   113 				;	sta AUDCTL
   114 				;	ldx m_sfxLEFT       ; get the pointer for the left channel
   115 				;    lda SFX_F,x         ; get the Frequency value
   116 				;    sta AUDF1          ; update the Frequency register
   117 				;    lda SFX_CV,x        ; get the combined Control and Volume value
   118 				;    sta AUDC1          ; update the Volume register
   119 				;    lsr                ; prep the Control value,
   120 				;    lsr                ;   it's stored in the upper nybble
   121 				;	lsr                ;   but must be in the lower nybble
   122 				;	lsr                ;   when Control is updated
   123 				;	sta AUDC1          ; update the Control register
   124 				;	beq skipleftdec   ; skip ahead if Control = 0
   125 				;	dec m_sfxLEFT       ; update pointer for left channel
   126 				;skipleftdec 
   127 				;	ldx m_sfxRIGHT      ; get the pointer for the right channel
   128 				;	lda SFX_F,x         ; get the Frequency value
   129 				;	sta AUDF2          ; update the Frequency register
   130 				;	lda SFX_CV,x        ; get the combined Control and Volume value
   131 				;    sta AUDC2          ; update the Volume register
   132 				;    lsr                ; prep the Control value,
   133 				;    lsr                ;   it's stored in the upper nybble
   134 				;    lsr                ;   but must be in the lower nybble
   135 				;    lsr                ;   when Control is updated
   136 				;    sta AUDC2         ; update the Control register
   137 				;	beq skiprightdec  ; skip ahead if Control = 0
   138 				;    dec m_sfxRIGHT      ; update pointer for right channel
   139 				;skiprightdec
   140 				;	lda m_sfxLeft
   141 				;	cmp #$00
   142 				;	bne noreset
   143 				;	sta m_sfxBusy
   144 				;noreset	
   145 				;    rts                ; all done
   146 				.endp
   147
   363 6C83					icl "rmtplayr.asm"
Source: E:\_8BitProjects\Series\Scroller\rmtplayr.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 					IFT STEREOMODE==1
    25 				TRACKS		equ 8
    26 					ELS
    27 = 0004			TRACKS		equ 4
    28 					EIF
    29 				;*
    30 = 2400			PLAYER		equ SoundPlayerAddress
    31 				;*
    32 				;* RMT FEATures definitions file
    33 				;* For optimizations of RMT player routine to concrete RMT modul only!
    34 6C83				icl "rmt_feat.asm"
Source: E:\_8BitProjects\Series\Scroller\rmt_feat.asm
     1 				;*
     2 				;* RMT FEATures definitions
     3 				;*
     4 				;* For optimizations of RMT player routine to concrete RMT modul only!
     5 				;* --------BEGIN--------
     6 				;* asm_src/sfx/sfx.rmt
     7 = 0001			FEAT_SFX		equ 1
     8 = 0000			FEAT_GLOBALVOLUMEFADE	equ 0		;RMTGLOBALVOLUMEFADE variable
     9 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
    10 = 0001			FEAT_INSTRSPEED		equ 1
    11 = 0009			FEAT_CONSTANTSPEED		equ 9		;(0 times)
    12 = 0001			FEAT_COMMAND1		equ 1		;(96 times)
    13 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
    14 = 0001			FEAT_COMMAND3		equ 1		;(1 times)
    15 = 0001			FEAT_COMMAND4		equ 1		;(1 times)
    16 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    17 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    18 = 0001			FEAT_COMMAND7SETNOTE		equ 1		;(1 times)
    19 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    20 = 0000			FEAT_PORTAMENTO		equ 0		;(0 times)
    21 = 0000			FEAT_FILTER		equ 0		;(0 times)
    22 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    23 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    24 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    25 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    26 = 0000			FEAT_BASS16		equ 0		;(0 times)
    27 = 0000			FEAT_BASS16G1L		equ 0		;(0 times)
    28 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    29 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    30 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    32 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    33 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    34 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    35 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    36 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    37 = 0000			FEAT_TABLETYPE		equ 0		;(0 times)
    38 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    39 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    40 = 0000			FEAT_AUDCTLMANUALSET		equ 0		;(0 times)
    41 = 0000			FEAT_VOLUMEMIN		equ 0		;(0 times)
    42 = 0000			FEAT_EFFECTVIBRATO		equ 0		;(0 times)
    43 = 0000			FEAT_EFFECTFSHIFT		equ 0		;(0 times)
    44 				;* --------END--------
    35 				;*
    36 				;* RMT ZeroPage addresses
    37 					;org $80
    38 					IFT FEAT_COMMAND2
    39 				frqaddcmd2					org *+1
    40 					EIF
    41
    42 					IFT TRACKS>4
    43 					org PLAYER-$400+$40
    44 					ELS
    45 6C83				org PLAYER-$400+$e0
    46 					EIF
    47 					
    48 20E0			track_variables
    49 20E0			trackn_db	org *+TRACKS
    50 20E4			trackn_hb	org *+TRACKS
    51 20E8			trackn_idx	org *+TRACKS
    52 20EC			trackn_pause	org *+TRACKS
    53 20F0			trackn_note	org *+TRACKS
    54 20F4			trackn_volume	org *+TRACKS
    55 20F8			trackn_distor 	org *+TRACKS
    56 20FC			trackn_shiftfrq	org *+TRACKS
    57 					IFT FEAT_PORTAMENTO
    58 				trackn_portafrqc org *+TRACKS
    59 				trackn_portafrqa org *+TRACKS
    60 				trackn_portaspeed org *+TRACKS
    61 				trackn_portaspeeda org *+TRACKS
    62 				trackn_portadepth org *+TRACKS
    63 					EIF
    64 2100			trackn_instrx2	org *+TRACKS
    65 2104			trackn_instrdb	org *+TRACKS
    66 2108			trackn_instrhb	org *+TRACKS
    67 210C			trackn_instridx	org *+TRACKS
    68 2110			trackn_instrlen	org *+TRACKS
    69 2114			trackn_instrlop	org *+TRACKS
    70 2118			trackn_instrreachend	org *+TRACKS
    71 211C			trackn_volumeslidedepth org *+TRACKS
    72 2120			trackn_volumeslidevalue org *+TRACKS
    73 					IFT FEAT_VOLUMEMIN
    74 				trackn_volumemin		org *+TRACKS
    75 					EIF
    76 = 0000			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    77 					IFT FEAT_EFFECTS
    78 				trackn_effdelay			org *+TRACKS
    79 					EIF
    80 					IFT FEAT_EFFECTVIBRATO
    81 				trackn_effvibratoa		org *+TRACKS
    82 					EIF
    83 					IFT FEAT_EFFECTFSHIFT
    84 				trackn_effshift		org *+TRACKS
    85 					EIF
    86 2124			trackn_tabletypespeed org *+TRACKS
    87 					IFT FEAT_TABLEMODE
    88 				trackn_tablemode	org *+TRACKS
    89 					EIF
    90 2128			trackn_tablenote	org *+TRACKS
    91 212C			trackn_tablea		org *+TRACKS
    92 2130			trackn_tableend		org *+TRACKS
    93 					IFT FEAT_TABLEGO
    94 				trackn_tablelop		org *+TRACKS
    95 					EIF
    96 2134			trackn_tablespeeda	org *+TRACKS
    97 					IFT FEAT_FILTER||FEAT_BASS16
    98 				trackn_command		org *+TRACKS
    99 					EIF
   100 					IFT FEAT_BASS16
   101 				trackn_outnote		org *+TRACKS
   102 					EIF
   103 					IFT FEAT_FILTER
   104 				trackn_filter		org *+TRACKS
   105 					EIF
   106 2138			trackn_audf	org *+TRACKS
   107 213C			trackn_audc	org *+TRACKS
   108 					IFT FEAT_AUDCTLMANUALSET
   109 				trackn_audctl	org *+TRACKS
   110 					EIF
   111 2140			v_aspeed		org *+1
   112 2141			track_endvariables
   113 2141					org PLAYER-$100-$140-$40+2
   114 = 000C			INSTRPAR	equ 12
   115 2182			tabbeganddistor
   116 2182-2191> 80 00		 dta frqtabpure-frqtab,$00
   117 2184 80 20		 dta frqtabpure-frqtab,$20
   118 2186 80 40		 dta frqtabpure-frqtab,$40
   119 2188 00 C0		 dta frqtabbass1-frqtab,$c0
   120 218A 80 80		 dta frqtabpure-frqtab,$80
   121 218C 80 A0		 dta frqtabpure-frqtab,$a0
   122 218E 00 C0		 dta frqtabbass1-frqtab,$c0
   123 2190 40 C0		 dta frqtabbass2-frqtab,$c0
   124 						IFT FEAT_EFFECTVIBRATO
   125 				vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   126 				vib0	dta 0
   127 				vib1	dta 1,-1,-1,1
   128 				vib2	dta 1,0,-1,-1,0,1
   129 				vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   130 				vibtabnext
   131 						dta vib0-vib0+0
   132 						dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   133 						dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   134 						dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   135 						EIF
   136 2192					org PLAYER-$100-$140
   137 					IFT FEAT_BASS16
   138 				frqtabbasslo
   139 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   140 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   141 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   142 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   143 					EIF
   144 21C0					org PLAYER-$100-$100
   145 2200			frqtab
   146 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   147 2200			frqtabbass1
   148 2200-22BF> BF B6 AA A1 + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   149 2210 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   150 2220 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   151 2230 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   152 2240			frqtabbass2
   153 2240 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   154 2250 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   155 2260 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   156 2270 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   157 2280			frqtabpure
   158 2280 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   159 2290 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   160 22A0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   161 22B0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   162 					IFT FEAT_BASS16
   163 				frqtabbasshi
   164 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   165 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   166 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   167 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   168 					EIF
   169 22C0					org PLAYER-$0100
   170 2300			volumetab
   171 2300-271F> 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   172 2310 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   173 2320 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   174 2330 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   175 2340 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   176 2350 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   177 2360 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   178 2370 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   179 2380 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   180 2390 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   181 23A0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   182 23B0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   183 23C0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   184 23D0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   185 23E0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   186 23F0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   187 2400				org PLAYER
   188 				;*
   189 				;* Set of RMT main vectors:
   190 				;*
   191 2400			RASTERMUSICTRACKER
   192 2400 4C 12 24			jmp rmt_init
   193 2403 4C A4 25			jmp rmt_play
   194 2406 4C BE 25			jmp rmt_p3
   195 2409 4C 4D 24			jmp rmt_silence
   196 240C 4C EA 26			jmp SetPokey
   197 					IFT FEAT_SFX
   198 240F 4C 4A 25			jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   199 					EIF
   200 2412			rmt_init
   201 2412 86 88			stx ns
   202 2414 84 89			sty ns+1
   203 					IFT FEAT_NOSTARTINGSONGLINE==0
   204 2416 48				pha
   205 					EIF
   206 					IFT track_endvariables-track_variables>255
   207 					ldy #0
   208 					tya
   209 				ri0	sta track_variables,y
   210 					sta track_endvariables-$100,y
   211 					iny
   212 					bne ri0
   213 					ELS
   214 2417 A0 61			ldy #track_endvariables-track_variables
   215 2419 A9 00			lda #0
   216 241B 99 DF 20		ri0	sta track_variables-1,y
   217 241E 88				dey
   218 241F D0 FA			bne ri0
   219 					EIF
   220 2421 A0 04			ldy #4
   221 2423 B1 88			lda (ns),y
   222 2425 8D B2 25			sta v_maxtracklen
   223 2428 C8				iny
   224 					IFT FEAT_CONSTANTSPEED==0
   225 					lda (ns),y
   226 					sta v_speed
   227 					EIF
   228 					IFT FEAT_INSTRSPEED==0
   229 					iny
   230 					lda (ns),y
   231 					sta v_instrspeed
   232 					sta v_ainstrspeed
   233 					ELI FEAT_INSTRSPEED>1
   234 					lda #FEAT_INSTRSPEED
   235 					sta v_ainstrspeed
   236 					EIF
   237 2429 A0 08			ldy #8
   238 242B B1 88		ri1	lda (ns),y
   239 242D 99 78 00			sta p_tis-8,y
   240 2430 C8				iny
   241 2431 C0 10			cpy #8+8
   242 2433 D0 F6			bne ri1
   243 					IFT FEAT_NOSTARTINGSONGLINE==0
   244 2435 68				pla
   245 2436 48				pha
   246 					IFT TRACKS>4
   247 					asl @
   248 					asl @
   249 					asl @
   250 					clc
   251 					adc p_song
   252 					sta p_song
   253 					pla
   254 					php
   255 					and #$e0
   256 					asl @
   257 					rol @
   258 					rol @
   259 					rol @
   260 					ELS
   261 2437 0A				asl @
   262 2438 0A				asl @
   263 2439 18				clc
   264 243A 65 86			adc p_song
   265 243C 85 86			sta p_song
   266 243E 68				pla
   267 243F 08				php
   268 2440 29 C0			and #$c0
   269 2442 0A				asl @
   270 2443 2A				rol @
   271 2444 2A				rol @
   272 					EIF
   273 2445 28				plp
   274 2446 65 87			adc p_song+1
   275 2448 85 87			sta p_song+1
   276 					EIF
   277 244A 20 62 24			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   278 244D			rmt_silence
   279 					IFT STEREOMODE>0
   280 					lda #0
   281 					sta $d208
   282 					sta $d218
   283 					ldy #3
   284 					sty $d20f
   285 					sty $d21f
   286 					ldy #8
   287 				si1	sta $d200,y
   288 					sta $d210,y
   289 					dey
   290 					bpl si1
   291 					ELS
   292 244D A9 00			lda #0
   293 244F 8D 08 D2			sta $d208
   294 2452 A0 03			ldy #3
   295 2454 8C 0F D2			sty $d20f
   296 2457 A0 08			ldy #8
   297 2459 99 00 D2		si1	sta $d200,y
   298 245C 88				dey
   299 245D 10 FA			bpl si1
   300 					EIF
   301 					IFT FEAT_INSTRSPEED==0
   302 					lda v_instrspeed
   303 					ELS
   304 245F A9 01			lda #FEAT_INSTRSPEED
   305 					EIF
   306 2461 60				rts
   307 2462			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   308 2462			GetSongLine
   309 2462 A2 00			ldx #0
   310 2464 8E B0 25			stx v_abeat
   311 2467			nn0
   312 2467 8A			nn1	txa
   313 2468 A8				tay
   314 2469 B1 86			lda (p_song),y
   315 246B C9 FE			cmp #$fe
   316 246D B0 2D			bcs nn2
   317 246F A8				tay
   318 2470 B1 82			lda (p_trackslbstable),y
   319 2472 9D E0 20			sta trackn_db,x
   320 2475 B1 84			lda (p_trackshbstable),y
   321 2477 9D E4 20		nn1a sta trackn_hb,x
   322 247A A9 00			lda #0
   323 247C 9D E8 20			sta trackn_idx,x
   324 247F A9 01			lda #1
   325 2481 9D EC 20		nn1a2 sta trackn_pause,x
   326 2484 A9 80			lda #$80
   327 2486 9D 00 21			sta trackn_instrx2,x
   328 2489 E8				inx
   329 248A E0 04		xtracks01	cpx #TRACKS
   330 248C D0 D9			bne nn1
   331 248E A5 86			lda p_song
   332 2490 18				clc
   333 2491 69 04		xtracks02	adc #TRACKS
   334 2493 85 86			sta p_song
   335 2495 90 1B			bcc GetTrackLine
   336 2497 E6 87			inc p_song+1
   337 2499			nn1b
   338 2499 4C B2 24			jmp GetTrackLine
   339 249C			nn2
   340 249C F0 04			beq nn3
   341 249E			nn2a
   342 249E A9 00			lda #0
   343 24A0 F0 DF			beq nn1a2
   344 24A2			nn3
   345 24A2 A0 02			ldy #2
   346 24A4 B1 86			lda (p_song),y
   347 24A6 AA				tax
   348 24A7 C8				iny
   349 24A8 B1 86			lda (p_song),y
   350 24AA 85 87			sta p_song+1
   351 24AC 86 86			stx p_song
   352 24AE A2 00			ldx #0
   353 24B0 F0 B5			beq nn0
   354 24B2			GetTrackLine
   355 24B2			oo0
   356 24B2			oo0a
   357 					IFT FEAT_CONSTANTSPEED==0
   358 					lda #$ff
   359 				v_speed equ *-1
   360 					sta v_bspeed
   361 					EIF
   362 24B2 A2 FF			ldx #-1
   363 24B4			oo1
   364 24B4 E8				inx
   365 24B5 DE EC 20			dec trackn_pause,x
   366 24B8 D0 42			bne oo1x
   367 24BA			oo1b
   368 24BA BD E0 20			lda trackn_db,x
   369 24BD 85 88			sta ns
   370 24BF BD E4 20			lda trackn_hb,x
   371 24C2 85 89			sta ns+1
   372 24C4			oo1i
   373 24C4 BC E8 20			ldy trackn_idx,x
   374 24C7 FE E8 20			inc trackn_idx,x
   375 24CA B1 88			lda (ns),y
   376 24CC 85 8E			sta reg1
   377 24CE 29 3F			and #$3f
   378 24D0 C9 3D			cmp #61
   379 24D2 F0 0E			beq oo1a
   380 24D4 B0 32			bcs oo2
   381 24D6 9D F0 20			sta trackn_note,x
   382 					IFT FEAT_BASS16
   383 					sta trackn_outnote,x
   384 					EIF
   385 24D9 C8				iny
   386 24DA B1 88			lda (ns),y
   387 24DC 4A				lsr @
   388 24DD 29 7E			and #$3f*2
   389 24DF 9D 00 21			sta trackn_instrx2,x
   390 24E2			oo1a
   391 24E2 A9 01			lda #1
   392 24E4 9D EC 20			sta trackn_pause,x
   393 24E7 BC E8 20			ldy trackn_idx,x
   394 24EA FE E8 20			inc trackn_idx,x
   395 24ED B1 88			lda (ns),y
   396 24EF 4A				lsr @
   397 24F0 66 8E			ror reg1
   398 24F2 4A				lsr @
   399 24F3 66 8E			ror reg1
   400 24F5 A5 8E			lda reg1
   401 					IFT FEAT_GLOBALVOLUMEFADE
   402 					sec
   403 					sbc #$00
   404 				RMTGLOBALVOLUMEFADE equ *-1
   405 					bcs voig
   406 					lda #0
   407 				voig
   408 					EIF
   409 24F7 29 F0			and #$f0
   410 24F9 9D F4 20			sta trackn_volume,x
   411 24FC			oo1x
   412 24FC E0 03		xtracks03sub1	cpx #TRACKS-1
   413 24FE D0 B4			bne oo1
   414 					IFT FEAT_CONSTANTSPEED==0
   415 					lda #$ff
   416 				v_bspeed equ *-1
   417 					sta v_speed
   418 					ELS
   419 2500 A9 09			lda #FEAT_CONSTANTSPEED
   420 					EIF
   421 2502 8D 40 21			sta v_aspeed
   422 2505 4C 3F 25			jmp InitOfNewSetInstrumentsOnly
   423 2508			oo2
   424 2508 C9 3F			cmp #63
   425 250A F0 1B			beq oo63
   426 250C A5 8E			lda reg1
   427 250E 29 C0			and #$c0
   428 2510 F0 09			beq oo62_b
   429 2512 0A				asl @
   430 2513 2A				rol @
   431 2514 2A				rol @
   432 2515 9D EC 20			sta trackn_pause,x
   433 2518 4C FC 24			jmp oo1x
   434 251B			oo62_b
   435 251B C8				iny
   436 251C B1 88			lda (ns),y
   437 251E 9D EC 20			sta trackn_pause,x
   438 2521 FE E8 20			inc trackn_idx,x
   439 2524 4C FC 24			jmp oo1x
   440 2527			oo63
   441 2527 A5 8E			lda reg1
   442 					IFT FEAT_CONSTANTSPEED==0
   443 					bmi oo63_1X
   444 					iny
   445 					lda (ns),y
   446 					sta v_bspeed
   447 					inc trackn_idx,x
   448 					jmp oo1i
   449 				oo63_1X
   450 					EIF
   451 2529 C9 FF			cmp #255
   452 252B F0 09			beq oo63_11
   453 252D C8				iny
   454 252E B1 88			lda (ns),y
   455 2530 9D E8 20			sta trackn_idx,x
   456 2533 4C C4 24			jmp oo1i
   457 2536			oo63_11
   458 2536 4C 62 24			jmp GetSongLine
   459 2539 4C BE 25		p2xrmtp3	jmp rmt_p3
   460 253C CA			p2x0 dex
   461 253D 30 FA			 bmi p2xrmtp3
   462 253F			InitOfNewSetInstrumentsOnly
   463 253F BC 00 21		p2x1 ldy trackn_instrx2,x
   464 2542 30 F8			bmi p2x0
   465 					IFT FEAT_SFX
   466 2544 20 52 25			jsr SetUpInstrumentY2
   467 2547 4C 3C 25			jmp p2x0
   468 254A			rmt_sfx
   469 254A 9D F0 20			sta trackn_note,x
   470 					IFT FEAT_BASS16
   471 					sta trackn_outnote,x
   472 					EIF
   473 254D A9 F0			lda #$f0				;* sfx note volume*16
   474 = 254E			RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   475 254F 9D F4 20			sta trackn_volume,x
   476 					EIF
   477 2552			SetUpInstrumentY2
   478 2552 B1 80			lda (p_instrstable),y
   479 2554 9D 04 21			sta trackn_instrdb,x
   480 2557 85 8C			sta nt
   481 2559 C8				iny
   482 255A B1 80			lda (p_instrstable),y
   483 255C 9D 08 21			sta trackn_instrhb,x
   484 255F 85 8D			sta nt+1
   485 					IFT FEAT_FILTER
   486 					lda #1
   487 					sta trackn_filter,x
   488 					EIF
   489 					IFT FEAT_TABLEGO
   490 					IFT FEAT_FILTER
   491 					tay
   492 					ELS
   493 					ldy #1
   494 					EIF
   495 					lda (nt),y
   496 					sta trackn_tablelop,x
   497 					iny
   498 					ELS
   499 2561 A0 02			ldy #2
   500 					EIF
   501 2563 B1 8C			lda (nt),y
   502 2565 9D 10 21			sta trackn_instrlen,x
   503 2568 C8				iny
   504 2569 B1 8C			lda (nt),y
   505 256B 9D 14 21			sta trackn_instrlop,x
   506 256E C8				iny
   507 256F B1 8C			lda (nt),y
   508 2571 9D 24 21			sta trackn_tabletypespeed,x
   509 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   510 					and #$3f
   511 					EIF
   512 2574 9D 34 21			sta trackn_tablespeeda,x
   513 					IFT FEAT_TABLEMODE
   514 					lda (nt),y
   515 					and #$40
   516 					sta trackn_tablemode,x
   517 					EIF
   518 					IFT FEAT_AUDCTLMANUALSET
   519 					iny
   520 					lda (nt),y
   521 					sta trackn_audctl,x
   522 					iny
   523 					ELS
   524 2577 A0 06			ldy #6
   525 					EIF
   526 2579 B1 8C			lda (nt),y
   527 257B 9D 1C 21			sta trackn_volumeslidedepth,x
   528 					IFT FEAT_VOLUMEMIN
   529 					iny
   530 					lda (nt),y
   531 					sta trackn_volumemin,x
   532 					IFT FEAT_EFFECTS
   533 					iny
   534 					EIF
   535 					ELS
   536 					IFT FEAT_EFFECTS
   537 					ldy #8
   538 					EIF
   539 					EIF
   540 					IFT FEAT_EFFECTS
   541 					lda (nt),y
   542 					sta trackn_effdelay,x
   543 					IFT FEAT_EFFECTVIBRATO
   544 					iny
   545 					lda (nt),y
   546 					tay
   547 					lda vibtabbeg,y
   548 					sta trackn_effvibratoa,x
   549 					EIF
   550 					IFT FEAT_EFFECTFSHIFT
   551 					ldy #10
   552 					lda (nt),y
   553 					sta trackn_effshift,x
   554 					EIF
   555 					EIF
   556 257E A9 80			lda #128
   557 2580 9D 20 21			sta trackn_volumeslidevalue,x
   558 2583 9D 00 21			sta trackn_instrx2,x
   559 2586 0A				asl @
   560 2587 9D 18 21			sta trackn_instrreachend,x
   561 258A 9D FC 20			sta trackn_shiftfrq,x
   562 258D A8				tay
   563 258E B1 8C			lda (nt),y
   564 2590 9D 30 21			sta trackn_tableend,x
   565 2593 69 00			adc #0
   566 2595 9D 0C 21			sta trackn_instridx,x
   567 2598 A9 0C			lda #INSTRPAR
   568 259A 9D 2C 21			sta trackn_tablea,x
   569 259D A8				tay
   570 259E B1 8C			lda (nt),y
   571 25A0 9D 28 21			sta trackn_tablenote,x
   572 25A3			xata_rtshere
   573 					IFT FEAT_SFX
   574 25A3 60				rts
   575 					ELS
   576 					jmp p2x0
   577 					EIF
   578 25A4			rmt_play
   579 25A4			rmt_p0
   580 25A4 20 EA 26			jsr SetPokey
   581 25A7			rmt_p1
   582 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   583 					dec v_ainstrspeed
   584 					bne rmt_p3
   585 					EIF
   586 					IFT FEAT_INSTRSPEED==0
   587 					lda #$ff
   588 				v_instrspeed	equ *-1
   589 					sta v_ainstrspeed
   590 					ELI FEAT_INSTRSPEED>1
   591 					lda #FEAT_INSTRSPEED
   592 					sta v_ainstrspeed
   593 					EIF
   594 25A7			rmt_p2
   595 25A7 CE 40 21			dec v_aspeed
   596 25AA D0 12			bne rmt_p3
   597 25AC EE B0 25			inc v_abeat
   598 25AF A9 FF			lda #$ff
   599 = 25B0			v_abeat equ *-1
   600 25B1 C9 FF			cmp #$ff
   601 = 25B2			v_maxtracklen equ *-1
   602 25B3 F0 03			beq p2o3
   603 25B5 4C B2 24			jmp GetTrackLine
   604 25B8			p2o3
   605 25B8 4C 62 24			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   606 25BB 4C D9 26		go_ppnext	jmp ppnext
   607 25BE			rmt_p3
   608 25BE A9 22			lda #>frqtab
   609 25C0 85 8B			sta nr+1
   610 25C2 A2 03		xtracks05sub1	ldx #TRACKS-1
   611 25C4			pp1
   612 25C4 BD 08 21			lda trackn_instrhb,x
   613 25C7 F0 F2			beq go_ppnext
   614 25C9 85 89			sta ns+1
   615 25CB BD 04 21			lda trackn_instrdb,x
   616 25CE 85 88			sta ns
   617 25D0 BC 0C 21			ldy trackn_instridx,x
   618 25D3 B1 88			lda (ns),y
   619 25D5 85 8E			sta reg1
   620 25D7 C8				iny
   621 25D8 B1 88			lda (ns),y
   622 25DA 85 8F			sta reg2
   623 25DC C8				iny
   624 25DD B1 88			lda (ns),y
   625 25DF 85 90			sta reg3
   626 25E1 C8				iny
   627 25E2 98				tya
   628 25E3 DD 10 21			cmp trackn_instrlen,x
   629 25E6 90 0A			bcc pp2
   630 25E8 F0 08			beq pp2
   631 25EA A9 80			lda #$80
   632 25EC 9D 18 21			sta trackn_instrreachend,x
   633 25EF			pp1b
   634 25EF BD 14 21			lda trackn_instrlop,x
   635 25F2 9D 0C 21		pp2	sta trackn_instridx,x
   636 25F5 A5 8E			lda reg1
   637 					IFT TRACKS>4
   638 					cpx #4
   639 					bcc pp2s
   640 					lsr @
   641 					lsr @
   642 					lsr @
   643 					lsr @
   644 				pp2s
   645 					EIF
   646 25F7 29 0F			and #$0f
   647 25F9 1D F4 20			ora trackn_volume,x
   648 25FC A8				tay
   649 25FD B9 00 23			lda volumetab,y
   650 2600 85 91			sta tmp
   651 2602 A5 8F			lda reg2
   652 2604 29 0E			and #$0e
   653 2606 A8				tay
   654 2607 B9 82 21			lda tabbeganddistor,y
   655 260A 85 8A			sta nr
   656 260C A5 91			lda tmp
   657 260E 19 83 21			ora tabbeganddistor+1,y
   658 2611 9D 3C 21			sta trackn_audc,x
   659 2614			InstrumentsEffects
   660 					IFT FEAT_EFFECTS
   661 					lda trackn_effdelay,x
   662 					beq ei2
   663 					cmp #1
   664 					bne ei1
   665 					lda trackn_shiftfrq,x
   666 					IFT FEAT_EFFECTFSHIFT
   667 					clc
   668 					adc trackn_effshift,x
   669 					EIF
   670 					IFT FEAT_EFFECTVIBRATO
   671 					clc
   672 					ldy trackn_effvibratoa,x
   673 					adc vib0,y
   674 					EIF
   675 					sta trackn_shiftfrq,x
   676 					IFT FEAT_EFFECTVIBRATO
   677 					lda vibtabnext,y
   678 					sta trackn_effvibratoa,x
   679 					EIF
   680 					jmp ei2
   681 				ei1
   682 					dec trackn_effdelay,x
   683 				ei2
   684 					EIF
   685 2614 BC 30 21			ldy trackn_tableend,x
   686 2617 C0 0D			cpy #INSTRPAR+1
   687 2619 90 30			bcc ei3
   688 261B BD 34 21			lda trackn_tablespeeda,x
   689 261E 10 25			bpl ei2f
   690 2620			ei2c
   691 2620 98				tya
   692 2621 DD 2C 21			cmp trackn_tablea,x
   693 2624 D0 07			bne ei2c2
   694 					IFT FEAT_TABLEGO
   695 					lda trackn_tablelop,x
   696 					ELS
   697 2626 A9 0C			lda #INSTRPAR
   698 					EIF
   699 2628 9D 2C 21			sta trackn_tablea,x
   700 262B D0 03			bne ei2a
   701 262D			ei2c2
   702 262D FE 2C 21			inc trackn_tablea,x
   703 2630			ei2a
   704 2630 BD 04 21			lda trackn_instrdb,x
   705 2633 85 8C			sta nt
   706 2635 BD 08 21			lda trackn_instrhb,x
   707 2638 85 8D			sta nt+1
   708 263A BC 2C 21			ldy trackn_tablea,x
   709 263D B1 8C			lda (nt),y
   710 					IFT FEAT_TABLEMODE
   711 					ldy trackn_tablemode,x
   712 					beq ei2e
   713 					clc
   714 					adc trackn_tablenote,x
   715 				ei2e
   716 					EIF
   717 263F 9D 28 21			sta trackn_tablenote,x
   718 2642 BD 24 21			lda trackn_tabletypespeed,x
   719 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   720 					and #$3f
   721 					EIF
   722 2645			ei2f
   723 2645 38				sec
   724 2646 E9 01			sbc #1
   725 2648 9D 34 21			sta trackn_tablespeeda,x
   726 264B			ei3
   727 264B BD 18 21			lda trackn_instrreachend,x
   728 264E 10 18			bpl ei4
   729 2650 BD F4 20			lda trackn_volume,x
   730 2653 F0 13			beq ei4
   731 					IFT FEAT_VOLUMEMIN
   732 					cmp trackn_volumemin,x
   733 					beq ei4
   734 					bcc ei4
   735 					EIF
   736 2655 A8				tay
   737 2656 BD 20 21			lda trackn_volumeslidevalue,x
   738 2659 18				clc
   739 265A 7D 1C 21			adc trackn_volumeslidedepth,x
   740 265D 9D 20 21			sta trackn_volumeslidevalue,x
   741 2660 90 06			bcc ei4
   742 2662 98				tya
   743 2663 E9 10			sbc #16
   744 2665 9D F4 20			sta trackn_volume,x
   745 2668			ei4
   746 					IFT FEAT_COMMAND2
   747 					lda #0
   748 					sta frqaddcmd2
   749 					EIF
   750 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   751 2668 A5 8F			lda reg2
   752 					IFT FEAT_FILTER||FEAT_BASS16
   753 					sta trackn_command,x
   754 					EIF
   755 266A 29 70			and #$70
   756 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   757 					beq cmd0
   758 					ELS
   759 266C 4A				lsr @
   760 266D 4A				lsr @
   761 266E 8D 72 26			sta jmx+1
   762 2671 90 FE		jmx	bcc *
   763 2673 4C BA 26			jmp cmd0
   764 2676 EA				nop
   765 2677 4C 92 26			jmp cmd1
   766 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   767 267A EA				nop
   768 267B 4C 97 26			jmp cmd2
   769 					EIF
   770 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   771 267E EA				nop
   772 267F 4C 97 26			jmp cmd3
   773 					EIF
   774 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   775 2682 EA				nop
   776 2683 4C A3 26			jmp cmd4
   777 					EIF
   778 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   779 2686 EA				nop
   780 2687 4C B2 26			jmp cmd5
   781 					EIF
   782 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   783 268A EA				nop
   784 268B 4C B2 26			jmp cmd6
   785 					EIF
   786 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   787 268E EA				nop
   788 268F 4C B2 26			jmp cmd7
   789 					EIF
   790 					EIF
   791 					ELS
   792 					IFT FEAT_FILTER||FEAT_BASS16
   793 					lda reg2
   794 					sta trackn_command,x
   795 					EIF
   796 					EIF
   797 2692			cmd1
   798 					IFT FEAT_COMMAND1
   799 2692 A5 90			lda reg3
   800 2694 4C D6 26			jmp cmd0c
   801 					EIF
   802 2697			cmd2
   803 					IFT FEAT_COMMAND2
   804 					lda reg3
   805 					sta frqaddcmd2
   806 					lda trackn_note,x
   807 					jmp cmd0a
   808 					EIF
   809 2697			cmd3
   810 					IFT FEAT_COMMAND3
   811 2697 BD F0 20			lda trackn_note,x
   812 269A 18				clc
   813 269B 65 90			adc reg3
   814 269D 9D F0 20			sta trackn_note,x
   815 26A0 4C C0 26			jmp cmd0a
   816 					EIF
   817 26A3			cmd4
   818 					IFT FEAT_COMMAND4
   819 26A3 BD FC 20			lda trackn_shiftfrq,x
   820 26A6 18				clc
   821 26A7 65 90			adc reg3
   822 26A9 9D FC 20			sta trackn_shiftfrq,x
   823 26AC BD F0 20			lda trackn_note,x
   824 26AF 4C C0 26			jmp cmd0a
   825 					EIF
   826 26B2			cmd5
   827 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   828 					IFT FEAT_TABLETYPE
   829 					lda trackn_tabletypespeed,x
   830 					bpl cmd5a1
   831 					ldy trackn_note,x
   832 					lda (nr),y
   833 					clc
   834 					adc trackn_tablenote,x
   835 					jmp cmd5ax
   836 					EIF
   837 				cmd5a1
   838 					lda trackn_note,x
   839 					clc
   840 					adc trackn_tablenote,x
   841 					cmp #61
   842 					bcc cmd5a2
   843 					lda #63
   844 				cmd5a2
   845 					tay
   846 					lda (nr),y
   847 				cmd5ax
   848 					sta trackn_portafrqc,x
   849 					ldy reg3
   850 					bne cmd5a
   851 					sta trackn_portafrqa,x
   852 				cmd5a
   853 					tya
   854 					lsr @
   855 					lsr @
   856 					lsr @
   857 					lsr @
   858 					sta trackn_portaspeed,x
   859 					sta trackn_portaspeeda,x
   860 					lda reg3
   861 					and #$0f
   862 					sta trackn_portadepth,x
   863 					lda trackn_note,x
   864 					jmp cmd0a
   865 					ELI FEAT_COMMAND5
   866 					lda trackn_note,x
   867 					jmp cmd0a
   868 					EIF
   869 26B2			cmd6
   870 					IFT FEAT_COMMAND6&&FEAT_FILTER
   871 					lda reg3
   872 					clc
   873 					adc trackn_filter,x
   874 					sta trackn_filter,x
   875 					lda trackn_note,x
   876 					jmp cmd0a
   877 					ELI FEAT_COMMAND6
   878 					lda trackn_note,x
   879 					jmp cmd0a
   880 					EIF
   881 26B2			cmd7
   882 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   883 					IFT FEAT_COMMAND7SETNOTE
   884 26B2 A5 90			lda reg3
   885 					IFT FEAT_COMMAND7VOLUMEONLY
   886 					cmp #$80
   887 					beq cmd7a
   888 					EIF
   889 26B4 9D F0 20			sta trackn_note,x
   890 26B7 4C C0 26			jmp cmd0a
   891 					EIF
   892 					IFT FEAT_COMMAND7VOLUMEONLY
   893 				cmd7a
   894 					lda trackn_audc,x
   895 					ora #$f0
   896 					sta trackn_audc,x
   897 					lda trackn_note,x
   898 					jmp cmd0a
   899 					EIF
   900 					EIF
   901 26BA			cmd0
   902 26BA BD F0 20			lda trackn_note,x
   903 26BD 18				clc
   904 26BE 65 90			adc reg3
   905 26C0			cmd0a
   906 					IFT FEAT_TABLETYPE
   907 					ldy trackn_tabletypespeed,x
   908 					bmi cmd0b
   909 					EIF
   910 26C0 18				clc
   911 26C1 7D 28 21			adc trackn_tablenote,x
   912 26C4 C9 3D			cmp #61
   913 26C6 90 07			bcc cmd0a1
   914 26C8 A9 00			lda #0
   915 26CA 9D 3C 21			sta trackn_audc,x
   916 26CD A9 3F			lda #63
   917 26CF			cmd0a1
   918 					IFT FEAT_BASS16
   919 					sta trackn_outnote,x
   920 					EIF
   921 26CF A8				tay
   922 26D0 B1 8A			lda (nr),y
   923 26D2 18				clc
   924 26D3 7D FC 20			adc trackn_shiftfrq,x
   925 					IFT FEAT_COMMAND2
   926 					clc
   927 					adc frqaddcmd2
   928 					EIF
   929 					IFT FEAT_TABLETYPE
   930 					jmp cmd0c
   931 				cmd0b
   932 					cmp #61
   933 					bcc cmd0b1
   934 					lda #0
   935 					sta trackn_audc,x
   936 					lda #63
   937 				cmd0b1
   938 					tay
   939 					lda trackn_shiftfrq,x
   940 					clc
   941 					adc trackn_tablenote,x
   942 					clc
   943 					adc (nr),y
   944 					IFT FEAT_COMMAND2
   945 					clc
   946 					adc frqaddcmd2
   947 					EIF
   948 					EIF
   949 26D6			cmd0c
   950 26D6 9D 38 21			sta trackn_audf,x
   951 26D9			pp9
   952 					IFT FEAT_PORTAMENTO
   953 					lda trackn_portaspeeda,x
   954 					beq pp10
   955 					dec trackn_portaspeeda,x
   956 					bne pp10
   957 					lda trackn_portaspeed,x
   958 					sta trackn_portaspeeda,x
   959 					lda trackn_portafrqa,x
   960 					cmp trackn_portafrqc,x
   961 					beq pp10
   962 					bcs pps1
   963 					adc trackn_portadepth,x
   964 					bcs pps8
   965 					cmp trackn_portafrqc,x
   966 					bcs pps8
   967 					jmp pps9
   968 				pps1
   969 					sbc trackn_portadepth,x
   970 					bcc pps8
   971 					cmp trackn_portafrqc,x
   972 					bcs pps9
   973 				pps8
   974 					lda trackn_portafrqc,x
   975 				pps9
   976 					sta trackn_portafrqa,x
   977 				pp10
   978 					lda reg2
   979 					and #$01
   980 					beq pp11
   981 					lda trackn_portafrqa,x
   982 					clc
   983 					adc trackn_shiftfrq,x
   984 					sta trackn_audf,x
   985 				pp11
   986 					EIF
   987 26D9			ppnext
   988 26D9 CA				dex
   989 26DA 30 03			bmi rmt_p4
   990 26DC 4C C4 25			jmp pp1
   991 26DF			rmt_p4
   992 					IFT FEAT_AUDCTLMANUALSET
   993 					lda trackn_audctl+0
   994 					ora trackn_audctl+1
   995 					ora trackn_audctl+2
   996 					ora trackn_audctl+3
   997 					tax
   998 					ELS
   999 26DF A2 00			ldx #0
  1000 					EIF
  1001 26E1			qq1
  1002 26E1 8E EB 26			stx v_audctl
  1003 					IFT FEAT_FILTER
  1004 					IFT FEAT_FILTERG0L
  1005 					lda trackn_command+0
  1006 					bpl qq2
  1007 					lda trackn_audc+0
  1008 					and #$0f
  1009 					beq qq2
  1010 					lda trackn_audf+0
  1011 					clc
  1012 					adc trackn_filter+0
  1013 					sta trackn_audf+2
  1014 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1015 					lda trackn_audc+2
  1016 					and #$10
  1017 					bne qq1a
  1018 					EIF
  1019 					lda #0
  1020 					sta trackn_audc+2
  1021 				qq1a
  1022 					txa
  1023 					ora #4
  1024 					tax
  1025 					EIF
  1026 				qq2
  1027 					IFT FEAT_FILTERG1L
  1028 					lda trackn_command+1
  1029 					bpl qq3
  1030 					lda trackn_audc+1
  1031 					and #$0f
  1032 					beq qq3
  1033 					lda trackn_audf+1
  1034 					clc
  1035 					adc trackn_filter+1
  1036 					sta trackn_audf+3
  1037 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1038 					lda trackn_audc+3
  1039 					and #$10
  1040 					bne qq2a
  1041 					EIF
  1042 					lda #0
  1043 					sta trackn_audc+3
  1044 				qq2a
  1045 					txa
  1046 					ora #2
  1047 					tax
  1048 					EIF
  1049 				qq3
  1050 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1051 					cpx v_audctl
  1052 					bne qq5
  1053 					EIF
  1054 					EIF
  1055 					IFT FEAT_BASS16
  1056 					IFT FEAT_BASS16G1L
  1057 					lda trackn_command+1
  1058 					and #$0e
  1059 					cmp #6
  1060 					bne qq4
  1061 					lda trackn_audc+1
  1062 					and #$0f
  1063 					beq qq4
  1064 					ldy trackn_outnote+1
  1065 					lda frqtabbasslo,y
  1066 					sta trackn_audf+0
  1067 					lda frqtabbasshi,y
  1068 					sta trackn_audf+1
  1069 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1070 					lda trackn_audc+0
  1071 					and #$10
  1072 					bne qq3a
  1073 					EIF
  1074 					lda #0
  1075 					sta trackn_audc+0
  1076 				qq3a
  1077 					txa
  1078 					ora #$50
  1079 					tax
  1080 					EIF
  1081 				qq4
  1082 					IFT FEAT_BASS16G3L
  1083 					lda trackn_command+3
  1084 					and #$0e
  1085 					cmp #6
  1086 					bne qq5
  1087 					lda trackn_audc+3
  1088 					and #$0f
  1089 					beq qq5
  1090 					ldy trackn_outnote+3
  1091 					lda frqtabbasslo,y
  1092 					sta trackn_audf+2
  1093 					lda frqtabbasshi,y
  1094 					sta trackn_audf+3
  1095 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1096 					lda trackn_audc+2
  1097 					and #$10
  1098 					bne qq4a
  1099 					EIF
  1100 					lda #0
  1101 					sta trackn_audc+2
  1102 				qq4a
  1103 					txa
  1104 					ora #$28
  1105 					tax
  1106 					EIF
  1107 					EIF
  1108 26E4			qq5
  1109 26E4 8E EB 26			stx v_audctl
  1110 					IFT TRACKS>4
  1111 					IFT FEAT_AUDCTLMANUALSET
  1112 					lda trackn_audctl+4
  1113 					ora trackn_audctl+5
  1114 					ora trackn_audctl+6
  1115 					ora trackn_audctl+7
  1116 					tax
  1117 					ELS
  1118 					ldx #0
  1119 					EIF
  1120 					stx v_audctl2
  1121 					IFT FEAT_FILTER
  1122 					IFT FEAT_FILTERG0R
  1123 					lda trackn_command+0+4
  1124 					bpl qs2
  1125 					lda trackn_audc+0+4
  1126 					and #$0f
  1127 					beq qs2
  1128 					lda trackn_audf+0+4
  1129 					clc
  1130 					adc trackn_filter+0+4
  1131 					sta trackn_audf+2+4
  1132 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1133 					lda trackn_audc+2+4
  1134 					and #$10
  1135 					bne qs1a
  1136 					EIF
  1137 					lda #0
  1138 					sta trackn_audc+2+4
  1139 				qs1a
  1140 					txa
  1141 					ora #4
  1142 					tax
  1143 					EIF
  1144 				qs2
  1145 					IFT FEAT_FILTERG1R
  1146 					lda trackn_command+1+4
  1147 					bpl qs3
  1148 					lda trackn_audc+1+4
  1149 					and #$0f
  1150 					beq qs3
  1151 					lda trackn_audf+1+4
  1152 					clc
  1153 					adc trackn_filter+1+4
  1154 					sta trackn_audf+3+4
  1155 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1156 					lda trackn_audc+3+4
  1157 					and #$10
  1158 					bne qs2a
  1159 					EIF
  1160 					lda #0
  1161 					sta trackn_audc+3+4
  1162 				qs2a
  1163 					txa
  1164 					ora #2
  1165 					tax
  1166 					EIF
  1167 				qs3
  1168 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1169 					cpx v_audctl2
  1170 					bne qs5
  1171 					EIF
  1172 					EIF
  1173 					IFT FEAT_BASS16
  1174 					IFT FEAT_BASS16G1R
  1175 					lda trackn_command+1+4
  1176 					and #$0e
  1177 					cmp #6
  1178 					bne qs4
  1179 					lda trackn_audc+1+4
  1180 					and #$0f
  1181 					beq qs4
  1182 					ldy trackn_outnote+1+4
  1183 					lda frqtabbasslo,y
  1184 					sta trackn_audf+0+4
  1185 					lda frqtabbasshi,y
  1186 					sta trackn_audf+1+4
  1187 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1188 					lda trackn_audc+0+4
  1189 					and #$10
  1190 					bne qs3a
  1191 					EIF
  1192 					lda #0
  1193 					sta trackn_audc+0+4
  1194 				qs3a
  1195 					txa
  1196 					ora #$50
  1197 					tax
  1198 					EIF
  1199 				qs4
  1200 					IFT FEAT_BASS16G3R
  1201 					lda trackn_command+3+4
  1202 					and #$0e
  1203 					cmp #6
  1204 					bne qs5
  1205 					lda trackn_audc+3+4
  1206 					and #$0f
  1207 					beq qs5
  1208 					ldy trackn_outnote+3+4
  1209 					lda frqtabbasslo,y
  1210 					sta trackn_audf+2+4
  1211 					lda frqtabbasshi,y
  1212 					sta trackn_audf+3+4
  1213 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1214 					lda trackn_audc+2+4
  1215 					and #$10
  1216 					bne qs4a
  1217 					EIF
  1218 					lda #0
  1219 					sta trackn_audc+2+4
  1220 				qs4a
  1221 					txa
  1222 					ora #$28
  1223 					tax
  1224 					EIF
  1225 					EIF
  1226 				qs5
  1227 					stx v_audctl2
  1228 					EIF
  1229 26E7			rmt_p5
  1230 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1231 					lda #$ff
  1232 				v_ainstrspeed equ *-1
  1233 					ELS
  1234 26E7 A9 01			lda #1
  1235 					EIF
  1236 26E9 60				rts
  1237 26EA			SetPokey
  1238 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1239 					ldy #$ff
  1240 				v_audctl2 equ *-1
  1241 					lda trackn_audf+0+4
  1242 					ldx trackn_audf+0
  1243 				xstastx01	sta $d210
  1244 					stx $d200
  1245 					lda trackn_audc+0+4
  1246 					ldx trackn_audc+0
  1247 				xstastx02	sta $d211
  1248 					stx $d201
  1249 					lda trackn_audf+1+4
  1250 					ldx trackn_audf+1
  1251 				xstastx03	sta $d212
  1252 					stx $d202
  1253 					lda trackn_audc+1+4
  1254 					ldx trackn_audc+1
  1255 				xstastx04	sta $d213
  1256 					stx $d203
  1257 					lda trackn_audf+2+4
  1258 					ldx trackn_audf+2
  1259 				xstastx05	sta $d214
  1260 					stx $d204
  1261 					lda trackn_audc+2+4
  1262 					ldx trackn_audc+2
  1263 				xstastx06	sta $d215
  1264 					stx $d205
  1265 					lda trackn_audf+3+4
  1266 					ldx trackn_audf+3
  1267 				xstastx07	sta $d216
  1268 					stx $d206
  1269 					lda trackn_audc+3+4
  1270 					ldx trackn_audc+3
  1271 				xstastx08	sta $d217
  1272 					stx $d207
  1273 					lda #$ff
  1274 				v_audctl equ *-1
  1275 				xstysta01	sty $d218
  1276 					sta $d208
  1277 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1278 26EA A0 FF			ldy #$ff
  1279 = 26EB			v_audctl equ *-1
  1280 26EC AD 38 21			lda trackn_audf+0
  1281 26EF AE 3C 21			ldx trackn_audc+0
  1282 26F2 8D 00 D2			sta $d200
  1283 26F5 8E 01 D2			stx $d201
  1284 26F8 AD 39 21			lda trackn_audf+1
  1285 26FB AE 3D 21			ldx trackn_audc+1
  1286 26FE 8D 02 D2			sta $d200+2
  1287 2701 8E 03 D2			stx $d201+2
  1288 2704 AD 3A 21			lda trackn_audf+2
  1289 2707 AE 3E 21			ldx trackn_audc+2
  1290 270A 8D 04 D2			sta $d200+4
  1291 270D 8E 05 D2			stx $d201+4
  1292 2710 AD 3B 21			lda trackn_audf+3
  1293 2713 AE 3F 21			ldx trackn_audc+3
  1294 2716 8D 06 D2			sta $d200+6
  1295 2719 8E 07 D2			stx $d201+6
  1296 271C 8C 08 D2			sty $d208
  1297 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1298 					ldy #$ff
  1299 				v_audctl equ *-1
  1300 					lda trackn_audf+0
  1301 					ldx trackn_audc+0
  1302 					sta $d200
  1303 					stx $d201
  1304 					sta $d210
  1305 					lda trackn_audf+1
  1306 					ldx trackn_audc+1
  1307 					sta $d210+2
  1308 					stx $d211+2
  1309 					lda trackn_audf+2
  1310 					ldx trackn_audc+2
  1311 					sta $d210+4
  1312 					stx $d211+4
  1313 					sta $d200+4
  1314 					lda trackn_audf+3
  1315 					ldx trackn_audc+3
  1316 					sta $d200+6
  1317 					stx $d201+6
  1318 					sta $d210+6
  1319 					sty $d218
  1320 					sty $d208
  1321 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1322 					ldy #$ff
  1323 				v_audctl equ *-1
  1324 					lda trackn_audf+0
  1325 					ldx trackn_audc+0
  1326 					sta $d200
  1327 					stx $d201
  1328 					lda trackn_audf+1
  1329 					ldx trackn_audc+1
  1330 					sta $d200+2
  1331 					stx $d201+2
  1332 					lda trackn_audf+2
  1333 					ldx trackn_audc+2
  1334 					sta $d210+4
  1335 					stx $d211+4
  1336 					sta $d200+4
  1337 					lda trackn_audf+3
  1338 					ldx trackn_audc+3
  1339 					sta $d210+6
  1340 					stx $d211+6
  1341 					sta $d200+6
  1342 					sty $d218
  1343 					sty $d208
  1344 					EIF
  1345 271F 60				rts
  1346 2720			RMTPLAYEREND
   364 						
   365 				;*****	End of code test
   366 				;
   367 2720			END_CODE_WARNING
   368 					.if END_CODE_WARNING > PmgAddress 
   369 						.error "Code overrides code area!"
   370 					.endif
   371
   372 				;*****	Player missle graphics address
   373 				;
   374 2720					org PmgAddress
   375 A000-A7FF> 00 00 00 00 + :768	.byte %00000000	
   376 					
   377 				;*****	Missle starting address
   378 				;
   379 A300					org ms_area_1
   380 A300 00 00 00 00 00 00 + :1280 .byte %00000000
   381
   382 				;*****	Level Data definition
   383 				;
   384 A800					org DataAddress
   385 						
   386 3000					icl "Data/Levels.Asm"
Source: E:\_8BitProjects\Series\Scroller\Data\Levels.Asm
     1 				;
     2 				;****************************************************************************************************
     3 				;
     4 				;	Player Data
     5 				;
     6 				;		Each row of X and Y is associated with a level number (zero based).
     7 				;
     8 				;****************************************************************************************************
     9 				;
    10 3000			LevelsPlayer_X
    11 3000-3774> 01					.byte $01
    12
    13 3001			LevelsPlayer_Y
    14 3001 08						.byte $08
    15 				;
    16 				;****************************************************************************************************
    17 				;
    18 				;	Level Data
    19 				;
    20 				;		Low (LSB) and High (MSB) addresses of the level data map
    21 				;
    22 				;****************************************************************************************************
    23 				;
    24 3002			LevelsAddr_LSB
    25 3002 04				.byte <LEVELS_01
    26
    27 3003			LevelsAddr_MSB
    28 3003 30				.byte >LEVELS_01
    29 				;
    30 				;****************************************************************************************************
    31 				;
    32 3004			LEVELS_01
    33 3004 1E 05 02 FD 22 05 + 			.byte $1E,$05,$02,$FD,$22,$05,$02,$FD,$26,$05,$01,$FD,$FE
    34 3011 03 07 02 FD 05 07 + 			.byte $03,$07,$02,$FD,$05,$07,$02,$FD,$FE
    35 301A 08 08 02 FD 0A 08 + 			.byte $08,$08,$02,$FD,$0A,$08,$02,$FD,$FE
    36 3023 00 09 60 60 60 60 + 			.byte $00,$09,$60,$60,$60,$60,$60,$60,$FD,$0D,$09,$02,$FD,$1B,$09,$26,$27,$28,$29,$FD,$48,$09,$01,$01,$FD,$FE
    37 303D 06 0A 60 60 60 60 + 			.byte $06,$0A,$60,$60,$60,$60,$60,$FD,$FE
    38 3046 0B 0B 60 60 60 60 + 			.byte $0B,$0B,$60,$60,$60,$60,$FD,$1D,$0B,$03,$FD,$1F,$0B,$03,$FD,$FE
    39 3056 13 0C 01 FD 15 0C + 			.byte $13,$0C,$01,$FD,$15,$0C,$01,$FD,$17,$0C,$01,$FD,$26,$0C,$01,$FD,$28,$0C,$04,$FD,$2A,$0C,$01,$FD,$45,$0C,$60,$60,$46,$47,$46,$47,$61,$61,$FD,$FE
    40 307A 1D 0D 61 61 61 FD + 			.byte $1D,$0D,$61,$61,$61,$FD,$2D,$0D,$04,$FD,$39,$0D,$C0,$C1,$FD,$46,$0D,$5D,$07,$07,$07,$07,$6D,$FD,$FE
    41 3093 13 0E 61 61 61 61 + 			.byte $13,$0E,$61,$61,$61,$61,$61,$FD,$1C,$0E,$60,$70,$70,$70,$60,$FD,$26,$0E,$60,$60,$60,$60,$60,$FD,$36,$0E,$61,$61,$63,$60,$60,$FD,$46,$0E,$5D,$07,$07,$07,$07,$6D,$60,$60,$FD,$FE
    42 30BF 26 0F 5E 5D 5D 5D + 			.byte $26,$0F,$5E,$5D,$5D,$5D,$5D,$60,$60,$60,$FD,$46,$0F,$5D,$07,$07,$07,$07,$6D,$FD,$FE
    43 30D4 02 10 C0 C1 FD 26 + 			.byte $02,$10,$C0,$C1,$FD,$26,$10,$65,$23,$24,$25,$65,$66,$67,$5D,$FD,$36,$10,$01,$FD,$38,$10,$01,$FD,$3A,$10,$01,$FD,$46,$10,$5C,$07,$07,$07,$07,$6D,$FD,$FE
    44 30FA 00 11 60 60 60 60 + 			.byte $00,$11,$60,$60,$60,$60,$60,$60,$FD,$13,$11,$01,$FD,$15,$11,$01,$FD,$17,$11,$01,$FD,$28,$11,$95,$FD,$2D,$11,$5D,$FD,$46,$11,$5D,$07,$07,$07,$07,$6D,$FD,$FE
    45 3121 28 12 95 FD 2D 12 + 			.byte $28,$12,$95,$FD,$2D,$12,$5D,$FD,$35,$12,$60,$60,$60,$60,$60,$60,$60,$60,$FD,$41,$12,$60,$60,$46,$47,$46,$5D,$07,$07,$07,$07,$6D,$FD,$4E,$12,$60,$60,$60,$FD,$FE
    46 3149 0A 13 60 60 60 60 + 			.byte $0A,$13,$60,$60,$60,$60,$60,$60,$60,$FD,$1A,$13,$60,$60,$99,$99,$99,$99,$99,$60,$60,$FD,$28,$13,$95,$FD,$2B,$13,$01,$FD,$2D,$13,$5D,$FD,$35,$13,$10,$11,$12,$FD,$42,$13,$70,$07,$07,$07,$5D,$07,$07,$07,$07,$5D,$FD,$FE
    47 317F 1A 14 5D 5D FD 21 + 			.byte $1A,$14,$5D,$5D,$FD,$21,$14,$5D,$5D,$FD,$28,$14,$95,$FD,$2A,$14,$01,$FD,$2D,$14,$5D,$FD,$35,$14,$10,$11,$12,$FD,$42,$14,$70,$07,$07,$07,$07,$07,$07,$07,$07,$5C,$FD,$4E,$14,$01,$FD,$50,$14,$01,$FD,$FE
    48 31B1 17 15 60 60 60 5D + 			.byte $17,$15,$60,$60,$60,$5D,$5D,$FD,$21,$15,$5D,$5D,$FD,$28,$15,$95,$FD,$2B,$15,$01,$FD,$2D,$15,$5D,$FD,$35,$15,$10,$11,$12,$FD,$3B,$15,$01,$FD,$3D,$15,$01,$FD,$3F,$15,$03,$FD,$42,$15,$70,$07,$07,$07,$07,$07,$07,$07,$07,$5D,$FD,$FE
    49 31EA 15 16 60 60 60 60 + 			.byte $15,$16,$60,$60,$60,$60,$60,$5D,$5D,$FD,$21,$16,$5D,$6B,$FD,$28,$16,$95,$FD,$2D,$16,$5D,$FD,$35,$16,$10,$11,$12,$FD,$42,$16,$6E,$48,$49,$48,$49,$49,$48,$48,$49,$5D,$FD,$FE
    50 3215 00 17 60 60 60 60 + 			.byte $00,$17,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$5C,$6A,$60,$60,$60,$60,$60,$5D,$5D,$60,$60,$60,$60,$20,$21,$22,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$70,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$60,$60,$60,$60,$60,$60,$FD,$FE
    51 326B FF						.byte $FF
    52
   387 326C					icl "ScrollerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ScrollerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;***** System Data members
    14 				;
    15 326C 00			m_sfxData						.byte $00
    16 326D 00			m_sfxValue						.byte $00
    17 326E 00			m_sfxLength						.byte $00
    18
    19 326F 00			m_floatAnimModV					.byte $00		; used for modulus operation on vertical animation
    20 3270 00			m_floatAnimModH					.byte $00		; used for modulus operation on horizontal animation
    21 3271 00			m_floatPlatformV				.byte $00		; is there vertical floating platforms
    22 3272 00			m_floatPlatformH				.byte $00		; is there horizontal floating platforms
    23 3273 00			m_floatPlatformIdx				.byte $00		; index to platform screen array
    24 3274 00			m_floatPlatform_X				.byte $00
    25 3275 00			m_floatPlatform_Y				.byte $00
    26
    27 3276 00			m_verticalLaserOn				.byte $00		; is vertical laser available
    28 3277 00			m_horizontalLaserOn				.byte $00		; is horizontal laser available
    29
    30 3278 00			m_goldCounter 					.byte $00		; current gold counter
    31 3279 00			m_healthCounter					.byte $00		; current health counter
    32 327A 00			m_waterAvailable				.byte $00		; is water available
    33
    34 327B 00			m_disableGameTimer				.byte $00		; disable game flag
    35
    36 327C 00			m_gameTimerSeconds				.byte $00		; seconds timer
    37 327D 00			m_gameTimerMinutes				.byte $00		; minutes timer
    38
    39 327E 00			m_gameTimerTSeconds				.byte $00		; seconds timer total
    40 327F 00			m_gameTSFrameCounter			.byte $00		; frame counter total
    41
    42 3280 04			m_animSeaTopTimer				.byte ANIM_SEA_TOP_FRAME_TIME
    43
    44 3281 00			m_firstCoinAnimIndex			.byte $00
    45 3282 00			m_emptyCoinAnimIndex			.byte $00
    46 3283 00			m_currentCoinAnimations			.byte $00
    47
    48 3284 01			m_animHLaserTimer				.byte $01
    49 3285 00			m_animHLaserCurrentFrame		.byte $00
    50
    51 3286 01			m_animLaserTimer				.byte $01
    52 3287 00			m_animLaserCurrentFrame			.byte $00
    53
    54 3288 00 00		m_screenBaseAddress1			.word $00
    55 328A 00 00		m_screenBaseAddress2			.word $00
    56
    57 328C 00			m_windowTargetPosX_H1			.byte $00
    58 328D 00			m_windowTargetPosX_H2			.byte $00
    59 328E 00			m_windowTargetPosY_H1			.byte $00
    60 328F 00			m_windowTargetPosY_H2			.byte $00
    61
    62 3290 00			m_windowTargetDeltaX_H1			.byte $00
    63 3291 00			m_windowTargetDeltaX_H2			.byte $00
    64 3292 00			m_windowTargetDeltaY_H1			.byte $00
    65 3293 00			m_windowTargetDeltaY_H2			.byte $00
    66
    67 3294 00			m_enemyExplosionLevelLeftX_H1	.byte $00
    68 3295 00			m_enemyExplosionLevelLeftX_H2	.byte $00
    69
    70 3296 00			m_enemyExplosionLevelTopY_H1	.byte $00
    71 3297 00			m_enemyExplosionLevelTopY_H2	.byte $00
    72 3298 00			m_enemyExplosionLevelTopY_L1	.byte $00
    73
    74 3299 00			m_enemyExplosionScreenTopY_H1	.byte $00
    75 329A 00			m_enemyExplosionScreenLeftX_H1	.byte $00
    76
    77 329B 00			m_enemyExplosionStep			.byte $00
    78
    79 329C 00			m_enemyCharPosX					.byte $00
    80 329D 00			m_enemyCharPosY					.byte $00
    81 329E 00			m_enemyExplosionStepIndex		.byte $00
    82
    83 329F 00			m_hitEnemySaveX 				.byte $00
    84 32A0 00			m_numEnemyExplosions			.byte $00
    85
    86 32A1 00			m_totalEnemies 					.byte $00
    87 32A2 00			m_activeEnemies 				.byte $00
    88
    89 32A3 00			m_searchEnemyChar 				.byte $00
    90 32A4 00			m_defEnemyLife 					.byte $00
    91 32A5 00			m_numberOfValidRows 			.byte $00
    92
    93 32A6 00			m_tempByte 						.byte $00
    94
    95 32A7 00			m_lastEnemyIndexUpdated 		.byte $00
    96
    97 32A8 00			m_enemyMissilesActive 			.byte $00
    98
    99 32A9 00			m_enemyShootDirection 			.byte $00
   100
   101 32AA 00			m_enemyShotLevelLeftX_H1 		.byte $00
   102 32AB 00			m_enemyShotLevelLeftX_H2 		.byte $00
   103 32AC 00			m_enemyShotLevelTopY_H1 		.byte $00
   104 32AD 00			m_enemyShotLevelTopY_H2 		.byte $00
   105
   106 32AE 00			m_currRow						.byte $00
   107 32AF 00			m_currCol						.byte $00
   108 32B0 00			m_scrYCount						.byte $00
   109 32B1 00			m_datYCount						.byte $00
   110
   111 32B2 00			m_pixelPositionX_H2				.byte 0
   112 32B3 00			m_pixelPositionX_H1				.byte 0
   113 32B4 00			m_pixelPositionY_H2				.byte 0
   114 32B5 00			m_pixelPositionY_H1				.byte 0
   115
   116 32B6 00			m_charPositionX					.byte 0
   117 32B7 00			m_charPositionY					.byte 0
   118
   119 32B8 00			m_lineAddressLSB				.byte 0
   120 32B9 00			m_lineAddressMSB				.byte 0
   121
   122 32BA 00			m_charRaw						.byte 0
   123 32BB 00			m_charDef						.byte 0
   124
   125 32BC 00			m_screenDelta_H2				.byte 0
   126 32BD 00			m_screenDelta_H1				.byte 0
   127
   128 32BE 00			m_hldA							.byte $00
   129 32BF 00			m_hldY							.byte $00
   130 32C0 00			m_hldX							.byte $00
   131 32C1 00			m_revX							.byte $00
   132 32C2 00			m_revIndex						.byte $00
   133 32C3 00			m_revHeight						.byte $00
   134 32C4 00			m_revOffset						.byte $00
   135 32C5 00			m_animCount						.byte $00
   136 32C6 00			m_animFrame						.byte $00
   137 32C7 00			m_animIndex        				.byte $00
   138 32C8 00			m_animHeight					.byte $00
   139 32C9 00			m_animOffset					.byte $00	
   140
   141 32CA 00			m_leftTopChar					.byte $00
   142 32CB 00			m_rightTopChar					.byte $00
   143 32CC 00			m_charBuffer_H2					.byte $00
   144 32CD 00			m_leftBottomChar				.byte $00
   145 32CE 00			m_rightBottomChar				.byte $00
   146 32CF 00			m_middleBottomChar				.byte $00
   147 32D0 00			m_bottomPosOffsetX				.byte $00
   148 32D1 00			m_bottomPosOffsetY				.byte $00
   149 32D2 00			m_playerExplosionStep			.byte $00
   150 32D3 00			m_middleBottomCharPosX			.byte $00
   151 32D4 00			m_waterPlayerDirectionFlag		.byte $00
   152 32D5 00			m_playerOnWaterSurfaceFlag		.byte $00
   153 32D6 00			m_playerExplosionScreenTopY_H1	.byte $00
   154 32D7 00			m_playerExplosionScreenTopY_L1	.byte $00
   155
   156 32D8 00			m_debugSaveX					.byte 0
   157
   158 32D9 00 00		m_currentLineAddress			.word $0000
   159
   160 32DB 00 00 00 00 00 00 + TabLevelLineAddressLSB			:256 .byte $00
   161 33DB 00 00 00 00 00 00 + TabLevelLineAddressMSB			:256 .byte $00
   162
   163 				;
   164 				;**************************************************************************************************
   165 				; Character tile type definition
   166 				;
   167 				; 	Type definition: low 4 bits (0-15 value)
   168 				;		- 0: empty normal space (with gravity info?)			CT_BLANK			= 0					
   169
   170 				;		- 1: block (with collision info, RLDU)					CT_BLOCK			= 1
   171 				;		- 6: floating platform									CT_FLOATPLATFORM	= 1	
   172
   173 				;		- 2: collectable (with value info?)						CT_COLLECTABLE		= 2
   174 				;		- 3: danger (with energy info?)							CT_DANGER			= 3
   175 				;		- 4: ladder, climbable (with directions info?)			CT_LADDER			= 4
   176 				;		- 5: water (with density info? currents?)				CT_WATER			= 5
   177 				;		- 7: health 											CT_HEALTH			= 6
   178 				;		- 8: Vertical Lasers									CT_VLASER			= 7
   179 				;		- 9: Horizontal Lasers									CT_HLASER			= 8
   180 				;
   181 				; 	External level definitions:
   182 				; 		- blocks ON/OFF
   183 				; 		- moving blocks
   184 				; 		- switches, triggers and traps
   185 				; 		- enemies and generators
   186 				; 		- dangers ON/OFF
   187 				; 		- moving dangers
   188 				; 		- interactions zones
   189 				; 		- text messages
   190 				;
   191 				;**************************************************************************************************
   192 				;
   193 34DB			TabCharDefinition
   194 34DB 00				.byte %00000000+CT_BLANK								; blank								[00]
   195 34DC 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[01]
   196 34DD 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[02]				
   197 34DE 06				.byte %00000000+CT_HEALTH								; collectable 1						[03]
   198 34DF 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[04]
   199 34E0 03				.byte %00000000+CT_DANGER								; blue spikes						[05]
   200 34E1 03				.byte %00000000+CT_DANGER								; blue spikes						[06]
   201 34E2 05				.byte %00000000+CT_WATER								; blank								[07]
   202 34E3 06				.byte %00000000+CT_HEALTH								; blank								[08]
   203 34E4 00				.byte %00000000+CT_BLANK								; blank								[09]
   204 34E5 00				.byte %00000000+CT_BLANK								; blank								[0A]
   205 34E6 00				.byte %00000000+CT_BLANK								; blank								[0B]
   206 34E7 00				.byte %00000000+CT_BLANK								; blank								[0C]
   207 34E8 00				.byte %00000000+CT_BLANK								; blank								[0D]
   208 34E9 00				.byte %00000000+CT_BLANK								; blank								[0E]
   209 34EA 00				.byte %00000000+CT_BLANK								; blank								[0F]
   210 34EB 04				.byte %00000000+CT_LADDER								; ladder							[10]
   211 34EC 04				.byte %00000000+CT_LADDER								; ladder							[11]
   212 34ED 04				.byte %00000000+CT_LADDER								; ladder							[12]
   213 34EE 03				.byte %00000000+CT_DANGER								; blue spikes						[13]
   214 34EF F8				.byte %11110000+CT_VLASER								; vertical dither 1					[14]				
   215 34F0 F8				.byte %11110000+CT_VLASER								; vertical dither 2					[15]
   216 34F1 F8				.byte %11110000+CT_VLASER								; vertical dither 3					[16]
   217 34F2 FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[17]
   218 34F3 FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[18]
   219 34F4 FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[19]
   220 34F5 03				.byte %00000000+CT_DANGER								; spikes							[1A]
   221 34F6 03				.byte %00000000+CT_DANGER								; spikes							[1B]
   222 34F7 03				.byte %00000000+CT_DANGER								; spikes							[1C]
   223 34F8 03				.byte %00000000+CT_DANGER								; spikes							[1D]
   224 34F9 03				.byte %00000000+CT_DANGER								; spikes							[1E]
   225 34FA 03				.byte %00000000+CT_DANGER								; spikes							[1F]
   226 34FB F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[20]
   227 34FC F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[21]
   228 34FD F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[22]
   229 34FE F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[23]
   230 34FF F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[24]
   231 3500 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[25]
   232 3501 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[26]
   233 3502 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[27]
   234 3503 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[28]
   235 3504 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[29]
   236 3505 00				.byte %00000000+CT_BLANK								; blank								[2A]
   237 3506 00				.byte %00000000+CT_BLANK								; blank								[2B]
   238 3507 00				.byte %00000000+CT_BLANK								; blank								[2C]
   239 3508 00				.byte %00000000+CT_BLANK								; blank								[2D]
   240 3509 00				.byte %00000000+CT_BLANK								; blank								[2E]
   241 350A 00				.byte %00000000+CT_BLANK								; blank								[2F]
   242 350B 00				.byte %00000000+CT_BLANK								; blank								[30]
   243 350C 00				.byte %00000000+CT_BLANK								; blank								[31]
   244 350D 00				.byte %00000000+CT_BLANK								; blank								[32]
   245 350E 00				.byte %00000000+CT_BLANK								; blank								[33]
   246 350F 00				.byte %00000000+CT_BLANK								; blank								[34]
   247 3510 00				.byte %00000000+CT_BLANK								; blank								[35]
   248 3511 00				.byte %00000000+CT_BLANK								; blank								[36]
   249 3512 00				.byte %00000000+CT_BLANK								; blank								[37]
   250 3513 00				.byte %00000000+CT_BLANK								; blank								[38]
   251 3514 00				.byte %00000000+CT_BLANK								; blank								[39]
   252 3515 03				.byte %00000000+CT_DANGER								; spikes							[3A]
   253 3516 03				.byte %00000000+CT_DANGER								; spikes							[3B]
   254 3517 00				.byte %00000000+CT_BLANK								; blank								[3C]
   255 3518 00				.byte %00000000+CT_BLANK								; blank								[3D]
   256 3519 00				.byte %00000000+CT_BLANK								; blank								[3E]
   257 351A 00				.byte %00000000+CT_BLANK								; blank								[3F]
   258 351B 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [40]
   259 351C 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [41]
   260 351D 00				.byte %00000000+CT_BLANK								; blank								[42]
   261 351E 00				.byte %00000000+CT_BLANK								; blank								[43]
   262 351F 00				.byte %00000000+CT_BLANK								; blank								[44]
   263 3520 00				.byte %00000000+CT_BLANK								; blank								[45]
   264 3521 05				.byte %00000000+CT_WATER								; blank								[46]
   265 3522 05				.byte %00000000+CT_WATER								; blank								[47]
   266 3523 05				.byte %00000000+CT_WATER								; blank								[48]
   267 3524 05				.byte %00000000+CT_WATER								; blank								[49]
   268 3525 00				.byte %00000000+CT_BLANK								; blank								[4A]
   269 3526 00				.byte %00000000+CT_BLANK								; blank								[4B]
   270 3527 F1				.byte %11110000+CT_BLOCK								; solid platform					[4C]
   271 3528 F1				.byte %11110000+CT_BLOCK								; solid platform					[4D]
   272 3529 F1				.byte %11110000+CT_BLOCK								; solid platform					[4E]
   273 352A F1				.byte %11110000+CT_BLOCK								; solid platform					[4F]
   274 352B F1				.byte %11110000+CT_BLOCK								; solid platform					[50]
   275 352C F1				.byte %11110000+CT_BLOCK								; solid platform					[51]
   276 352D 00				.byte %00000000+CT_BLANK								; blank								[52]   
   277 352E 00				.byte %00000000+CT_BLANK								; blank								[53]   
   278 352F 00				.byte %00000000+CT_BLANK								; blank								[54]   
   279 3530 00				.byte %00000000+CT_BLANK								; blank								[55]   
   280 3531 00				.byte %00000000+CT_BLANK								; blank								[56]   
   281 3532 00				.byte %00000000+CT_BLANK								; blank								[57]   
   282 3533 00				.byte %00000000+CT_BLANK								; blank								[58]   
   283 3534 00				.byte %00000000+CT_BLANK								; blank								[59]   
   284 3535 03				.byte %00000000+CT_DANGER								; spikes							[5A]   
   285 3536 03				.byte %00000000+CT_DANGER								; spikes							[5B]   
   286 3537 F1				.byte %11110000+CT_BLOCK								; solid platform					[5C]   
   287 3538 F1				.byte %11110000+CT_BLOCK								; solid platform					[5D]   
   288 3539 F1				.byte %11110000+CT_BLOCK								; solid platform					[5E]   
   289 353A 00				.byte %00000000+CT_BLANK								; blank								[5F]   
   290 353B F1				.byte %11110000+CT_BLOCK								; solid platform					[60]   
   291 353C F1				.byte %11110000+CT_BLOCK								; solid platform					[61]   
   292 353D F1				.byte %11110000+CT_BLOCK								; solid platform					[62]   
   293 353E F1				.byte %11110000+CT_BLOCK								; solid platform					[63]   
   294 353F F1				.byte %11110000+CT_BLOCK								; solid platform					[64]   
   295 3540 F1				.byte %11110000+CT_BLOCK								; solid platform					[65]   
   296 3541 F1				.byte %11110000+CT_BLOCK								; solid platform					[66]   
   297 3542 F1				.byte %11110000+CT_BLOCK								; solid platform					[67]   
   298 3543 F1				.byte %11110000+CT_BLOCK								; solid platform					[68]   
   299 3544 F1				.byte %11110000+CT_BLOCK								; solid platform					[69]   
   300 3545 F1				.byte %11110000+CT_BLOCK								; solid platform					[6A]   
   301 3546 F1				.byte %11110000+CT_BLOCK								; solid platform					[6B]   
   302 3547 F1				.byte %11110000+CT_BLOCK								; solid platform					[6C]   
   303 3548 F1				.byte %11110000+CT_BLOCK								; solid platform					[6D]   
   304 3549 F1				.byte %11110000+CT_BLOCK								; solid platform					[6E]   
   305 354A F1				.byte %11110000+CT_BLOCK								; solid platform					[6F]   
   306 354B F1				.byte %11110000+CT_BLOCK								; solid platform					[70]   
   307 354C F1				.byte %11110000+CT_BLOCK								; solid platform					[71]   
   308 354D F1				.byte %11110000+CT_BLOCK								; solid platform					[72]   
   309 354E F1				.byte %11110000+CT_BLOCK								; solid platform					[73]   
   310 354F F1				.byte %11110000+CT_BLOCK								; solid platform					[74]   
   311 3550 00				.byte %00000000+CT_BLANK								; blank								[75]   
   312 3551 00				.byte %00000000+CT_BLANK								; blank								[76]   
   313 3552 00				.byte %00000000+CT_BLANK								; blank								[77]   
   314 3553 00				.byte %00000000+CT_BLANK								; blank								[78]   
   315 3554 00				.byte %00000000+CT_BLANK								; blank								[79]   
   316 3555 00				.byte %00000000+CT_BLANK								; blank								[7A]   
   317 3556 00				.byte %00000000+CT_BLANK								; blank								[7B]   
   318 3557 00				.byte %00000000+CT_BLANK								; blank								[7C]   
   319 3558 00				.byte %00000000+CT_BLANK								; blank								[7D]   
   320 3559 00				.byte %00000000+CT_BLANK								; blank								[7E]   
   321 355A 00				.byte %00000000+CT_BLANK								; blank								[7F]   
   322 				;
   323 				;**************************************************************************************************
   324 				; second half, inverse characters, fifth color (red, danger)
   325 				;**************************************************************************************************
   326 				;
   327 355B				org TabCharDefinition+$80
   328
   329 355B 00				.byte %00000000+CT_BLANK								; blank								[80]
   330 355C 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[81]
   331 355D 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[82]				
   332 355E 06				.byte %00000000+CT_HEALTH								; collectable 1						[83]
   333 355F 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[84]
   334 3560 03				.byte %00000000+CT_DANGER								; blue spikes						[85]
   335 3561 03				.byte %00000000+CT_DANGER								; blue spikes						[86]
   336 3562 05				.byte %00000000+CT_WATER								; blank								[87]
   337 3563 06				.byte %00000000+CT_HEALTH								; blank								[88]
   338 3564 00				.byte %00000000+CT_BLANK								; blank								[89]
   339 3565 00				.byte %00000000+CT_BLANK								; blank								[8A]
   340 3566 00				.byte %00000000+CT_BLANK								; blank								[8B]
   341 3567 00				.byte %00000000+CT_BLANK								; blank								[8C]
   342 3568 00				.byte %00000000+CT_BLANK								; blank								[8D]
   343 3569 00				.byte %00000000+CT_BLANK								; blank								[8E]
   344 356A 00				.byte %00000000+CT_BLANK								; blank								[8F]
   345 356B 04				.byte %00000000+CT_LADDER								; ladder							[90]
   346 356C 04				.byte %00000000+CT_LADDER								; ladder							[91]
   347 356D 04				.byte %00000000+CT_LADDER								; ladder							[92]
   348 356E 03				.byte %00000000+CT_DANGER								; blue spikes						[93]
   349 356F F8				.byte %11110000+CT_VLASER								; vertical dither 1					[94]				
   350 3570 F8				.byte %11110000+CT_VLASER								; vertical dither 2					[95]
   351 3571 F8				.byte %11110000+CT_VLASER								; vertical dither 3					[96]
   352 3572 FA				.byte %11110000+CT_HLASER								; horizontal dither 1				[97]
   353 3573 FA				.byte %11110000+CT_HLASER								; horizontal dither 2				[98]
   354 3574 FA				.byte %11110000+CT_HLASER								; horizontal dither 3				[99]
   355 3575 03				.byte %00000000+CT_DANGER								; spikes							[9A]
   356 3576 03				.byte %00000000+CT_DANGER								; spikes							[9B]
   357 3577 03				.byte %00000000+CT_DANGER								; spikes							[9C]
   358 3578 03				.byte %00000000+CT_DANGER								; spikes							[9D]
   359 3579 03				.byte %00000000+CT_DANGER								; spikes							[9E]
   360 357A 03				.byte %00000000+CT_DANGER								; spikes							[9F]
   361 357B F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[A0]
   362 357C F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[A1]
   363 357D F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[A2]
   364 357E F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[A3]
   365 357F F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[A4]
   366 3580 F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[A5]
   367 3581 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A6]
   368 3582 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A7]
   369 3583 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A8]
   370 3584 17				.byte %00010000+CT_FLOATPLATFORMH						; Floating Platform					[A9]
   371 3585 00				.byte %00000000+CT_BLANK								; blank								[AA]
   372 3586 00				.byte %00000000+CT_BLANK								; blank								[AB]
   373 3587 00				.byte %00000000+CT_BLANK								; blank								[AC]
   374 3588 00				.byte %00000000+CT_BLANK								; blank								[AD]
   375 3589 00				.byte %00000000+CT_BLANK								; blank								[AE]
   376 358A 00				.byte %00000000+CT_BLANK								; blank								[AF]
   377 358B 00				.byte %00000000+CT_BLANK								; blank								[B0]
   378 358C 00				.byte %00000000+CT_BLANK								; blank								[B1]
   379 358D 00				.byte %00000000+CT_BLANK								; blank								[B2]
   380 358E 00				.byte %00000000+CT_BLANK								; blank								[B3]
   381 358F 00				.byte %00000000+CT_BLANK								; blank								[B4]
   382 3590 00				.byte %00000000+CT_BLANK								; blank								[B5]
   383 3591 00				.byte %00000000+CT_BLANK								; blank								[B6]
   384 3592 00				.byte %00000000+CT_BLANK								; blank								[B7]
   385 3593 00				.byte %00000000+CT_BLANK								; blank								[B8]
   386 3594 00				.byte %00000000+CT_BLANK								; blank								[B9]
   387 3595 03				.byte %00000000+CT_DANGER								; spikes							[BA]
   388 3596 03				.byte %00000000+CT_DANGER								; spikes							[BB]
   389 3597 00				.byte %00000000+CT_BLANK								; blank								[BC]
   390 3598 00				.byte %00000000+CT_BLANK								; blank								[BD]
   391 3599 00				.byte %00000000+CT_BLANK								; blank								[BE]
   392 359A 00				.byte %00000000+CT_BLANK								; blank								[BF]
   393 359B 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C0]
   394 359C 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C1]
   395 359D 00				.byte %00000000+CT_BLANK								; blank								[C2]
   396 359E 00				.byte %00000000+CT_BLANK								; blank								[C3]
   397 359F 00				.byte %00000000+CT_BLANK								; blank								[C4]
   398 35A0 00				.byte %00000000+CT_BLANK								; blank								[C5]
   399 35A1 05				.byte %00000000+CT_WATER								; blank								[C6]
   400 35A2 05				.byte %00000000+CT_WATER								; blank								[C7]
   401 35A3 05				.byte %00000000+CT_WATER								; blank								[C8]
   402 35A4 05				.byte %00000000+CT_WATER								; blank								[C9]
   403 35A5 00				.byte %00000000+CT_BLANK								; blank								[CA]
   404 35A6 00				.byte %00000000+CT_BLANK								; blank								[CB]
   405 35A7 F1				.byte %11110000+CT_BLOCK								; solid platform					[CC]
   406 35A8 F1				.byte %11110000+CT_BLOCK								; solid platform					[CD]
   407 35A9 F1				.byte %11110000+CT_BLOCK								; solid platform					[CE]
   408 35AA F1				.byte %11110000+CT_BLOCK								; solid platform					[CF]
   409 35AB F1				.byte %11110000+CT_BLOCK								; solid platform					[D0]
   410 35AC F1				.byte %11110000+CT_BLOCK								; solid platform					[D1]
   411 35AD 00				.byte %00000000+CT_BLANK								; blank								[D2]   
   412 35AE 00				.byte %00000000+CT_BLANK								; blank								[D3]   
   413 35AF 00				.byte %00000000+CT_BLANK								; blank								[D4]   
   414 35B0 00				.byte %00000000+CT_BLANK								; blank								[D5]   
   415 35B1 00				.byte %00000000+CT_BLANK								; blank								[D6]   
   416 35B2 00				.byte %00000000+CT_BLANK								; blank								[D7]   
   417 35B3 00				.byte %00000000+CT_BLANK								; blank								[D8]   
   418 35B4 00				.byte %00000000+CT_BLANK								; blank								[D9]   
   419 35B5 03				.byte %00000000+CT_DANGER								; spikes							[DA]   
   420 35B6 03				.byte %00000000+CT_DANGER								; spikes							[DB]   
   421 35B7 F1				.byte %11110000+CT_BLOCK								; solid platform					[DC]   
   422 35B8 F1				.byte %11110000+CT_BLOCK								; solid platform					[DD]   
   423 35B9 F1				.byte %11110000+CT_BLOCK								; solid platform					[DE]   
   424 35BA 00				.byte %00000000+CT_BLANK								; blank								[DF]   
   425 35BB F1				.byte %11110000+CT_BLOCK								; solid platform					[E0]   
   426 35BC F1				.byte %11110000+CT_BLOCK								; solid platform					[E1]   
   427 35BD F1				.byte %11110000+CT_BLOCK								; solid platform					[E2]   
   428 35BE F1				.byte %11110000+CT_BLOCK								; solid platform					[E3]   
   429 35BF F1				.byte %11110000+CT_BLOCK								; solid platform					[E4]   
   430 35C0 F1				.byte %11110000+CT_BLOCK								; solid platform					[E5]   
   431 35C1 F1				.byte %11110000+CT_BLOCK								; solid platform					[E6]   
   432 35C2 F1				.byte %11110000+CT_BLOCK								; solid platform					[E7]   
   433 35C3 F1				.byte %11110000+CT_BLOCK								; solid platform					[E8]   
   434 35C4 F1				.byte %11110000+CT_BLOCK								; solid platform					[E9]   
   435 35C5 F1				.byte %11110000+CT_BLOCK								; solid platform					[EA]   
   436 35C6 F1				.byte %11110000+CT_BLOCK								; solid platform					[EB]   
   437 35C7 F1				.byte %11110000+CT_BLOCK								; solid platform					[EC]   
   438 35C8 F1				.byte %11110000+CT_BLOCK								; solid platform					[ED]   
   439 35C9 F1				.byte %11110000+CT_BLOCK								; solid platform					[EE]   
   440 35CA F1				.byte %11110000+CT_BLOCK								; solid platform					[EF]   
   441 35CB F1				.byte %11110000+CT_BLOCK								; solid platform					[F0]   
   442 35CC F1				.byte %11110000+CT_BLOCK								; solid platform					[F1]   
   443 35CD F1				.byte %11110000+CT_BLOCK								; solid platform					[F2]   
   444 35CE F1				.byte %11110000+CT_BLOCK								; solid platform					[F3]   
   445 35CF F1				.byte %11110000+CT_BLOCK								; solid platform					[F4]   
   446 35D0 00				.byte %00000000+CT_BLANK								; blank								[F5]   
   447 35D1 00				.byte %00000000+CT_BLANK								; blank								[F6]   
   448 35D2 00				.byte %00000000+CT_BLANK								; blank								[F7]   
   449 35D3 00				.byte %00000000+CT_BLANK								; blank								[F8]   
   450 35D4 00				.byte %00000000+CT_BLANK								; blank								[F9]   
   451 35D5 00				.byte %00000000+CT_BLANK								; blank								[FA]   
   452 35D6 00				.byte %00000000+CT_BLANK								; blank								[FB]   
   453 35D7 00				.byte %00000000+CT_BLANK								; blank								[FC]   
   454 35D8 00				.byte %00000000+CT_BLANK								; blank								[FD]   
   455 35D9 00				.byte %00000000+CT_BLANK								; blank								[FE]   
   456 35DA 00				.byte %00000000+CT_BLANK								; blank								[FF]
   457
   458 				;*****	Game Dislplay List Definition
   459 				;
   460 35DB			GameDL 
   461 35DB 70					.byte DL_BLANK_8
   462 35DC 70					.byte DL_BLANK_8
   463 35DD F0					.byte DL_BLANK_8 + DL_DLI
   464
   465 35DE			GameDL_LMS1
   466 						
   467 = B000					?dldata = GameMemoryAddress
   468 						.rept 24
   469 							.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   470 							.BYTE <?DLDATA, >?DLDATA
   471 							?DLDATA += LEVEL_CHAR_SIZE_X
   472 						.ENDR
   472 						.endr
Source: REPT
   469 35DE 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35DF 00 B0					.BYTE <?DLDATA, >?DLDATA
   469 = B052						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35E1 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35E2 52 B0					.BYTE <?DLDATA, >?DLDATA
   469 = B0A4						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35E4 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35E5 A4 B0					.BYTE <?DLDATA, >?DLDATA
   469 = B0F6						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35E7 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35E8 F6 B0					.BYTE <?DLDATA, >?DLDATA
   469 = B148						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35EA 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35EB 48 B1					.BYTE <?DLDATA, >?DLDATA
   469 = B19A						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35ED 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35EE 9A B1					.BYTE <?DLDATA, >?DLDATA
   469 = B1EC						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35F0 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35F1 EC B1					.BYTE <?DLDATA, >?DLDATA
   469 = B23E						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35F3 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35F4 3E B2					.BYTE <?DLDATA, >?DLDATA
   469 = B290						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35F6 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35F7 90 B2					.BYTE <?DLDATA, >?DLDATA
   469 = B2E2						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35F9 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35FA E2 B2					.BYTE <?DLDATA, >?DLDATA
   469 = B334						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35FC 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 35FD 34 B3					.BYTE <?DLDATA, >?DLDATA
   469 = B386						?DLDATA += LEVEL_CHAR_SIZE_X
   469 35FF 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3600 86 B3					.BYTE <?DLDATA, >?DLDATA
   469 = B3D8						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3602 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3603 D8 B3					.BYTE <?DLDATA, >?DLDATA
   469 = B42A						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3605 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3606 2A B4					.BYTE <?DLDATA, >?DLDATA
   469 = B47C						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3608 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3609 7C B4					.BYTE <?DLDATA, >?DLDATA
   469 = B4CE						?DLDATA += LEVEL_CHAR_SIZE_X
   469 360B 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 360C CE B4					.BYTE <?DLDATA, >?DLDATA
   469 = B520						?DLDATA += LEVEL_CHAR_SIZE_X
   469 360E 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 360F 20 B5					.BYTE <?DLDATA, >?DLDATA
   469 = B572						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3611 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3612 72 B5					.BYTE <?DLDATA, >?DLDATA
   469 = B5C4						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3614 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3615 C4 B5					.BYTE <?DLDATA, >?DLDATA
   469 = B616						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3617 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3618 16 B6					.BYTE <?DLDATA, >?DLDATA
   469 = B668						?DLDATA += LEVEL_CHAR_SIZE_X
   469 361A 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 361B 68 B6					.BYTE <?DLDATA, >?DLDATA
   469 = B6BA						?DLDATA += LEVEL_CHAR_SIZE_X
   469 361D 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 361E BA B6					.BYTE <?DLDATA, >?DLDATA
   469 = B70C						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3620 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3621 0C B7					.BYTE <?DLDATA, >?DLDATA
   469 = B75E						?DLDATA += LEVEL_CHAR_SIZE_X
   469 3623 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   469 3624 5E B7					.BYTE <?DLDATA, >?DLDATA
   469 = B7B0						?DLDATA += LEVEL_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   473 					
   474 3626 54					.byte DL_TEXT_4 + DL_LMS + DL_HSCROLL
   475 3627 B0 B7				.byte <?dldata, >?dldata
   476 					
   477 3629 A0					.byte DL_BLANK_3 + DL_DLI
   478
   479 = 0680					?dldata = HudMemoryAddr
   480 						.rept 2
   481 							.BYTE DL_TEXT_2 + DL_LMS
   482 							.BYTE <?DLDATA, >?DLDATA
   483 							?DLDATA += WINDOW_CHAR_SIZE_X
   484 						.ENDR	
   484 						.endr	
Source: REPT
   481 362A 42						.BYTE DL_TEXT_2 + DL_LMS
   481 362B 80 06					.BYTE <?DLDATA, >?DLDATA
   481 = 06A8						?DLDATA += WINDOW_CHAR_SIZE_X
   481 362D 42						.BYTE DL_TEXT_2 + DL_LMS
   481 362E A8 06					.BYTE <?DLDATA, >?DLDATA
   481 = 06D0						?DLDATA += WINDOW_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Scroller\ScrollerData.Asm
   485 					
   486 3630 41 00 0E				.byte DL_JUMP_VB, <GameDspLstAddr, >GameDspLstAddr
   487
   488 = 0058			GameDLEnd = * - GameDL
   489 							
   388 3633					icl "PlayerData.Asm"
Source: E:\_8BitProjects\Series\Scroller\PlayerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerData.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code taken from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 3633			.array TabAnimationMap [12] .byte
    14  [0000] 00 15 01			$00, $15, $01 			
    15  [0003] 15 15 01			$15, $15, $01
    16  [0006] 2A 15 01			$2A, $15, $01		
    17  [0009] 3F 15 01			$3F, $15, $01	 
    18 				.enda
    19
    20 363F			.array TabAnimationMiscMap [10] .byte
    21
    22  [0000] 45 37 18 0C 08		<BONUS100, >BONUS100, BONUS100END, $0C, $08
    23  [0005] 5D 37 18 0C 08		<CLEARBONUS, >CLEARBONUS, CLEARBONUSEND, $0C, $08
    24 					
    25 				.enda
    26
    27 3649			TabPlayerShape_01								
    28 					
    29 					; Standing 0
    30 3649 18				.byte 	%00011000							; ...##...
    31 364A 3C				.byte 	%00111100                           ; ..####..
    32 364B FF				.byte 	%11111111                           ; ########
    33 364C 00				.byte 	%00000000                           ; ........
    34 364D 00				.byte 	%00000000                           ; ........
    35 364E 00				.byte 	%00000000                           ; ........
    36 364F 00				.byte 	%00000000                           ; ........
    37 3650 00				.byte 	%00000000                           ; ........
    38 3651 00				.byte 	%00000000                           ; ........
    39 3652 18				.byte 	%00011000                           ; ...##...
    40 3653 18				.byte 	%00011000                           ; ...##...
    41 3654 3C				.byte 	%00111100                           ; ..####..
    42 3655 6E				.byte 	%01101110                           ; .##.###.
    43 3656 00				.byte 	%00000000                           ; ........
    44 3657 00				.byte 	%00000000                           ; ........
    45 3658 6E				.byte 	%01101110                           ; .## ###.
    46 3659 76				.byte 	%01110110                           ; .######.
    47 365A 3C				.byte 	%00111100                           ; ..####..
    48 365B 00				.byte 	%00000000                           ; ........
    49 365C 00				.byte 	%00000000                           ; ........
    50 365D 00				.byte 	%00000000                           ; ........
    51 						
    52 					; Walking 0
    53 365E 18				.byte 	%00011000							; ...##...
    54 365F 3C				.byte	%00111100							; ..####..
    55 3660 FF				.byte	%11111111							; ########
    56 3661 00				.byte	%00000000							; ........
    57 3662 00				.byte	%00000000							; ........
    58 3663 00				.byte 	%00000000							; ........							
    59 3664 00				.byte 	%00000000							; ........
    60 3665 00				.byte 	%00000000							; ........		
    61 3666 00				.byte 	%00000000							; ........
    62 3667 18				.byte 	%00011000							; ...##...
    63 3668 18				.byte 	%00011000							; ...##...
    64 3669 3C				.byte 	%00111100							; ..####..
    65 366A 6E				.byte 	%01101110							; .##.###.
    66 366B 00				.byte 	%00000000							; ........
    67 366C 00				.byte 	%00000000							; ........
    68 366D 7A				.byte 	%01111010							; .####.#.
    69 366E 7E				.byte 	%01111110							; .######.
    70 366F 3C				.byte 	%00111100							; ..####..
    71 3670 00				.byte 	%00000000							; ........
    72 3671 00				.byte 	%00000000							; ........
    73 3672 00				.byte 	%00000000							; ........
    74
    75 					; Walking 1	
    76 3673 18				.byte 	%00011000							; ...##...  
    77 3674 3C				.byte 	%00111100							; ..####..  
    78 3675 FF				.byte 	%11111111                           ; ########  
    79 3676 00				.byte 	%00000000                           ; ........  
    80 3677 00				.byte 	%00000000			                ; ........  
    81 3678 00				.byte 	%00000000                           ; ........	
    82 3679 00				.byte 	%00000000                           ; ........  
    83 367A 00				.byte 	%00000000                           ; ........	
    84 367B 00				.byte 	%00000000                           ; ........  
    85 367C 18				.byte 	%00011000                           ; ...##...  
    86 367D 18				.byte 	%00011000                           ; ...##...  
    87 367E 3C				.byte 	%00111100                           ; ..####..  
    88 367F 6E				.byte 	%01101110                           ; .##.###.  
    89 3680 00				.byte 	%00000000                           ; ........  
    90 3681 00				.byte 	%00000000                           ; ........  
    91 3682 3E				.byte 	%00111110                           ; ..#####.  
    92 3683 7E				.byte 	%01111110                           ; .######.  
    93 3684 3C				.byte 	%00111100                           ; ..####..  
    94 3685 00				.byte 	%00000000                           ; ........  
    95 3686 00				.byte 	%00000000                           ; ........  
    96 3687 00				.byte 	%00000000                           ; ........  
    97
    98 					; Jumping 0
    99 3688 18				.byte %00011000								;...##...
   100 3689 3C				.byte %00111100								;..####..
   101 368A FF				.byte %11111111								;########
   102 368B 00				.byte %00000000								;........
   103 368C 00				.byte %00000000								;........
   104 368D 00				.byte %00000000								;........
   105 368E 00				.byte %00000000								;........
   106 368F 00				.byte %00000000								;........
   107 3690 00				.byte %00000000								;........
   108 3691 18				.byte %00011000								;...##...
   109 3692 18				.byte %00011000								;...##...
   110 3693 3C				.byte %00111100								;..####..
   111 3694 7E				.byte %01111110								;.######.
   112 3695 00				.byte %00000000								;........
   113 3696 00				.byte %00000000								;........
   114 3697 7E				.byte %01111110								;.######.
   115 3698 3E				.byte %00111110								;..#####.
   116 3699 0C				.byte %00001100								;....##..
   117 369A 00				.byte %00000000								;........
   118 369B 00				.byte %00000000								;........
   119 369C 00				.byte %00000000								;........
   120 				                                                
   121 369D			TabPlayerShape_01A								
   122 					
   123 					; Standing 0			
   124 369D 18				.byte 	%00011000							; ...##...
   125 369E 3C				.byte 	%00111100                           ; ..####..
   126 369F FF				.byte 	%11111111                           ; ########
   127 36A0 3C				.byte 	%00111100                           ; ..####..
   128 36A1 34				.byte 	%00110100                           ; ..##.#..
   129 36A2 3E				.byte 	%00111110                           ; ..#####.
   130 36A3 34				.byte 	%00110100                           ; ..##.#..
   131 36A4 38				.byte 	%00111000                           ; ..###...
   132 36A5 1C				.byte 	%00011100                           ; ...###..
   133 36A6 00				.byte 	%00000000                           ; ........
   134 36A7 00				.byte 	%00000000                           ; ........
   135 36A8 00				.byte 	%00000000                           ; ........
   136 36A9 00				.byte 	%00000000                           ; ........
   137 36AA 6E				.byte 	%01101110                           ; .##.###.
   138 36AB 6E				.byte 	%01101110                           ; .##.###.
   139 36AC 00				.byte 	%00000000                           ; ........
   140 36AD 00				.byte 	%00000000                           ; ........
   141 36AE 00				.byte 	%00000000                           ; ........
   142 36AF 00				.byte 	%00000000                           ; ........
   143 36B0 00				.byte 	%00000000                           ; ........
   144 36B1 00				.byte 	%00000000                           ; ........
   145 						
   146 					
   147 					; Walking 0
   148 36B2 18				.byte 	%00011000							; ...##...
   149 36B3 3C				.byte 	%00111100							; ..####..	
   150 36B4 FF				.byte 	%11111111							; ########
   151 36B5 3C				.byte 	%00111100							; ..####..
   152 36B6 34				.byte 	%00110100							; ..##.#..
   153 36B7 3E				.byte 	%00111110							; ..#####.
   154 36B8 34				.byte 	%00110100							; ..##.#..
   155 36B9 38				.byte 	%00111000							; ..###...
   156 36BA 1C				.byte 	%00011100							; ...###..
   157 36BB 00				.byte 	%00000000							; ........
   158 36BC 00				.byte 	%00000000							; ........
   159 36BD 00				.byte 	%00000000							; ........
   160 36BE 00				.byte 	%00000000							; ........
   161 36BF 6E				.byte 	%01101110							; .##.###.	
   162 36C0 76				.byte 	%01110110							; .###.##.
   163 36C1 00				.byte 	%00000000							; ........
   164 36C2 00				.byte 	%00000000							; ........
   165 36C3 00				.byte 	%00000000							; ........
   166 36C4 00				.byte 	%00000000							; ........
   167 36C5 00				.byte 	%00000000							; ........
   168 36C6 00				.byte 	%00000000							; ........
   169
   170 					; Walking 1
   171 36C7 18				.byte	%00011000							; ...##... 
   172 36C8 3C				.byte	%00111100                           ; ..####.. 
   173 36C9 FF				.byte	%11111111                           ; ######## 
   174 36CA 3C				.byte	%00111100                           ; ..####.. 
   175 36CB 34				.byte	%00110100			                ; ..##.#.. 
   176 36CC 3E				.byte	%00111110                           ; ..#####. 
   177 36CD 34				.byte	%00110100                           ; ..##.#.. 
   178 36CE 38				.byte	%00111000                           ; ..###... 
   179 36CF 1C				.byte	%00011100                           ; ...###.. 
   180 36D0 00				.byte	%00000000                           ; ........ 
   181 36D1 00				.byte	%00000000                           ; ........ 
   182 36D2 00				.byte	%00000000                           ; ........ 
   183 36D3 00				.byte	%00000000                           ; ........ 
   184 36D4 6E				.byte	%01101110                           ; .##.###. 
   185 36D5 5E				.byte	%01011110                           ; .#.####. 
   186 36D6 00				.byte	%00000000                           ; ........ 
   187 36D7 00				.byte	%00000000                           ; ........ 
   188 36D8 00				.byte	%00000000                           ; ........ 
   189 36D9 00				.byte	%00000000                           ; ........ 
   190 36DA 00				.byte	%00000000                           ; ........ 
   191 36DB 00				.byte	%00000000                           ; ........       
   192 					
   193 					
   194 					; Jumping 1	
   195 36DC 18				.byte %00011000								;...##...
   196 36DD 3C				.byte %00111100                             ;..####..
   197 36DE FF				.byte %11111111                             ;########
   198 36DF 3C				.byte %00111100                             ;..####..
   199 36E0 34				.byte %00110100                             ;..##.#..
   200 36E1 3E				.byte %00111110                             ;..#####.
   201 36E2 34				.byte %00110100                             ;..##.#..
   202 36E3 38				.byte %00111000                             ;..###...
   203 36E4 1C				.byte %00011100                             ;...###..
   204 36E5 00				.byte %00000000                             ;........
   205 36E6 00				.byte %00000000                             ;........
   206 36E7 00				.byte %00000000                             ;........
   207 36E8 00				.byte %00000000                             ;........
   208 36E9 7E				.byte %01111110                             ;.######.
   209 36EA 7E				.byte %01111110                             ;.######.
   210 36EB 00				.byte %00000000                             ;........
   211 36EC 00				.byte %00000000                             ;........
   212 36ED 00				.byte %00000000                             ;........
   213 36EE 00				.byte %00000000                             ;........
   214 36EF 00				.byte %00000000                             ;........
   215 36F0 00				.byte %00000000                             ;........
   216 					
   217
   218 36F1			TabPlayerShape_01B								
   219
   220 					; Standing 0
   221 36F1 00				.byte 	%00000000							; ........
   222 36F2 00				.byte 	%00000000                           ; ........
   223 36F3 00				.byte 	%00000000                           ; ........
   224 36F4 00				.byte 	%00000000                           ; ........
   225 36F5 00				.byte 	%00000000			                ; ........
   226 36F6 00				.byte 	%00000000                           ; ........
   227 36F7 00				.byte 	%00000000                           ; ........
   228 36F8 00				.byte 	%00000000                           ; ........
   229 36F9 00				.byte 	%00000000                           ; ........
   230 36FA 00				.byte 	%00000000                           ; ........
   231 36FB 00				.byte 	%00000000                           ; ........
   232 36FC 00				.byte 	%00000000                           ; ........
   233 36FD 10				.byte 	%00010000                           ; ...#....
   234 36FE 10				.byte 	%00010000                           ; ...#....
   235 36FF 10				.byte 	%00010000                           ; ...#....
   236 3700 10				.byte 	%00010000                           ; ...#....
   237 3701 08				.byte 	%00001000                           ; ........
   238 3702 00				.byte 	%00000000                           ; ........
   239 3703 10				.byte 	%00010000                           ; ...#.#..
   240 3704 10				.byte 	%00010000                           ; ...#.#..
   241 3705 18				.byte 	%00011000                           ; ...####.
   242
   243 					; Walking 0
   244 3706 00				.byte 	%00000000							; ........
   245 3707 00				.byte   %00000000							; ........
   246 3708 00				.byte   %00000000							; ........
   247 3709 00				.byte   %00000000							; ........
   248 370A 00				.byte   %00000000							; ........
   249 370B 00				.byte 	%00000000							; ........
   250 370C 00				.byte   %00000000							; ........
   251 370D 00				.byte   %00000000							; ........
   252 370E 00				.byte   %00000000							; ........
   253 370F 00				.byte   %00000000							; ........
   254 3710 00				.byte 	%00000000							; ........
   255 3711 00				.byte   %00000000							; ........
   256 3712 10				.byte   %00010000							; ...#....
   257 3713 10				.byte   %00010000							; ...#....
   258 3714 08				.byte   %00001000							; ....#...
   259 3715 04				.byte 	%00000100							; .....#..
   260 3716 00				.byte   %00000000							; ........
   261 3717 00				.byte   %00000000							; ........
   262 3718 24				.byte   %00100100							; ..#. #..
   263 3719 24				.byte   %00100100							; ..#. #..
   264 371A 36				.byte   %00110110							; ..## ##.
   265
   266 					; Walking 1	
   267 371B 00				.byte 	%00000000							; ........
   268 371C 00				.byte 	%00000000                           ; ........
   269 371D 00				.byte 	%00000000                           ; ........
   270 371E 00				.byte 	%00000000                           ; ........
   271 371F 00				.byte 	%00000000			                ; ........
   272 3720 00				.byte 	%00000000                           ; ........
   273 3721 00				.byte 	%00000000                           ; ........
   274 3722 00				.byte 	%00000000                           ; ........
   275 3723 00				.byte 	%00000000                           ; ........
   276 3724 00				.byte 	%00000000                           ; ........
   277 3725 00				.byte 	%00000000                           ; ........
   278 3726 00				.byte 	%00000000                           ; ........
   279 3727 10				.byte 	%00010000                           ; ...#....
   280 3728 10				.byte 	%00010000                           ; ...#....
   281 3729 20				.byte 	%00100000                           ; ..#.....
   282 372A 40				.byte 	%01000000                           ; .#......
   283 372B 00				.byte 	%00000000                           ; ........
   284 372C 00				.byte 	%00000000                           ; ........
   285 372D 24				.byte 	%00100100                           ; .#...#..
   286 372E 24				.byte 	%00100100                           ; .#...#..
   287 372F 36				.byte 	%00110110                           ; .##..##.
   288 					
   289 					; Jumping 2
   290 3730 00			    .byte %00000000								;........
   291 3731 00			    .byte %00000000                             ;........
   292 3732 00				.byte %00000000                             ;........
   293 3733 00				.byte %00000000                             ;........
   294 3734 00				.byte %00000000                             ;........
   295 3735 00				.byte %00000000                             ;........
   296 3736 00				.byte %00000000                             ;........
   297 3737 00				.byte %00000000                             ;........
   298 3738 81				.byte %10000001                             ;#......#
   299 3739 42				.byte %01000010                             ;.#....#.
   300 373A 24				.byte %00100100                             ;..#..#..
   301 373B 00				.byte %00000000                             ;........
   302 373C 00				.byte %00000000                             ;........
   303 373D 00				.byte %00000000                             ;........
   304 373E 00				.byte %00000000                             ;........
   305 373F 10				.byte %00010000                             ;...#....
   306 3740 14				.byte %00010100                             ;...#.#..
   307 3741 24				.byte %00100100                             ;..#..#..
   308 3742 A5				.byte %10100101                             ;#.#..#.#
   309 3743 42				.byte %01000010                             ;.#....#.
   310 3744 00				.byte %00000000                             ;........
   311
   312 				;*****	Misc Animations and Graphics
   313 				;
   314 3745			BONUS100
   315
   316 3745 00 00 00			.byte %0000,%0000,%0000							;............
   317 3748 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   318 374B 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   319 374E 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   320 3751 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   321 3754 04 0A 0A			.byte %0100,%1010,%1010							;.#..#.#.#.#.
   322 3757 04 04 04			.byte %0100,%0100,%0100							;.#...#...#..
   323 375A 00 00 00			.byte %0000,%0000,%0000							;............
   324
   325 = 0018			BONUS100END = * - BONUS100
   326
   327 375D			CLEARBONUS
   328
   329 375D 00 00 00			.byte %0000,%0000,%0000							;............
   330 3760 00 00 00			.byte %0000,%0000,%0000							;............
   331 3763 00 00 00			.byte %0000,%0000,%0000							;............
   332 3766 00 00 00			.byte %0000,%0000,%0000							;............
   333 3769 00 00 00			.byte %0000,%0000,%0000							;............
   334 376C 00 00 00			.byte %0000,%0000,%0000							;............
   335 376F 00 00 00			.byte %0000,%0000,%0000							;............
   336 3772 00 00 00			.byte %0000,%0000,%0000							;............
   337
   338 = 0018			CLEARBONUSEND = * - CLEARBONUS
   389 						
   390 				.PRINT "Data Size : ", * - DataAddress		
   390 				Data Size : $0775
   391
   392 				;*****	Game font address
   393 				;
   394 3775					org GameFontAddress
   395 A800-AFFF> 00 00 00 00 + 		ins "data/scroller.fnt"
   396 					
   397 				;*****	Text font address
   398 				;
   399 AC00					org TextFontAddress
   400 AC00 00 00 00 00 00 00 + 		ins "data/atari.fnt"
   401 					
   402 				;*****	Sound Data Address
   403 				;
   404 B000					org SoundAddress
   405 						opt h-									;RMT module is standard Atari binary file already
   406 4000 FF FF 00 40 AA 42 + 		ins "Data/sfx.rmt"						;include music RMT module
   407 						opt h+
   408 					
   409 				;*****	HUD Memory Address	
   410 				;
   411 42B1					org HudMemoryAddr							
   412 						 
   413 				.if PAL_VERSION = 0
   414 0680-06CF> 00 00 27 00 + 		.sb "  G 00    E 00    T 00:00.0  H 00 NTSC  "
   415 				.else
   416 						.sb "  G 00    E 00    T 00:00.0  H 00  PAL  "
   417 				.endif
   418 06A8 00 00 00 00 00 00 + 		.sb "                                        "
   419 					
   420 				;*****	Game Memory Address 
   421 				;
   422 06D0					org GameMemoryAddress	
   423 						.rept $1000-LEVEL_CHAR_SIZE_X
   424 							.BYTE $00
   425 						.ENDR
   425 						.endr
Source: REPT
   424 B000-BFFF> 00					.BYTE $00
   424 B001 00						.BYTE $00
   424 B002 00						.BYTE $00
   424 B003 00						.BYTE $00
   424 B004 00						.BYTE $00
   424 B005 00						.BYTE $00
   424 B006 00						.BYTE $00
   424 B007 00						.BYTE $00
   424 B008 00						.BYTE $00
   424 B009 00						.BYTE $00
   424 B00A 00						.BYTE $00
   424 B00B 00						.BYTE $00
   424 B00C 00						.BYTE $00
   424 B00D 00						.BYTE $00
   424 B00E 00						.BYTE $00
   424 B00F 00						.BYTE $00
   424 B010 00						.BYTE $00
   424 B011 00						.BYTE $00
   424 B012 00						.BYTE $00
   424 B013 00						.BYTE $00
   424 B014 00						.BYTE $00
   424 B015 00						.BYTE $00
   424 B016 00						.BYTE $00
   424 B017 00						.BYTE $00
   424 B018 00						.BYTE $00
   424 B019 00						.BYTE $00
   424 B01A 00						.BYTE $00
   424 B01B 00						.BYTE $00
   424 B01C 00						.BYTE $00
   424 B01D 00						.BYTE $00
   424 B01E 00						.BYTE $00
   424 B01F 00						.BYTE $00
   424 B020 00						.BYTE $00
   424 B021 00						.BYTE $00
   424 B022 00						.BYTE $00
   424 B023 00						.BYTE $00
   424 B024 00						.BYTE $00
   424 B025 00						.BYTE $00
   424 B026 00						.BYTE $00
   424 B027 00						.BYTE $00
   424 B028 00						.BYTE $00
   424 B029 00						.BYTE $00
   424 B02A 00						.BYTE $00
   424 B02B 00						.BYTE $00
   424 B02C 00						.BYTE $00
   424 B02D 00						.BYTE $00
   424 B02E 00						.BYTE $00
   424 B02F 00						.BYTE $00
   424 B030 00						.BYTE $00
   424 B031 00						.BYTE $00
   424 B032 00						.BYTE $00
   424 B033 00						.BYTE $00
   424 B034 00						.BYTE $00
   424 B035 00						.BYTE $00
   424 B036 00						.BYTE $00
   424 B037 00						.BYTE $00
   424 B038 00						.BYTE $00
   424 B039 00						.BYTE $00
   424 B03A 00						.BYTE $00
   424 B03B 00						.BYTE $00
   424 B03C 00						.BYTE $00
   424 B03D 00						.BYTE $00
   424 B03E 00						.BYTE $00
   424 B03F 00						.BYTE $00
   424 B040 00						.BYTE $00
   424 B041 00						.BYTE $00
   424 B042 00						.BYTE $00
   424 B043 00						.BYTE $00
   424 B044 00						.BYTE $00
   424 B045 00						.BYTE $00
   424 B046 00						.BYTE $00
   424 B047 00						.BYTE $00
   424 B048 00						.BYTE $00
   424 B049 00						.BYTE $00
   424 B04A 00						.BYTE $00
   424 B04B 00						.BYTE $00
   424 B04C 00						.BYTE $00
   424 B04D 00						.BYTE $00
   424 B04E 00						.BYTE $00
   424 B04F 00						.BYTE $00
   424 B050 00						.BYTE $00
   424 B051 00						.BYTE $00
   424 B052 00						.BYTE $00
   424 B053 00						.BYTE $00
   424 B054 00						.BYTE $00
   424 B055 00						.BYTE $00
   424 B056 00						.BYTE $00
   424 B057 00						.BYTE $00
   424 B058 00						.BYTE $00
   424 B059 00						.BYTE $00
   424 B05A 00						.BYTE $00
   424 B05B 00						.BYTE $00
   424 B05C 00						.BYTE $00
   424 B05D 00						.BYTE $00
   424 B05E 00						.BYTE $00
   424 B05F 00						.BYTE $00
   424 B060 00						.BYTE $00
   424 B061 00						.BYTE $00
   424 B062 00						.BYTE $00
   424 B063 00						.BYTE $00
   424 B064 00						.BYTE $00
   424 B065 00						.BYTE $00
   424 B066 00						.BYTE $00
   424 B067 00						.BYTE $00
   424 B068 00						.BYTE $00
   424 B069 00						.BYTE $00
   424 B06A 00						.BYTE $00
   424 B06B 00						.BYTE $00
   424 B06C 00						.BYTE $00
   424 B06D 00						.BYTE $00
   424 B06E 00						.BYTE $00
   424 B06F 00						.BYTE $00
   424 B070 00						.BYTE $00
   424 B071 00						.BYTE $00
   424 B072 00						.BYTE $00
   424 B073 00						.BYTE $00
   424 B074 00						.BYTE $00
   424 B075 00						.BYTE $00
   424 B076 00						.BYTE $00
   424 B077 00						.BYTE $00
   424 B078 00						.BYTE $00
   424 B079 00						.BYTE $00
   424 B07A 00						.BYTE $00
   424 B07B 00						.BYTE $00
   424 B07C 00						.BYTE $00
   424 B07D 00						.BYTE $00
   424 B07E 00						.BYTE $00
   424 B07F 00						.BYTE $00
   424 B080 00						.BYTE $00
   424 B081 00						.BYTE $00
   424 B082 00						.BYTE $00
   424 B083 00						.BYTE $00
   424 B084 00						.BYTE $00
   424 B085 00						.BYTE $00
   424 B086 00						.BYTE $00
   424 B087 00						.BYTE $00
   424 B088 00						.BYTE $00
   424 B089 00						.BYTE $00
   424 B08A 00						.BYTE $00
   424 B08B 00						.BYTE $00
   424 B08C 00						.BYTE $00
   424 B08D 00						.BYTE $00
   424 B08E 00						.BYTE $00
   424 B08F 00						.BYTE $00
   424 B090 00						.BYTE $00
   424 B091 00						.BYTE $00
   424 B092 00						.BYTE $00
   424 B093 00						.BYTE $00
   424 B094 00						.BYTE $00
   424 B095 00						.BYTE $00
   424 B096 00						.BYTE $00
   424 B097 00						.BYTE $00
   424 B098 00						.BYTE $00
   424 B099 00						.BYTE $00
   424 B09A 00						.BYTE $00
   424 B09B 00						.BYTE $00
   424 B09C 00						.BYTE $00
   424 B09D 00						.BYTE $00
   424 B09E 00						.BYTE $00
   424 B09F 00						.BYTE $00
   424 B0A0 00						.BYTE $00
   424 B0A1 00						.BYTE $00
   424 B0A2 00						.BYTE $00
   424 B0A3 00						.BYTE $00
   424 B0A4 00						.BYTE $00
   424 B0A5 00						.BYTE $00
   424 B0A6 00						.BYTE $00
   424 B0A7 00						.BYTE $00
   424 B0A8 00						.BYTE $00
   424 B0A9 00						.BYTE $00
   424 B0AA 00						.BYTE $00
   424 B0AB 00						.BYTE $00
   424 B0AC 00						.BYTE $00
   424 B0AD 00						.BYTE $00
   424 B0AE 00						.BYTE $00
   424 B0AF 00						.BYTE $00
   424 B0B0 00						.BYTE $00
   424 B0B1 00						.BYTE $00
   424 B0B2 00						.BYTE $00
   424 B0B3 00						.BYTE $00
   424 B0B4 00						.BYTE $00
   424 B0B5 00						.BYTE $00
   424 B0B6 00						.BYTE $00
   424 B0B7 00						.BYTE $00
   424 B0B8 00						.BYTE $00
   424 B0B9 00						.BYTE $00
   424 B0BA 00						.BYTE $00
   424 B0BB 00						.BYTE $00
   424 B0BC 00						.BYTE $00
   424 B0BD 00						.BYTE $00
   424 B0BE 00						.BYTE $00
   424 B0BF 00						.BYTE $00
   424 B0C0 00						.BYTE $00
   424 B0C1 00						.BYTE $00
   424 B0C2 00						.BYTE $00
   424 B0C3 00						.BYTE $00
   424 B0C4 00						.BYTE $00
   424 B0C5 00						.BYTE $00
   424 B0C6 00						.BYTE $00
   424 B0C7 00						.BYTE $00
   424 B0C8 00						.BYTE $00
   424 B0C9 00						.BYTE $00
   424 B0CA 00						.BYTE $00
   424 B0CB 00						.BYTE $00
   424 B0CC 00						.BYTE $00
   424 B0CD 00						.BYTE $00
   424 B0CE 00						.BYTE $00
   424 B0CF 00						.BYTE $00
   424 B0D0 00						.BYTE $00
   424 B0D1 00						.BYTE $00
   424 B0D2 00						.BYTE $00
   424 B0D3 00						.BYTE $00
   424 B0D4 00						.BYTE $00
   424 B0D5 00						.BYTE $00
   424 B0D6 00						.BYTE $00
   424 B0D7 00						.BYTE $00
   424 B0D8 00						.BYTE $00
   424 B0D9 00						.BYTE $00
   424 B0DA 00						.BYTE $00
   424 B0DB 00						.BYTE $00
   424 B0DC 00						.BYTE $00
   424 B0DD 00						.BYTE $00
   424 B0DE 00						.BYTE $00
   424 B0DF 00						.BYTE $00
   424 B0E0 00						.BYTE $00
   424 B0E1 00						.BYTE $00
   424 B0E2 00						.BYTE $00
   424 B0E3 00						.BYTE $00
   424 B0E4 00						.BYTE $00
   424 B0E5 00						.BYTE $00
   424 B0E6 00						.BYTE $00
   424 B0E7 00						.BYTE $00
   424 B0E8 00						.BYTE $00
   424 B0E9 00						.BYTE $00
   424 B0EA 00						.BYTE $00
   424 B0EB 00						.BYTE $00
   424 B0EC 00						.BYTE $00
   424 B0ED 00						.BYTE $00
   424 B0EE 00						.BYTE $00
   424 B0EF 00						.BYTE $00
   424 B0F0 00						.BYTE $00
   424 B0F1 00						.BYTE $00
   424 B0F2 00						.BYTE $00
   424 B0F3 00						.BYTE $00
   424 B0F4 00						.BYTE $00
   424 B0F5 00						.BYTE $00
   424 B0F6 00						.BYTE $00
   424 B0F7 00						.BYTE $00
   424 B0F8 00						.BYTE $00
   424 B0F9 00						.BYTE $00
   424 B0FA 00						.BYTE $00
   424 B0FB 00						.BYTE $00
   424 B0FC 00						.BYTE $00
   424 B0FD 00						.BYTE $00
   424 B0FE 00						.BYTE $00
   424 B0FF 00						.BYTE $00
   424 B100 00						.BYTE $00
   424 B101 00						.BYTE $00
   424 B102 00						.BYTE $00
   424 B103 00						.BYTE $00
   424 B104 00						.BYTE $00
   424 B105 00						.BYTE $00
   424 B106 00						.BYTE $00
   424 B107 00						.BYTE $00
   424 B108 00						.BYTE $00
   424 B109 00						.BYTE $00
   424 B10A 00						.BYTE $00
   424 B10B 00						.BYTE $00
   424 B10C 00						.BYTE $00
   424 B10D 00						.BYTE $00
   424 B10E 00						.BYTE $00
   424 B10F 00						.BYTE $00
   424 B110 00						.BYTE $00
   424 B111 00						.BYTE $00
   424 B112 00						.BYTE $00
   424 B113 00						.BYTE $00
   424 B114 00						.BYTE $00
   424 B115 00						.BYTE $00
   424 B116 00						.BYTE $00
   424 B117 00						.BYTE $00
   424 B118 00						.BYTE $00
   424 B119 00						.BYTE $00
   424 B11A 00						.BYTE $00
   424 B11B 00						.BYTE $00
   424 B11C 00						.BYTE $00
   424 B11D 00						.BYTE $00
   424 B11E 00						.BYTE $00
   424 B11F 00						.BYTE $00
   424 B120 00						.BYTE $00
   424 B121 00						.BYTE $00
   424 B122 00						.BYTE $00
   424 B123 00						.BYTE $00
   424 B124 00						.BYTE $00
   424 B125 00						.BYTE $00
   424 B126 00						.BYTE $00
   424 B127 00						.BYTE $00
   424 B128 00						.BYTE $00
   424 B129 00						.BYTE $00
   424 B12A 00						.BYTE $00
   424 B12B 00						.BYTE $00
   424 B12C 00						.BYTE $00
   424 B12D 00						.BYTE $00
   424 B12E 00						.BYTE $00
   424 B12F 00						.BYTE $00
   424 B130 00						.BYTE $00
   424 B131 00						.BYTE $00
   424 B132 00						.BYTE $00
   424 B133 00						.BYTE $00
   424 B134 00						.BYTE $00
   424 B135 00						.BYTE $00
   424 B136 00						.BYTE $00
   424 B137 00						.BYTE $00
   424 B138 00						.BYTE $00
   424 B139 00						.BYTE $00
   424 B13A 00						.BYTE $00
   424 B13B 00						.BYTE $00
   424 B13C 00						.BYTE $00
   424 B13D 00						.BYTE $00
   424 B13E 00						.BYTE $00
   424 B13F 00						.BYTE $00
   424 B140 00						.BYTE $00
   424 B141 00						.BYTE $00
   424 B142 00						.BYTE $00
   424 B143 00						.BYTE $00
   424 B144 00						.BYTE $00
   424 B145 00						.BYTE $00
   424 B146 00						.BYTE $00
   424 B147 00						.BYTE $00
   424 B148 00						.BYTE $00
   424 B149 00						.BYTE $00
   424 B14A 00						.BYTE $00
   424 B14B 00						.BYTE $00
   424 B14C 00						.BYTE $00
   424 B14D 00						.BYTE $00
   424 B14E 00						.BYTE $00
   424 B14F 00						.BYTE $00
   424 B150 00						.BYTE $00
   424 B151 00						.BYTE $00
   424 B152 00						.BYTE $00
   424 B153 00						.BYTE $00
   424 B154 00						.BYTE $00
   424 B155 00						.BYTE $00
   424 B156 00						.BYTE $00
   424 B157 00						.BYTE $00
   424 B158 00						.BYTE $00
   424 B159 00						.BYTE $00
   424 B15A 00						.BYTE $00
   424 B15B 00						.BYTE $00
   424 B15C 00						.BYTE $00
   424 B15D 00						.BYTE $00
   424 B15E 00						.BYTE $00
   424 B15F 00						.BYTE $00
   424 B160 00						.BYTE $00
   424 B161 00						.BYTE $00
   424 B162 00						.BYTE $00
   424 B163 00						.BYTE $00
   424 B164 00						.BYTE $00
   424 B165 00						.BYTE $00
   424 B166 00						.BYTE $00
   424 B167 00						.BYTE $00
   424 B168 00						.BYTE $00
   424 B169 00						.BYTE $00
   424 B16A 00						.BYTE $00
   424 B16B 00						.BYTE $00
   424 B16C 00						.BYTE $00
   424 B16D 00						.BYTE $00
   424 B16E 00						.BYTE $00
   424 B16F 00						.BYTE $00
   424 B170 00						.BYTE $00
   424 B171 00						.BYTE $00
   424 B172 00						.BYTE $00
   424 B173 00						.BYTE $00
   424 B174 00						.BYTE $00
   424 B175 00						.BYTE $00
   424 B176 00						.BYTE $00
   424 B177 00						.BYTE $00
   424 B178 00						.BYTE $00
   424 B179 00						.BYTE $00
   424 B17A 00						.BYTE $00
   424 B17B 00						.BYTE $00
   424 B17C 00						.BYTE $00
   424 B17D 00						.BYTE $00
   424 B17E 00						.BYTE $00
   424 B17F 00						.BYTE $00
   424 B180 00						.BYTE $00
   424 B181 00						.BYTE $00
   424 B182 00						.BYTE $00
   424 B183 00						.BYTE $00
   424 B184 00						.BYTE $00
   424 B185 00						.BYTE $00
   424 B186 00						.BYTE $00
   424 B187 00						.BYTE $00
   424 B188 00						.BYTE $00
   424 B189 00						.BYTE $00
   424 B18A 00						.BYTE $00
   424 B18B 00						.BYTE $00
   424 B18C 00						.BYTE $00
   424 B18D 00						.BYTE $00
   424 B18E 00						.BYTE $00
   424 B18F 00						.BYTE $00
   424 B190 00						.BYTE $00
   424 B191 00						.BYTE $00
   424 B192 00						.BYTE $00
   424 B193 00						.BYTE $00
   424 B194 00						.BYTE $00
   424 B195 00						.BYTE $00
   424 B196 00						.BYTE $00
   424 B197 00						.BYTE $00
   424 B198 00						.BYTE $00
   424 B199 00						.BYTE $00
   424 B19A 00						.BYTE $00
   424 B19B 00						.BYTE $00
   424 B19C 00						.BYTE $00
   424 B19D 00						.BYTE $00
   424 B19E 00						.BYTE $00
   424 B19F 00						.BYTE $00
   424 B1A0 00						.BYTE $00
   424 B1A1 00						.BYTE $00
   424 B1A2 00						.BYTE $00
   424 B1A3 00						.BYTE $00
   424 B1A4 00						.BYTE $00
   424 B1A5 00						.BYTE $00
   424 B1A6 00						.BYTE $00
   424 B1A7 00						.BYTE $00
   424 B1A8 00						.BYTE $00
   424 B1A9 00						.BYTE $00
   424 B1AA 00						.BYTE $00
   424 B1AB 00						.BYTE $00
   424 B1AC 00						.BYTE $00
   424 B1AD 00						.BYTE $00
   424 B1AE 00						.BYTE $00
   424 B1AF 00						.BYTE $00
   424 B1B0 00						.BYTE $00
   424 B1B1 00						.BYTE $00
   424 B1B2 00						.BYTE $00
   424 B1B3 00						.BYTE $00
   424 B1B4 00						.BYTE $00
   424 B1B5 00						.BYTE $00
   424 B1B6 00						.BYTE $00
   424 B1B7 00						.BYTE $00
   424 B1B8 00						.BYTE $00
   424 B1B9 00						.BYTE $00
   424 B1BA 00						.BYTE $00
   424 B1BB 00						.BYTE $00
   424 B1BC 00						.BYTE $00
   424 B1BD 00						.BYTE $00
   424 B1BE 00						.BYTE $00
   424 B1BF 00						.BYTE $00
   424 B1C0 00						.BYTE $00
   424 B1C1 00						.BYTE $00
   424 B1C2 00						.BYTE $00
   424 B1C3 00						.BYTE $00
   424 B1C4 00						.BYTE $00
   424 B1C5 00						.BYTE $00
   424 B1C6 00						.BYTE $00
   424 B1C7 00						.BYTE $00
   424 B1C8 00						.BYTE $00
   424 B1C9 00						.BYTE $00
   424 B1CA 00						.BYTE $00
   424 B1CB 00						.BYTE $00
   424 B1CC 00						.BYTE $00
   424 B1CD 00						.BYTE $00
   424 B1CE 00						.BYTE $00
   424 B1CF 00						.BYTE $00
   424 B1D0 00						.BYTE $00
   424 B1D1 00						.BYTE $00
   424 B1D2 00						.BYTE $00
   424 B1D3 00						.BYTE $00
   424 B1D4 00						.BYTE $00
   424 B1D5 00						.BYTE $00
   424 B1D6 00						.BYTE $00
   424 B1D7 00						.BYTE $00
   424 B1D8 00						.BYTE $00
   424 B1D9 00						.BYTE $00
   424 B1DA 00						.BYTE $00
   424 B1DB 00						.BYTE $00
   424 B1DC 00						.BYTE $00
   424 B1DD 00						.BYTE $00
   424 B1DE 00						.BYTE $00
   424 B1DF 00						.BYTE $00
   424 B1E0 00						.BYTE $00
   424 B1E1 00						.BYTE $00
   424 B1E2 00						.BYTE $00
   424 B1E3 00						.BYTE $00
   424 B1E4 00						.BYTE $00
   424 B1E5 00						.BYTE $00
   424 B1E6 00						.BYTE $00
   424 B1E7 00						.BYTE $00
   424 B1E8 00						.BYTE $00
   424 B1E9 00						.BYTE $00
   424 B1EA 00						.BYTE $00
   424 B1EB 00						.BYTE $00
   424 B1EC 00						.BYTE $00
   424 B1ED 00						.BYTE $00
   424 B1EE 00						.BYTE $00
   424 B1EF 00						.BYTE $00
   424 B1F0 00						.BYTE $00
   424 B1F1 00						.BYTE $00
   424 B1F2 00						.BYTE $00
   424 B1F3 00						.BYTE $00
   424 B1F4 00						.BYTE $00
   424 B1F5 00						.BYTE $00
   424 B1F6 00						.BYTE $00
   424 B1F7 00						.BYTE $00
   424 B1F8 00						.BYTE $00
   424 B1F9 00						.BYTE $00
   424 B1FA 00						.BYTE $00
   424 B1FB 00						.BYTE $00
   424 B1FC 00						.BYTE $00
   424 B1FD 00						.BYTE $00
   424 B1FE 00						.BYTE $00
   424 B1FF 00						.BYTE $00
   424 B200 00						.BYTE $00
   424 B201 00						.BYTE $00
   424 B202 00						.BYTE $00
   424 B203 00						.BYTE $00
   424 B204 00						.BYTE $00
   424 B205 00						.BYTE $00
   424 B206 00						.BYTE $00
   424 B207 00						.BYTE $00
   424 B208 00						.BYTE $00
   424 B209 00						.BYTE $00
   424 B20A 00						.BYTE $00
   424 B20B 00						.BYTE $00
   424 B20C 00						.BYTE $00
   424 B20D 00						.BYTE $00
   424 B20E 00						.BYTE $00
   424 B20F 00						.BYTE $00
   424 B210 00						.BYTE $00
   424 B211 00						.BYTE $00
   424 B212 00						.BYTE $00
   424 B213 00						.BYTE $00
   424 B214 00						.BYTE $00
   424 B215 00						.BYTE $00
   424 B216 00						.BYTE $00
   424 B217 00						.BYTE $00
   424 B218 00						.BYTE $00
   424 B219 00						.BYTE $00
   424 B21A 00						.BYTE $00
   424 B21B 00						.BYTE $00
   424 B21C 00						.BYTE $00
   424 B21D 00						.BYTE $00
   424 B21E 00						.BYTE $00
   424 B21F 00						.BYTE $00
   424 B220 00						.BYTE $00
   424 B221 00						.BYTE $00
   424 B222 00						.BYTE $00
   424 B223 00						.BYTE $00
   424 B224 00						.BYTE $00
   424 B225 00						.BYTE $00
   424 B226 00						.BYTE $00
   424 B227 00						.BYTE $00
   424 B228 00						.BYTE $00
   424 B229 00						.BYTE $00
   424 B22A 00						.BYTE $00
   424 B22B 00						.BYTE $00
   424 B22C 00						.BYTE $00
   424 B22D 00						.BYTE $00
   424 B22E 00						.BYTE $00
   424 B22F 00						.BYTE $00
   424 B230 00						.BYTE $00
   424 B231 00						.BYTE $00
   424 B232 00						.BYTE $00
   424 B233 00						.BYTE $00
   424 B234 00						.BYTE $00
   424 B235 00						.BYTE $00
   424 B236 00						.BYTE $00
   424 B237 00						.BYTE $00
   424 B238 00						.BYTE $00
   424 B239 00						.BYTE $00
   424 B23A 00						.BYTE $00
   424 B23B 00						.BYTE $00
   424 B23C 00						.BYTE $00
   424 B23D 00						.BYTE $00
   424 B23E 00						.BYTE $00
   424 B23F 00						.BYTE $00
   424 B240 00						.BYTE $00
   424 B241 00						.BYTE $00
   424 B242 00						.BYTE $00
   424 B243 00						.BYTE $00
   424 B244 00						.BYTE $00
   424 B245 00						.BYTE $00
   424 B246 00						.BYTE $00
   424 B247 00						.BYTE $00
   424 B248 00						.BYTE $00
   424 B249 00						.BYTE $00
   424 B24A 00						.BYTE $00
   424 B24B 00						.BYTE $00
   424 B24C 00						.BYTE $00
   424 B24D 00						.BYTE $00
   424 B24E 00						.BYTE $00
   424 B24F 00						.BYTE $00
   424 B250 00						.BYTE $00
   424 B251 00						.BYTE $00
   424 B252 00						.BYTE $00
   424 B253 00						.BYTE $00
   424 B254 00						.BYTE $00
   424 B255 00						.BYTE $00
   424 B256 00						.BYTE $00
   424 B257 00						.BYTE $00
   424 B258 00						.BYTE $00
   424 B259 00						.BYTE $00
   424 B25A 00						.BYTE $00
   424 B25B 00						.BYTE $00
   424 B25C 00						.BYTE $00
   424 B25D 00						.BYTE $00
   424 B25E 00						.BYTE $00
   424 B25F 00						.BYTE $00
   424 B260 00						.BYTE $00
   424 B261 00						.BYTE $00
   424 B262 00						.BYTE $00
   424 B263 00						.BYTE $00
   424 B264 00						.BYTE $00
   424 B265 00						.BYTE $00
   424 B266 00						.BYTE $00
   424 B267 00						.BYTE $00
   424 B268 00						.BYTE $00
   424 B269 00						.BYTE $00
   424 B26A 00						.BYTE $00
   424 B26B 00						.BYTE $00
   424 B26C 00						.BYTE $00
   424 B26D 00						.BYTE $00
   424 B26E 00						.BYTE $00
   424 B26F 00						.BYTE $00
   424 B270 00						.BYTE $00
   424 B271 00						.BYTE $00
   424 B272 00						.BYTE $00
   424 B273 00						.BYTE $00
   424 B274 00						.BYTE $00
   424 B275 00						.BYTE $00
   424 B276 00						.BYTE $00
   424 B277 00						.BYTE $00
   424 B278 00						.BYTE $00
   424 B279 00						.BYTE $00
   424 B27A 00						.BYTE $00
   424 B27B 00						.BYTE $00
   424 B27C 00						.BYTE $00
   424 B27D 00						.BYTE $00
   424 B27E 00						.BYTE $00
   424 B27F 00						.BYTE $00
   424 B280 00						.BYTE $00
   424 B281 00						.BYTE $00
   424 B282 00						.BYTE $00
   424 B283 00						.BYTE $00
   424 B284 00						.BYTE $00
   424 B285 00						.BYTE $00
   424 B286 00						.BYTE $00
   424 B287 00						.BYTE $00
   424 B288 00						.BYTE $00
   424 B289 00						.BYTE $00
   424 B28A 00						.BYTE $00
   424 B28B 00						.BYTE $00
   424 B28C 00						.BYTE $00
   424 B28D 00						.BYTE $00
   424 B28E 00						.BYTE $00
   424 B28F 00						.BYTE $00
   424 B290 00						.BYTE $00
   424 B291 00						.BYTE $00
   424 B292 00						.BYTE $00
   424 B293 00						.BYTE $00
   424 B294 00						.BYTE $00
   424 B295 00						.BYTE $00
   424 B296 00						.BYTE $00
   424 B297 00						.BYTE $00
   424 B298 00						.BYTE $00
   424 B299 00						.BYTE $00
   424 B29A 00						.BYTE $00
   424 B29B 00						.BYTE $00
   424 B29C 00						.BYTE $00
   424 B29D 00						.BYTE $00
   424 B29E 00						.BYTE $00
   424 B29F 00						.BYTE $00
   424 B2A0 00						.BYTE $00
   424 B2A1 00						.BYTE $00
   424 B2A2 00						.BYTE $00
   424 B2A3 00						.BYTE $00
   424 B2A4 00						.BYTE $00
   424 B2A5 00						.BYTE $00
   424 B2A6 00						.BYTE $00
   424 B2A7 00						.BYTE $00
   424 B2A8 00						.BYTE $00
   424 B2A9 00						.BYTE $00
   424 B2AA 00						.BYTE $00
   424 B2AB 00						.BYTE $00
   424 B2AC 00						.BYTE $00
   424 B2AD 00						.BYTE $00
   424 B2AE 00						.BYTE $00
   424 B2AF 00						.BYTE $00
   424 B2B0 00						.BYTE $00
   424 B2B1 00						.BYTE $00
   424 B2B2 00						.BYTE $00
   424 B2B3 00						.BYTE $00
   424 B2B4 00						.BYTE $00
   424 B2B5 00						.BYTE $00
   424 B2B6 00						.BYTE $00
   424 B2B7 00						.BYTE $00
   424 B2B8 00						.BYTE $00
   424 B2B9 00						.BYTE $00
   424 B2BA 00						.BYTE $00
   424 B2BB 00						.BYTE $00
   424 B2BC 00						.BYTE $00
   424 B2BD 00						.BYTE $00
   424 B2BE 00						.BYTE $00
   424 B2BF 00						.BYTE $00
   424 B2C0 00						.BYTE $00
   424 B2C1 00						.BYTE $00
   424 B2C2 00						.BYTE $00
   424 B2C3 00						.BYTE $00
   424 B2C4 00						.BYTE $00
   424 B2C5 00						.BYTE $00
   424 B2C6 00						.BYTE $00
   424 B2C7 00						.BYTE $00
   424 B2C8 00						.BYTE $00
   424 B2C9 00						.BYTE $00
   424 B2CA 00						.BYTE $00
   424 B2CB 00						.BYTE $00
   424 B2CC 00						.BYTE $00
   424 B2CD 00						.BYTE $00
   424 B2CE 00						.BYTE $00
   424 B2CF 00						.BYTE $00
   424 B2D0 00						.BYTE $00
   424 B2D1 00						.BYTE $00
   424 B2D2 00						.BYTE $00
   424 B2D3 00						.BYTE $00
   424 B2D4 00						.BYTE $00
   424 B2D5 00						.BYTE $00
   424 B2D6 00						.BYTE $00
   424 B2D7 00						.BYTE $00
   424 B2D8 00						.BYTE $00
   424 B2D9 00						.BYTE $00
   424 B2DA 00						.BYTE $00
   424 B2DB 00						.BYTE $00
   424 B2DC 00						.BYTE $00
   424 B2DD 00						.BYTE $00
   424 B2DE 00						.BYTE $00
   424 B2DF 00						.BYTE $00
   424 B2E0 00						.BYTE $00
   424 B2E1 00						.BYTE $00
   424 B2E2 00						.BYTE $00
   424 B2E3 00						.BYTE $00
   424 B2E4 00						.BYTE $00
   424 B2E5 00						.BYTE $00
   424 B2E6 00						.BYTE $00
   424 B2E7 00						.BYTE $00
   424 B2E8 00						.BYTE $00
   424 B2E9 00						.BYTE $00
   424 B2EA 00						.BYTE $00
   424 B2EB 00						.BYTE $00
   424 B2EC 00						.BYTE $00
   424 B2ED 00						.BYTE $00
   424 B2EE 00						.BYTE $00
   424 B2EF 00						.BYTE $00
   424 B2F0 00						.BYTE $00
   424 B2F1 00						.BYTE $00
   424 B2F2 00						.BYTE $00
   424 B2F3 00						.BYTE $00
   424 B2F4 00						.BYTE $00
   424 B2F5 00						.BYTE $00
   424 B2F6 00						.BYTE $00
   424 B2F7 00						.BYTE $00
   424 B2F8 00						.BYTE $00
   424 B2F9 00						.BYTE $00
   424 B2FA 00						.BYTE $00
   424 B2FB 00						.BYTE $00
   424 B2FC 00						.BYTE $00
   424 B2FD 00						.BYTE $00
   424 B2FE 00						.BYTE $00
   424 B2FF 00						.BYTE $00
   424 B300 00						.BYTE $00
   424 B301 00						.BYTE $00
   424 B302 00						.BYTE $00
   424 B303 00						.BYTE $00
   424 B304 00						.BYTE $00
   424 B305 00						.BYTE $00
   424 B306 00						.BYTE $00
   424 B307 00						.BYTE $00
   424 B308 00						.BYTE $00
   424 B309 00						.BYTE $00
   424 B30A 00						.BYTE $00
   424 B30B 00						.BYTE $00
   424 B30C 00						.BYTE $00
   424 B30D 00						.BYTE $00
   424 B30E 00						.BYTE $00
   424 B30F 00						.BYTE $00
   424 B310 00						.BYTE $00
   424 B311 00						.BYTE $00
   424 B312 00						.BYTE $00
   424 B313 00						.BYTE $00
   424 B314 00						.BYTE $00
   424 B315 00						.BYTE $00
   424 B316 00						.BYTE $00
   424 B317 00						.BYTE $00
   424 B318 00						.BYTE $00
   424 B319 00						.BYTE $00
   424 B31A 00						.BYTE $00
   424 B31B 00						.BYTE $00
   424 B31C 00						.BYTE $00
   424 B31D 00						.BYTE $00
   424 B31E 00						.BYTE $00
   424 B31F 00						.BYTE $00
   424 B320 00						.BYTE $00
   424 B321 00						.BYTE $00
   424 B322 00						.BYTE $00
   424 B323 00						.BYTE $00
   424 B324 00						.BYTE $00
   424 B325 00						.BYTE $00
   424 B326 00						.BYTE $00
   424 B327 00						.BYTE $00
   424 B328 00						.BYTE $00
   424 B329 00						.BYTE $00
   424 B32A 00						.BYTE $00
   424 B32B 00						.BYTE $00
   424 B32C 00						.BYTE $00
   424 B32D 00						.BYTE $00
   424 B32E 00						.BYTE $00
   424 B32F 00						.BYTE $00
   424 B330 00						.BYTE $00
   424 B331 00						.BYTE $00
   424 B332 00						.BYTE $00
   424 B333 00						.BYTE $00
   424 B334 00						.BYTE $00
   424 B335 00						.BYTE $00
   424 B336 00						.BYTE $00
   424 B337 00						.BYTE $00
   424 B338 00						.BYTE $00
   424 B339 00						.BYTE $00
   424 B33A 00						.BYTE $00
   424 B33B 00						.BYTE $00
   424 B33C 00						.BYTE $00
   424 B33D 00						.BYTE $00
   424 B33E 00						.BYTE $00
   424 B33F 00						.BYTE $00
   424 B340 00						.BYTE $00
   424 B341 00						.BYTE $00
   424 B342 00						.BYTE $00
   424 B343 00						.BYTE $00
   424 B344 00						.BYTE $00
   424 B345 00						.BYTE $00
   424 B346 00						.BYTE $00
   424 B347 00						.BYTE $00
   424 B348 00						.BYTE $00
   424 B349 00						.BYTE $00
   424 B34A 00						.BYTE $00
   424 B34B 00						.BYTE $00
   424 B34C 00						.BYTE $00
   424 B34D 00						.BYTE $00
   424 B34E 00						.BYTE $00
   424 B34F 00						.BYTE $00
   424 B350 00						.BYTE $00
   424 B351 00						.BYTE $00
   424 B352 00						.BYTE $00
   424 B353 00						.BYTE $00
   424 B354 00						.BYTE $00
   424 B355 00						.BYTE $00
   424 B356 00						.BYTE $00
   424 B357 00						.BYTE $00
   424 B358 00						.BYTE $00
   424 B359 00						.BYTE $00
   424 B35A 00						.BYTE $00
   424 B35B 00						.BYTE $00
   424 B35C 00						.BYTE $00
   424 B35D 00						.BYTE $00
   424 B35E 00						.BYTE $00
   424 B35F 00						.BYTE $00
   424 B360 00						.BYTE $00
   424 B361 00						.BYTE $00
   424 B362 00						.BYTE $00
   424 B363 00						.BYTE $00
   424 B364 00						.BYTE $00
   424 B365 00						.BYTE $00
   424 B366 00						.BYTE $00
   424 B367 00						.BYTE $00
   424 B368 00						.BYTE $00
   424 B369 00						.BYTE $00
   424 B36A 00						.BYTE $00
   424 B36B 00						.BYTE $00
   424 B36C 00						.BYTE $00
   424 B36D 00						.BYTE $00
   424 B36E 00						.BYTE $00
   424 B36F 00						.BYTE $00
   424 B370 00						.BYTE $00
   424 B371 00						.BYTE $00
   424 B372 00						.BYTE $00
   424 B373 00						.BYTE $00
   424 B374 00						.BYTE $00
   424 B375 00						.BYTE $00
   424 B376 00						.BYTE $00
   424 B377 00						.BYTE $00
   424 B378 00						.BYTE $00
   424 B379 00						.BYTE $00
   424 B37A 00						.BYTE $00
   424 B37B 00						.BYTE $00
   424 B37C 00						.BYTE $00
   424 B37D 00						.BYTE $00
   424 B37E 00						.BYTE $00
   424 B37F 00						.BYTE $00
   424 B380 00						.BYTE $00
   424 B381 00						.BYTE $00
   424 B382 00						.BYTE $00
   424 B383 00						.BYTE $00
   424 B384 00						.BYTE $00
   424 B385 00						.BYTE $00
   424 B386 00						.BYTE $00
   424 B387 00						.BYTE $00
   424 B388 00						.BYTE $00
   424 B389 00						.BYTE $00
   424 B38A 00						.BYTE $00
   424 B38B 00						.BYTE $00
   424 B38C 00						.BYTE $00
   424 B38D 00						.BYTE $00
   424 B38E 00						.BYTE $00
   424 B38F 00						.BYTE $00
   424 B390 00						.BYTE $00
   424 B391 00						.BYTE $00
   424 B392 00						.BYTE $00
   424 B393 00						.BYTE $00
   424 B394 00						.BYTE $00
   424 B395 00						.BYTE $00
   424 B396 00						.BYTE $00
   424 B397 00						.BYTE $00
   424 B398 00						.BYTE $00
   424 B399 00						.BYTE $00
   424 B39A 00						.BYTE $00
   424 B39B 00						.BYTE $00
   424 B39C 00						.BYTE $00
   424 B39D 00						.BYTE $00
   424 B39E 00						.BYTE $00
   424 B39F 00						.BYTE $00
   424 B3A0 00						.BYTE $00
   424 B3A1 00						.BYTE $00
   424 B3A2 00						.BYTE $00
   424 B3A3 00						.BYTE $00
   424 B3A4 00						.BYTE $00
   424 B3A5 00						.BYTE $00
   424 B3A6 00						.BYTE $00
   424 B3A7 00						.BYTE $00
   424 B3A8 00						.BYTE $00
   424 B3A9 00						.BYTE $00
   424 B3AA 00						.BYTE $00
   424 B3AB 00						.BYTE $00
   424 B3AC 00						.BYTE $00
   424 B3AD 00						.BYTE $00
   424 B3AE 00						.BYTE $00
   424 B3AF 00						.BYTE $00
   424 B3B0 00						.BYTE $00
   424 B3B1 00						.BYTE $00
   424 B3B2 00						.BYTE $00
   424 B3B3 00						.BYTE $00
   424 B3B4 00						.BYTE $00
   424 B3B5 00						.BYTE $00
   424 B3B6 00						.BYTE $00
   424 B3B7 00						.BYTE $00
   424 B3B8 00						.BYTE $00
   424 B3B9 00						.BYTE $00
   424 B3BA 00						.BYTE $00
   424 B3BB 00						.BYTE $00
   424 B3BC 00						.BYTE $00
   424 B3BD 00						.BYTE $00
   424 B3BE 00						.BYTE $00
   424 B3BF 00						.BYTE $00
   424 B3C0 00						.BYTE $00
   424 B3C1 00						.BYTE $00
   424 B3C2 00						.BYTE $00
   424 B3C3 00						.BYTE $00
   424 B3C4 00						.BYTE $00
   424 B3C5 00						.BYTE $00
   424 B3C6 00						.BYTE $00
   424 B3C7 00						.BYTE $00
   424 B3C8 00						.BYTE $00
   424 B3C9 00						.BYTE $00
   424 B3CA 00						.BYTE $00
   424 B3CB 00						.BYTE $00
   424 B3CC 00						.BYTE $00
   424 B3CD 00						.BYTE $00
   424 B3CE 00						.BYTE $00
   424 B3CF 00						.BYTE $00
   424 B3D0 00						.BYTE $00
   424 B3D1 00						.BYTE $00
   424 B3D2 00						.BYTE $00
   424 B3D3 00						.BYTE $00
   424 B3D4 00						.BYTE $00
   424 B3D5 00						.BYTE $00
   424 B3D6 00						.BYTE $00
   424 B3D7 00						.BYTE $00
   424 B3D8 00						.BYTE $00
   424 B3D9 00						.BYTE $00
   424 B3DA 00						.BYTE $00
   424 B3DB 00						.BYTE $00
   424 B3DC 00						.BYTE $00
   424 B3DD 00						.BYTE $00
   424 B3DE 00						.BYTE $00
   424 B3DF 00						.BYTE $00
   424 B3E0 00						.BYTE $00
   424 B3E1 00						.BYTE $00
   424 B3E2 00						.BYTE $00
   424 B3E3 00						.BYTE $00
   424 B3E4 00						.BYTE $00
   424 B3E5 00						.BYTE $00
   424 B3E6 00						.BYTE $00
   424 B3E7 00						.BYTE $00
   424 B3E8 00						.BYTE $00
   424 B3E9 00						.BYTE $00
   424 B3EA 00						.BYTE $00
   424 B3EB 00						.BYTE $00
   424 B3EC 00						.BYTE $00
   424 B3ED 00						.BYTE $00
   424 B3EE 00						.BYTE $00
   424 B3EF 00						.BYTE $00
   424 B3F0 00						.BYTE $00
   424 B3F1 00						.BYTE $00
   424 B3F2 00						.BYTE $00
   424 B3F3 00						.BYTE $00
   424 B3F4 00						.BYTE $00
   424 B3F5 00						.BYTE $00
   424 B3F6 00						.BYTE $00
   424 B3F7 00						.BYTE $00
   424 B3F8 00						.BYTE $00
   424 B3F9 00						.BYTE $00
   424 B3FA 00						.BYTE $00
   424 B3FB 00						.BYTE $00
   424 B3FC 00						.BYTE $00
   424 B3FD 00						.BYTE $00
   424 B3FE 00						.BYTE $00
   424 B3FF 00						.BYTE $00
   424 B400 00						.BYTE $00
   424 B401 00						.BYTE $00
   424 B402 00						.BYTE $00
   424 B403 00						.BYTE $00
   424 B404 00						.BYTE $00
   424 B405 00						.BYTE $00
   424 B406 00						.BYTE $00
   424 B407 00						.BYTE $00
   424 B408 00						.BYTE $00
   424 B409 00						.BYTE $00
   424 B40A 00						.BYTE $00
   424 B40B 00						.BYTE $00
   424 B40C 00						.BYTE $00
   424 B40D 00						.BYTE $00
   424 B40E 00						.BYTE $00
   424 B40F 00						.BYTE $00
   424 B410 00						.BYTE $00
   424 B411 00						.BYTE $00
   424 B412 00						.BYTE $00
   424 B413 00						.BYTE $00
   424 B414 00						.BYTE $00
   424 B415 00						.BYTE $00
   424 B416 00						.BYTE $00
   424 B417 00						.BYTE $00
   424 B418 00						.BYTE $00
   424 B419 00						.BYTE $00
   424 B41A 00						.BYTE $00
   424 B41B 00						.BYTE $00
   424 B41C 00						.BYTE $00
   424 B41D 00						.BYTE $00
   424 B41E 00						.BYTE $00
   424 B41F 00						.BYTE $00
   424 B420 00						.BYTE $00
   424 B421 00						.BYTE $00
   424 B422 00						.BYTE $00
   424 B423 00						.BYTE $00
   424 B424 00						.BYTE $00
   424 B425 00						.BYTE $00
   424 B426 00						.BYTE $00
   424 B427 00						.BYTE $00
   424 B428 00						.BYTE $00
   424 B429 00						.BYTE $00
   424 B42A 00						.BYTE $00
   424 B42B 00						.BYTE $00
   424 B42C 00						.BYTE $00
   424 B42D 00						.BYTE $00
   424 B42E 00						.BYTE $00
   424 B42F 00						.BYTE $00
   424 B430 00						.BYTE $00
   424 B431 00						.BYTE $00
   424 B432 00						.BYTE $00
   424 B433 00						.BYTE $00
   424 B434 00						.BYTE $00
   424 B435 00						.BYTE $00
   424 B436 00						.BYTE $00
   424 B437 00						.BYTE $00
   424 B438 00						.BYTE $00
   424 B439 00						.BYTE $00
   424 B43A 00						.BYTE $00
   424 B43B 00						.BYTE $00
   424 B43C 00						.BYTE $00
   424 B43D 00						.BYTE $00
   424 B43E 00						.BYTE $00
   424 B43F 00						.BYTE $00
   424 B440 00						.BYTE $00
   424 B441 00						.BYTE $00
   424 B442 00						.BYTE $00
   424 B443 00						.BYTE $00
   424 B444 00						.BYTE $00
   424 B445 00						.BYTE $00
   424 B446 00						.BYTE $00
   424 B447 00						.BYTE $00
   424 B448 00						.BYTE $00
   424 B449 00						.BYTE $00
   424 B44A 00						.BYTE $00
   424 B44B 00						.BYTE $00
   424 B44C 00						.BYTE $00
   424 B44D 00						.BYTE $00
   424 B44E 00						.BYTE $00
   424 B44F 00						.BYTE $00
   424 B450 00						.BYTE $00
   424 B451 00						.BYTE $00
   424 B452 00						.BYTE $00
   424 B453 00						.BYTE $00
   424 B454 00						.BYTE $00
   424 B455 00						.BYTE $00
   424 B456 00						.BYTE $00
   424 B457 00						.BYTE $00
   424 B458 00						.BYTE $00
   424 B459 00						.BYTE $00
   424 B45A 00						.BYTE $00
   424 B45B 00						.BYTE $00
   424 B45C 00						.BYTE $00
   424 B45D 00						.BYTE $00
   424 B45E 00						.BYTE $00
   424 B45F 00						.BYTE $00
   424 B460 00						.BYTE $00
   424 B461 00						.BYTE $00
   424 B462 00						.BYTE $00
   424 B463 00						.BYTE $00
   424 B464 00						.BYTE $00
   424 B465 00						.BYTE $00
   424 B466 00						.BYTE $00
   424 B467 00						.BYTE $00
   424 B468 00						.BYTE $00
   424 B469 00						.BYTE $00
   424 B46A 00						.BYTE $00
   424 B46B 00						.BYTE $00
   424 B46C 00						.BYTE $00
   424 B46D 00						.BYTE $00
   424 B46E 00						.BYTE $00
   424 B46F 00						.BYTE $00
   424 B470 00						.BYTE $00
   424 B471 00						.BYTE $00
   424 B472 00						.BYTE $00
   424 B473 00						.BYTE $00
   424 B474 00						.BYTE $00
   424 B475 00						.BYTE $00
   424 B476 00						.BYTE $00
   424 B477 00						.BYTE $00
   424 B478 00						.BYTE $00
   424 B479 00						.BYTE $00
   424 B47A 00						.BYTE $00
   424 B47B 00						.BYTE $00
   424 B47C 00						.BYTE $00
   424 B47D 00						.BYTE $00
   424 B47E 00						.BYTE $00
   424 B47F 00						.BYTE $00
   424 B480 00						.BYTE $00
   424 B481 00						.BYTE $00
   424 B482 00						.BYTE $00
   424 B483 00						.BYTE $00
   424 B484 00						.BYTE $00
   424 B485 00						.BYTE $00
   424 B486 00						.BYTE $00
   424 B487 00						.BYTE $00
   424 B488 00						.BYTE $00
   424 B489 00						.BYTE $00
   424 B48A 00						.BYTE $00
   424 B48B 00						.BYTE $00
   424 B48C 00						.BYTE $00
   424 B48D 00						.BYTE $00
   424 B48E 00						.BYTE $00
   424 B48F 00						.BYTE $00
   424 B490 00						.BYTE $00
   424 B491 00						.BYTE $00
   424 B492 00						.BYTE $00
   424 B493 00						.BYTE $00
   424 B494 00						.BYTE $00
   424 B495 00						.BYTE $00
   424 B496 00						.BYTE $00
   424 B497 00						.BYTE $00
   424 B498 00						.BYTE $00
   424 B499 00						.BYTE $00
   424 B49A 00						.BYTE $00
   424 B49B 00						.BYTE $00
   424 B49C 00						.BYTE $00
   424 B49D 00						.BYTE $00
   424 B49E 00						.BYTE $00
   424 B49F 00						.BYTE $00
   424 B4A0 00						.BYTE $00
   424 B4A1 00						.BYTE $00
   424 B4A2 00						.BYTE $00
   424 B4A3 00						.BYTE $00
   424 B4A4 00						.BYTE $00
   424 B4A5 00						.BYTE $00
   424 B4A6 00						.BYTE $00
   424 B4A7 00						.BYTE $00
   424 B4A8 00						.BYTE $00
   424 B4A9 00						.BYTE $00
   424 B4AA 00						.BYTE $00
   424 B4AB 00						.BYTE $00
   424 B4AC 00						.BYTE $00
   424 B4AD 00						.BYTE $00
   424 B4AE 00						.BYTE $00
   424 B4AF 00						.BYTE $00
   424 B4B0 00						.BYTE $00
   424 B4B1 00						.BYTE $00
   424 B4B2 00						.BYTE $00
   424 B4B3 00						.BYTE $00
   424 B4B4 00						.BYTE $00
   424 B4B5 00						.BYTE $00
   424 B4B6 00						.BYTE $00
   424 B4B7 00						.BYTE $00
   424 B4B8 00						.BYTE $00
   424 B4B9 00						.BYTE $00
   424 B4BA 00						.BYTE $00
   424 B4BB 00						.BYTE $00
   424 B4BC 00						.BYTE $00
   424 B4BD 00						.BYTE $00
   424 B4BE 00						.BYTE $00
   424 B4BF 00						.BYTE $00
   424 B4C0 00						.BYTE $00
   424 B4C1 00						.BYTE $00
   424 B4C2 00						.BYTE $00
   424 B4C3 00						.BYTE $00
   424 B4C4 00						.BYTE $00
   424 B4C5 00						.BYTE $00
   424 B4C6 00						.BYTE $00
   424 B4C7 00						.BYTE $00
   424 B4C8 00						.BYTE $00
   424 B4C9 00						.BYTE $00
   424 B4CA 00						.BYTE $00
   424 B4CB 00						.BYTE $00
   424 B4CC 00						.BYTE $00
   424 B4CD 00						.BYTE $00
   424 B4CE 00						.BYTE $00
   424 B4CF 00						.BYTE $00
   424 B4D0 00						.BYTE $00
   424 B4D1 00						.BYTE $00
   424 B4D2 00						.BYTE $00
   424 B4D3 00						.BYTE $00
   424 B4D4 00						.BYTE $00
   424 B4D5 00						.BYTE $00
   424 B4D6 00						.BYTE $00
   424 B4D7 00						.BYTE $00
   424 B4D8 00						.BYTE $00
   424 B4D9 00						.BYTE $00
   424 B4DA 00						.BYTE $00
   424 B4DB 00						.BYTE $00
   424 B4DC 00						.BYTE $00
   424 B4DD 00						.BYTE $00
   424 B4DE 00						.BYTE $00
   424 B4DF 00						.BYTE $00
   424 B4E0 00						.BYTE $00
   424 B4E1 00						.BYTE $00
   424 B4E2 00						.BYTE $00
   424 B4E3 00						.BYTE $00
   424 B4E4 00						.BYTE $00
   424 B4E5 00						.BYTE $00
   424 B4E6 00						.BYTE $00
   424 B4E7 00						.BYTE $00
   424 B4E8 00						.BYTE $00
   424 B4E9 00						.BYTE $00
   424 B4EA 00						.BYTE $00
   424 B4EB 00						.BYTE $00
   424 B4EC 00						.BYTE $00
   424 B4ED 00						.BYTE $00
   424 B4EE 00						.BYTE $00
   424 B4EF 00						.BYTE $00
   424 B4F0 00						.BYTE $00
   424 B4F1 00						.BYTE $00
   424 B4F2 00						.BYTE $00
   424 B4F3 00						.BYTE $00
   424 B4F4 00						.BYTE $00
   424 B4F5 00						.BYTE $00
   424 B4F6 00						.BYTE $00
   424 B4F7 00						.BYTE $00
   424 B4F8 00						.BYTE $00
   424 B4F9 00						.BYTE $00
   424 B4FA 00						.BYTE $00
   424 B4FB 00						.BYTE $00
   424 B4FC 00						.BYTE $00
   424 B4FD 00						.BYTE $00
   424 B4FE 00						.BYTE $00
   424 B4FF 00						.BYTE $00
   424 B500 00						.BYTE $00
   424 B501 00						.BYTE $00
   424 B502 00						.BYTE $00
   424 B503 00						.BYTE $00
   424 B504 00						.BYTE $00
   424 B505 00						.BYTE $00
   424 B506 00						.BYTE $00
   424 B507 00						.BYTE $00
   424 B508 00						.BYTE $00
   424 B509 00						.BYTE $00
   424 B50A 00						.BYTE $00
   424 B50B 00						.BYTE $00
   424 B50C 00						.BYTE $00
   424 B50D 00						.BYTE $00
   424 B50E 00						.BYTE $00
   424 B50F 00						.BYTE $00
   424 B510 00						.BYTE $00
   424 B511 00						.BYTE $00
   424 B512 00						.BYTE $00
   424 B513 00						.BYTE $00
   424 B514 00						.BYTE $00
   424 B515 00						.BYTE $00
   424 B516 00						.BYTE $00
   424 B517 00						.BYTE $00
   424 B518 00						.BYTE $00
   424 B519 00						.BYTE $00
   424 B51A 00						.BYTE $00
   424 B51B 00						.BYTE $00
   424 B51C 00						.BYTE $00
   424 B51D 00						.BYTE $00
   424 B51E 00						.BYTE $00
   424 B51F 00						.BYTE $00
   424 B520 00						.BYTE $00
   424 B521 00						.BYTE $00
   424 B522 00						.BYTE $00
   424 B523 00						.BYTE $00
   424 B524 00						.BYTE $00
   424 B525 00						.BYTE $00
   424 B526 00						.BYTE $00
   424 B527 00						.BYTE $00
   424 B528 00						.BYTE $00
   424 B529 00						.BYTE $00
   424 B52A 00						.BYTE $00
   424 B52B 00						.BYTE $00
   424 B52C 00						.BYTE $00
   424 B52D 00						.BYTE $00
   424 B52E 00						.BYTE $00
   424 B52F 00						.BYTE $00
   424 B530 00						.BYTE $00
   424 B531 00						.BYTE $00
   424 B532 00						.BYTE $00
   424 B533 00						.BYTE $00
   424 B534 00						.BYTE $00
   424 B535 00						.BYTE $00
   424 B536 00						.BYTE $00
   424 B537 00						.BYTE $00
   424 B538 00						.BYTE $00
   424 B539 00						.BYTE $00
   424 B53A 00						.BYTE $00
   424 B53B 00						.BYTE $00
   424 B53C 00						.BYTE $00
   424 B53D 00						.BYTE $00
   424 B53E 00						.BYTE $00
   424 B53F 00						.BYTE $00
   424 B540 00						.BYTE $00
   424 B541 00						.BYTE $00
   424 B542 00						.BYTE $00
   424 B543 00						.BYTE $00
   424 B544 00						.BYTE $00
   424 B545 00						.BYTE $00
   424 B546 00						.BYTE $00
   424 B547 00						.BYTE $00
   424 B548 00						.BYTE $00
   424 B549 00						.BYTE $00
   424 B54A 00						.BYTE $00
   424 B54B 00						.BYTE $00
   424 B54C 00						.BYTE $00
   424 B54D 00						.BYTE $00
   424 B54E 00						.BYTE $00
   424 B54F 00						.BYTE $00
   424 B550 00						.BYTE $00
   424 B551 00						.BYTE $00
   424 B552 00						.BYTE $00
   424 B553 00						.BYTE $00
   424 B554 00						.BYTE $00
   424 B555 00						.BYTE $00
   424 B556 00						.BYTE $00
   424 B557 00						.BYTE $00
   424 B558 00						.BYTE $00
   424 B559 00						.BYTE $00
   424 B55A 00						.BYTE $00
   424 B55B 00						.BYTE $00
   424 B55C 00						.BYTE $00
   424 B55D 00						.BYTE $00
   424 B55E 00						.BYTE $00
   424 B55F 00						.BYTE $00
   424 B560 00						.BYTE $00
   424 B561 00						.BYTE $00
   424 B562 00						.BYTE $00
   424 B563 00						.BYTE $00
   424 B564 00						.BYTE $00
   424 B565 00						.BYTE $00
   424 B566 00						.BYTE $00
   424 B567 00						.BYTE $00
   424 B568 00						.BYTE $00
   424 B569 00						.BYTE $00
   424 B56A 00						.BYTE $00
   424 B56B 00						.BYTE $00
   424 B56C 00						.BYTE $00
   424 B56D 00						.BYTE $00
   424 B56E 00						.BYTE $00
   424 B56F 00						.BYTE $00
   424 B570 00						.BYTE $00
   424 B571 00						.BYTE $00
   424 B572 00						.BYTE $00
   424 B573 00						.BYTE $00
   424 B574 00						.BYTE $00
   424 B575 00						.BYTE $00
   424 B576 00						.BYTE $00
   424 B577 00						.BYTE $00
   424 B578 00						.BYTE $00
   424 B579 00						.BYTE $00
   424 B57A 00						.BYTE $00
   424 B57B 00						.BYTE $00
   424 B57C 00						.BYTE $00
   424 B57D 00						.BYTE $00
   424 B57E 00						.BYTE $00
   424 B57F 00						.BYTE $00
   424 B580 00						.BYTE $00
   424 B581 00						.BYTE $00
   424 B582 00						.BYTE $00
   424 B583 00						.BYTE $00
   424 B584 00						.BYTE $00
   424 B585 00						.BYTE $00
   424 B586 00						.BYTE $00
   424 B587 00						.BYTE $00
   424 B588 00						.BYTE $00
   424 B589 00						.BYTE $00
   424 B58A 00						.BYTE $00
   424 B58B 00						.BYTE $00
   424 B58C 00						.BYTE $00
   424 B58D 00						.BYTE $00
   424 B58E 00						.BYTE $00
   424 B58F 00						.BYTE $00
   424 B590 00						.BYTE $00
   424 B591 00						.BYTE $00
   424 B592 00						.BYTE $00
   424 B593 00						.BYTE $00
   424 B594 00						.BYTE $00
   424 B595 00						.BYTE $00
   424 B596 00						.BYTE $00
   424 B597 00						.BYTE $00
   424 B598 00						.BYTE $00
   424 B599 00						.BYTE $00
   424 B59A 00						.BYTE $00
   424 B59B 00						.BYTE $00
   424 B59C 00						.BYTE $00
   424 B59D 00						.BYTE $00
   424 B59E 00						.BYTE $00
   424 B59F 00						.BYTE $00
   424 B5A0 00						.BYTE $00
   424 B5A1 00						.BYTE $00
   424 B5A2 00						.BYTE $00
   424 B5A3 00						.BYTE $00
   424 B5A4 00						.BYTE $00
   424 B5A5 00						.BYTE $00
   424 B5A6 00						.BYTE $00
   424 B5A7 00						.BYTE $00
   424 B5A8 00						.BYTE $00
   424 B5A9 00						.BYTE $00
   424 B5AA 00						.BYTE $00
   424 B5AB 00						.BYTE $00
   424 B5AC 00						.BYTE $00
   424 B5AD 00						.BYTE $00
   424 B5AE 00						.BYTE $00
   424 B5AF 00						.BYTE $00
   424 B5B0 00						.BYTE $00
   424 B5B1 00						.BYTE $00
   424 B5B2 00						.BYTE $00
   424 B5B3 00						.BYTE $00
   424 B5B4 00						.BYTE $00
   424 B5B5 00						.BYTE $00
   424 B5B6 00						.BYTE $00
   424 B5B7 00						.BYTE $00
   424 B5B8 00						.BYTE $00
   424 B5B9 00						.BYTE $00
   424 B5BA 00						.BYTE $00
   424 B5BB 00						.BYTE $00
   424 B5BC 00						.BYTE $00
   424 B5BD 00						.BYTE $00
   424 B5BE 00						.BYTE $00
   424 B5BF 00						.BYTE $00
   424 B5C0 00						.BYTE $00
   424 B5C1 00						.BYTE $00
   424 B5C2 00						.BYTE $00
   424 B5C3 00						.BYTE $00
   424 B5C4 00						.BYTE $00
   424 B5C5 00						.BYTE $00
   424 B5C6 00						.BYTE $00
   424 B5C7 00						.BYTE $00
   424 B5C8 00						.BYTE $00
   424 B5C9 00						.BYTE $00
   424 B5CA 00						.BYTE $00
   424 B5CB 00						.BYTE $00
   424 B5CC 00						.BYTE $00
   424 B5CD 00						.BYTE $00
   424 B5CE 00						.BYTE $00
   424 B5CF 00						.BYTE $00
   424 B5D0 00						.BYTE $00
   424 B5D1 00						.BYTE $00
   424 B5D2 00						.BYTE $00
   424 B5D3 00						.BYTE $00
   424 B5D4 00						.BYTE $00
   424 B5D5 00						.BYTE $00
   424 B5D6 00						.BYTE $00
   424 B5D7 00						.BYTE $00
   424 B5D8 00						.BYTE $00
   424 B5D9 00						.BYTE $00
   424 B5DA 00						.BYTE $00
   424 B5DB 00						.BYTE $00
   424 B5DC 00						.BYTE $00
   424 B5DD 00						.BYTE $00
   424 B5DE 00						.BYTE $00
   424 B5DF 00						.BYTE $00
   424 B5E0 00						.BYTE $00
   424 B5E1 00						.BYTE $00
   424 B5E2 00						.BYTE $00
   424 B5E3 00						.BYTE $00
   424 B5E4 00						.BYTE $00
   424 B5E5 00						.BYTE $00
   424 B5E6 00						.BYTE $00
   424 B5E7 00						.BYTE $00
   424 B5E8 00						.BYTE $00
   424 B5E9 00						.BYTE $00
   424 B5EA 00						.BYTE $00
   424 B5EB 00						.BYTE $00
   424 B5EC 00						.BYTE $00
   424 B5ED 00						.BYTE $00
   424 B5EE 00						.BYTE $00
   424 B5EF 00						.BYTE $00
   424 B5F0 00						.BYTE $00
   424 B5F1 00						.BYTE $00
   424 B5F2 00						.BYTE $00
   424 B5F3 00						.BYTE $00
   424 B5F4 00						.BYTE $00
   424 B5F5 00						.BYTE $00
   424 B5F6 00						.BYTE $00
   424 B5F7 00						.BYTE $00
   424 B5F8 00						.BYTE $00
   424 B5F9 00						.BYTE $00
   424 B5FA 00						.BYTE $00
   424 B5FB 00						.BYTE $00
   424 B5FC 00						.BYTE $00
   424 B5FD 00						.BYTE $00
   424 B5FE 00						.BYTE $00
   424 B5FF 00						.BYTE $00
   424 B600 00						.BYTE $00
   424 B601 00						.BYTE $00
   424 B602 00						.BYTE $00
   424 B603 00						.BYTE $00
   424 B604 00						.BYTE $00
   424 B605 00						.BYTE $00
   424 B606 00						.BYTE $00
   424 B607 00						.BYTE $00
   424 B608 00						.BYTE $00
   424 B609 00						.BYTE $00
   424 B60A 00						.BYTE $00
   424 B60B 00						.BYTE $00
   424 B60C 00						.BYTE $00
   424 B60D 00						.BYTE $00
   424 B60E 00						.BYTE $00
   424 B60F 00						.BYTE $00
   424 B610 00						.BYTE $00
   424 B611 00						.BYTE $00
   424 B612 00						.BYTE $00
   424 B613 00						.BYTE $00
   424 B614 00						.BYTE $00
   424 B615 00						.BYTE $00
   424 B616 00						.BYTE $00
   424 B617 00						.BYTE $00
   424 B618 00						.BYTE $00
   424 B619 00						.BYTE $00
   424 B61A 00						.BYTE $00
   424 B61B 00						.BYTE $00
   424 B61C 00						.BYTE $00
   424 B61D 00						.BYTE $00
   424 B61E 00						.BYTE $00
   424 B61F 00						.BYTE $00
   424 B620 00						.BYTE $00
   424 B621 00						.BYTE $00
   424 B622 00						.BYTE $00
   424 B623 00						.BYTE $00
   424 B624 00						.BYTE $00
   424 B625 00						.BYTE $00
   424 B626 00						.BYTE $00
   424 B627 00						.BYTE $00
   424 B628 00						.BYTE $00
   424 B629 00						.BYTE $00
   424 B62A 00						.BYTE $00
   424 B62B 00						.BYTE $00
   424 B62C 00						.BYTE $00
   424 B62D 00						.BYTE $00
   424 B62E 00						.BYTE $00
   424 B62F 00						.BYTE $00
   424 B630 00						.BYTE $00
   424 B631 00						.BYTE $00
   424 B632 00						.BYTE $00
   424 B633 00						.BYTE $00
   424 B634 00						.BYTE $00
   424 B635 00						.BYTE $00
   424 B636 00						.BYTE $00
   424 B637 00						.BYTE $00
   424 B638 00						.BYTE $00
   424 B639 00						.BYTE $00
   424 B63A 00						.BYTE $00
   424 B63B 00						.BYTE $00
   424 B63C 00						.BYTE $00
   424 B63D 00						.BYTE $00
   424 B63E 00						.BYTE $00
   424 B63F 00						.BYTE $00
   424 B640 00						.BYTE $00
   424 B641 00						.BYTE $00
   424 B642 00						.BYTE $00
   424 B643 00						.BYTE $00
   424 B644 00						.BYTE $00
   424 B645 00						.BYTE $00
   424 B646 00						.BYTE $00
   424 B647 00						.BYTE $00
   424 B648 00						.BYTE $00
   424 B649 00						.BYTE $00
   424 B64A 00						.BYTE $00
   424 B64B 00						.BYTE $00
   424 B64C 00						.BYTE $00
   424 B64D 00						.BYTE $00
   424 B64E 00						.BYTE $00
   424 B64F 00						.BYTE $00
   424 B650 00						.BYTE $00
   424 B651 00						.BYTE $00
   424 B652 00						.BYTE $00
   424 B653 00						.BYTE $00
   424 B654 00						.BYTE $00
   424 B655 00						.BYTE $00
   424 B656 00						.BYTE $00
   424 B657 00						.BYTE $00
   424 B658 00						.BYTE $00
   424 B659 00						.BYTE $00
   424 B65A 00						.BYTE $00
   424 B65B 00						.BYTE $00
   424 B65C 00						.BYTE $00
   424 B65D 00						.BYTE $00
   424 B65E 00						.BYTE $00
   424 B65F 00						.BYTE $00
   424 B660 00						.BYTE $00
   424 B661 00						.BYTE $00
   424 B662 00						.BYTE $00
   424 B663 00						.BYTE $00
   424 B664 00						.BYTE $00
   424 B665 00						.BYTE $00
   424 B666 00						.BYTE $00
   424 B667 00						.BYTE $00
   424 B668 00						.BYTE $00
   424 B669 00						.BYTE $00
   424 B66A 00						.BYTE $00
   424 B66B 00						.BYTE $00
   424 B66C 00						.BYTE $00
   424 B66D 00						.BYTE $00
   424 B66E 00						.BYTE $00
   424 B66F 00						.BYTE $00
   424 B670 00						.BYTE $00
   424 B671 00						.BYTE $00
   424 B672 00						.BYTE $00
   424 B673 00						.BYTE $00
   424 B674 00						.BYTE $00
   424 B675 00						.BYTE $00
   424 B676 00						.BYTE $00
   424 B677 00						.BYTE $00
   424 B678 00						.BYTE $00
   424 B679 00						.BYTE $00
   424 B67A 00						.BYTE $00
   424 B67B 00						.BYTE $00
   424 B67C 00						.BYTE $00
   424 B67D 00						.BYTE $00
   424 B67E 00						.BYTE $00
   424 B67F 00						.BYTE $00
   424 B680 00						.BYTE $00
   424 B681 00						.BYTE $00
   424 B682 00						.BYTE $00
   424 B683 00						.BYTE $00
   424 B684 00						.BYTE $00
   424 B685 00						.BYTE $00
   424 B686 00						.BYTE $00
   424 B687 00						.BYTE $00
   424 B688 00						.BYTE $00
   424 B689 00						.BYTE $00
   424 B68A 00						.BYTE $00
   424 B68B 00						.BYTE $00
   424 B68C 00						.BYTE $00
   424 B68D 00						.BYTE $00
   424 B68E 00						.BYTE $00
   424 B68F 00						.BYTE $00
   424 B690 00						.BYTE $00
   424 B691 00						.BYTE $00
   424 B692 00						.BYTE $00
   424 B693 00						.BYTE $00
   424 B694 00						.BYTE $00
   424 B695 00						.BYTE $00
   424 B696 00						.BYTE $00
   424 B697 00						.BYTE $00
   424 B698 00						.BYTE $00
   424 B699 00						.BYTE $00
   424 B69A 00						.BYTE $00
   424 B69B 00						.BYTE $00
   424 B69C 00						.BYTE $00
   424 B69D 00						.BYTE $00
   424 B69E 00						.BYTE $00
   424 B69F 00						.BYTE $00
   424 B6A0 00						.BYTE $00
   424 B6A1 00						.BYTE $00
   424 B6A2 00						.BYTE $00
   424 B6A3 00						.BYTE $00
   424 B6A4 00						.BYTE $00
   424 B6A5 00						.BYTE $00
   424 B6A6 00						.BYTE $00
   424 B6A7 00						.BYTE $00
   424 B6A8 00						.BYTE $00
   424 B6A9 00						.BYTE $00
   424 B6AA 00						.BYTE $00
   424 B6AB 00						.BYTE $00
   424 B6AC 00						.BYTE $00
   424 B6AD 00						.BYTE $00
   424 B6AE 00						.BYTE $00
   424 B6AF 00						.BYTE $00
   424 B6B0 00						.BYTE $00
   424 B6B1 00						.BYTE $00
   424 B6B2 00						.BYTE $00
   424 B6B3 00						.BYTE $00
   424 B6B4 00						.BYTE $00
   424 B6B5 00						.BYTE $00
   424 B6B6 00						.BYTE $00
   424 B6B7 00						.BYTE $00
   424 B6B8 00						.BYTE $00
   424 B6B9 00						.BYTE $00
   424 B6BA 00						.BYTE $00
   424 B6BB 00						.BYTE $00
   424 B6BC 00						.BYTE $00
   424 B6BD 00						.BYTE $00
   424 B6BE 00						.BYTE $00
   424 B6BF 00						.BYTE $00
   424 B6C0 00						.BYTE $00
   424 B6C1 00						.BYTE $00
   424 B6C2 00						.BYTE $00
   424 B6C3 00						.BYTE $00
   424 B6C4 00						.BYTE $00
   424 B6C5 00						.BYTE $00
   424 B6C6 00						.BYTE $00
   424 B6C7 00						.BYTE $00
   424 B6C8 00						.BYTE $00
   424 B6C9 00						.BYTE $00
   424 B6CA 00						.BYTE $00
   424 B6CB 00						.BYTE $00
   424 B6CC 00						.BYTE $00
   424 B6CD 00						.BYTE $00
   424 B6CE 00						.BYTE $00
   424 B6CF 00						.BYTE $00
   424 B6D0 00						.BYTE $00
   424 B6D1 00						.BYTE $00
   424 B6D2 00						.BYTE $00
   424 B6D3 00						.BYTE $00
   424 B6D4 00						.BYTE $00
   424 B6D5 00						.BYTE $00
   424 B6D6 00						.BYTE $00
   424 B6D7 00						.BYTE $00
   424 B6D8 00						.BYTE $00
   424 B6D9 00						.BYTE $00
   424 B6DA 00						.BYTE $00
   424 B6DB 00						.BYTE $00
   424 B6DC 00						.BYTE $00
   424 B6DD 00						.BYTE $00
   424 B6DE 00						.BYTE $00
   424 B6DF 00						.BYTE $00
   424 B6E0 00						.BYTE $00
   424 B6E1 00						.BYTE $00
   424 B6E2 00						.BYTE $00
   424 B6E3 00						.BYTE $00
   424 B6E4 00						.BYTE $00
   424 B6E5 00						.BYTE $00
   424 B6E6 00						.BYTE $00
   424 B6E7 00						.BYTE $00
   424 B6E8 00						.BYTE $00
   424 B6E9 00						.BYTE $00
   424 B6EA 00						.BYTE $00
   424 B6EB 00						.BYTE $00
   424 B6EC 00						.BYTE $00
   424 B6ED 00						.BYTE $00
   424 B6EE 00						.BYTE $00
   424 B6EF 00						.BYTE $00
   424 B6F0 00						.BYTE $00
   424 B6F1 00						.BYTE $00
   424 B6F2 00						.BYTE $00
   424 B6F3 00						.BYTE $00
   424 B6F4 00						.BYTE $00
   424 B6F5 00						.BYTE $00
   424 B6F6 00						.BYTE $00
   424 B6F7 00						.BYTE $00
   424 B6F8 00						.BYTE $00
   424 B6F9 00						.BYTE $00
   424 B6FA 00						.BYTE $00
   424 B6FB 00						.BYTE $00
   424 B6FC 00						.BYTE $00
   424 B6FD 00						.BYTE $00
   424 B6FE 00						.BYTE $00
   424 B6FF 00						.BYTE $00
   424 B700 00						.BYTE $00
   424 B701 00						.BYTE $00
   424 B702 00						.BYTE $00
   424 B703 00						.BYTE $00
   424 B704 00						.BYTE $00
   424 B705 00						.BYTE $00
   424 B706 00						.BYTE $00
   424 B707 00						.BYTE $00
   424 B708 00						.BYTE $00
   424 B709 00						.BYTE $00
   424 B70A 00						.BYTE $00
   424 B70B 00						.BYTE $00
   424 B70C 00						.BYTE $00
   424 B70D 00						.BYTE $00
   424 B70E 00						.BYTE $00
   424 B70F 00						.BYTE $00
   424 B710 00						.BYTE $00
   424 B711 00						.BYTE $00
   424 B712 00						.BYTE $00
   424 B713 00						.BYTE $00
   424 B714 00						.BYTE $00
   424 B715 00						.BYTE $00
   424 B716 00						.BYTE $00
   424 B717 00						.BYTE $00
   424 B718 00						.BYTE $00
   424 B719 00						.BYTE $00
   424 B71A 00						.BYTE $00
   424 B71B 00						.BYTE $00
   424 B71C 00						.BYTE $00
   424 B71D 00						.BYTE $00
   424 B71E 00						.BYTE $00
   424 B71F 00						.BYTE $00
   424 B720 00						.BYTE $00
   424 B721 00						.BYTE $00
   424 B722 00						.BYTE $00
   424 B723 00						.BYTE $00
   424 B724 00						.BYTE $00
   424 B725 00						.BYTE $00
   424 B726 00						.BYTE $00
   424 B727 00						.BYTE $00
   424 B728 00						.BYTE $00
   424 B729 00						.BYTE $00
   424 B72A 00						.BYTE $00
   424 B72B 00						.BYTE $00
   424 B72C 00						.BYTE $00
   424 B72D 00						.BYTE $00
   424 B72E 00						.BYTE $00
   424 B72F 00						.BYTE $00
   424 B730 00						.BYTE $00
   424 B731 00						.BYTE $00
   424 B732 00						.BYTE $00
   424 B733 00						.BYTE $00
   424 B734 00						.BYTE $00
   424 B735 00						.BYTE $00
   424 B736 00						.BYTE $00
   424 B737 00						.BYTE $00
   424 B738 00						.BYTE $00
   424 B739 00						.BYTE $00
   424 B73A 00						.BYTE $00
   424 B73B 00						.BYTE $00
   424 B73C 00						.BYTE $00
   424 B73D 00						.BYTE $00
   424 B73E 00						.BYTE $00
   424 B73F 00						.BYTE $00
   424 B740 00						.BYTE $00
   424 B741 00						.BYTE $00
   424 B742 00						.BYTE $00
   424 B743 00						.BYTE $00
   424 B744 00						.BYTE $00
   424 B745 00						.BYTE $00
   424 B746 00						.BYTE $00
   424 B747 00						.BYTE $00
   424 B748 00						.BYTE $00
   424 B749 00						.BYTE $00
   424 B74A 00						.BYTE $00
   424 B74B 00						.BYTE $00
   424 B74C 00						.BYTE $00
   424 B74D 00						.BYTE $00
   424 B74E 00						.BYTE $00
   424 B74F 00						.BYTE $00
   424 B750 00						.BYTE $00
   424 B751 00						.BYTE $00
   424 B752 00						.BYTE $00
   424 B753 00						.BYTE $00
   424 B754 00						.BYTE $00
   424 B755 00						.BYTE $00
   424 B756 00						.BYTE $00
   424 B757 00						.BYTE $00
   424 B758 00						.BYTE $00
   424 B759 00						.BYTE $00
   424 B75A 00						.BYTE $00
   424 B75B 00						.BYTE $00
   424 B75C 00						.BYTE $00
   424 B75D 00						.BYTE $00
   424 B75E 00						.BYTE $00
   424 B75F 00						.BYTE $00
   424 B760 00						.BYTE $00
   424 B761 00						.BYTE $00
   424 B762 00						.BYTE $00
   424 B763 00						.BYTE $00
   424 B764 00						.BYTE $00
   424 B765 00						.BYTE $00
   424 B766 00						.BYTE $00
   424 B767 00						.BYTE $00
   424 B768 00						.BYTE $00
   424 B769 00						.BYTE $00
   424 B76A 00						.BYTE $00
   424 B76B 00						.BYTE $00
   424 B76C 00						.BYTE $00
   424 B76D 00						.BYTE $00
   424 B76E 00						.BYTE $00
   424 B76F 00						.BYTE $00
   424 B770 00						.BYTE $00
   424 B771 00						.BYTE $00
   424 B772 00						.BYTE $00
   424 B773 00						.BYTE $00
   424 B774 00						.BYTE $00
   424 B775 00						.BYTE $00
   424 B776 00						.BYTE $00
   424 B777 00						.BYTE $00
   424 B778 00						.BYTE $00
   424 B779 00						.BYTE $00
   424 B77A 00						.BYTE $00
   424 B77B 00						.BYTE $00
   424 B77C 00						.BYTE $00
   424 B77D 00						.BYTE $00
   424 B77E 00						.BYTE $00
   424 B77F 00						.BYTE $00
   424 B780 00						.BYTE $00
   424 B781 00						.BYTE $00
   424 B782 00						.BYTE $00
   424 B783 00						.BYTE $00
   424 B784 00						.BYTE $00
   424 B785 00						.BYTE $00
   424 B786 00						.BYTE $00
   424 B787 00						.BYTE $00
   424 B788 00						.BYTE $00
   424 B789 00						.BYTE $00
   424 B78A 00						.BYTE $00
   424 B78B 00						.BYTE $00
   424 B78C 00						.BYTE $00
   424 B78D 00						.BYTE $00
   424 B78E 00						.BYTE $00
   424 B78F 00						.BYTE $00
   424 B790 00						.BYTE $00
   424 B791 00						.BYTE $00
   424 B792 00						.BYTE $00
   424 B793 00						.BYTE $00
   424 B794 00						.BYTE $00
   424 B795 00						.BYTE $00
   424 B796 00						.BYTE $00
   424 B797 00						.BYTE $00
   424 B798 00						.BYTE $00
   424 B799 00						.BYTE $00
   424 B79A 00						.BYTE $00
   424 B79B 00						.BYTE $00
   424 B79C 00						.BYTE $00
   424 B79D 00						.BYTE $00
   424 B79E 00						.BYTE $00
   424 B79F 00						.BYTE $00
   424 B7A0 00						.BYTE $00
   424 B7A1 00						.BYTE $00
   424 B7A2 00						.BYTE $00
   424 B7A3 00						.BYTE $00
   424 B7A4 00						.BYTE $00
   424 B7A5 00						.BYTE $00
   424 B7A6 00						.BYTE $00
   424 B7A7 00						.BYTE $00
   424 B7A8 00						.BYTE $00
   424 B7A9 00						.BYTE $00
   424 B7AA 00						.BYTE $00
   424 B7AB 00						.BYTE $00
   424 B7AC 00						.BYTE $00
   424 B7AD 00						.BYTE $00
   424 B7AE 00						.BYTE $00
   424 B7AF 00						.BYTE $00
   424 B7B0 00						.BYTE $00
   424 B7B1 00						.BYTE $00
   424 B7B2 00						.BYTE $00
   424 B7B3 00						.BYTE $00
   424 B7B4 00						.BYTE $00
   424 B7B5 00						.BYTE $00
   424 B7B6 00						.BYTE $00
   424 B7B7 00						.BYTE $00
   424 B7B8 00						.BYTE $00
   424 B7B9 00						.BYTE $00
   424 B7BA 00						.BYTE $00
   424 B7BB 00						.BYTE $00
   424 B7BC 00						.BYTE $00
   424 B7BD 00						.BYTE $00
   424 B7BE 00						.BYTE $00
   424 B7BF 00						.BYTE $00
   424 B7C0 00						.BYTE $00
   424 B7C1 00						.BYTE $00
   424 B7C2 00						.BYTE $00
   424 B7C3 00						.BYTE $00
   424 B7C4 00						.BYTE $00
   424 B7C5 00						.BYTE $00
   424 B7C6 00						.BYTE $00
   424 B7C7 00						.BYTE $00
   424 B7C8 00						.BYTE $00
   424 B7C9 00						.BYTE $00
   424 B7CA 00						.BYTE $00
   424 B7CB 00						.BYTE $00
   424 B7CC 00						.BYTE $00
   424 B7CD 00						.BYTE $00
   424 B7CE 00						.BYTE $00
   424 B7CF 00						.BYTE $00
   424 B7D0 00						.BYTE $00
   424 B7D1 00						.BYTE $00
   424 B7D2 00						.BYTE $00
   424 B7D3 00						.BYTE $00
   424 B7D4 00						.BYTE $00
   424 B7D5 00						.BYTE $00
   424 B7D6 00						.BYTE $00
   424 B7D7 00						.BYTE $00
   424 B7D8 00						.BYTE $00
   424 B7D9 00						.BYTE $00
   424 B7DA 00						.BYTE $00
   424 B7DB 00						.BYTE $00
   424 B7DC 00						.BYTE $00
   424 B7DD 00						.BYTE $00
   424 B7DE 00						.BYTE $00
   424 B7DF 00						.BYTE $00
   424 B7E0 00						.BYTE $00
   424 B7E1 00						.BYTE $00
   424 B7E2 00						.BYTE $00
   424 B7E3 00						.BYTE $00
   424 B7E4 00						.BYTE $00
   424 B7E5 00						.BYTE $00
   424 B7E6 00						.BYTE $00
   424 B7E7 00						.BYTE $00
   424 B7E8 00						.BYTE $00
   424 B7E9 00						.BYTE $00
   424 B7EA 00						.BYTE $00
   424 B7EB 00						.BYTE $00
   424 B7EC 00						.BYTE $00
   424 B7ED 00						.BYTE $00
   424 B7EE 00						.BYTE $00
   424 B7EF 00						.BYTE $00
   424 B7F0 00						.BYTE $00
   424 B7F1 00						.BYTE $00
   424 B7F2 00						.BYTE $00
   424 B7F3 00						.BYTE $00
   424 B7F4 00						.BYTE $00
   424 B7F5 00						.BYTE $00
   424 B7F6 00						.BYTE $00
   424 B7F7 00						.BYTE $00
   424 B7F8 00						.BYTE $00
   424 B7F9 00						.BYTE $00
   424 B7FA 00						.BYTE $00
   424 B7FB 00						.BYTE $00
   424 B7FC 00						.BYTE $00
   424 B7FD 00						.BYTE $00
   424 B7FE 00						.BYTE $00
   424 B7FF 00						.BYTE $00
   424 B800 00						.BYTE $00
   424 B801 00						.BYTE $00
   424 B802 00						.BYTE $00
   424 B803 00						.BYTE $00
   424 B804 00						.BYTE $00
   424 B805 00						.BYTE $00
   424 B806 00						.BYTE $00
   424 B807 00						.BYTE $00
   424 B808 00						.BYTE $00
   424 B809 00						.BYTE $00
   424 B80A 00						.BYTE $00
   424 B80B 00						.BYTE $00
   424 B80C 00						.BYTE $00
   424 B80D 00						.BYTE $00
   424 B80E 00						.BYTE $00
   424 B80F 00						.BYTE $00
   424 B810 00						.BYTE $00
   424 B811 00						.BYTE $00
   424 B812 00						.BYTE $00
   424 B813 00						.BYTE $00
   424 B814 00						.BYTE $00
   424 B815 00						.BYTE $00
   424 B816 00						.BYTE $00
   424 B817 00						.BYTE $00
   424 B818 00						.BYTE $00
   424 B819 00						.BYTE $00
   424 B81A 00						.BYTE $00
   424 B81B 00						.BYTE $00
   424 B81C 00						.BYTE $00
   424 B81D 00						.BYTE $00
   424 B81E 00						.BYTE $00
   424 B81F 00						.BYTE $00
   424 B820 00						.BYTE $00
   424 B821 00						.BYTE $00
   424 B822 00						.BYTE $00
   424 B823 00						.BYTE $00
   424 B824 00						.BYTE $00
   424 B825 00						.BYTE $00
   424 B826 00						.BYTE $00
   424 B827 00						.BYTE $00
   424 B828 00						.BYTE $00
   424 B829 00						.BYTE $00
   424 B82A 00						.BYTE $00
   424 B82B 00						.BYTE $00
   424 B82C 00						.BYTE $00
   424 B82D 00						.BYTE $00
   424 B82E 00						.BYTE $00
   424 B82F 00						.BYTE $00
   424 B830 00						.BYTE $00
   424 B831 00						.BYTE $00
   424 B832 00						.BYTE $00
   424 B833 00						.BYTE $00
   424 B834 00						.BYTE $00
   424 B835 00						.BYTE $00
   424 B836 00						.BYTE $00
   424 B837 00						.BYTE $00
   424 B838 00						.BYTE $00
   424 B839 00						.BYTE $00
   424 B83A 00						.BYTE $00
   424 B83B 00						.BYTE $00
   424 B83C 00						.BYTE $00
   424 B83D 00						.BYTE $00
   424 B83E 00						.BYTE $00
   424 B83F 00						.BYTE $00
   424 B840 00						.BYTE $00
   424 B841 00						.BYTE $00
   424 B842 00						.BYTE $00
   424 B843 00						.BYTE $00
   424 B844 00						.BYTE $00
   424 B845 00						.BYTE $00
   424 B846 00						.BYTE $00
   424 B847 00						.BYTE $00
   424 B848 00						.BYTE $00
   424 B849 00						.BYTE $00
   424 B84A 00						.BYTE $00
   424 B84B 00						.BYTE $00
   424 B84C 00						.BYTE $00
   424 B84D 00						.BYTE $00
   424 B84E 00						.BYTE $00
   424 B84F 00						.BYTE $00
   424 B850 00						.BYTE $00
   424 B851 00						.BYTE $00
   424 B852 00						.BYTE $00
   424 B853 00						.BYTE $00
   424 B854 00						.BYTE $00
   424 B855 00						.BYTE $00
   424 B856 00						.BYTE $00
   424 B857 00						.BYTE $00
   424 B858 00						.BYTE $00
   424 B859 00						.BYTE $00
   424 B85A 00						.BYTE $00
   424 B85B 00						.BYTE $00
   424 B85C 00						.BYTE $00
   424 B85D 00						.BYTE $00
   424 B85E 00						.BYTE $00
   424 B85F 00						.BYTE $00
   424 B860 00						.BYTE $00
   424 B861 00						.BYTE $00
   424 B862 00						.BYTE $00
   424 B863 00						.BYTE $00
   424 B864 00						.BYTE $00
   424 B865 00						.BYTE $00
   424 B866 00						.BYTE $00
   424 B867 00						.BYTE $00
   424 B868 00						.BYTE $00
   424 B869 00						.BYTE $00
   424 B86A 00						.BYTE $00
   424 B86B 00						.BYTE $00
   424 B86C 00						.BYTE $00
   424 B86D 00						.BYTE $00
   424 B86E 00						.BYTE $00
   424 B86F 00						.BYTE $00
   424 B870 00						.BYTE $00
   424 B871 00						.BYTE $00
   424 B872 00						.BYTE $00
   424 B873 00						.BYTE $00
   424 B874 00						.BYTE $00
   424 B875 00						.BYTE $00
   424 B876 00						.BYTE $00
   424 B877 00						.BYTE $00
   424 B878 00						.BYTE $00
   424 B879 00						.BYTE $00
   424 B87A 00						.BYTE $00
   424 B87B 00						.BYTE $00
   424 B87C 00						.BYTE $00
   424 B87D 00						.BYTE $00
   424 B87E 00						.BYTE $00
   424 B87F 00						.BYTE $00
   424 B880 00						.BYTE $00
   424 B881 00						.BYTE $00
   424 B882 00						.BYTE $00
   424 B883 00						.BYTE $00
   424 B884 00						.BYTE $00
   424 B885 00						.BYTE $00
   424 B886 00						.BYTE $00
   424 B887 00						.BYTE $00
   424 B888 00						.BYTE $00
   424 B889 00						.BYTE $00
   424 B88A 00						.BYTE $00
   424 B88B 00						.BYTE $00
   424 B88C 00						.BYTE $00
   424 B88D 00						.BYTE $00
   424 B88E 00						.BYTE $00
   424 B88F 00						.BYTE $00
   424 B890 00						.BYTE $00
   424 B891 00						.BYTE $00
   424 B892 00						.BYTE $00
   424 B893 00						.BYTE $00
   424 B894 00						.BYTE $00
   424 B895 00						.BYTE $00
   424 B896 00						.BYTE $00
   424 B897 00						.BYTE $00
   424 B898 00						.BYTE $00
   424 B899 00						.BYTE $00
   424 B89A 00						.BYTE $00
   424 B89B 00						.BYTE $00
   424 B89C 00						.BYTE $00
   424 B89D 00						.BYTE $00
   424 B89E 00						.BYTE $00
   424 B89F 00						.BYTE $00
   424 B8A0 00						.BYTE $00
   424 B8A1 00						.BYTE $00
   424 B8A2 00						.BYTE $00
   424 B8A3 00						.BYTE $00
   424 B8A4 00						.BYTE $00
   424 B8A5 00						.BYTE $00
   424 B8A6 00						.BYTE $00
   424 B8A7 00						.BYTE $00
   424 B8A8 00						.BYTE $00
   424 B8A9 00						.BYTE $00
   424 B8AA 00						.BYTE $00
   424 B8AB 00						.BYTE $00
   424 B8AC 00						.BYTE $00
   424 B8AD 00						.BYTE $00
   424 B8AE 00						.BYTE $00
   424 B8AF 00						.BYTE $00
   424 B8B0 00						.BYTE $00
   424 B8B1 00						.BYTE $00
   424 B8B2 00						.BYTE $00
   424 B8B3 00						.BYTE $00
   424 B8B4 00						.BYTE $00
   424 B8B5 00						.BYTE $00
   424 B8B6 00						.BYTE $00
   424 B8B7 00						.BYTE $00
   424 B8B8 00						.BYTE $00
   424 B8B9 00						.BYTE $00
   424 B8BA 00						.BYTE $00
   424 B8BB 00						.BYTE $00
   424 B8BC 00						.BYTE $00
   424 B8BD 00						.BYTE $00
   424 B8BE 00						.BYTE $00
   424 B8BF 00						.BYTE $00
   424 B8C0 00						.BYTE $00
   424 B8C1 00						.BYTE $00
   424 B8C2 00						.BYTE $00
   424 B8C3 00						.BYTE $00
   424 B8C4 00						.BYTE $00
   424 B8C5 00						.BYTE $00
   424 B8C6 00						.BYTE $00
   424 B8C7 00						.BYTE $00
   424 B8C8 00						.BYTE $00
   424 B8C9 00						.BYTE $00
   424 B8CA 00						.BYTE $00
   424 B8CB 00						.BYTE $00
   424 B8CC 00						.BYTE $00
   424 B8CD 00						.BYTE $00
   424 B8CE 00						.BYTE $00
   424 B8CF 00						.BYTE $00
   424 B8D0 00						.BYTE $00
   424 B8D1 00						.BYTE $00
   424 B8D2 00						.BYTE $00
   424 B8D3 00						.BYTE $00
   424 B8D4 00						.BYTE $00
   424 B8D5 00						.BYTE $00
   424 B8D6 00						.BYTE $00
   424 B8D7 00						.BYTE $00
   424 B8D8 00						.BYTE $00
   424 B8D9 00						.BYTE $00
   424 B8DA 00						.BYTE $00
   424 B8DB 00						.BYTE $00
   424 B8DC 00						.BYTE $00
   424 B8DD 00						.BYTE $00
   424 B8DE 00						.BYTE $00
   424 B8DF 00						.BYTE $00
   424 B8E0 00						.BYTE $00
   424 B8E1 00						.BYTE $00
   424 B8E2 00						.BYTE $00
   424 B8E3 00						.BYTE $00
   424 B8E4 00						.BYTE $00
   424 B8E5 00						.BYTE $00
   424 B8E6 00						.BYTE $00
   424 B8E7 00						.BYTE $00
   424 B8E8 00						.BYTE $00
   424 B8E9 00						.BYTE $00
   424 B8EA 00						.BYTE $00
   424 B8EB 00						.BYTE $00
   424 B8EC 00						.BYTE $00
   424 B8ED 00						.BYTE $00
   424 B8EE 00						.BYTE $00
   424 B8EF 00						.BYTE $00
   424 B8F0 00						.BYTE $00
   424 B8F1 00						.BYTE $00
   424 B8F2 00						.BYTE $00
   424 B8F3 00						.BYTE $00
   424 B8F4 00						.BYTE $00
   424 B8F5 00						.BYTE $00
   424 B8F6 00						.BYTE $00
   424 B8F7 00						.BYTE $00
   424 B8F8 00						.BYTE $00
   424 B8F9 00						.BYTE $00
   424 B8FA 00						.BYTE $00
   424 B8FB 00						.BYTE $00
   424 B8FC 00						.BYTE $00
   424 B8FD 00						.BYTE $00
   424 B8FE 00						.BYTE $00
   424 B8FF 00						.BYTE $00
   424 B900 00						.BYTE $00
   424 B901 00						.BYTE $00
   424 B902 00						.BYTE $00
   424 B903 00						.BYTE $00
   424 B904 00						.BYTE $00
   424 B905 00						.BYTE $00
   424 B906 00						.BYTE $00
   424 B907 00						.BYTE $00
   424 B908 00						.BYTE $00
   424 B909 00						.BYTE $00
   424 B90A 00						.BYTE $00
   424 B90B 00						.BYTE $00
   424 B90C 00						.BYTE $00
   424 B90D 00						.BYTE $00
   424 B90E 00						.BYTE $00
   424 B90F 00						.BYTE $00
   424 B910 00						.BYTE $00
   424 B911 00						.BYTE $00
   424 B912 00						.BYTE $00
   424 B913 00						.BYTE $00
   424 B914 00						.BYTE $00
   424 B915 00						.BYTE $00
   424 B916 00						.BYTE $00
   424 B917 00						.BYTE $00
   424 B918 00						.BYTE $00
   424 B919 00						.BYTE $00
   424 B91A 00						.BYTE $00
   424 B91B 00						.BYTE $00
   424 B91C 00						.BYTE $00
   424 B91D 00						.BYTE $00
   424 B91E 00						.BYTE $00
   424 B91F 00						.BYTE $00
   424 B920 00						.BYTE $00
   424 B921 00						.BYTE $00
   424 B922 00						.BYTE $00
   424 B923 00						.BYTE $00
   424 B924 00						.BYTE $00
   424 B925 00						.BYTE $00
   424 B926 00						.BYTE $00
   424 B927 00						.BYTE $00
   424 B928 00						.BYTE $00
   424 B929 00						.BYTE $00
   424 B92A 00						.BYTE $00
   424 B92B 00						.BYTE $00
   424 B92C 00						.BYTE $00
   424 B92D 00						.BYTE $00
   424 B92E 00						.BYTE $00
   424 B92F 00						.BYTE $00
   424 B930 00						.BYTE $00
   424 B931 00						.BYTE $00
   424 B932 00						.BYTE $00
   424 B933 00						.BYTE $00
   424 B934 00						.BYTE $00
   424 B935 00						.BYTE $00
   424 B936 00						.BYTE $00
   424 B937 00						.BYTE $00
   424 B938 00						.BYTE $00
   424 B939 00						.BYTE $00
   424 B93A 00						.BYTE $00
   424 B93B 00						.BYTE $00
   424 B93C 00						.BYTE $00
   424 B93D 00						.BYTE $00
   424 B93E 00						.BYTE $00
   424 B93F 00						.BYTE $00
   424 B940 00						.BYTE $00
   424 B941 00						.BYTE $00
   424 B942 00						.BYTE $00
   424 B943 00						.BYTE $00
   424 B944 00						.BYTE $00
   424 B945 00						.BYTE $00
   424 B946 00						.BYTE $00
   424 B947 00						.BYTE $00
   424 B948 00						.BYTE $00
   424 B949 00						.BYTE $00
   424 B94A 00						.BYTE $00
   424 B94B 00						.BYTE $00
   424 B94C 00						.BYTE $00
   424 B94D 00						.BYTE $00
   424 B94E 00						.BYTE $00
   424 B94F 00						.BYTE $00
   424 B950 00						.BYTE $00
   424 B951 00						.BYTE $00
   424 B952 00						.BYTE $00
   424 B953 00						.BYTE $00
   424 B954 00						.BYTE $00
   424 B955 00						.BYTE $00
   424 B956 00						.BYTE $00
   424 B957 00						.BYTE $00
   424 B958 00						.BYTE $00
   424 B959 00						.BYTE $00
   424 B95A 00						.BYTE $00
   424 B95B 00						.BYTE $00
   424 B95C 00						.BYTE $00
   424 B95D 00						.BYTE $00
   424 B95E 00						.BYTE $00
   424 B95F 00						.BYTE $00
   424 B960 00						.BYTE $00
   424 B961 00						.BYTE $00
   424 B962 00						.BYTE $00
   424 B963 00						.BYTE $00
   424 B964 00						.BYTE $00
   424 B965 00						.BYTE $00
   424 B966 00						.BYTE $00
   424 B967 00						.BYTE $00
   424 B968 00						.BYTE $00
   424 B969 00						.BYTE $00
   424 B96A 00						.BYTE $00
   424 B96B 00						.BYTE $00
   424 B96C 00						.BYTE $00
   424 B96D 00						.BYTE $00
   424 B96E 00						.BYTE $00
   424 B96F 00						.BYTE $00
   424 B970 00						.BYTE $00
   424 B971 00						.BYTE $00
   424 B972 00						.BYTE $00
   424 B973 00						.BYTE $00
   424 B974 00						.BYTE $00
   424 B975 00						.BYTE $00
   424 B976 00						.BYTE $00
   424 B977 00						.BYTE $00
   424 B978 00						.BYTE $00
   424 B979 00						.BYTE $00
   424 B97A 00						.BYTE $00
   424 B97B 00						.BYTE $00
   424 B97C 00						.BYTE $00
   424 B97D 00						.BYTE $00
   424 B97E 00						.BYTE $00
   424 B97F 00						.BYTE $00
   424 B980 00						.BYTE $00
   424 B981 00						.BYTE $00
   424 B982 00						.BYTE $00
   424 B983 00						.BYTE $00
   424 B984 00						.BYTE $00
   424 B985 00						.BYTE $00
   424 B986 00						.BYTE $00
   424 B987 00						.BYTE $00
   424 B988 00						.BYTE $00
   424 B989 00						.BYTE $00
   424 B98A 00						.BYTE $00
   424 B98B 00						.BYTE $00
   424 B98C 00						.BYTE $00
   424 B98D 00						.BYTE $00
   424 B98E 00						.BYTE $00
   424 B98F 00						.BYTE $00
   424 B990 00						.BYTE $00
   424 B991 00						.BYTE $00
   424 B992 00						.BYTE $00
   424 B993 00						.BYTE $00
   424 B994 00						.BYTE $00
   424 B995 00						.BYTE $00
   424 B996 00						.BYTE $00
   424 B997 00						.BYTE $00
   424 B998 00						.BYTE $00
   424 B999 00						.BYTE $00
   424 B99A 00						.BYTE $00
   424 B99B 00						.BYTE $00
   424 B99C 00						.BYTE $00
   424 B99D 00						.BYTE $00
   424 B99E 00						.BYTE $00
   424 B99F 00						.BYTE $00
   424 B9A0 00						.BYTE $00
   424 B9A1 00						.BYTE $00
   424 B9A2 00						.BYTE $00
   424 B9A3 00						.BYTE $00
   424 B9A4 00						.BYTE $00
   424 B9A5 00						.BYTE $00
   424 B9A6 00						.BYTE $00
   424 B9A7 00						.BYTE $00
   424 B9A8 00						.BYTE $00
   424 B9A9 00						.BYTE $00
   424 B9AA 00						.BYTE $00
   424 B9AB 00						.BYTE $00
   424 B9AC 00						.BYTE $00
   424 B9AD 00						.BYTE $00
   424 B9AE 00						.BYTE $00
   424 B9AF 00						.BYTE $00
   424 B9B0 00						.BYTE $00
   424 B9B1 00						.BYTE $00
   424 B9B2 00						.BYTE $00
   424 B9B3 00						.BYTE $00
   424 B9B4 00						.BYTE $00
   424 B9B5 00						.BYTE $00
   424 B9B6 00						.BYTE $00
   424 B9B7 00						.BYTE $00
   424 B9B8 00						.BYTE $00
   424 B9B9 00						.BYTE $00
   424 B9BA 00						.BYTE $00
   424 B9BB 00						.BYTE $00
   424 B9BC 00						.BYTE $00
   424 B9BD 00						.BYTE $00
   424 B9BE 00						.BYTE $00
   424 B9BF 00						.BYTE $00
   424 B9C0 00						.BYTE $00
   424 B9C1 00						.BYTE $00
   424 B9C2 00						.BYTE $00
   424 B9C3 00						.BYTE $00
   424 B9C4 00						.BYTE $00
   424 B9C5 00						.BYTE $00
   424 B9C6 00						.BYTE $00
   424 B9C7 00						.BYTE $00
   424 B9C8 00						.BYTE $00
   424 B9C9 00						.BYTE $00
   424 B9CA 00						.BYTE $00
   424 B9CB 00						.BYTE $00
   424 B9CC 00						.BYTE $00
   424 B9CD 00						.BYTE $00
   424 B9CE 00						.BYTE $00
   424 B9CF 00						.BYTE $00
   424 B9D0 00						.BYTE $00
   424 B9D1 00						.BYTE $00
   424 B9D2 00						.BYTE $00
   424 B9D3 00						.BYTE $00
   424 B9D4 00						.BYTE $00
   424 B9D5 00						.BYTE $00
   424 B9D6 00						.BYTE $00
   424 B9D7 00						.BYTE $00
   424 B9D8 00						.BYTE $00
   424 B9D9 00						.BYTE $00
   424 B9DA 00						.BYTE $00
   424 B9DB 00						.BYTE $00
   424 B9DC 00						.BYTE $00
   424 B9DD 00						.BYTE $00
   424 B9DE 00						.BYTE $00
   424 B9DF 00						.BYTE $00
   424 B9E0 00						.BYTE $00
   424 B9E1 00						.BYTE $00
   424 B9E2 00						.BYTE $00
   424 B9E3 00						.BYTE $00
   424 B9E4 00						.BYTE $00
   424 B9E5 00						.BYTE $00
   424 B9E6 00						.BYTE $00
   424 B9E7 00						.BYTE $00
   424 B9E8 00						.BYTE $00
   424 B9E9 00						.BYTE $00
   424 B9EA 00						.BYTE $00
   424 B9EB 00						.BYTE $00
   424 B9EC 00						.BYTE $00
   424 B9ED 00						.BYTE $00
   424 B9EE 00						.BYTE $00
   424 B9EF 00						.BYTE $00
   424 B9F0 00						.BYTE $00
   424 B9F1 00						.BYTE $00
   424 B9F2 00						.BYTE $00
   424 B9F3 00						.BYTE $00
   424 B9F4 00						.BYTE $00
   424 B9F5 00						.BYTE $00
   424 B9F6 00						.BYTE $00
   424 B9F7 00						.BYTE $00
   424 B9F8 00						.BYTE $00
   424 B9F9 00						.BYTE $00
   424 B9FA 00						.BYTE $00
   424 B9FB 00						.BYTE $00
   424 B9FC 00						.BYTE $00
   424 B9FD 00						.BYTE $00
   424 B9FE 00						.BYTE $00
   424 B9FF 00						.BYTE $00
   424 BA00 00						.BYTE $00
   424 BA01 00						.BYTE $00
   424 BA02 00						.BYTE $00
   424 BA03 00						.BYTE $00
   424 BA04 00						.BYTE $00
   424 BA05 00						.BYTE $00
   424 BA06 00						.BYTE $00
   424 BA07 00						.BYTE $00
   424 BA08 00						.BYTE $00
   424 BA09 00						.BYTE $00
   424 BA0A 00						.BYTE $00
   424 BA0B 00						.BYTE $00
   424 BA0C 00						.BYTE $00
   424 BA0D 00						.BYTE $00
   424 BA0E 00						.BYTE $00
   424 BA0F 00						.BYTE $00
   424 BA10 00						.BYTE $00
   424 BA11 00						.BYTE $00
   424 BA12 00						.BYTE $00
   424 BA13 00						.BYTE $00
   424 BA14 00						.BYTE $00
   424 BA15 00						.BYTE $00
   424 BA16 00						.BYTE $00
   424 BA17 00						.BYTE $00
   424 BA18 00						.BYTE $00
   424 BA19 00						.BYTE $00
   424 BA1A 00						.BYTE $00
   424 BA1B 00						.BYTE $00
   424 BA1C 00						.BYTE $00
   424 BA1D 00						.BYTE $00
   424 BA1E 00						.BYTE $00
   424 BA1F 00						.BYTE $00
   424 BA20 00						.BYTE $00
   424 BA21 00						.BYTE $00
   424 BA22 00						.BYTE $00
   424 BA23 00						.BYTE $00
   424 BA24 00						.BYTE $00
   424 BA25 00						.BYTE $00
   424 BA26 00						.BYTE $00
   424 BA27 00						.BYTE $00
   424 BA28 00						.BYTE $00
   424 BA29 00						.BYTE $00
   424 BA2A 00						.BYTE $00
   424 BA2B 00						.BYTE $00
   424 BA2C 00						.BYTE $00
   424 BA2D 00						.BYTE $00
   424 BA2E 00						.BYTE $00
   424 BA2F 00						.BYTE $00
   424 BA30 00						.BYTE $00
   424 BA31 00						.BYTE $00
   424 BA32 00						.BYTE $00
   424 BA33 00						.BYTE $00
   424 BA34 00						.BYTE $00
   424 BA35 00						.BYTE $00
   424 BA36 00						.BYTE $00
   424 BA37 00						.BYTE $00
   424 BA38 00						.BYTE $00
   424 BA39 00						.BYTE $00
   424 BA3A 00						.BYTE $00
   424 BA3B 00						.BYTE $00
   424 BA3C 00						.BYTE $00
   424 BA3D 00						.BYTE $00
   424 BA3E 00						.BYTE $00
   424 BA3F 00						.BYTE $00
   424 BA40 00						.BYTE $00
   424 BA41 00						.BYTE $00
   424 BA42 00						.BYTE $00
   424 BA43 00						.BYTE $00
   424 BA44 00						.BYTE $00
   424 BA45 00						.BYTE $00
   424 BA46 00						.BYTE $00
   424 BA47 00						.BYTE $00
   424 BA48 00						.BYTE $00
   424 BA49 00						.BYTE $00
   424 BA4A 00						.BYTE $00
   424 BA4B 00						.BYTE $00
   424 BA4C 00						.BYTE $00
   424 BA4D 00						.BYTE $00
   424 BA4E 00						.BYTE $00
   424 BA4F 00						.BYTE $00
   424 BA50 00						.BYTE $00
   424 BA51 00						.BYTE $00
   424 BA52 00						.BYTE $00
   424 BA53 00						.BYTE $00
   424 BA54 00						.BYTE $00
   424 BA55 00						.BYTE $00
   424 BA56 00						.BYTE $00
   424 BA57 00						.BYTE $00
   424 BA58 00						.BYTE $00
   424 BA59 00						.BYTE $00
   424 BA5A 00						.BYTE $00
   424 BA5B 00						.BYTE $00
   424 BA5C 00						.BYTE $00
   424 BA5D 00						.BYTE $00
   424 BA5E 00						.BYTE $00
   424 BA5F 00						.BYTE $00
   424 BA60 00						.BYTE $00
   424 BA61 00						.BYTE $00
   424 BA62 00						.BYTE $00
   424 BA63 00						.BYTE $00
   424 BA64 00						.BYTE $00
   424 BA65 00						.BYTE $00
   424 BA66 00						.BYTE $00
   424 BA67 00						.BYTE $00
   424 BA68 00						.BYTE $00
   424 BA69 00						.BYTE $00
   424 BA6A 00						.BYTE $00
   424 BA6B 00						.BYTE $00
   424 BA6C 00						.BYTE $00
   424 BA6D 00						.BYTE $00
   424 BA6E 00						.BYTE $00
   424 BA6F 00						.BYTE $00
   424 BA70 00						.BYTE $00
   424 BA71 00						.BYTE $00
   424 BA72 00						.BYTE $00
   424 BA73 00						.BYTE $00
   424 BA74 00						.BYTE $00
   424 BA75 00						.BYTE $00
   424 BA76 00						.BYTE $00
   424 BA77 00						.BYTE $00
   424 BA78 00						.BYTE $00
   424 BA79 00						.BYTE $00
   424 BA7A 00						.BYTE $00
   424 BA7B 00						.BYTE $00
   424 BA7C 00						.BYTE $00
   424 BA7D 00						.BYTE $00
   424 BA7E 00						.BYTE $00
   424 BA7F 00						.BYTE $00
   424 BA80 00						.BYTE $00
   424 BA81 00						.BYTE $00
   424 BA82 00						.BYTE $00
   424 BA83 00						.BYTE $00
   424 BA84 00						.BYTE $00
   424 BA85 00						.BYTE $00
   424 BA86 00						.BYTE $00
   424 BA87 00						.BYTE $00
   424 BA88 00						.BYTE $00
   424 BA89 00						.BYTE $00
   424 BA8A 00						.BYTE $00
   424 BA8B 00						.BYTE $00
   424 BA8C 00						.BYTE $00
   424 BA8D 00						.BYTE $00
   424 BA8E 00						.BYTE $00
   424 BA8F 00						.BYTE $00
   424 BA90 00						.BYTE $00
   424 BA91 00						.BYTE $00
   424 BA92 00						.BYTE $00
   424 BA93 00						.BYTE $00
   424 BA94 00						.BYTE $00
   424 BA95 00						.BYTE $00
   424 BA96 00						.BYTE $00
   424 BA97 00						.BYTE $00
   424 BA98 00						.BYTE $00
   424 BA99 00						.BYTE $00
   424 BA9A 00						.BYTE $00
   424 BA9B 00						.BYTE $00
   424 BA9C 00						.BYTE $00
   424 BA9D 00						.BYTE $00
   424 BA9E 00						.BYTE $00
   424 BA9F 00						.BYTE $00
   424 BAA0 00						.BYTE $00
   424 BAA1 00						.BYTE $00
   424 BAA2 00						.BYTE $00
   424 BAA3 00						.BYTE $00
   424 BAA4 00						.BYTE $00
   424 BAA5 00						.BYTE $00
   424 BAA6 00						.BYTE $00
   424 BAA7 00						.BYTE $00
   424 BAA8 00						.BYTE $00
   424 BAA9 00						.BYTE $00
   424 BAAA 00						.BYTE $00
   424 BAAB 00						.BYTE $00
   424 BAAC 00						.BYTE $00
   424 BAAD 00						.BYTE $00
   424 BAAE 00						.BYTE $00
   424 BAAF 00						.BYTE $00
   424 BAB0 00						.BYTE $00
   424 BAB1 00						.BYTE $00
   424 BAB2 00						.BYTE $00
   424 BAB3 00						.BYTE $00
   424 BAB4 00						.BYTE $00
   424 BAB5 00						.BYTE $00
   424 BAB6 00						.BYTE $00
   424 BAB7 00						.BYTE $00
   424 BAB8 00						.BYTE $00
   424 BAB9 00						.BYTE $00
   424 BABA 00						.BYTE $00
   424 BABB 00						.BYTE $00
   424 BABC 00						.BYTE $00
   424 BABD 00						.BYTE $00
   424 BABE 00						.BYTE $00
   424 BABF 00						.BYTE $00
   424 BAC0 00						.BYTE $00
   424 BAC1 00						.BYTE $00
   424 BAC2 00						.BYTE $00
   424 BAC3 00						.BYTE $00
   424 BAC4 00						.BYTE $00
   424 BAC5 00						.BYTE $00
   424 BAC6 00						.BYTE $00
   424 BAC7 00						.BYTE $00
   424 BAC8 00						.BYTE $00
   424 BAC9 00						.BYTE $00
   424 BACA 00						.BYTE $00
   424 BACB 00						.BYTE $00
   424 BACC 00						.BYTE $00
   424 BACD 00						.BYTE $00
   424 BACE 00						.BYTE $00
   424 BACF 00						.BYTE $00
   424 BAD0 00						.BYTE $00
   424 BAD1 00						.BYTE $00
   424 BAD2 00						.BYTE $00
   424 BAD3 00						.BYTE $00
   424 BAD4 00						.BYTE $00
   424 BAD5 00						.BYTE $00
   424 BAD6 00						.BYTE $00
   424 BAD7 00						.BYTE $00
   424 BAD8 00						.BYTE $00
   424 BAD9 00						.BYTE $00
   424 BADA 00						.BYTE $00
   424 BADB 00						.BYTE $00
   424 BADC 00						.BYTE $00
   424 BADD 00						.BYTE $00
   424 BADE 00						.BYTE $00
   424 BADF 00						.BYTE $00
   424 BAE0 00						.BYTE $00
   424 BAE1 00						.BYTE $00
   424 BAE2 00						.BYTE $00
   424 BAE3 00						.BYTE $00
   424 BAE4 00						.BYTE $00
   424 BAE5 00						.BYTE $00
   424 BAE6 00						.BYTE $00
   424 BAE7 00						.BYTE $00
   424 BAE8 00						.BYTE $00
   424 BAE9 00						.BYTE $00
   424 BAEA 00						.BYTE $00
   424 BAEB 00						.BYTE $00
   424 BAEC 00						.BYTE $00
   424 BAED 00						.BYTE $00
   424 BAEE 00						.BYTE $00
   424 BAEF 00						.BYTE $00
   424 BAF0 00						.BYTE $00
   424 BAF1 00						.BYTE $00
   424 BAF2 00						.BYTE $00
   424 BAF3 00						.BYTE $00
   424 BAF4 00						.BYTE $00
   424 BAF5 00						.BYTE $00
   424 BAF6 00						.BYTE $00
   424 BAF7 00						.BYTE $00
   424 BAF8 00						.BYTE $00
   424 BAF9 00						.BYTE $00
   424 BAFA 00						.BYTE $00
   424 BAFB 00						.BYTE $00
   424 BAFC 00						.BYTE $00
   424 BAFD 00						.BYTE $00
   424 BAFE 00						.BYTE $00
   424 BAFF 00						.BYTE $00
   424 BB00 00						.BYTE $00
   424 BB01 00						.BYTE $00
   424 BB02 00						.BYTE $00
   424 BB03 00						.BYTE $00
   424 BB04 00						.BYTE $00
   424 BB05 00						.BYTE $00
   424 BB06 00						.BYTE $00
   424 BB07 00						.BYTE $00
   424 BB08 00						.BYTE $00
   424 BB09 00						.BYTE $00
   424 BB0A 00						.BYTE $00
   424 BB0B 00						.BYTE $00
   424 BB0C 00						.BYTE $00
   424 BB0D 00						.BYTE $00
   424 BB0E 00						.BYTE $00
   424 BB0F 00						.BYTE $00
   424 BB10 00						.BYTE $00
   424 BB11 00						.BYTE $00
   424 BB12 00						.BYTE $00
   424 BB13 00						.BYTE $00
   424 BB14 00						.BYTE $00
   424 BB15 00						.BYTE $00
   424 BB16 00						.BYTE $00
   424 BB17 00						.BYTE $00
   424 BB18 00						.BYTE $00
   424 BB19 00						.BYTE $00
   424 BB1A 00						.BYTE $00
   424 BB1B 00						.BYTE $00
   424 BB1C 00						.BYTE $00
   424 BB1D 00						.BYTE $00
   424 BB1E 00						.BYTE $00
   424 BB1F 00						.BYTE $00
   424 BB20 00						.BYTE $00
   424 BB21 00						.BYTE $00
   424 BB22 00						.BYTE $00
   424 BB23 00						.BYTE $00
   424 BB24 00						.BYTE $00
   424 BB25 00						.BYTE $00
   424 BB26 00						.BYTE $00
   424 BB27 00						.BYTE $00
   424 BB28 00						.BYTE $00
   424 BB29 00						.BYTE $00
   424 BB2A 00						.BYTE $00
   424 BB2B 00						.BYTE $00
   424 BB2C 00						.BYTE $00
   424 BB2D 00						.BYTE $00
   424 BB2E 00						.BYTE $00
   424 BB2F 00						.BYTE $00
   424 BB30 00						.BYTE $00
   424 BB31 00						.BYTE $00
   424 BB32 00						.BYTE $00
   424 BB33 00						.BYTE $00
   424 BB34 00						.BYTE $00
   424 BB35 00						.BYTE $00
   424 BB36 00						.BYTE $00
   424 BB37 00						.BYTE $00
   424 BB38 00						.BYTE $00
   424 BB39 00						.BYTE $00
   424 BB3A 00						.BYTE $00
   424 BB3B 00						.BYTE $00
   424 BB3C 00						.BYTE $00
   424 BB3D 00						.BYTE $00
   424 BB3E 00						.BYTE $00
   424 BB3F 00						.BYTE $00
   424 BB40 00						.BYTE $00
   424 BB41 00						.BYTE $00
   424 BB42 00						.BYTE $00
   424 BB43 00						.BYTE $00
   424 BB44 00						.BYTE $00
   424 BB45 00						.BYTE $00
   424 BB46 00						.BYTE $00
   424 BB47 00						.BYTE $00
   424 BB48 00						.BYTE $00
   424 BB49 00						.BYTE $00
   424 BB4A 00						.BYTE $00
   424 BB4B 00						.BYTE $00
   424 BB4C 00						.BYTE $00
   424 BB4D 00						.BYTE $00
   424 BB4E 00						.BYTE $00
   424 BB4F 00						.BYTE $00
   424 BB50 00						.BYTE $00
   424 BB51 00						.BYTE $00
   424 BB52 00						.BYTE $00
   424 BB53 00						.BYTE $00
   424 BB54 00						.BYTE $00
   424 BB55 00						.BYTE $00
   424 BB56 00						.BYTE $00
   424 BB57 00						.BYTE $00
   424 BB58 00						.BYTE $00
   424 BB59 00						.BYTE $00
   424 BB5A 00						.BYTE $00
   424 BB5B 00						.BYTE $00
   424 BB5C 00						.BYTE $00
   424 BB5D 00						.BYTE $00
   424 BB5E 00						.BYTE $00
   424 BB5F 00						.BYTE $00
   424 BB60 00						.BYTE $00
   424 BB61 00						.BYTE $00
   424 BB62 00						.BYTE $00
   424 BB63 00						.BYTE $00
   424 BB64 00						.BYTE $00
   424 BB65 00						.BYTE $00
   424 BB66 00						.BYTE $00
   424 BB67 00						.BYTE $00
   424 BB68 00						.BYTE $00
   424 BB69 00						.BYTE $00
   424 BB6A 00						.BYTE $00
   424 BB6B 00						.BYTE $00
   424 BB6C 00						.BYTE $00
   424 BB6D 00						.BYTE $00
   424 BB6E 00						.BYTE $00
   424 BB6F 00						.BYTE $00
   424 BB70 00						.BYTE $00
   424 BB71 00						.BYTE $00
   424 BB72 00						.BYTE $00
   424 BB73 00						.BYTE $00
   424 BB74 00						.BYTE $00
   424 BB75 00						.BYTE $00
   424 BB76 00						.BYTE $00
   424 BB77 00						.BYTE $00
   424 BB78 00						.BYTE $00
   424 BB79 00						.BYTE $00
   424 BB7A 00						.BYTE $00
   424 BB7B 00						.BYTE $00
   424 BB7C 00						.BYTE $00
   424 BB7D 00						.BYTE $00
   424 BB7E 00						.BYTE $00
   424 BB7F 00						.BYTE $00
   424 BB80 00						.BYTE $00
   424 BB81 00						.BYTE $00
   424 BB82 00						.BYTE $00
   424 BB83 00						.BYTE $00
   424 BB84 00						.BYTE $00
   424 BB85 00						.BYTE $00
   424 BB86 00						.BYTE $00
   424 BB87 00						.BYTE $00
   424 BB88 00						.BYTE $00
   424 BB89 00						.BYTE $00
   424 BB8A 00						.BYTE $00
   424 BB8B 00						.BYTE $00
   424 BB8C 00						.BYTE $00
   424 BB8D 00						.BYTE $00
   424 BB8E 00						.BYTE $00
   424 BB8F 00						.BYTE $00
   424 BB90 00						.BYTE $00
   424 BB91 00						.BYTE $00
   424 BB92 00						.BYTE $00
   424 BB93 00						.BYTE $00
   424 BB94 00						.BYTE $00
   424 BB95 00						.BYTE $00
   424 BB96 00						.BYTE $00
   424 BB97 00						.BYTE $00
   424 BB98 00						.BYTE $00
   424 BB99 00						.BYTE $00
   424 BB9A 00						.BYTE $00
   424 BB9B 00						.BYTE $00
   424 BB9C 00						.BYTE $00
   424 BB9D 00						.BYTE $00
   424 BB9E 00						.BYTE $00
   424 BB9F 00						.BYTE $00
   424 BBA0 00						.BYTE $00
   424 BBA1 00						.BYTE $00
   424 BBA2 00						.BYTE $00
   424 BBA3 00						.BYTE $00
   424 BBA4 00						.BYTE $00
   424 BBA5 00						.BYTE $00
   424 BBA6 00						.BYTE $00
   424 BBA7 00						.BYTE $00
   424 BBA8 00						.BYTE $00
   424 BBA9 00						.BYTE $00
   424 BBAA 00						.BYTE $00
   424 BBAB 00						.BYTE $00
   424 BBAC 00						.BYTE $00
   424 BBAD 00						.BYTE $00
   424 BBAE 00						.BYTE $00
   424 BBAF 00						.BYTE $00
   424 BBB0 00						.BYTE $00
   424 BBB1 00						.BYTE $00
   424 BBB2 00						.BYTE $00
   424 BBB3 00						.BYTE $00
   424 BBB4 00						.BYTE $00
   424 BBB5 00						.BYTE $00
   424 BBB6 00						.BYTE $00
   424 BBB7 00						.BYTE $00
   424 BBB8 00						.BYTE $00
   424 BBB9 00						.BYTE $00
   424 BBBA 00						.BYTE $00
   424 BBBB 00						.BYTE $00
   424 BBBC 00						.BYTE $00
   424 BBBD 00						.BYTE $00
   424 BBBE 00						.BYTE $00
   424 BBBF 00						.BYTE $00
   424 BBC0 00						.BYTE $00
   424 BBC1 00						.BYTE $00
   424 BBC2 00						.BYTE $00
   424 BBC3 00						.BYTE $00
   424 BBC4 00						.BYTE $00
   424 BBC5 00						.BYTE $00
   424 BBC6 00						.BYTE $00
   424 BBC7 00						.BYTE $00
   424 BBC8 00						.BYTE $00
   424 BBC9 00						.BYTE $00
   424 BBCA 00						.BYTE $00
   424 BBCB 00						.BYTE $00
   424 BBCC 00						.BYTE $00
   424 BBCD 00						.BYTE $00
   424 BBCE 00						.BYTE $00
   424 BBCF 00						.BYTE $00
   424 BBD0 00						.BYTE $00
   424 BBD1 00						.BYTE $00
   424 BBD2 00						.BYTE $00
   424 BBD3 00						.BYTE $00
   424 BBD4 00						.BYTE $00
   424 BBD5 00						.BYTE $00
   424 BBD6 00						.BYTE $00
   424 BBD7 00						.BYTE $00
   424 BBD8 00						.BYTE $00
   424 BBD9 00						.BYTE $00
   424 BBDA 00						.BYTE $00
   424 BBDB 00						.BYTE $00
   424 BBDC 00						.BYTE $00
   424 BBDD 00						.BYTE $00
   424 BBDE 00						.BYTE $00
   424 BBDF 00						.BYTE $00
   424 BBE0 00						.BYTE $00
   424 BBE1 00						.BYTE $00
   424 BBE2 00						.BYTE $00
   424 BBE3 00						.BYTE $00
   424 BBE4 00						.BYTE $00
   424 BBE5 00						.BYTE $00
   424 BBE6 00						.BYTE $00
   424 BBE7 00						.BYTE $00
   424 BBE8 00						.BYTE $00
   424 BBE9 00						.BYTE $00
   424 BBEA 00						.BYTE $00
   424 BBEB 00						.BYTE $00
   424 BBEC 00						.BYTE $00
   424 BBED 00						.BYTE $00
   424 BBEE 00						.BYTE $00
   424 BBEF 00						.BYTE $00
   424 BBF0 00						.BYTE $00
   424 BBF1 00						.BYTE $00
   424 BBF2 00						.BYTE $00
   424 BBF3 00						.BYTE $00
   424 BBF4 00						.BYTE $00
   424 BBF5 00						.BYTE $00
   424 BBF6 00						.BYTE $00
   424 BBF7 00						.BYTE $00
   424 BBF8 00						.BYTE $00
   424 BBF9 00						.BYTE $00
   424 BBFA 00						.BYTE $00
   424 BBFB 00						.BYTE $00
   424 BBFC 00						.BYTE $00
   424 BBFD 00						.BYTE $00
   424 BBFE 00						.BYTE $00
   424 BBFF 00						.BYTE $00
   424 BC00 00						.BYTE $00
   424 BC01 00						.BYTE $00
   424 BC02 00						.BYTE $00
   424 BC03 00						.BYTE $00
   424 BC04 00						.BYTE $00
   424 BC05 00						.BYTE $00
   424 BC06 00						.BYTE $00
   424 BC07 00						.BYTE $00
   424 BC08 00						.BYTE $00
   424 BC09 00						.BYTE $00
   424 BC0A 00						.BYTE $00
   424 BC0B 00						.BYTE $00
   424 BC0C 00						.BYTE $00
   424 BC0D 00						.BYTE $00
   424 BC0E 00						.BYTE $00
   424 BC0F 00						.BYTE $00
   424 BC10 00						.BYTE $00
   424 BC11 00						.BYTE $00
   424 BC12 00						.BYTE $00
   424 BC13 00						.BYTE $00
   424 BC14 00						.BYTE $00
   424 BC15 00						.BYTE $00
   424 BC16 00						.BYTE $00
   424 BC17 00						.BYTE $00
   424 BC18 00						.BYTE $00
   424 BC19 00						.BYTE $00
   424 BC1A 00						.BYTE $00
   424 BC1B 00						.BYTE $00
   424 BC1C 00						.BYTE $00
   424 BC1D 00						.BYTE $00
   424 BC1E 00						.BYTE $00
   424 BC1F 00						.BYTE $00
   424 BC20 00						.BYTE $00
   424 BC21 00						.BYTE $00
   424 BC22 00						.BYTE $00
   424 BC23 00						.BYTE $00
   424 BC24 00						.BYTE $00
   424 BC25 00						.BYTE $00
   424 BC26 00						.BYTE $00
   424 BC27 00						.BYTE $00
   424 BC28 00						.BYTE $00
   424 BC29 00						.BYTE $00
   424 BC2A 00						.BYTE $00
   424 BC2B 00						.BYTE $00
   424 BC2C 00						.BYTE $00
   424 BC2D 00						.BYTE $00
   424 BC2E 00						.BYTE $00
   424 BC2F 00						.BYTE $00
   424 BC30 00						.BYTE $00
   424 BC31 00						.BYTE $00
   424 BC32 00						.BYTE $00
   424 BC33 00						.BYTE $00
   424 BC34 00						.BYTE $00
   424 BC35 00						.BYTE $00
   424 BC36 00						.BYTE $00
   424 BC37 00						.BYTE $00
   424 BC38 00						.BYTE $00
   424 BC39 00						.BYTE $00
   424 BC3A 00						.BYTE $00
   424 BC3B 00						.BYTE $00
   424 BC3C 00						.BYTE $00
   424 BC3D 00						.BYTE $00
   424 BC3E 00						.BYTE $00
   424 BC3F 00						.BYTE $00
   424 BC40 00						.BYTE $00
   424 BC41 00						.BYTE $00
   424 BC42 00						.BYTE $00
   424 BC43 00						.BYTE $00
   424 BC44 00						.BYTE $00
   424 BC45 00						.BYTE $00
   424 BC46 00						.BYTE $00
   424 BC47 00						.BYTE $00
   424 BC48 00						.BYTE $00
   424 BC49 00						.BYTE $00
   424 BC4A 00						.BYTE $00
   424 BC4B 00						.BYTE $00
   424 BC4C 00						.BYTE $00
   424 BC4D 00						.BYTE $00
   424 BC4E 00						.BYTE $00
   424 BC4F 00						.BYTE $00
   424 BC50 00						.BYTE $00
   424 BC51 00						.BYTE $00
   424 BC52 00						.BYTE $00
   424 BC53 00						.BYTE $00
   424 BC54 00						.BYTE $00
   424 BC55 00						.BYTE $00
   424 BC56 00						.BYTE $00
   424 BC57 00						.BYTE $00
   424 BC58 00						.BYTE $00
   424 BC59 00						.BYTE $00
   424 BC5A 00						.BYTE $00
   424 BC5B 00						.BYTE $00
   424 BC5C 00						.BYTE $00
   424 BC5D 00						.BYTE $00
   424 BC5E 00						.BYTE $00
   424 BC5F 00						.BYTE $00
   424 BC60 00						.BYTE $00
   424 BC61 00						.BYTE $00
   424 BC62 00						.BYTE $00
   424 BC63 00						.BYTE $00
   424 BC64 00						.BYTE $00
   424 BC65 00						.BYTE $00
   424 BC66 00						.BYTE $00
   424 BC67 00						.BYTE $00
   424 BC68 00						.BYTE $00
   424 BC69 00						.BYTE $00
   424 BC6A 00						.BYTE $00
   424 BC6B 00						.BYTE $00
   424 BC6C 00						.BYTE $00
   424 BC6D 00						.BYTE $00
   424 BC6E 00						.BYTE $00
   424 BC6F 00						.BYTE $00
   424 BC70 00						.BYTE $00
   424 BC71 00						.BYTE $00
   424 BC72 00						.BYTE $00
   424 BC73 00						.BYTE $00
   424 BC74 00						.BYTE $00
   424 BC75 00						.BYTE $00
   424 BC76 00						.BYTE $00
   424 BC77 00						.BYTE $00
   424 BC78 00						.BYTE $00
   424 BC79 00						.BYTE $00
   424 BC7A 00						.BYTE $00
   424 BC7B 00						.BYTE $00
   424 BC7C 00						.BYTE $00
   424 BC7D 00						.BYTE $00
   424 BC7E 00						.BYTE $00
   424 BC7F 00						.BYTE $00
   424 BC80 00						.BYTE $00
   424 BC81 00						.BYTE $00
   424 BC82 00						.BYTE $00
   424 BC83 00						.BYTE $00
   424 BC84 00						.BYTE $00
   424 BC85 00						.BYTE $00
   424 BC86 00						.BYTE $00
   424 BC87 00						.BYTE $00
   424 BC88 00						.BYTE $00
   424 BC89 00						.BYTE $00
   424 BC8A 00						.BYTE $00
   424 BC8B 00						.BYTE $00
   424 BC8C 00						.BYTE $00
   424 BC8D 00						.BYTE $00
   424 BC8E 00						.BYTE $00
   424 BC8F 00						.BYTE $00
   424 BC90 00						.BYTE $00
   424 BC91 00						.BYTE $00
   424 BC92 00						.BYTE $00
   424 BC93 00						.BYTE $00
   424 BC94 00						.BYTE $00
   424 BC95 00						.BYTE $00
   424 BC96 00						.BYTE $00
   424 BC97 00						.BYTE $00
   424 BC98 00						.BYTE $00
   424 BC99 00						.BYTE $00
   424 BC9A 00						.BYTE $00
   424 BC9B 00						.BYTE $00
   424 BC9C 00						.BYTE $00
   424 BC9D 00						.BYTE $00
   424 BC9E 00						.BYTE $00
   424 BC9F 00						.BYTE $00
   424 BCA0 00						.BYTE $00
   424 BCA1 00						.BYTE $00
   424 BCA2 00						.BYTE $00
   424 BCA3 00						.BYTE $00
   424 BCA4 00						.BYTE $00
   424 BCA5 00						.BYTE $00
   424 BCA6 00						.BYTE $00
   424 BCA7 00						.BYTE $00
   424 BCA8 00						.BYTE $00
   424 BCA9 00						.BYTE $00
   424 BCAA 00						.BYTE $00
   424 BCAB 00						.BYTE $00
   424 BCAC 00						.BYTE $00
   424 BCAD 00						.BYTE $00
   424 BCAE 00						.BYTE $00
   424 BCAF 00						.BYTE $00
   424 BCB0 00						.BYTE $00
   424 BCB1 00						.BYTE $00
   424 BCB2 00						.BYTE $00
   424 BCB3 00						.BYTE $00
   424 BCB4 00						.BYTE $00
   424 BCB5 00						.BYTE $00
   424 BCB6 00						.BYTE $00
   424 BCB7 00						.BYTE $00
   424 BCB8 00						.BYTE $00
   424 BCB9 00						.BYTE $00
   424 BCBA 00						.BYTE $00
   424 BCBB 00						.BYTE $00
   424 BCBC 00						.BYTE $00
   424 BCBD 00						.BYTE $00
   424 BCBE 00						.BYTE $00
   424 BCBF 00						.BYTE $00
   424 BCC0 00						.BYTE $00
   424 BCC1 00						.BYTE $00
   424 BCC2 00						.BYTE $00
   424 BCC3 00						.BYTE $00
   424 BCC4 00						.BYTE $00
   424 BCC5 00						.BYTE $00
   424 BCC6 00						.BYTE $00
   424 BCC7 00						.BYTE $00
   424 BCC8 00						.BYTE $00
   424 BCC9 00						.BYTE $00
   424 BCCA 00						.BYTE $00
   424 BCCB 00						.BYTE $00
   424 BCCC 00						.BYTE $00
   424 BCCD 00						.BYTE $00
   424 BCCE 00						.BYTE $00
   424 BCCF 00						.BYTE $00
   424 BCD0 00						.BYTE $00
   424 BCD1 00						.BYTE $00
   424 BCD2 00						.BYTE $00
   424 BCD3 00						.BYTE $00
   424 BCD4 00						.BYTE $00
   424 BCD5 00						.BYTE $00
   424 BCD6 00						.BYTE $00
   424 BCD7 00						.BYTE $00
   424 BCD8 00						.BYTE $00
   424 BCD9 00						.BYTE $00
   424 BCDA 00						.BYTE $00
   424 BCDB 00						.BYTE $00
   424 BCDC 00						.BYTE $00
   424 BCDD 00						.BYTE $00
   424 BCDE 00						.BYTE $00
   424 BCDF 00						.BYTE $00
   424 BCE0 00						.BYTE $00
   424 BCE1 00						.BYTE $00
   424 BCE2 00						.BYTE $00
   424 BCE3 00						.BYTE $00
   424 BCE4 00						.BYTE $00
   424 BCE5 00						.BYTE $00
   424 BCE6 00						.BYTE $00
   424 BCE7 00						.BYTE $00
   424 BCE8 00						.BYTE $00
   424 BCE9 00						.BYTE $00
   424 BCEA 00						.BYTE $00
   424 BCEB 00						.BYTE $00
   424 BCEC 00						.BYTE $00
   424 BCED 00						.BYTE $00
   424 BCEE 00						.BYTE $00
   424 BCEF 00						.BYTE $00
   424 BCF0 00						.BYTE $00
   424 BCF1 00						.BYTE $00
   424 BCF2 00						.BYTE $00
   424 BCF3 00						.BYTE $00
   424 BCF4 00						.BYTE $00
   424 BCF5 00						.BYTE $00
   424 BCF6 00						.BYTE $00
   424 BCF7 00						.BYTE $00
   424 BCF8 00						.BYTE $00
   424 BCF9 00						.BYTE $00
   424 BCFA 00						.BYTE $00
   424 BCFB 00						.BYTE $00
   424 BCFC 00						.BYTE $00
   424 BCFD 00						.BYTE $00
   424 BCFE 00						.BYTE $00
   424 BCFF 00						.BYTE $00
   424 BD00 00						.BYTE $00
   424 BD01 00						.BYTE $00
   424 BD02 00						.BYTE $00
   424 BD03 00						.BYTE $00
   424 BD04 00						.BYTE $00
   424 BD05 00						.BYTE $00
   424 BD06 00						.BYTE $00
   424 BD07 00						.BYTE $00
   424 BD08 00						.BYTE $00
   424 BD09 00						.BYTE $00
   424 BD0A 00						.BYTE $00
   424 BD0B 00						.BYTE $00
   424 BD0C 00						.BYTE $00
   424 BD0D 00						.BYTE $00
   424 BD0E 00						.BYTE $00
   424 BD0F 00						.BYTE $00
   424 BD10 00						.BYTE $00
   424 BD11 00						.BYTE $00
   424 BD12 00						.BYTE $00
   424 BD13 00						.BYTE $00
   424 BD14 00						.BYTE $00
   424 BD15 00						.BYTE $00
   424 BD16 00						.BYTE $00
   424 BD17 00						.BYTE $00
   424 BD18 00						.BYTE $00
   424 BD19 00						.BYTE $00
   424 BD1A 00						.BYTE $00
   424 BD1B 00						.BYTE $00
   424 BD1C 00						.BYTE $00
   424 BD1D 00						.BYTE $00
   424 BD1E 00						.BYTE $00
   424 BD1F 00						.BYTE $00
   424 BD20 00						.BYTE $00
   424 BD21 00						.BYTE $00
   424 BD22 00						.BYTE $00
   424 BD23 00						.BYTE $00
   424 BD24 00						.BYTE $00
   424 BD25 00						.BYTE $00
   424 BD26 00						.BYTE $00
   424 BD27 00						.BYTE $00
   424 BD28 00						.BYTE $00
   424 BD29 00						.BYTE $00
   424 BD2A 00						.BYTE $00
   424 BD2B 00						.BYTE $00
   424 BD2C 00						.BYTE $00
   424 BD2D 00						.BYTE $00
   424 BD2E 00						.BYTE $00
   424 BD2F 00						.BYTE $00
   424 BD30 00						.BYTE $00
   424 BD31 00						.BYTE $00
   424 BD32 00						.BYTE $00
   424 BD33 00						.BYTE $00
   424 BD34 00						.BYTE $00
   424 BD35 00						.BYTE $00
   424 BD36 00						.BYTE $00
   424 BD37 00						.BYTE $00
   424 BD38 00						.BYTE $00
   424 BD39 00						.BYTE $00
   424 BD3A 00						.BYTE $00
   424 BD3B 00						.BYTE $00
   424 BD3C 00						.BYTE $00
   424 BD3D 00						.BYTE $00
   424 BD3E 00						.BYTE $00
   424 BD3F 00						.BYTE $00
   424 BD40 00						.BYTE $00
   424 BD41 00						.BYTE $00
   424 BD42 00						.BYTE $00
   424 BD43 00						.BYTE $00
   424 BD44 00						.BYTE $00
   424 BD45 00						.BYTE $00
   424 BD46 00						.BYTE $00
   424 BD47 00						.BYTE $00
   424 BD48 00						.BYTE $00
   424 BD49 00						.BYTE $00
   424 BD4A 00						.BYTE $00
   424 BD4B 00						.BYTE $00
   424 BD4C 00						.BYTE $00
   424 BD4D 00						.BYTE $00
   424 BD4E 00						.BYTE $00
   424 BD4F 00						.BYTE $00
   424 BD50 00						.BYTE $00
   424 BD51 00						.BYTE $00
   424 BD52 00						.BYTE $00
   424 BD53 00						.BYTE $00
   424 BD54 00						.BYTE $00
   424 BD55 00						.BYTE $00
   424 BD56 00						.BYTE $00
   424 BD57 00						.BYTE $00
   424 BD58 00						.BYTE $00
   424 BD59 00						.BYTE $00
   424 BD5A 00						.BYTE $00
   424 BD5B 00						.BYTE $00
   424 BD5C 00						.BYTE $00
   424 BD5D 00						.BYTE $00
   424 BD5E 00						.BYTE $00
   424 BD5F 00						.BYTE $00
   424 BD60 00						.BYTE $00
   424 BD61 00						.BYTE $00
   424 BD62 00						.BYTE $00
   424 BD63 00						.BYTE $00
   424 BD64 00						.BYTE $00
   424 BD65 00						.BYTE $00
   424 BD66 00						.BYTE $00
   424 BD67 00						.BYTE $00
   424 BD68 00						.BYTE $00
   424 BD69 00						.BYTE $00
   424 BD6A 00						.BYTE $00
   424 BD6B 00						.BYTE $00
   424 BD6C 00						.BYTE $00
   424 BD6D 00						.BYTE $00
   424 BD6E 00						.BYTE $00
   424 BD6F 00						.BYTE $00
   424 BD70 00						.BYTE $00
   424 BD71 00						.BYTE $00
   424 BD72 00						.BYTE $00
   424 BD73 00						.BYTE $00
   424 BD74 00						.BYTE $00
   424 BD75 00						.BYTE $00
   424 BD76 00						.BYTE $00
   424 BD77 00						.BYTE $00
   424 BD78 00						.BYTE $00
   424 BD79 00						.BYTE $00
   424 BD7A 00						.BYTE $00
   424 BD7B 00						.BYTE $00
   424 BD7C 00						.BYTE $00
   424 BD7D 00						.BYTE $00
   424 BD7E 00						.BYTE $00
   424 BD7F 00						.BYTE $00
   424 BD80 00						.BYTE $00
   424 BD81 00						.BYTE $00
   424 BD82 00						.BYTE $00
   424 BD83 00						.BYTE $00
   424 BD84 00						.BYTE $00
   424 BD85 00						.BYTE $00
   424 BD86 00						.BYTE $00
   424 BD87 00						.BYTE $00
   424 BD88 00						.BYTE $00
   424 BD89 00						.BYTE $00
   424 BD8A 00						.BYTE $00
   424 BD8B 00						.BYTE $00
   424 BD8C 00						.BYTE $00
   424 BD8D 00						.BYTE $00
   424 BD8E 00						.BYTE $00
   424 BD8F 00						.BYTE $00
   424 BD90 00						.BYTE $00
   424 BD91 00						.BYTE $00
   424 BD92 00						.BYTE $00
   424 BD93 00						.BYTE $00
   424 BD94 00						.BYTE $00
   424 BD95 00						.BYTE $00
   424 BD96 00						.BYTE $00
   424 BD97 00						.BYTE $00
   424 BD98 00						.BYTE $00
   424 BD99 00						.BYTE $00
   424 BD9A 00						.BYTE $00
   424 BD9B 00						.BYTE $00
   424 BD9C 00						.BYTE $00
   424 BD9D 00						.BYTE $00
   424 BD9E 00						.BYTE $00
   424 BD9F 00						.BYTE $00
   424 BDA0 00						.BYTE $00
   424 BDA1 00						.BYTE $00
   424 BDA2 00						.BYTE $00
   424 BDA3 00						.BYTE $00
   424 BDA4 00						.BYTE $00
   424 BDA5 00						.BYTE $00
   424 BDA6 00						.BYTE $00
   424 BDA7 00						.BYTE $00
   424 BDA8 00						.BYTE $00
   424 BDA9 00						.BYTE $00
   424 BDAA 00						.BYTE $00
   424 BDAB 00						.BYTE $00
   424 BDAC 00						.BYTE $00
   424 BDAD 00						.BYTE $00
   424 BDAE 00						.BYTE $00
   424 BDAF 00						.BYTE $00
   424 BDB0 00						.BYTE $00
   424 BDB1 00						.BYTE $00
   424 BDB2 00						.BYTE $00
   424 BDB3 00						.BYTE $00
   424 BDB4 00						.BYTE $00
   424 BDB5 00						.BYTE $00
   424 BDB6 00						.BYTE $00
   424 BDB7 00						.BYTE $00
   424 BDB8 00						.BYTE $00
   424 BDB9 00						.BYTE $00
   424 BDBA 00						.BYTE $00
   424 BDBB 00						.BYTE $00
   424 BDBC 00						.BYTE $00
   424 BDBD 00						.BYTE $00
   424 BDBE 00						.BYTE $00
   424 BDBF 00						.BYTE $00
   424 BDC0 00						.BYTE $00
   424 BDC1 00						.BYTE $00
   424 BDC2 00						.BYTE $00
   424 BDC3 00						.BYTE $00
   424 BDC4 00						.BYTE $00
   424 BDC5 00						.BYTE $00
   424 BDC6 00						.BYTE $00
   424 BDC7 00						.BYTE $00
   424 BDC8 00						.BYTE $00
   424 BDC9 00						.BYTE $00
   424 BDCA 00						.BYTE $00
   424 BDCB 00						.BYTE $00
   424 BDCC 00						.BYTE $00
   424 BDCD 00						.BYTE $00
   424 BDCE 00						.BYTE $00
   424 BDCF 00						.BYTE $00
   424 BDD0 00						.BYTE $00
   424 BDD1 00						.BYTE $00
   424 BDD2 00						.BYTE $00
   424 BDD3 00						.BYTE $00
   424 BDD4 00						.BYTE $00
   424 BDD5 00						.BYTE $00
   424 BDD6 00						.BYTE $00
   424 BDD7 00						.BYTE $00
   424 BDD8 00						.BYTE $00
   424 BDD9 00						.BYTE $00
   424 BDDA 00						.BYTE $00
   424 BDDB 00						.BYTE $00
   424 BDDC 00						.BYTE $00
   424 BDDD 00						.BYTE $00
   424 BDDE 00						.BYTE $00
   424 BDDF 00						.BYTE $00
   424 BDE0 00						.BYTE $00
   424 BDE1 00						.BYTE $00
   424 BDE2 00						.BYTE $00
   424 BDE3 00						.BYTE $00
   424 BDE4 00						.BYTE $00
   424 BDE5 00						.BYTE $00
   424 BDE6 00						.BYTE $00
   424 BDE7 00						.BYTE $00
   424 BDE8 00						.BYTE $00
   424 BDE9 00						.BYTE $00
   424 BDEA 00						.BYTE $00
   424 BDEB 00						.BYTE $00
   424 BDEC 00						.BYTE $00
   424 BDED 00						.BYTE $00
   424 BDEE 00						.BYTE $00
   424 BDEF 00						.BYTE $00
   424 BDF0 00						.BYTE $00
   424 BDF1 00						.BYTE $00
   424 BDF2 00						.BYTE $00
   424 BDF3 00						.BYTE $00
   424 BDF4 00						.BYTE $00
   424 BDF5 00						.BYTE $00
   424 BDF6 00						.BYTE $00
   424 BDF7 00						.BYTE $00
   424 BDF8 00						.BYTE $00
   424 BDF9 00						.BYTE $00
   424 BDFA 00						.BYTE $00
   424 BDFB 00						.BYTE $00
   424 BDFC 00						.BYTE $00
   424 BDFD 00						.BYTE $00
   424 BDFE 00						.BYTE $00
   424 BDFF 00						.BYTE $00
   424 BE00 00						.BYTE $00
   424 BE01 00						.BYTE $00
   424 BE02 00						.BYTE $00
   424 BE03 00						.BYTE $00
   424 BE04 00						.BYTE $00
   424 BE05 00						.BYTE $00
   424 BE06 00						.BYTE $00
   424 BE07 00						.BYTE $00
   424 BE08 00						.BYTE $00
   424 BE09 00						.BYTE $00
   424 BE0A 00						.BYTE $00
   424 BE0B 00						.BYTE $00
   424 BE0C 00						.BYTE $00
   424 BE0D 00						.BYTE $00
   424 BE0E 00						.BYTE $00
   424 BE0F 00						.BYTE $00
   424 BE10 00						.BYTE $00
   424 BE11 00						.BYTE $00
   424 BE12 00						.BYTE $00
   424 BE13 00						.BYTE $00
   424 BE14 00						.BYTE $00
   424 BE15 00						.BYTE $00
   424 BE16 00						.BYTE $00
   424 BE17 00						.BYTE $00
   424 BE18 00						.BYTE $00
   424 BE19 00						.BYTE $00
   424 BE1A 00						.BYTE $00
   424 BE1B 00						.BYTE $00
   424 BE1C 00						.BYTE $00
   424 BE1D 00						.BYTE $00
   424 BE1E 00						.BYTE $00
   424 BE1F 00						.BYTE $00
   424 BE20 00						.BYTE $00
   424 BE21 00						.BYTE $00
   424 BE22 00						.BYTE $00
   424 BE23 00						.BYTE $00
   424 BE24 00						.BYTE $00
   424 BE25 00						.BYTE $00
   424 BE26 00						.BYTE $00
   424 BE27 00						.BYTE $00
   424 BE28 00						.BYTE $00
   424 BE29 00						.BYTE $00
   424 BE2A 00						.BYTE $00
   424 BE2B 00						.BYTE $00
   424 BE2C 00						.BYTE $00
   424 BE2D 00						.BYTE $00
   424 BE2E 00						.BYTE $00
   424 BE2F 00						.BYTE $00
   424 BE30 00						.BYTE $00
   424 BE31 00						.BYTE $00
   424 BE32 00						.BYTE $00
   424 BE33 00						.BYTE $00
   424 BE34 00						.BYTE $00
   424 BE35 00						.BYTE $00
   424 BE36 00						.BYTE $00
   424 BE37 00						.BYTE $00
   424 BE38 00						.BYTE $00
   424 BE39 00						.BYTE $00
   424 BE3A 00						.BYTE $00
   424 BE3B 00						.BYTE $00
   424 BE3C 00						.BYTE $00
   424 BE3D 00						.BYTE $00
   424 BE3E 00						.BYTE $00
   424 BE3F 00						.BYTE $00
   424 BE40 00						.BYTE $00
   424 BE41 00						.BYTE $00
   424 BE42 00						.BYTE $00
   424 BE43 00						.BYTE $00
   424 BE44 00						.BYTE $00
   424 BE45 00						.BYTE $00
   424 BE46 00						.BYTE $00
   424 BE47 00						.BYTE $00
   424 BE48 00						.BYTE $00
   424 BE49 00						.BYTE $00
   424 BE4A 00						.BYTE $00
   424 BE4B 00						.BYTE $00
   424 BE4C 00						.BYTE $00
   424 BE4D 00						.BYTE $00
   424 BE4E 00						.BYTE $00
   424 BE4F 00						.BYTE $00
   424 BE50 00						.BYTE $00
   424 BE51 00						.BYTE $00
   424 BE52 00						.BYTE $00
   424 BE53 00						.BYTE $00
   424 BE54 00						.BYTE $00
   424 BE55 00						.BYTE $00
   424 BE56 00						.BYTE $00
   424 BE57 00						.BYTE $00
   424 BE58 00						.BYTE $00
   424 BE59 00						.BYTE $00
   424 BE5A 00						.BYTE $00
   424 BE5B 00						.BYTE $00
   424 BE5C 00						.BYTE $00
   424 BE5D 00						.BYTE $00
   424 BE5E 00						.BYTE $00
   424 BE5F 00						.BYTE $00
   424 BE60 00						.BYTE $00
   424 BE61 00						.BYTE $00
   424 BE62 00						.BYTE $00
   424 BE63 00						.BYTE $00
   424 BE64 00						.BYTE $00
   424 BE65 00						.BYTE $00
   424 BE66 00						.BYTE $00
   424 BE67 00						.BYTE $00
   424 BE68 00						.BYTE $00
   424 BE69 00						.BYTE $00
   424 BE6A 00						.BYTE $00
   424 BE6B 00						.BYTE $00
   424 BE6C 00						.BYTE $00
   424 BE6D 00						.BYTE $00
   424 BE6E 00						.BYTE $00
   424 BE6F 00						.BYTE $00
   424 BE70 00						.BYTE $00
   424 BE71 00						.BYTE $00
   424 BE72 00						.BYTE $00
   424 BE73 00						.BYTE $00
   424 BE74 00						.BYTE $00
   424 BE75 00						.BYTE $00
   424 BE76 00						.BYTE $00
   424 BE77 00						.BYTE $00
   424 BE78 00						.BYTE $00
   424 BE79 00						.BYTE $00
   424 BE7A 00						.BYTE $00
   424 BE7B 00						.BYTE $00
   424 BE7C 00						.BYTE $00
   424 BE7D 00						.BYTE $00
   424 BE7E 00						.BYTE $00
   424 BE7F 00						.BYTE $00
   424 BE80 00						.BYTE $00
   424 BE81 00						.BYTE $00
   424 BE82 00						.BYTE $00
   424 BE83 00						.BYTE $00
   424 BE84 00						.BYTE $00
   424 BE85 00						.BYTE $00
   424 BE86 00						.BYTE $00
   424 BE87 00						.BYTE $00
   424 BE88 00						.BYTE $00
   424 BE89 00						.BYTE $00
   424 BE8A 00						.BYTE $00
   424 BE8B 00						.BYTE $00
   424 BE8C 00						.BYTE $00
   424 BE8D 00						.BYTE $00
   424 BE8E 00						.BYTE $00
   424 BE8F 00						.BYTE $00
   424 BE90 00						.BYTE $00
   424 BE91 00						.BYTE $00
   424 BE92 00						.BYTE $00
   424 BE93 00						.BYTE $00
   424 BE94 00						.BYTE $00
   424 BE95 00						.BYTE $00
   424 BE96 00						.BYTE $00
   424 BE97 00						.BYTE $00
   424 BE98 00						.BYTE $00
   424 BE99 00						.BYTE $00
   424 BE9A 00						.BYTE $00
   424 BE9B 00						.BYTE $00
   424 BE9C 00						.BYTE $00
   424 BE9D 00						.BYTE $00
   424 BE9E 00						.BYTE $00
   424 BE9F 00						.BYTE $00
   424 BEA0 00						.BYTE $00
   424 BEA1 00						.BYTE $00
   424 BEA2 00						.BYTE $00
   424 BEA3 00						.BYTE $00
   424 BEA4 00						.BYTE $00
   424 BEA5 00						.BYTE $00
   424 BEA6 00						.BYTE $00
   424 BEA7 00						.BYTE $00
   424 BEA8 00						.BYTE $00
   424 BEA9 00						.BYTE $00
   424 BEAA 00						.BYTE $00
   424 BEAB 00						.BYTE $00
   424 BEAC 00						.BYTE $00
   424 BEAD 00						.BYTE $00
   424 BEAE 00						.BYTE $00
   424 BEAF 00						.BYTE $00
   424 BEB0 00						.BYTE $00
   424 BEB1 00						.BYTE $00
   424 BEB2 00						.BYTE $00
   424 BEB3 00						.BYTE $00
   424 BEB4 00						.BYTE $00
   424 BEB5 00						.BYTE $00
   424 BEB6 00						.BYTE $00
   424 BEB7 00						.BYTE $00
   424 BEB8 00						.BYTE $00
   424 BEB9 00						.BYTE $00
   424 BEBA 00						.BYTE $00
   424 BEBB 00						.BYTE $00
   424 BEBC 00						.BYTE $00
   424 BEBD 00						.BYTE $00
   424 BEBE 00						.BYTE $00
   424 BEBF 00						.BYTE $00
   424 BEC0 00						.BYTE $00
   424 BEC1 00						.BYTE $00
   424 BEC2 00						.BYTE $00
   424 BEC3 00						.BYTE $00
   424 BEC4 00						.BYTE $00
   424 BEC5 00						.BYTE $00
   424 BEC6 00						.BYTE $00
   424 BEC7 00						.BYTE $00
   424 BEC8 00						.BYTE $00
   424 BEC9 00						.BYTE $00
   424 BECA 00						.BYTE $00
   424 BECB 00						.BYTE $00
   424 BECC 00						.BYTE $00
   424 BECD 00						.BYTE $00
   424 BECE 00						.BYTE $00
   424 BECF 00						.BYTE $00
   424 BED0 00						.BYTE $00
   424 BED1 00						.BYTE $00
   424 BED2 00						.BYTE $00
   424 BED3 00						.BYTE $00
   424 BED4 00						.BYTE $00
   424 BED5 00						.BYTE $00
   424 BED6 00						.BYTE $00
   424 BED7 00						.BYTE $00
   424 BED8 00						.BYTE $00
   424 BED9 00						.BYTE $00
   424 BEDA 00						.BYTE $00
   424 BEDB 00						.BYTE $00
   424 BEDC 00						.BYTE $00
   424 BEDD 00						.BYTE $00
   424 BEDE 00						.BYTE $00
   424 BEDF 00						.BYTE $00
   424 BEE0 00						.BYTE $00
   424 BEE1 00						.BYTE $00
   424 BEE2 00						.BYTE $00
   424 BEE3 00						.BYTE $00
   424 BEE4 00						.BYTE $00
   424 BEE5 00						.BYTE $00
   424 BEE6 00						.BYTE $00
   424 BEE7 00						.BYTE $00
   424 BEE8 00						.BYTE $00
   424 BEE9 00						.BYTE $00
   424 BEEA 00						.BYTE $00
   424 BEEB 00						.BYTE $00
   424 BEEC 00						.BYTE $00
   424 BEED 00						.BYTE $00
   424 BEEE 00						.BYTE $00
   424 BEEF 00						.BYTE $00
   424 BEF0 00						.BYTE $00
   424 BEF1 00						.BYTE $00
   424 BEF2 00						.BYTE $00
   424 BEF3 00						.BYTE $00
   424 BEF4 00						.BYTE $00
   424 BEF5 00						.BYTE $00
   424 BEF6 00						.BYTE $00
   424 BEF7 00						.BYTE $00
   424 BEF8 00						.BYTE $00
   424 BEF9 00						.BYTE $00
   424 BEFA 00						.BYTE $00
   424 BEFB 00						.BYTE $00
   424 BEFC 00						.BYTE $00
   424 BEFD 00						.BYTE $00
   424 BEFE 00						.BYTE $00
   424 BEFF 00						.BYTE $00
   424 BF00 00						.BYTE $00
   424 BF01 00						.BYTE $00
   424 BF02 00						.BYTE $00
   424 BF03 00						.BYTE $00
   424 BF04 00						.BYTE $00
   424 BF05 00						.BYTE $00
   424 BF06 00						.BYTE $00
   424 BF07 00						.BYTE $00
   424 BF08 00						.BYTE $00
   424 BF09 00						.BYTE $00
   424 BF0A 00						.BYTE $00
   424 BF0B 00						.BYTE $00
   424 BF0C 00						.BYTE $00
   424 BF0D 00						.BYTE $00
   424 BF0E 00						.BYTE $00
   424 BF0F 00						.BYTE $00
   424 BF10 00						.BYTE $00
   424 BF11 00						.BYTE $00
   424 BF12 00						.BYTE $00
   424 BF13 00						.BYTE $00
   424 BF14 00						.BYTE $00
   424 BF15 00						.BYTE $00
   424 BF16 00						.BYTE $00
   424 BF17 00						.BYTE $00
   424 BF18 00						.BYTE $00
   424 BF19 00						.BYTE $00
   424 BF1A 00						.BYTE $00
   424 BF1B 00						.BYTE $00
   424 BF1C 00						.BYTE $00
   424 BF1D 00						.BYTE $00
   424 BF1E 00						.BYTE $00
   424 BF1F 00						.BYTE $00
   424 BF20 00						.BYTE $00
   424 BF21 00						.BYTE $00
   424 BF22 00						.BYTE $00
   424 BF23 00						.BYTE $00
   424 BF24 00						.BYTE $00
   424 BF25 00						.BYTE $00
   424 BF26 00						.BYTE $00
   424 BF27 00						.BYTE $00
   424 BF28 00						.BYTE $00
   424 BF29 00						.BYTE $00
   424 BF2A 00						.BYTE $00
   424 BF2B 00						.BYTE $00
   424 BF2C 00						.BYTE $00
   424 BF2D 00						.BYTE $00
   424 BF2E 00						.BYTE $00
   424 BF2F 00						.BYTE $00
   424 BF30 00						.BYTE $00
   424 BF31 00						.BYTE $00
   424 BF32 00						.BYTE $00
   424 BF33 00						.BYTE $00
   424 BF34 00						.BYTE $00
   424 BF35 00						.BYTE $00
   424 BF36 00						.BYTE $00
   424 BF37 00						.BYTE $00
   424 BF38 00						.BYTE $00
   424 BF39 00						.BYTE $00
   424 BF3A 00						.BYTE $00
   424 BF3B 00						.BYTE $00
   424 BF3C 00						.BYTE $00
   424 BF3D 00						.BYTE $00
   424 BF3E 00						.BYTE $00
   424 BF3F 00						.BYTE $00
   424 BF40 00						.BYTE $00
   424 BF41 00						.BYTE $00
   424 BF42 00						.BYTE $00
   424 BF43 00						.BYTE $00
   424 BF44 00						.BYTE $00
   424 BF45 00						.BYTE $00
   424 BF46 00						.BYTE $00
   424 BF47 00						.BYTE $00
   424 BF48 00						.BYTE $00
   424 BF49 00						.BYTE $00
   424 BF4A 00						.BYTE $00
   424 BF4B 00						.BYTE $00
   424 BF4C 00						.BYTE $00
   424 BF4D 00						.BYTE $00
   424 BF4E 00						.BYTE $00
   424 BF4F 00						.BYTE $00
   424 BF50 00						.BYTE $00
   424 BF51 00						.BYTE $00
   424 BF52 00						.BYTE $00
   424 BF53 00						.BYTE $00
   424 BF54 00						.BYTE $00
   424 BF55 00						.BYTE $00
   424 BF56 00						.BYTE $00
   424 BF57 00						.BYTE $00
   424 BF58 00						.BYTE $00
   424 BF59 00						.BYTE $00
   424 BF5A 00						.BYTE $00
   424 BF5B 00						.BYTE $00
   424 BF5C 00						.BYTE $00
   424 BF5D 00						.BYTE $00
   424 BF5E 00						.BYTE $00
   424 BF5F 00						.BYTE $00
   424 BF60 00						.BYTE $00
   424 BF61 00						.BYTE $00
   424 BF62 00						.BYTE $00
   424 BF63 00						.BYTE $00
   424 BF64 00						.BYTE $00
   424 BF65 00						.BYTE $00
   424 BF66 00						.BYTE $00
   424 BF67 00						.BYTE $00
   424 BF68 00						.BYTE $00
   424 BF69 00						.BYTE $00
   424 BF6A 00						.BYTE $00
   424 BF6B 00						.BYTE $00
   424 BF6C 00						.BYTE $00
   424 BF6D 00						.BYTE $00
   424 BF6E 00						.BYTE $00
   424 BF6F 00						.BYTE $00
   424 BF70 00						.BYTE $00
   424 BF71 00						.BYTE $00
   424 BF72 00						.BYTE $00
   424 BF73 00						.BYTE $00
   424 BF74 00						.BYTE $00
   424 BF75 00						.BYTE $00
   424 BF76 00						.BYTE $00
   424 BF77 00						.BYTE $00
   424 BF78 00						.BYTE $00
   424 BF79 00						.BYTE $00
   424 BF7A 00						.BYTE $00
   424 BF7B 00						.BYTE $00
   424 BF7C 00						.BYTE $00
   424 BF7D 00						.BYTE $00
   424 BF7E 00						.BYTE $00
   424 BF7F 00						.BYTE $00
   424 BF80 00						.BYTE $00
   424 BF81 00						.BYTE $00
   424 BF82 00						.BYTE $00
   424 BF83 00						.BYTE $00
   424 BF84 00						.BYTE $00
   424 BF85 00						.BYTE $00
   424 BF86 00						.BYTE $00
   424 BF87 00						.BYTE $00
   424 BF88 00						.BYTE $00
   424 BF89 00						.BYTE $00
   424 BF8A 00						.BYTE $00
   424 BF8B 00						.BYTE $00
   424 BF8C 00						.BYTE $00
   424 BF8D 00						.BYTE $00
   424 BF8E 00						.BYTE $00
   424 BF8F 00						.BYTE $00
   424 BF90 00						.BYTE $00
   424 BF91 00						.BYTE $00
   424 BF92 00						.BYTE $00
   424 BF93 00						.BYTE $00
   424 BF94 00						.BYTE $00
   424 BF95 00						.BYTE $00
   424 BF96 00						.BYTE $00
   424 BF97 00						.BYTE $00
   424 BF98 00						.BYTE $00
   424 BF99 00						.BYTE $00
   424 BF9A 00						.BYTE $00
   424 BF9B 00						.BYTE $00
   424 BF9C 00						.BYTE $00
   424 BF9D 00						.BYTE $00
   424 BF9E 00						.BYTE $00
   424 BF9F 00						.BYTE $00
   424 BFA0 00						.BYTE $00
   424 BFA1 00						.BYTE $00
   424 BFA2 00						.BYTE $00
   424 BFA3 00						.BYTE $00
   424 BFA4 00						.BYTE $00
   424 BFA5 00						.BYTE $00
   424 BFA6 00						.BYTE $00
   424 BFA7 00						.BYTE $00
   424 BFA8 00						.BYTE $00
   424 BFA9 00						.BYTE $00
   424 BFAA 00						.BYTE $00
   424 BFAB 00						.BYTE $00
   424 BFAC 00						.BYTE $00
   424 BFAD 00						.BYTE $00
Source: E:\_8BitProjects\Series\Scroller\Scroller.asm
   426 					
   427 						; add extra line info to avoid problem with ladder in the last line	
   428 BFAE 61 61 61 61 61 61 + 		:LEVEL_CHAR_SIZE_X 		.byte $61
   429
   430 				;*****	Run Address
   431 				;
   432 02E0-02E1> 00 48				run InitSystem

mads 2.0.7
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Main.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 26, 2018 01:12 PM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;	1 page 				= 256 bytes
    14 				;	1 K	   				= 004 pages - 1024 bytes	 
    15 				;	2 K	   				= 008 pages - 2048 bytes	 
    16 				;	3 K	   				= 012 pages - 3072 bytes	 
    17 				;	4 K	   				= 016 pages - 4096 bytes	 
    18 				;
    19 				;***** Memory Map - Atari 64K
    20 				;
    21 				;	$0000-$007F			zeropage for OS
    22 				;	$0080-$00FF 		zeropage for you
    23 				;	$0100-$01FF 		CPU stack
    24 				;	$0200-$02FF 		OS vector, registers
    25 				;	$0300-$03FF 		OS vector, registers
    26 				;	$0400-$05FF 		OS buffers
    27 				;	$0600-$06FF 		Page 6, object code in BASIC
    28 				;	$0700-$1FFF 		Disk Operating System
    29 				;	$2000-$7FFF 		User Code Area 
    30 				;	$8000-$BFFF 		Cartrige A and B slots
    31 				;	$C000-$CBFF 		OS part 1
    32 				;	$CC00-$CFFF 		OS character set, international
    33 				;	$D000-$D7FF			Hardware registers
    34 				;	$D800-$DFFF			FP Routines
    35 				;	$E000-$E3FF 		OS character set, standard
    36 				;	$E000-$FFFF 		OS part 2
    37 				;
    38 				;***** Include Files
    39 				;
    40 						icl "../_8BitLibrary/Atari_Equates.Asm"	; Atari hardware DOS,OS,ANTIC,GITA,POKEY,PIA equates
Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\Atari_Equates.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		Atari_Equates.Asm
     5 				;
     6 				;	Created By:		Victor V. Ferenzi
     7 				;
     8 				;	Modified On:	Wed Apr 18, 2018 02:36 AM
     9 				;
    10 				;	Comments:		This code contains parts contains parts of the port from 
    11 				;					the C64 to Atari project developed by Ken Jennings. Many thanks. 
    12 				;
    13 				;***************************************************************************************************
    14 				;
    15 				;**************************************************
    16 				; OS memory and vectors
    17 				;
    18 = 0012			RTCLOK 						= $12 				; and $13, and $14.  
    19 = 0014			RTCLOK60 					= $14 				; incremented every jiffy/frame.
    20
    21 = 004D			ATRACT 						= $4D
    22 = 0200			VDSLST 						= $0200 			; Display List interrupt.
    23
    24 				;
    25 				;**************************************************
    26 				; DOS - Misc values related to DOS and file loading
    27 				;
    28 = 2000			LOMEM_DOS 					= $2000 			; First usable memory after DOS
    29 = 3308			LOMEM_DOS_DUP 				= $3308 			; First usable memory after DOS and DUP 
    30
    31 				;**************************************************	
    32 				; Atari RUN ADDRESS.  
    33 				;
    34 				; 	The binary load file has a segmented structure 
    35 				; 	specifying starting address, and ending address, 
    36 				; 	followed by the bytes to load in that memory range.  
    37 				;
    38 				; 	DOS observes two special addresses when loading data.
    39 				; 	If the contents of the INIT address changes ater loading
    40 				; 	a segment DOS calls that address immediately. If the routine
    41 				; 	returns to DOS cleanly then file loading continues.
    42 				;
    43 				; 	If the contents of the RUN address changes DOS waits until
    44 				; 	all segments from the file are loaded and then calls the RUN
    45 				; 	address target.
    46 				;
    47 = 02E0			DOS_RUN_ADDR 				= $02e0				; Execute here when file loading completes.
    48 = 02E2			DOS_INIT_ADDR 				= $02e2				; Execute here immediately then resume loading.
    49
    50 				;**************************************************	
    51 				; ANTIC - Register List
    52 				;
    53 = D400			DMACTL 						= $D400				; DMA control for display and Player/Missile graphics
    54 = D401			CHACTL 						= $D401				; Character display control
    55 = D402			DLISTL 						= $D402				; Display List Pointer (low)
    56 = D403			DLISTH 						= $D403				; Display List Pointer (high)
    57 = D404			HSCROL 						= $D404				; Horizontal Fine Scroll 0 to 16 color clocks.
    58 = D405			VSCROL 						= $D405				; Vertical Fine Scroll 0 to 16 scanlines.
    59 = D407			PMBASE 						= $D407				; Player/Missile Base Address (high) 
    60 = D409			CHBASE 						= $D409				; Character Set Base Address (high)
    61 = D40A			WSYNC 						= $D40A				; Wait for Horizontal Sync
    62 = D40B			VCOUNT 						= $D40B				; (Read) Vertical Scan Line Counter
    63 = D40C			PENH 						= $D40C				; (Read) Light Pen Horizontal Position
    64 = D40D			PENV 						= $D40D				; (Read) Light Pen Vertical Position
    65 = D40E			NMIEN 						= $D40E				; Non-Maskable Interupt (NMI) Enable
    66 = D40F			NMIRES 						= $D40F				; (Write) Non-Maskable Interrupt (NMI) Reset
    67 = D40F			NMIST 						= $D40F				; (Read)  Non-Maskable Interrupt Status                   	
    68 				                   	;
    69 				;**************************************************
    70 				; Handler vectors:
    71 				;
    72 = FFFA			NMIH_VECTOR					= $FFFA
    73 = FFFC			RESH_VECTOR					= $FFFC
    74 = FFFE			IRQH_VECTOR					= $FFFE
    75
    76 				;**************************************************	
    77 				; Shadow Registers for Hardware Registers
    78 				;
    79 = 022F			SDMCTL 						= $022F 			; DMACTL
    80 = 0230			SDLSTL 						= $0230 			; DLISTL
    81 = 0231			SDLSTH 						= $0231 			; DLISTH
    82 = 02F4			CHBAS 						= $02F4 			; CHBASE
    83 = 02F3			CHART 						= $02F3 			; CHACTL
    84 = 0234			LPENH 						= $0234 			; (Read) PENH
    85 = 0235			LPENV 						= $0235 			; (Read) PENV
    86
    87 				;**************************************************	
    88 				; Important Bit Positions
    89 				;
    90 				;**************************************************
    91 				; DMACTL and SDMCTL - DMA control for display and Player/Missile graphics
    92 				;
    93 = 00DF			MASK_DL_DMA 				= %11011111			; Enable/Disable DMA to read the Display List
    94 = 00EF			MASK_PM_RESOLUTION 			= %11101111			; Set P/M graphics DMA to 1 or 2 scan line per update  
    95 = 00F3			MASK_PM_DMA 				= %11110011			; Enable/Disable DMA for Players/Missiles
    96 = 00FC			MASK_PLAYFIELD_WIDTH 		= %11111100			; Enable playfield display/set playfield width
    97
    98 				;**************************************************	
    99 				; DMACTL and SDMCTL - Enable/Disable DMA to read the Display List
   100 				;
   101 = 0020			ENABLE_DL_DMA 				= %00100000
   102 = 0000			DISABLE_DL_DMA 				= %00000000			; defining this is overkill
   103
   104 				;**************************************************	
   105 				; DMACTL and SDMCTL - Set P/M graphics DMA to 1 or 2 scan line per update  
   106 				;
   107 = 0010			PM_1LINE_RESOLUTION 		= %00010000
   108 = 0000			PM_2LINE_RESOLUTION 		= %00000000
   109
   110 				;**************************************************	
   111 				; DMACTL and SDMCTL - Enable DMA for Players/Missiles
   112 				;
   113 = 0008			ENABLE_PLAYER_DMA 			= %00001000
   114 = 0004			ENABLE_MISSILE_DMA 			= %00000100
   115 = 000C			ENABLE_PM_DMA 				= %00001100
   116
   117 				;**************************************************	
   118 				; DMACTL and SDMCTL - Enable playfield display/set playfield width
   119 				;
   120 = 0000			PLAYFIELD_DISABLE 			= %00000000			; No width is the same as no display
   121 = 0001			PLAYFIELD_WIDTH_NARROW_MASK	= %00000001			; 32 characters/128 color clocks
   122 = 0002			PLAYFIELD_WIDTH_NORMAL_MASK	= %00000010			; 40 characters/160 color clocks
   123 = 0003			PLAYFIELD_WIDTH_WIDE_MASK	= %00000011			; 48 characters/192 color clocks (176 visible)
   124
   125 				;**************************************************	
   126 				; CHACTL - Character display control
   127 				;
   128 = 00FB			MASK_CHACTL_REFLECT 		= %11111011			; Enable/Disable vertical reflect
   129 = 00FD			MASK_CHACTL_INVERSE 		= %11111101			; Enable/Disable characters with high bit set displayed as inverse 
   130 = 00FE			MASK_CHACTL_BLANK 			= %11111110			; Enable/Disable characters with high bit set displayed as blank space
   131
   132 				;**************************************************	
   133 				; CHACTL - Enable character display options
   134 				; 
   135 = 0004			CHACTL_REFLECT 				= %00000100 		; Enable vertical reflect
   136 = 0002			CHACTL_INVERSE 				= %00000010 		; Enable inverse display for characters with high bit set
   137 = 0001			CHACTL_BLANK 				= %00000001 		; Enable blank display for characters with high bit set
   138
   139 				;**************************************************	
   140 				; NMIEN (NMIRES and NMIST) - Non-Maskable Interupt (NMI) Reset and Status
   141 				;
   142 = 007F			MASK_NMI_DLI 				= %01111111 		; Enable/Disable Display List Interrupts
   143 = 00BF			MASK_NMI_VBI 				= %10111111 		; Enable/Disable Vertical Blank Interrupt
   144 = 00DF			MASK_NMI_RESET 				= %11011111 		; Enable/Disable Reset Key Interrupt
   145
   146 				;**************************************************	
   147 				; NMIEN (NMIRES and NMIST) - Enable Non-Maskable Interupts
   148 				;
   149 = 0080			NMI_DLI 					= %10000000 		; Enable Display List Interrupts
   150 = 0040			NMI_VBI 					= %01000000 		; Enable Vertical Blank Interrupt
   151 = 0020			NMI_RESET 					= %00100000 		; Enable Reset Key Interrupt
   152
   153 				;**************************************************	
   154 				; Display List Instructions/Options Mask
   155 				;
   156 = 007F			MASK_DL_DLI 				= %01111111 		; Display List Interrupt on last scan line of graphics line
   157 = 00BF			MASK_DL_LMS 				= %10111111 		; Reload Memory Scan address for this graphics line
   158 = 00DF			MASK_DL_VSCROLL 			= %11011111 		; Vertical scrolling for this graphics line
   159 = 00EF			MASK_DL_HSCROLL 			= %11101111 		; Horizontal scrolling for this graphics line
   160 = 00F0			MASK_DL_MODE 				= %11110000 		; Text/Graphics Modes
   161
   162 				;**************************************************	
   163 				; Display List Instruction Options
   164 				;
   165 = 0080			DL_DLI 						= %10000000 		; Enable Display List Interrupt on last scan line of graphics line
   166 = 0040			DL_LMS 						= %01000000 		; Enable Reload Memory Scan address for this graphics line
   167 = 0020			DL_VSCROLL 					= %00100000 		; Enable Vertical scrolling for this graphics line
   168 = 0010			DL_HSCROLL 					= %00010000 		; Enable Horizontal scrolling for this graphics line
   169 = 000F			DL_MODE 					= %00001111 		; Collection of Text/Graphics Modes
   170
   171 				;**************************************************	
   172 				; Display List Instructions, Jump 
   173 				;
   174 = 0001			DL_JUMP 					= $01				; Display List jump to new address
   175 = 0041			DL_JUMP_VB 					= $41				; Display List jump to address and start Vertical Blank
   176 				                        	
   177 				;**************************************************	
   178 				; Display List Instructions, blank scan lines
   179 				;
   180 				; 	Note: Bit $80 is not part of this, so the
   181 				; 	DL_DLI Instruction Option is available for 
   182 				; 	the blank line instructions.
   183 				;
   184 = 0000			DL_BLANK_1 					= $00 				; 1 Blank Scan line
   185 = 0010			DL_BLANK_2 					= $10 				; 2 Blank Scan lines
   186 = 0020			DL_BLANK_3 					= $20 				; 3 Blank Scan lines
   187 = 0030			DL_BLANK_4 					= $30 				; 4 Blank Scan lines
   188 = 0040			DL_BLANK_5 					= $40 				; 5 Blank Scan lines
   189 = 0050			DL_BLANK_6 					= $50 				; 6 Blank Scan lines
   190 = 0060			DL_BLANK_7 					= $60 				; 7 Blank Scan lines
   191 = 0070			DL_BLANK_8 					= $70 				; 8 Blank Scan lines
   192
   193 				;**************************************************	
   194 				; Display List Instructions, Text Modes
   195 				;
   196 = 0002			DL_TEXT_2 					= $02 				; 1.5 Color, 40 Columns X  8 Scan lines
   197 = 0003			DL_TEXT_3 					= $03 				; 1.5 Color, 40 Columns X 10 Scan lines
   198 = 0004			DL_TEXT_4 					= $04 				; 4/5 Color, 40 Columns X  8 Scan lines
   199 = 0005			DL_TEXT_5 					= $05 				; 4/5 Color, 40 Columns X 16 Scan lines
   200 = 0006			DL_TEXT_6 					= $06 				;   5 Color, 20 Columns X  8 Scan lines
   201 = 0007			DL_TEXT_7 					= $07 				;   5 Color, 20 Columns X 16 Scan lines
   202
   203 				;**************************************************	
   204 				; Display List Instructions, Map Modes
   205 				;
   206 = 0008			DL_MAP_8 					= $08 				;   4 Color,  40 Pixels X   8 Scan Lines
   207 = 0009			DL_MAP_9 					= $09 				;   2 Color,  80 Pixels X   4 Scan Lines
   208 = 000A			DL_MAP_A 					= $0A 				;   4 Color,  80 Pixels X   4 Scan Lines
   209 = 000B			DL_MAP_B 					= $0B 				;   2 Color, 160 Pixels X   2 Scan Lines
   210 = 000C			DL_MAP_C 					= $0C 				;   2 Color, 160 Pixels X   1 Scan Lines
   211 = 000D			DL_MAP_D 					= $0D 				;   4 Color, 160 Pixels X   2 Scan Lines
   212 = 000E			DL_MAP_E 					= $0E 				;   4 Color, 160 Pixels X   1 Scan Lines
   213 = 000F			DL_MAP_F 					= $0F 				; 1.5 Color, 320 Pixels X   1 Scan Lines (and GTIA modes)
   214
   215 				;**************************************************	
   216 				; GTIA - Register List
   217 				;
   218 				;**************************************************	
   219 				; Hardware Registers
   220 				;
   221 = D000			HPOSP0 						= $D000 			; Player 0 Horizontal Position
   222 = D001			HPOSP1 						= $D001 			; Player 1 Horizontal Position
   223 = D002			HPOSP2 						= $D002 			; Player 2 Horizontal Position
   224 = D003			HPOSP3 						= $D003 			; Player 3 Horizontal Position
   225 				                        	
   226 = D004			HPOSM0 						= $D004 			; Missile 0 Horizontal Position
   227 = D005			HPOSM1 						= $D005 			; Missile 1 Horizontal Position
   228 = D006			HPOSM2 						= $D006 			; Missile 2 Horizontal Position
   229 = D007			HPOSM3 						= $D007 			; Missile 3 Horizontal Position
   230 				;;     						        			
   231 = D008			SIZEP0 						= $D008 			; Player 0 Size
   232 = D009			SIZEP1 						= $D009 			; Player 1 Size
   233 = D00A			SIZEP2 						= $D00A 			; Player 2 Size
   234 = D00B			SIZEP3 						= $D00B 			; Player 3 Size
   235 = D00C			SIZEM 						= $D00C 			; Missiles Sizes (2 bits per missile)
   236 				                        	
   237 = D00D			GRAFP0 						= $D00D 			; Player 0 Graphics Pattern
   238 = D00E			GRAFP1 						= $D00E 			; Player 1 Graphics Pattern
   239 = D00F			GRAFP2 						= $D00F 			; Player 2 Graphics Pattern
   240 = D010			GRAFP3 						= $D010 			; Player 3 Graphics Pattern
   241 = D011			GRAFM 						= $D011 			; Missile Graphics Pattern (2 bits per missile)
   242 				                        	
   243 = D000			M0PF 						= $D000 			; (Read) Missile 0 to Playfield collisions
   244 = D001			M1PF 						= $D001 			; (Read) Missile 1 to Playfield collisions
   245 = D002			M2PF 						= $D002 			; (Read) Missile 2 to Playfield collisions
   246 = D003			M3PF 						= $D003 			; (Read) Missile 3 to Playfield collisions
   247 				   					    	    			
   248 = D004			P0PF 						= $D004 			; (Read) Player 0 to Playfield collisions
   249 = D005			P1PF 						= $D005 			; (Read) Player 1 to Playfield collisions
   250 = D006			P2PF 						= $D006 			; (Read) Player 2 to Playfield collisions
   251 = D007			P3PF 						= $D007 			; (Read) Player 3 to Playfield collisions
   252 				   					    	    			
   253 = D008			M0PL 						= $D008 			; (Read) Missile 0 to Player collisions
   254 = D009			M1PL 						= $D009 			; (Read) Missile 1 to Player collisions
   255 = D00A			M2PL 						= $D00A 			; (Read) Missile 2 to Player collisions
   256 = D00B			M3PL 						= $D00B 			; (Read) Missile 3 to Player collisions
   257 				   					    	    			
   258 = D00C			P0PL 						= $D00C 			; (Read) Player 0 to Player collisions
   259 = D00D			P1PL 						= $D00D 			; (Read) Player 1 to Player collisions
   260 = D00E			P2PL 						= $D00E 			; (Read) Player 2 to Player collisions
   261 = D00F			P3PL 						= $D00F 			; (Read) Player 3 to Player collisions
   262 				                        	
   263 = D012			COLPM0 						= $D012 			; Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   264 = D013			COLPM1 						= $D013 			; Player/Missile 1 color, GTIA 9-color playfield color 1
   265 = D014			COLPM2 						= $D014 			; Player/Missile 2 color, GTIA 9-color playfield color 2
   266 = D015			COLPM3 						= $D015 			; Player/Missile 3 color, GTIA 9-color playfield color 3
   267 				       						        			
   268 = D016			COLPF0 						= $D016 			; Playfield 0 color
   269 = D017			COLPF1 						= $D017 			; Playfield 1 color
   270 = D018			COLPF2 						= $D018 			; Playfield 2 color
   271 = D019			COLPF3 						= $D019 			; Playfield 3 color (and fifth Player color)
   272 = D01A			COLBK 						= $D01A 			; Playfield Background color
   273 				                        	
   274 = D010			TRIG0 						= $D010 			; (Read) Joystick 0 trigger
   275 = D011			TRIG1 						= $D011 			; (Read) Joystick 1 trigger
   276 = D012			TRIG2 						= $D012 			; (Read) Joystick 2 trigger
   277 = D013			TRIG3 						= $D013 			; (Read) Joystick 3 trigger
   278 				    						        				
   279 = D014			PAL    						= $D014 			; (Read) PAL Flag
   280 = D01B			PRIOR  						= $D01B 			; Control Priority, Fifth Player and GTIA modes
   281 = D01C			VDELAY 						= $D01C 			; Player Missile Vertical Delay
   282 = D01D			GRACTL 						= $D01D 			; Graphics Control, P/M DMA and joystick trigger latches
   283 = D01E			HITCLR 						= $D01E 			; Clear Player/Missile Collisions
   284 				     						        			
   285 = D01F			CONSOL 						= $D01F 			; (Read) Start, Select, Option console keys.
   286 = D01F			CONSPK 						= $D01F 			; Console speaker.
   287
   288 				;**************************************************	
   289 				; Shadow Registers for Hardware Registers
   290 				;
   291 = 0284			STRIG0 						= $0284				; (Read) TRIG0 - Joystick 0 trigger
   292 = 0285			STRIG1 						= $0285				; (Read) TRIG1 - Joystick 1 trigger
   293 = 0286			STRIG2 						= $0286				; (Read) TRIG2 - Joystick 2 trigger
   294 = 0287			STRIG3 						= $0287				; (Read) TRIG3 - Joystick 3 trigger
   295 				                        	
   296 = 02C0			PCOLOR0 					= $02C0				; COLPM0 - Player/Missile 0 color, GTIA 9-color playfield color 0 for Background
   297 = 02C1			PCOLOR1 					= $02C1				; COLPM1 - Player/Missile 1 color, GTIA 9-color playfield color 1
   298 = 02C2			PCOLOR2 					= $02C2				; COLPM2 - Player/Missile 2 color, GTIA 9-color playfield color 2
   299 = 02C3			PCOLOR3 					= $02C3				; COLPM3 - Player/Missile 3 color, GTIA 9-color playfield color 3
   300 				                      	
   301 = 02C4			COLOR0 						= $02C4				; COLPF0 - Playfield 0 color
   302 = 02C5			COLOR1 						= $02C5				; COLPF1 - Playfield 1 color
   303 = 02C6			COLOR2 						= $02C6				; COLPF2 - Playfield 2 color
   304 = 02C7			COLOR3 						= $02C7				; COLPF3 - Playfield 3 color (and fifth Player color)
   305 = 02C8			COLOR4 						= $02C8				; COLBK  - Playfield Background color
   306 				     						        				
   307 = 026F			GPRIOR 						= $026F				; PRIOR - Control Priority, Fifth Player and GTIA modes
   308
   309 				;**************************************************	
   310 				; Important Bit Positions
   311 				;		
   312 				;	SIZEP0 - SIZEP3
   313 				;
   314 = 0003			PLAYER_SIZE_BITS 			= %00000011
   315 = 0000			PM_SIZE_NORMAL 				= %00000000 		; One color clock per Player/Missile pixel
   316 = 0001			PM_SIZE_DOUBLE 				= %00000001 		; Two color clocks per Player/Missile pixel
   317 = 0003			PM_SIZE_QUAD 				= %00000011 		; Fopur color clocks per Player/Missile pixel
   318
   319 				;**************************************************	
   320 				; SIZEM and GRAFM (and missile memory)
   321 				;
   322 = 00FC			MASK_MISSILE0_BITS 			= %11111100
   323 = 00F3			MASK_MISSILE1_BITS 			= %11110011
   324 = 00CF			MASK_MISSILE2_BITS 			= %11001111
   325 = 003F			MASK_MISSILE3_BITS 			= %00111111
   326 				                        	
   327 = 0003			MISSILE0_BITS 				= %00000011
   328 = 000C			MISSILE1_BITS 				= %00001100
   329 = 0030			MISSILE2_BITS 				= %00110000
   330 = 00C0			MISSILE3_BITS 				= %11000000
   331 = 0055			MISSILES_BITS				= %01010101
   332 				 
   333 				;**************************************************	
   334 				; Collisions MxPF, MxPL, PxPF, PxPL
   335 				;
   336 				; 	COLPMx or COLPFx where X is bits 0 through 3
   337 				;
   338 = 00FE			MASK_COLPMF0_BIT 			= %11111110 		; Player or Missile v Player or Playfield color 0
   339 = 00FD			MASK_COLPMF1_BIT 			= %11111101 		; Player or Missile v Player or Playfield color 1
   340 = 00FB			MASK_COLPMF2_BIT 			= %11111011 		; Player or Missile v Player or Playfield color 2
   341 = 00F7			MASK_COLPMF3_BIT 			= %11110111 		; Player or Missile v Player or Playfield color 3
   342 				                      	
   343 = 0001			COLPMF0_BIT 				= %00000001 		; Player or Missile v Player or Playfield color 0
   344 = 0002			COLPMF1_BIT 				= %00000010 		; Player or Missile v Player or Playfield color 1
   345 = 0004			COLPMF2_BIT 				= %00000100 		; Player or Missile v Player or Playfield color 2
   346 = 0008			COLPMF3_BIT 				= %00001000 		; Player or Missile v Player or Playfield color 3
   347
   348 				;**************************************************	
   349 				; Colors Registers
   350 				;
   351 = 00F0			COLOR_BITS 					= %11110000
   352 = 000F			LUMA_BITS 					= %00001111
   353
   354 				;**************************************************	
   355 				; PRIOR and GPRIOR - Control Priority, Fifth Player and GTIA modes
   356 				;
   357 = 00F0			MASK_PRIORITY 				= %11110000 		; Player/Missile, Playfield priority
   358 = 00EF			MASK_FIFTH_PLAYER 			= %11101111 		; Enable/Disable Fifth Player
   359 = 00DF			MASK_MULTICOLOR_PM 			= %11011111 		; Enable/Disable Player color mixing
   360 = 003F			MASK_GTIA_MODE 				= %00111111 		; Enable/Disable GTIA playfield modes
   361 				                        	           
   362 = 0001			PM_PRIORITY_1				= %00000001
   363 = 0002			PM_PRIORITY_2				= %00000010
   364 = 0004			PM_PRIORITY_3				= %00000100
   365 = 0008			PM_PRIORITY_4				= %00001000       
   366 				                 	            		
   367 = 000F			PRIORITY_BITS 				= %00001111 		; Player/Missile, Playfield priority
   368 = 0010			FIFTH_PLAYER 				= %00010000 		; Enable Fifth Player
   369 = 0020			MULTICOLOR_PM 				= %00100000 		; Enable Player color mixing
   370 				                        	            		
   371 = 0000			GTIA_MODE_DEFAULT 			= %00000000 		; Normal CTIA color interpretation
   372 = 0040			GTIA_MODE_16_SHADE 			= %01000000 		; 16 shades of background color (COLBK)
   373 = 0080			GTIA_MODE_9_COLOR 			= %10000000 		; 9 colors from registers, COLPM0 is background
   374 = 00C0			GTIA_MODE_16_COLOR 			= %11000000 		; 16 hues of brigntess of background color (COLBK)
   375
   376 				;**************************************************	
   377 				; VDELAY - Delay PM DMA to render 2 scan line Player data one scan line lower 
   378 				;
   379 = 00FE			MASK_VD_MISSILE0 			= %11111110
   380 = 00FD			MASK_VD_MISSILE1 			= %11111101
   381 = 00FB			MASK_VD_MISSILE2 			= %11111011
   382 = 00F7			MASK_VD_MISSILE3 			= %11110111
   383 = 00EF			MASK_VD_PLAYER0 			= %11101111
   384 = 00DF			MASK_VD_PLAYER1 			= %11011111
   385 = 00BF			MASK_VD_PLAYER2 			= %10111111
   386 = 007F			MASK_VD_PLAYER3 			= %01111111
   387 				                        	
   388 = 0001			VD_MISSILE0 				= %00000001
   389 = 0002			VD_MISSILE1 				= %00000010
   390 = 0004			VD_MISSILE2 				= %00000100
   391 = 0008			VD_MISSILE3 				= %00001000
   392 = 0010			VD_PLAYER0 					= %00010000
   393 = 0020			VD_PLAYER1 					= %00100000
   394 = 0040			VD_PLAYER2 					= %01000000
   395 = 0080			VD_PLAYER3 					= %10000000
   396
   397 				;**************************************************	
   398 				; GRACTL - Enable/Disable Player/Missile DMA to GRAFxx registers. And latch triggers.
   399 				;
   400 = 00FE			MASK_ENABLE_MISSILES 		= %11111110 		; Enable/Disable Missile DMA to GRAFM register
   401 = 00FD			MASK_ENABLE_PLAYERS 		= %11111101 		; Enable/Disable Player DMA to GRAFPx registers
   402 = 00FB			MASK_TRIGGER_LATCH 			= %11111011 		; Enable/Disable jostick trigger latching
   403 				                        	          		
   404 = 0001			ENABLE_MISSILES 			= %00000001 		; Enable Missile DMA to GRAFM register
   405 = 0002			ENABLE_PLAYERS 				= %00000010 		; Enable Player DMA to GRAFPx registers
   406 = 0004			TRIGGER_LATCH 				= %00000100 		; Enable joystick trigger latching
   407
   408 				;**************************************************	                                  			
   409 				; CONSOL and CONSPK - 0 is key pressed
   410 				;
   411 = 00F8			MASK_CONSOLE_KEYS 			= %11111000
   412 = 00FE			MASK_CONSOLE_START 			= %11111110 		; Start button
   413 = 00FD			MASK_CONSOLE_SELECT 		= %11111101 		; Select button
   414 = 00FB			MASK_CONSOLE_OPTION 		= %11111011 		; Option button
   415 = 00F7			MASK_CONSOLE_SPEAKER 		= %11110111 		; (Write) Keyboard speaker
   416 				                        	
   417 = 0001			CONSOLE_START 				= %00000001 		; Start button
   418 = 0002			CONSOLE_SELECT 				= %00000010 		; Select button
   419 = 0004			CONSOLE_OPTION 				= %00000100 		; Option button
   420 = 0008			CONSOLE_SPEAKER 			= %00001000 		; (Wrie) Keyboard speaker
   421
   422 				;**************************************************
   423 				; Other Value Lists 
   424 				;
   425 				; 	Sizes in horizontal color clocks and vertical scan lines
   426 				;
   427 = 0080			PLAYFIELD_WIDTH_NARROW 		= %10000000			; Color Clocks Normal Width = 128
   428 = 00A0			PLAYFIELD_WIDTH_NORMAL 		= %10100000			; Color Clocks Normal Width = 160
   429 = 00B0			PLAYFIELD_WIDTH_WIDE 		= %10110000			; Color Clocks Normal Width = 176
   430
   431 = 0040			PLAYFIELD_LEFT_EDGE_NARROW 	= %01000000 		; First/left-most color clock horizontal position
   432 = 0030			PLAYFIELD_LEFT_EDGE_NORMAL 	= %00110000
   433 = 0028			PLAYFIELD_LEFT_EDGE_WIDE 	= %00101000
   434
   435 = 00BF			PLAYFIELD_RIGHT_EDGE_NARROW = %10111111 		; Last/right-most color clock horizontal position
   436 = 00CF			PLAYFIELD_RIGHT_EDGE_NORMAL = %11001111
   437 = 00D7			PLAYFIELD_RIGHT_EDGE_WIDE 	= %11010111
   438
   439 				;**************************************************	
   440 				; PMBASE offsets to Player or Missile addresses
   441 				;
   442 = 0180			PMADR_2LINE_MISSILES 		= $180 
   443 = 0200			PMADR_2LINE_PLAYER0 		= $200
   444 = 0280			PMADR_2LINE_PLAYER1 		= $280
   445 = 0300			PMADR_2LINE_PLAYER2 		= $300
   446 = 0380			PMADR_2LINE_PLAYER3 		= $380
   447
   448 = 0300			PMADR_1LINE_MISSILES 		= $300
   449 = 0400			PMADR_1LINE_PLAYER0 		= $400
   450 = 0500			PMADR_1LINE_PLAYER1 		= $500
   451 = 0600			PMADR_1LINE_PLAYER2 		= $600
   452 = 0700			PMADR_1LINE_PLAYER3 		= $700
   453
   454 				;**************************************************	
   455 				; Vertical Alignments - screen scanlines are offsets into PMADR memory locations
   456 				;
   457 = 0004			PM_2LINE_OVERSCAN_TOP 		= $04
   458 = 0010			PM_2LINE_NORMAL_TOP 		= $10 				; For default OS 192 scan line display
   459 = 006F			PM_2LINE_NORMAL_BOTTOM 		= $6F 				; For default OS 192 scan line display
   460 = 007B			PM_2LINE_OVERSCAN_BOTTOM 	= $7B
   461
   462 = 0008			PM_1LINE_OVERSCAN_TOP 		= $08
   463 = 0020			PM_1LINE_NORMAL_TOP 		= $20 				; For default OS 192 scan line display
   464 = 00DF			PM_1LINE_NORMAL_BOTTOM 		= $DF 				; For default OS 192 scan line display
   465 = 00F7			PM_1LINE_OVERSCAN_BOTTOM 	= $F7
   466
   467 				;**************************************************	
   468 				; Helpful Colors.  (Many match C64)
   469 				;
   470 = 0000			COLOR_GREY 					= $00
   471 = 0010			COLOR_ORANGE1 				= $10
   472 = 0020			COLOR_ORANGE2 				= $20
   473 = 0030			COLOR_RED_ORANGE 			= $30
   474 = 0040			COLOR_PINK 					= $40
   475 = 0050			COLOR_PURPLE 				= $50
   476 = 0060			COLOR_PURPLE_BLUE 			= $60
   477 = 0070			COLOR_BLUE1 				= $70
   478 = 0080			COLOR_BLUE2 				= $80
   479 = 0090			COLOR_LITE_BLUE 			= $90
   480 = 00A0			COLOR_AQUA 					= $A0
   481 = 00B0			COLOR_BLUE_GREEN 			= $B0
   482 = 00C0			COLOR_GREEN 				= $C0
   483 = 00D0			COLOR_YELLOW_GREEN 			= $D0
   484 = 00E0			COLOR_ORANGE_GREEN 			= $E0
   485 = 00F0			COLOR_LITE_ORANGE 			= $F0
   486 = 0000			COLOR_BLACK 				= $00				; Some like to think of first color value as black.
   487
   488 				;**************************************************
   489 				; PIA  - Register List
   490 				;
   491 				;**************************************************
   492 				; Hardware Registers                                                                                                                                                   
   493 				;                                                                                                                                                                      
   494 = D300			PORTA 						= $D300				; Joystick ports 1 and 2, STICK0 and STICK1                                                                                                               
   495 = D301			PORTB 						= $D301				; Joystick ports 3 and 4, STICK2 and STICK3                                                                                                               
   496 = D302			PACTL 						= $D302				; Port A Control                                                                                                                                          
   497 = D303			PBCTL 						= $D303				; Port B Control                                                                                                                                          
   498
   499 				;**************************************************
   500 				; Shadow Registers for Hardware Registers                                                                                                                              
   501 				;                                                                                                                                                                      
   502 = 0278			STICK0 						= $0278                                                                                                                                                          
   503 = 0279			STICK1 						= $0279                                                                                                                                                          
   504 = 027A			STICK2 						= $027A                                                                                                                                                          
   505 = 027B			STICK3 						= $027B                                                                                                                                                          
   506 				       						                                                                                                                                                               
   507 = 027C			PTRIG0 						= $027C                                                                                                                                                          
   508 = 027D			PTRIG1 						= $027D                                                                                                                                                          
   509 = 027E			PTRIG2 						= $027E                                                                                                                                                          
   510 = 027F			PTRIG3 						= $027F                                                                                                                                                          
   511 = 0280			PTRIG4 						= $0280                                                                                                                                                          
   512 = 0281			PTRIG5 						= $0281                                                                                                                                                          
   513 = 0282			PTRIG6 						= $0282                                                                                                                                                          
   514 = 0283			PTRIG7 						= $0283                                                                                                                                                          
   515
   516 				;**************************************************
   517 				; Important Bit Positions                                                                                                                                              
   518 				;                                                                                                                                                                      
   519 = 000F			MASK_JACK_1_3 				= %00001111 		; Actually the anti-mask.  Keeps bits from first controller in pair.                                                                          
   520 = 00F0			MASK_JACK_2_4 				= %11110000 		; The inverse of mask.  Keeps bits from second controller in pair.                                                                            
   521
   522 				;**************************************************
   523 				; 	Stick's bits in the high nybble should be right shifted into a low nybble for testing.                                                                               
   524 				;  	Or just use the STICKx shadow register as that is its purpose.                                                                                                      
   525 				; 	Bits for STICKx shadow regs below:                                                                                                                                   
   526 				;
   527 = 00F7			MASK_STICK_RIGHT 			= %11110111                                                                                                                                            
   528 = 00FB			MASK_STICK_LEFT 			= %11111011                                                                                                                                            
   529 = 00FD			MASK_STICK_DOWN 			= %11111101                                                                                                                                            
   530 = 00FE			MASK_STICK_UP 				= %11111110                                                                                                                                            
   531 				                                                                                                                                                                      
   532 = 0008			STICK_RIGHT 				= %00001000                                                                                                                                                 
   533 = 0004			STICK_LEFT 					= %00000100                                                                                                                                                 
   534 = 0002			STICK_DOWN 					= %00000010                                                                                                                                                 
   535 = 0001			STICK_UP 					= %00000001                                                                                                                                                 
   536
   537 				;**************************************************                                                                                                                                                                      
   538 				; PACTL and PBCTL                                                                                                                                                      
   539 				;
   540 = 007F			MASK_PORT_SERIAL_IRQ 		= %01111111 		; (Read)                                                                                                                             
   541 = 00F7			MASK_MOTOR_CONTROL 			= %11110111 		; PACTL Peripheral motor control (cassette)                                                                                          
   542 = 00F7			MASK_COMMAND_IDENT 			= %11110111 		; PBCTL Peripheral command identification                                                                                            
   543 = 00FB			MASK_PORT_ADDRESSING 		= %11111011 		; PACTL 0 = Port direction control. 1 = Read port.                                                                                   
   544 = 00FE			MASK_SERIAL_IRQ_ENABLE 		= %11111110                                                                                                                                      
   545 				                                                                                                                                                                      
   546 = 0080			PORT_SERIAL_IRQ 			= %10000000 		; (Read)                                                                                                                                  
   547 = 0008			MOTOR_CONTROL 				= %00001000 		; PACTL                                                                                                                                   
   548 = 0008			COMMAND_IDENT 				= %00001000 		; PBCTL                                                                                                                                   
   549 = 0004			PORT_ADDRESSING 			= %00000100                                                                                                                                           
   550 = 0001			SERIAL_IRQ_ENABLE 			= %00000001                                                                                                                                           
   551 				                                                                                                                                                                      
   552
   553 				;**************************************************                                                                                                                                                                      
   554 				; PBCTL for the XL                                                                                                                                                     
   555 				;
   556 = 00FE			MASK_SELECT_OS_ROM 			= %11111110 		; Turn OS ROM on and off                                                                                                            
   557 = 00FD			MASK_SELECT_BASIC_ROM 		= %11111101 		; Turn BASIC ROM on and off                                                                                                         
   558 = 00FB			MASK_LED_1_KEYBOARD 		= %11111011 		; 1200XL LED 1, enable/disable keyboard                                                                                             
   559 = 00F7			MASK_LED_2_INTL_CHARSET 	= %11110111 		; 1200XL LED 2, enable international character set                                                                                  
   560 = 007F			MASK_SELF_TEST_ROM 			= %01111111 		; Expose Self Test at $5000                                                                                                         
   561 				                                                                                                                                                                      
   562 = 0001			SELECT_OS_ROM 				= %00000001                                                                                                                                          
   563 = 0002			SELECT_BASIC_ROM 			= %00000010                                                                                                                                          
   564 = 0004			LED_1_KEYBOARD 				= %00000100                                                                                                                                          
   565 = 0008			LED_2_INTL_CHARSET 			= %00001000                                                                                                                                          
   566 = 0080			SELF_TEST_ROM 				= %10000000                                                                                                                                          
   567 				                                                
   568 				;**************************************************
   569 				; POKEY  - Register List                             
   570 				;      
   571 				;**************************************************
   572 				; Hardware Registers
   573 				;
   574 = D200			AUDF1 						= $D200 			; Audio channel 1 Frequency
   575 = D202			AUDF2 						= $D202 			; Audio channel 2 Frequency
   576 = D204			AUDF3 						= $D204 			; Audio channel 3 Frequency
   577 = D206			AUDF4 						= $D206 			; Audio channel 4 Frequency
   578 				    						        			
   579 = D201			AUDC1 						= $D201 			; Audio channel 1 Control
   580 = D203			AUDC2 						= $D203 			; Audio channel 2 Control
   581 = D205			AUDC3 						= $D205 			; Audio channel 3 Control
   582 = D207			AUDC4 						= $D207 			; Audio channel 4 Control
   583
   584 = D208			AUDCTL 						= $D208 			; Audio Control
   585
   586 = D200			POT0 						= $D200 			; (Read) Potentiometer (paddle) 0 
   587 = D201			POT1 						= $D201 			; (Read) Potentiometer (paddle) 1 
   588 = D202			POT2 						= $D202 			; (Read) Potentiometer (paddle) 2 
   589 = D203			POT3 						= $D203 			; (Read) Potentiometer (paddle) 3 
   590 = D204			POT4 						= $D204 			; (Read) Potentiometer (paddle) 4 
   591 = D205			POT5 						= $D205 			; (Read) Potentiometer (paddle) 5 
   592 = D206			POT6 						= $D206 			; (Read) Potentiometer (paddle) 6 
   593 = D207			POT7 						= $D207 			; (Read) Potentiometer (paddle) 7 
   594
   595 = D208			ALLPOT 						= $D208 			; (Read) Read 8 line POT port state
   596 = D20B			POTGO  						= $D20B 			; Start the POT scan sequence
   597 				       						        			
   598 = D209			STIMER 						= $D209 			; Start timers
   599 = D209			KBCODE 						= $D209 			; (Read) Keyboard code
   600 = D208			RANDOM 						= $D208 			; (Read) Random number
   601 				       						        			
   602 = D20A			SKREST 						= $D20A 			; Reset Serial Status (SKSTAT)
   603 = D20D			SEROUT 						= $D20D 			; Serial port data output
   604 = D20D			SERIN  						= $D20D 			; (Read) Serial port data input
   605 = D20F			SKCTL  						= $D20F 			; Serial Port Control
   606 = D20F			SKSTAT 						= $D20F 			; (Read) Serial port status
   607 				       						        			
   608 = D20E			IRQEN  						= $D20E 			; Interrupt Request Enable
   609 = D20E			IRQST  						= $D20E 			; (Read) IRQ Status
   610
   611 				;**************************************************
   612 				; Shadow Registers for Hardware Registers
   613 				;
   614 = 0270			PADDL0 						= $0270 			; POT0
   615 = 0270			PADDL1 						= $0270 			; POT1
   616 = 0270			PADDL2 						= $0270 			; POT2
   617 = 0270			PADDL3 						= $0270 			; POT3
   618 = 0270			PADDL4 						= $0270 			; POT4
   619 = 0270			PADDL5 						= $0270 			; POT5
   620 = 0270			PADDL6 						= $0270 			; POT6
   621 = 0270			PADDL7 						= $0270 			; POT7
   622 				       						        			
   623 = 02FC			CH 	   						= $02FC 			; KBCODE       						
   624 = 0010			POKMSK 						= $10 				; IRQEN       						
   625 = 0232			SSKCTL 						= $0232 			; SKCTL
   626
   627 				;**************************************************
   628 				; Important Bit Positions
   629
   630 				;**************************************************
   631 				; AUDC 
   632 				;
   633 = 001F			MASK_AUD_NOISE  			= %00011111
   634 = 00EF			MASK_AUD_FORCE  			= %11101111
   635 = 00F0			MASK_AUD_VOLUME 			= %11110000
   636
   637 = 00E0			AUD_NOISE  					= %11100000
   638 = 0010			AUD_FORCE  					= %00010000
   639 = 000F			AUD_VOLUME 					= %00001111
   640
   641 = 0000			NOISE_5_BIT_17_BIT_POLY 	= %00000000
   642 = 0020			NOISE_5_BIT_POLY 			= %00100000
   643 = 0040			NOISE_5_BIT_4_BIT_POLY 		= %01000000
   644 = 0060			NOISE_5_BIT_POLY_2 			= %01100000 		; Duplicate of "5 bit poly"
   645 = 0080			NOISE_17_BIT_POLY 			= %10000000
   646 = 00A0			NOISE_NO_POLY_PURE 			= %10100000
   647 = 00C0			NOISE_4_BIT_POLY 			= %11000000
   648 = 00E0			NOISE_NO_POLY_PURE_2 		= %11100000 		; Duplicate of "No poly pure"
   649
   650 				;**************************************************
   651 				; AUDCTL
   652 				;
   653 = 007F			MASK_AUDCTL_POLY        	= %01111111 		; 17 or 9 bit poly
   654 = 00BF			MASK_AUDCTL_CH1_SYS     	= %10111111 		; Channel 1, 64KHz or system CPU clock (1.79Mhz NTSC)
   655 = 00DF			MASK_AUDCTL_CH3_SYS     	= %11011111 		; Channel 3, 64KHz or system CPU clock (1.79Mhz NTSC)
   656 = 00EF			MASK_AUDCTL_16_BIT_2_1  	= %11101111 		; Tie channels 2 and 1 for 16-bit resolution
   657 = 00F7			MASK_AUDCTL_16_BIT_4_3  	= %11110111 		; Tie channels 4 and 3 for 16-bit resolution
   658 = 00FB			MASK_AUDCTL_HIPASS_1_3  	= %11111011 		; High pass filter channel 1 by channel 3
   659 = 00FD			MASK_AUDCTL_HIPASS_2_4  	= %11111101 		; High pass filter channel 2 by channel 4
   660 = 00FE			MASK_AUDCTL_64_OR_15KHZ 	= %11111110 		; Use Clock 64Khz or 15Khz
   661
   662 = 0000			AUDCTL_POLY_17 				= %00000000
   663 = 0080			AUDCTL_POLY_9  				= %10000000
   664 = 0000			AUDCTL_CH1_64  				= %00000000
   665 = 0040			AUDCTL_CH1_SYS 				= %01000000
   666 = 0000			AUDCTL_CH3_64  				= %00000000
   667 = 0020			AUDCTL_CH3_SYS 				= %00100000
   668 = 0000			AUDCTL_16_BIT_2_1_OFF 		= %00000000
   669 = 0010			AUDCTL_16_BIT_2_1_ON 		= %00010000
   670 = 0000			AUDCTL_16_BIT_4_3_OFF 		= %00000000
   671 = 0008			AUDCTL_16_BIT_4_3_ON 		= %00001000
   672 = 0000			AUDCTL_HIPASS_1_3_OFF 		= %00000000
   673 = 0004			AUDCTL_HIPASS_1_3_ON 		= %00000100
   674 = 0000			AUDCTL_HIPASS_2_4_OFF 		= %00000000
   675 = 0002			AUDCTL_HIPASS_2_4_ON 		= %00000010
   676 = 0000			AUDCTL_CLOCK_64KHZ 			= %00000000
   677 = 0001			AUDCTL_CLOCK_15KHZ 			= %00000001
   678
   679 				;**************************************************
   680 				; ALLPOT
   681 				;
   682 = 007F			MASK_ALLPOT_PADDLE7 		= %01111111
   683 = 00BF			MASK_ALLPOT_PADDLE6 		= %10111111
   684 = 00DF			MASK_ALLPOT_PADDLE5 		= %11011111
   685 = 00EF			MASK_ALLPOT_PADDLE4 		= %11101111
   686 = 00F7			MASK_ALLPOT_PADDLE3 		= %11110111
   687 = 00FB			MASK_ALLPOT_PADDLE2 		= %11111011
   688 = 00FD			MASK_ALLPOT_PADDLE1 		= %11111101
   689 = 00FE			MASK_ALLPOT_PADDLE0 		= %11111110
   690
   691 = 0080			ALLPOT_PADDLE7 				= %10000000
   692 = 0040			ALLPOT_PADDLE6 				= %01000000
   693 = 0020			ALLPOT_PADDLE5 				= %00100000
   694 = 0010			ALLPOT_PADDLE4 				= %00010000
   695 = 0008			ALLPOT_PADDLE3 				= %00001000
   696 = 0004			ALLPOT_PADDLE2 				= %00000100
   697 = 0002			ALLPOT_PADDLE1 				= %00000010
   698 = 0001			ALLPOT_PADDLE0 				= %00000001
   699
   700 				;**************************************************
   701 				; SKCTL
   702 				;
   703 = 007F			MASK_SERIAL_BREAK 			= %01111111
   704 = 008F			MASK_SERIAL_MODE 			= %10001111
   705 = 00F7			MASK_SERIAL_2TONE 			= %11110111
   706 = 00FB			MASK_FAST_POT_SCAN 			= %11111011
   707 = 00FD			MASK_ENABLE_KB_SCAN 		= %11111101
   708 = 00FE			MASK_KB_DEBOUNCE 			= %11111110
   709
   710 = 0080			SERIAL_BREAK 				= %10000000 		
   711 = 0000			SERIAL_MODE0 				= %00000000 		; Input Clock External.            Output Clock External.          Bidirectional Clock Input.
   712 = 0010			SERIAL_MODE1 				= %00010000 		; Input Clock Channel 3+4 (async). Output Clock External.          Bidirectional Clock Input.
   713 = 0020			SERIAL_MODE2 				= %00100000 		; Input Clock Channel 4.           Output Clock Channel 4.         Bidirectional Clock Output Channel 4.
   714 = 0030			SERIAL_MODE3 				= %00110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   715 = 0040			SERIAL_MODE4 				= %01000000 		; Input Clock External.            Output Clock Channel 4.         Bidirectional Clock Input.
   716 = 0050			SERIAL_MODE5 				= %01010000 		; Input Clock Channel 3+4 (async). Output Clock Channel 4 (async). Bidirectional Clock Input.
   717 = 0060			SERIAL_MODE6 				= %01100000 		; Input Clock Channel 4.           Output Clock Channel 2.         Bidirectional Clock Output Channel 4.
   718 = 0070			SERIAL_MODE7 				= %01110000 		; Input Clock Channel 3+4 (async). Output Clock Channel 2.         Bidirectional Clock Input.
   719
   720 = 0008			SERIAL_2TONE 				= %00001000 		; 1 and 0 bits are audio set by timers 1 and 2
   721
   722 = 0000			FAST_POT_SCAN_OFF 			= %00000000
   723 = 0004			FAST_POT_SCAN_ON  			= %00000100
   724 = 0000			DISABLE_KB_SCAN   			= %00000000
   725 = 0002			ENABLE_KB_SCAN    			= %00000010
   726 = 0000			KB_DEBOUNCE_OFF   			= %00000000
   727 = 0001			KB_DEBOUNCE_ON    			= %00000001
   728
   729 				;**************************************************
   730 				; SKSTAT
   731 				;
   732 = 007F			MASK_SERIAL_FRAME_ERROR 	= %01111111
   733 = 00BF			MASK_SERIAL_INPUT_OVERRUN 	= %10111111
   734 = 00DF			MASK_KEYBOARD_OVERRUN 		= %11011111
   735 = 00EF			MASK_SERIAL_DATA_READY 		= %11101111
   736 = 00F7			MASK_SHIFT_KEY_PRESSED 		= %11110111
   737 = 00FB			MASK_LAST_KEY_HELD 			= %11111011
   738 = 00FD			MASK_SERIAL_INPUT_BUSY 		= %11111101
   739
   740 = 0000			SERIAL_FRAME_NO_ERROR 		= %00000000
   741 = 0080			SERIAL_FRAME_ERROR 			= %10000000
   742 = 0000			SERIAL_NO_INPUT_OVERRUN 	= %00000000
   743 = 0040			SERIAL_INPUT_OVERRUN 		= %01000000
   744 = 0000			KEYBOARD_NO_OVERRUN 		= %00000000
   745 = 0020			KEYBOARD_OVERRUN 			= %00100000
   746 = 0000			SERIAL_DATA_NOT_READY 		= %00000000
   747 = 0010			SERIAL_DATA_READY 			= %00010000
   748 = 0000			SHIFT_KEY_NOT_PRESSED 		= %00000000
   749 = 0008			SHIFT_KEY_PRESSED 			= %00001000
   750 = 0000			LAST_KEY_NOT_HELD 			= %00000000
   751 = 0004			LAST_KEY_HELD 				= %00000100
   752 = 0000			SERIAL_INPUT_NOT_BUSY 		= %00000000
   753 = 0002			SERIAL_INPUT_BUSY 			= %00000010
   754
   755 				;**************************************************
   756 				; IRQEN and IRQST
   757 				;
   758 = 00FE			MASK_IRQ_TIMER1 			= %11111110
   759 = 00FD			MASK_IRQ_TIMER2 			= %11111101
   760 = 00FB			MASK_IRQ_TIMER4 			= %11111011
   761 = 00F7			MASK_IRQ_SERIAL_OUT_DONE 	= %11110111
   762 = 00EF			MASK_IRQ_SERIAL_OUT_READY 	= %11101111
   763 = 00DF			MASK_IRQ_SERIAL_IN_READY 	= %11011111
   764 = 00BF			MASK_IRQ_NORMAL_KEY_PRESS 	= %10111111
   765 = 007F			MASK_IRQ_BREAK_PRESSED 		= %01111111
   766
   767 = 0000			IRQ_TIMER1_OFF 				= %00000000
   768 = 0001			IRQ_TIMER1_ON 				= %00000001
   769 = 0000			IRQ_TIMER2_OFF 				= %00000000
   770 = 0002			IRQ_TIMER2_ON 				= %00000010
   771 = 0000			IRQ_TIMER4_OFF 				= %00000000
   772 = 0004			IRQ_TIMER4_ON 				= %00000100
   773 = 0000			IRQ_SERIAL_OUT_NOT_DONE 	= %00000000
   774 = 0008			IRQ_SERIAL_OUT_DONE 		= %00001000
   775 = 0000			IRQ_SERIAL_OUT_NOT_READY 	= %00000000
   776 = 0010			IRQ_SERIAL_OUT_READY 		= %00010000
   777 = 0000			IRQ_SERIAL_IN_NOT_READY 	= %00000000
   778 = 0020			IRQ_SERIAL_IN_READY 		= %00100000
   779 = 0000			IRQ_NO_KEY_PRESS 			= %00000000
   780 = 0040			IRQ_NORMAL_KEY_PRESS 		= %01000000
   781 = 0000			IRQ_BREAK_NOT_PRESSED 		= %00000000
   782 = 0080			IRQ_BREAK_PRESSED 			= %10000000
   783
   784 				;**************************************************
   785 				; Additional Registers
   786 				;
   787 = 006A			RAMTOP						= $6A
    41 						icl "../_8BitLibrary/sys_macros.asm"	; General purpose macros used by system	
Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm
     1 				;	
     2 				;**************************************************************************************************
     3 				; 	Filename:		sys_macro.asm
     4 				; 	
     5 				;
     6 				; 	Created On:		Mon Aug 28, 2017 02:05 AM	
     7 				; 	Modified On:	Wed Mar 21, 2018 10:12 PM
     8 				;
     9 				;	Comments:		This code is from the OPEN_PLAT project developed by NVR. Additional
    10 				;					macros added by me.
    11 				;
    12 				;**************************************************************************************************
    13 				;
    14 				;**************************************************************************************************
    15 				; SaveAXY
    16 				;**************************************************************************************************
    17 				;
    18 				.macro SaveAXY
    19 					pha
    20 					txa
    21 					pha
    22 					tya
    23 					pha
    24 				.endm
    25 				;
    26 				;**************************************************************************************************
    27 				; RestoreRTS
    28 				;**************************************************************************************************
    29 				;
    30 				.macro RestoreRTS
    31 					pla
    32 					tay
    33 					pla
    34 					tax
    35 					pla
    36 					rts
    37 				.endm
    38 				;
    39 				;**************************************************************************************************
    40 				; RestoreRTS
    41 				;**************************************************************************************************
    42 				;
    43 				.macro RestoreRTI
    44 					pla
    45 					tay
    46 					pla
    47 					tax
    48 					pla
    49 					rti
    50 				.endm
    51 				;
    52 				;**************************************************************************************************
    53 				; SetRamTop [pages]
    54 				;**************************************************************************************************
    55 				;
    56 				.macro SetRamTop
    57 					.if :0 <> 1
    58 						.error "SetRamTop error"
    59 				   .else
    60 				   		lda RAMTOP
    61 						sec
    62 						sbc :1
    63 						sta RAMTOP
    64 					.endif
    65 				.endm
    66 				;
    67 				;**************************************************************************************************
    68 				; SetVector [address] [word]
    69 				;**************************************************************************************************
    70 				;
    71 				.macro SetVector
    72 					.if :0 <> 2
    73 						.error "SetVector error"
    74 				   .else
    75 				      	lda #<:2
    76 					    sta :1
    77 					    lda #>:2
    78 					    sta :1+1
    79 					.endif
    80 				.endm
    81 				;
    82 				;**************************************************************************************************
    83 				; SetColor [0..4] [0..255]
    84 				; SetColor [0..4] [0..15] [0..15]
    85 				;**************************************************************************************************
    86 				;
    87 				.macro SetColor
    88 					.if :0 < 2 .or :0 > 3
    89 						.error "SetColor error"
    90 				   	.else
    91 						.if :0 = 2
    92 					    	lda #:2
    93 					        sta COLPF0+:1
    94 						.else
    95 							lda #[:2 * 16 + :3]
    96 							sta COLPF0+:1
    97 						.endif
    98 					.endif
    99 				.endm
   100 				;
   101 				;**************************************************************************************************
   102 				; SetBKColor [0..15] [0..15]
   103 				;**************************************************************************************************
   104 				;
   105 				.macro SetBKColor
   106 					.if :0 < 1 .or :0 > 2
   107 						.error "SetBKColor error"
   108 				   	.else
   109 						.if :0 = 1
   110 					    	lda #:1
   111 					        sta COLBK
   112 						.else
   113 							lda #[:1 * 16 + :2]
   114 					        sta COLBK
   115 						.endif
   116 					.endif
   117 				.endm
   118 				;
   119 				;**************************************************************************************************
   120 				; SetPMColor [0..3] [0..255]
   121 				; SetPMColor [0..3] [0..15] [0..15]
   122 				;**************************************************************************************************
   123 				;
   124 				.macro SetPMColor
   125 					.if :0 < 2 .or :0 > 3
   126 						.error "SetPMColor error"
   127 					.else
   128 						.if :0 = 2
   129 							lda #:2
   130 							sta COLPM0+:1
   131 						.else
   132 							lda #[:2 * 16 + :3]
   133 							sta COLPM0+:1
   134 						.endif
   135 					.endif
   136 				.endm
   137 				;
   138 				;**************************************************************************************************
   139 				; VcountSync [0..130]
   140 				; (maximum limit is different on PAL: 155)
   141 				; (could wait forever if there are interrupts activated!)
   142 				; (or if some other "thread" uses "wsync")
   143 				;**************************************************************************************************
   144 				;
   145 				.macro VcountSync
   146 					.if :0 <> 1
   147 						.error "VcountSync error"
   148 				   	.else
   149 						sta WSYNC
   150 				      	lda #:1
   151 				VSync1	cmp VCOUNT
   152 					    bne VSync1
   153 						lda #:1+1
   154 				VSync2	cmp VCOUNT
   155 					    bne VSync2
   156 				      	sta WSYNC
   157 					.endif
   158 				.endm
   159 				;
   160 				;**************************************************************************************************
   161 				; VcountWait [0..130]
   162 				; (maximum limit is different on PAL: 155)
   163 				;**************************************************************************************************
   164 				;
   165 				.macro VcountWait
   166 					.if :0 <> 1
   167 						.error "VcountWait error"
   168 				   	.else
   169 						lda #:1
   170 				VWait1	cmp VCOUNT
   171 					    bne VWait1
   172 					.endif
   173 				.endm
   174 				;
   175 				;**************************************************************************************************
   176 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   177 				; (maximum limit is different on PAL: 155)
   178 				;**************************************************************************************************
   179 				;
   180 				.macro VcountWaitUntilEnter
   181 					.if :0 <> 2 .or :1 >= :2
   182 						.error "VcountWaitUntilEnter error"
   183 					.else
   184 				VWait1	lda VCOUNT
   185 						cmp #:1
   186 						beq VExit
   187 					    bcc VWait1								; VCOUNT < :1
   188 						cmp #:2
   189 						beq VExit
   190 					    bcs VWait1								; VCOUNT >= :2
   191 				VExit
   192 					.endif
   193 				.endm
   194 				;
   195 				;**************************************************************************************************
   196 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   197 				; (maximum limit is different on PAL: 155)
   198 				;**************************************************************************************************
   199 				;
   200 				.macro VcountWaitUntilExit
   201 					.if :0 <> 2 .or :1 >= :2
   202 						.error "VcountWaitUntilExit error"
   203 					.else
   204 				VWait1	lda VCOUNT
   205 						cmp #:1
   206 						beq VWait1
   207 					    bcc VExit								; VCOUNT < :1
   208 						cmp #:2
   209 					    bcc VWait1								; VCOUNT < :2
   210 						beq VWait1
   211 				VExit
   212 					.endif
   213 				.endm
   214 				;
   215 				;**************************************************************************************************
   216 				; MarkScanLine [0..255] [0..255]
   217 				; (mark the current scan line with a color)
   218 				;**************************************************************************************************
   219 				;
   220 				.macro MarkScanLine
   221 					.if :0 <> 0 .and :0 <> 2
   222 						.error "MarkScanLine error"
   223 					.else
   224 						.if :0 = 0
   225 							sta WSYNC
   226 				  	     	lda #255							; mark color
   227 					  	    sta COLBK
   228 							sta WSYNC
   229 				  	     	lda #0								; restore color
   230 					  	    sta COLBK
   231 						.else
   232 							sta WSYNC
   233 						    lda #:1								; mark color
   234 						    sta COLBK
   235 							sta WSYNC
   236 							lda #:2								; restore color
   237 							sta COLBK
   238 						.endif
   239 					.endif
   240 				.endm
   241 				;
   242 				;**************************************************************************************************
   243 				; MarkScanLineIfConsol [0..255] [0..255]
   244 				; (mark the current scan line with a color, if a consol key is pressed)
   245 				;**************************************************************************************************
   246 				;
   247 				.macro MarkScanLineIfConsol
   248 					.if :0 <> 0 .and :0 <> 2
   249 						.error "MarkScanLineIfConsol error"
   250 					.else
   251 						.if :0 = 0
   252 							lda CONSOL
   253 							and #%111
   254 					     	cmp #%111
   255 						    beq ExitMarkScanLineIfConsol
   256 							sta WSYNC
   257 						    lda #255							; mark color
   258 						    sta COLBK
   259 						    sta WSYNC
   260 						    lda #0								; restore color
   261 					     	sta COLBK
   262 						.else
   263 							lda CONSOL
   264 						    and #%111
   265 					     	cmp #%111
   266 						    beq ExitMarkScanLineIfConsol
   267 							sta WSYNC
   268 					     	lda #:1								; mark color
   269 						    sta COLBK
   270 					      	sta WSYNC
   271 					     	lda #:2								; restore color
   272 						    sta COLBK
   273 						.endif
   274 					.endif
   275 				
   276 				ExitMarkScanLineIfConsol
   277 				.endm
   278 				;
   279 				;**************************************************************************************************
   280 				; MarkCyclesIfConsol [0..255] [0..255]
   281 				; (mark the current scan position with a color, for some cycles)
   282 				;**************************************************************************************************
   283 				;
   284 				.macro MarkCyclesIfConsol
   285 					.if :0 = 0
   286 						lda CONSOL
   287 						and #%111
   288 						cmp #%111
   289 						beq ExitMarkCyclesIfConsol
   290 				
   291 						lda #255								; mark color
   292 						sta COLBK
   293 				
   294 						lda ($00),y								; dummy 5 cycles
   295 						lda ($00),y								; dummy 5 cycles
   296 					    lda ($00),y								; dummy 5 cycles
   297 					    lda ($00),y								; dummy 5 cycles
   298 					    lda ($00),y								; dummy 5 cycles
   299 					    lda ($00),y								; dummy 5 cycles
   300 						lda #0									; restore color
   301 					    sta COLBK
   302 					.elseif :0 = 2
   303 						lda CONSOL
   304 						and #%111
   305 						cmp #%111
   306 						beq ExitMarkCyclesIfConsol
   307 				
   308 						lda #:1									; mark color
   309 						sta COLBK
   310 				
   311 						lda ($00),y								; dummy 5 cycles
   312 					    lda ($00),y								; dummy 5 cycles
   313 					    lda ($00),y								; dummy 5 cycles
   314 					    lda ($00),y								; dummy 5 cycles
   315 					    lda ($00),y								; dummy 5 cycles
   316 					    lda ($00),y								; dummy 5 cycles
   317 				
   318 					    lda #:2									; restore color
   319 					    sta COLBK
   320 					.else
   321 						.error "MarkCyclesIfConsol error"
   322 					.endif
   323 				
   324 				ExitMarkCyclesIfConsol
   325 				.endm
   326 				;
   327 				;**************************************************************************************************
   328 				; SetBasic [0,1]
   329 				;**************************************************************************************************
   330 				;
   331 				.macro SetBasic
   332 					.if :0 <> 1
   333 						.error "SetBasic error"
   334 					.else
   335 						.if :1 = 0
   336 							lda PORTB							; deactivate Basic
   337 					        ora #%00000010
   338 					        sta PORTB
   339 						.else
   340 							lda PORTB							; activate Basic
   341 							and #%11111101
   342 							sta PORTB
   343 						.endif
   344 					.endif
   345 				.endm
   346 				;
   347 				;**************************************************************************************************
   348 				; SetOperatingSystem [0,1]
   349 				;**************************************************************************************************
   350 				;
   351 				.macro SetOperatingSystem
   352 					.if :0 <> 1
   353 						.error "SetOperatingSystem error"
   354 					.else
   355 						.if :1 = 0
   356 							lda PORTB							; deactivate Operative System
   357 							and #%11111110
   358 							sta PORTB
   359 						.else
   360 							lda PORTB							; activate Operative System
   361 							ora #%00000001
   362 							sta PORTB
   363 						.endif
   364 					.endif
   365 				.endm
   366 				;
   367 				;**************************************************************************************************
   368 				; EnableBasic
   369 				;**************************************************************************************************
   370 				;
   371 				.macro EnableBasic
   372 					.if :0 <> 0
   373 						.error "EnableBasic error"
   374 					.else
   375 						SetBasic 1
   376 					.endif
   377 				.endm
   378 				;
   379 				;**************************************************************************************************
   380 				; DisableBasic
   381 				;**************************************************************************************************
   382 				;
   383 				.macro DisableBasic
   384 					.if :0 <> 0
   385 						.error "DisableBasic error"
   386 					.else
   387 						SetBasic 0
   388 					.endif
   389 				.endm
   390 				;
   391 				;**************************************************************************************************
   392 				; EnableOperatingSystem
   393 				;**************************************************************************************************
   394 				;
   395 				.macro EnableOperatingSystem
   396 					.if :0 <> 0
   397 						.error "EnableOperatingSystem error"
   398 					.else
   399 						SetOperatingSystem 1
   400 					.endif
   401 				.endm
   402 				;
   403 				;**************************************************************************************************
   404 				; DisableOperatingSystem
   405 				;**************************************************************************************************
   406 				;
   407 				.macro DisableOperatingSystem
   408 					.if :0 <> 0
   409 						.error "DisableOperatingSystem error"
   410 					.else
   411 						SetOperatingSystem 0
   412 					.endif
   413 				.endm
   414 				;
   415 				;**************************************************************************************************
   416 				; EnableNormalInterrupts
   417 				;**************************************************************************************************
   418 				;
   419 				.macro EnableNormalInterrupts
   420 					.if :0 <> 0
   421 						.error "EnableNormalInterrupts error"
   422 					.else
   423 						cli
   424 						lda #$40								; VBI interrupt
   425 						sta NMIEN
   426 					.endif
   427 				.endm
   428 				;
   429 				;**************************************************************************************************
   430 				; DisableNormalInterrupts
   431 				;**************************************************************************************************
   432 				;
   433 				.macro DisableNormalInterrupts
   434 					.if :0 <> 0
   435 						.error "DisableNormalInterrupts error"
   436 					.else
   437 						sei
   438 						lda #0
   439 						sta IRQEN
   440 						sta NMIEN
   441 					.endif
   442 				.endm
   443 				;
   444 				;**************************************************************************************************
   445 				; ClearSystem
   446 				;**************************************************************************************************
   447 				;
   448 				.macro ClearSystem
   449 					.if :0 <> 0
   450 						.error "ClearSystem error"
   451 					.else
   452 						
   453 						clc
   454 					    cld
   455 						sei
   456 				
   457 					    lda #0									; clear interrupts and screen
   458 					    sta IRQEN	
   459 					    sta NMIEN
   460 					    sta DMACTL
   461 					    sta COLBK
   462 				      	sta GRACTL								; clear P/M
   463 						sta GRAFP0
   464 						sta GRAFP1
   465 						sta GRAFP2
   466 						sta GRAFP3
   467 						sta GRAFM
   468 				
   469 						sta HPOSP0
   470 					    sta HPOSP1
   471 					    sta HPOSP2
   472 					    sta HPOSP3
   473 					    sta HPOSM0
   474 					    sta HPOSM1
   475 					    sta HPOSM2
   476 					    sta HPOSM3
   477 				
   478 					    sta PRIOR								; clear GTIA also
   479 				
   480 					    sta AUDCTL								; clear sound
   481 						sta AUDC1
   482 					    sta AUDC2
   483 					    sta AUDC3
   484 					    sta AUDC4
   485 				
   486 					    lda #3
   487 					    sta SKCTL
   488 					    
   489 					.endif
   490 				.endm
   491 				;
   492 				;**************************************************************************************************
   493 				; SetDisplayListAddress [word]
   494 				; (use when the screen is not being displayed!)
   495 				; (remember to not cross the 1K limit..)
   496 				;**************************************************************************************************
   497 				;
   498 				.macro SetDisplayListAddress
   499 					.if :0 <> 1
   500 						.error "SetDisplayListAddress error"
   501 					.else
   502 						SetVector DLISTL, :1
   503 					.endif
   504 				.endm
   505 				;
   506 				;**************************************************************************************************
   507 				; SetDisplayListInterrupt
   508 				;**************************************************************************************************
   509 				;
   510 				.macro SetDisplayListInterrupt
   511 					.if :0 <> 1
   512 						.error "SetDisplayListInterrupt error"
   513 					.else
   514 						SetVector NMIH_VECTOR, :1
   515 					.endif
   516 				.endm
   517 				;
   518 				;**************************************************************************************************
   519 				; SetFontAddress [word]
   520 				; (remember that this transform to a page a number)
   521 				;**************************************************************************************************
   522 				;
   523 				.macro SetFontAddress
   524 					.if :0 <> 1
   525 						.error "SetFontAddress error"
   526 					.else
   527 						lda #>:1
   528 					    sta CHBASE
   529 					.endif
   530 				.endm
   531 				;
   532 				;**************************************************************************************************
   533 				; SetPMBaseAddress [word]
   534 				; (remember that this transform to a page a number)
   535 				;**************************************************************************************************
   536 				;
   537 				.macro SetPMBaseAddress
   538 				   .if :0 <> 1
   539 				      .error "SetPMBaseAddress error"
   540 				   .else
   541 				      lda #>:1
   542 				      sta PMBASE
   543 				   .endif
   544 				.endm
   545
   546 				;
   547 				;**************************************************************************************************
   548 				; NullZeroPage [zeroPageAddress] [size]
   549 				;**************************************************************************************************
   550 				;
   551 				.macro NullZeroPage
   552 				zpage = $FE
   553 					.if :0 <> 2
   554 						.error "NullZeroPage error"
   555 					.else
   556 						lda #<:1
   557 						sta zpage
   558 						
   559 						ldy :2
   560 						lda #$00
   561 				loop
   562 						sta (zpage),y
   563 						dey
   564 						bne loop		
   565 					.endif	
   566 				.endm
   567
   568 				;
   569 				;**************************************************************************************************
   570 				; SetMemory [address] [bytes] [value]
   571 				;**************************************************************************************************
   572 				;
   573 				.macro SetMemory
   574 				
   575 				; warning, using some page zero memory
   576 				setMemPtr		= $FE
   577 				setMemCounter	= $FC
   578 				
   579 					.if :0 <> 3
   580 						.error "SetMemory error"
   581 					.else
   582 						ldy #0
   583 						lda #<:1
   584 						sta setMemPtr
   585 						lda #>:1
   586 						sta setMemPtr+1
   587 				
   588 						.if :2 < $0100
   589 							lda #:3
   590 				
   591 				setMemLoop1
   592 							sta (setMemPtr),y
   593 							iny
   594 					        cpy #:2
   595 					        bne setMemLoop1
   596 				
   597 						.else
   598 							lda #<:2
   599 							sta setMemCounter
   600 							lda #>:2
   601 							sta setMemCounter+1
   602 				
   603 				setMemLoop2
   604 							lda #:3
   605 							sta (setMemPtr),y
   606 							iny
   607 							bne setMemB1
   608 							inc setMemPtr+1
   609 				
   610 				setMemB1
   611 							lda setMemCounter
   612 							bne setMemB2
   613 							dec setMemCounter+1
   614 				
   615 				setMemB2
   616 							dec setMemCounter
   617 							lda setMemCounter
   618 							ora setMemCounter+1
   619 							bne setMemLoop2
   620 						.endif
   621 					.endif
   622 				.endm
   623 				;
   624 				;**************************************************************************************************
   625 				; SetMemoryRandom [address] [bytes]
   626 				;**************************************************************************************************
   627 				;
   628 				.macro SetMemoryRandom
   629 				
   630 				; warning, using some page zero memory
   631 				setMemRPtr		= $FE
   632 				setMemRCounter	= $FC
   633 				
   634 				   .if :0 <> 2
   635 				      .error "SetMemoryRandom error"
   636 				   .else
   637 				      ldy #0
   638 				      lda #<:1
   639 				      sta setMemRPtr
   640 				      lda #>:1
   641 				      sta setMemRPtr+1
   642 						
   643 						.if :2 < $0100
   644 				
   645 				setMemRLoop1
   646 				         	lda RANDOM
   647 				         	sta (setMemRPtr),y
   648 				         	iny
   649 				         	cpy #:2
   650 				         	bne setMemRLoop1
   651 						.else
   652 				        	lda #<:2
   653 				         	sta setMemRCounter
   654 				         	lda #>:2
   655 				         	sta setMemRCounter+1
   656 				
   657 				setMemRLoop2
   658 				         	lda RANDOM
   659 				         	sta (setMemRPtr),y
   660 				         	iny
   661 				         	bne setMemRB1
   662 				         	inc setMemRPtr+1
   663 				
   664 				setMemRB1
   665 				         	lda setMemRCounter
   666 				         	bne setMemRB2
   667 				         	dec setMemRCounter+1
   668 				
   669 				setMemRB2
   670 				         	dec setMemRCounter
   671 				         	lda setMemRCounter
   672 				         	ora setMemRCounter+1
   673 				         	bne setMemRLoop2
   674 					
   675 						.endif
   676 					.endif
   677 				.endm
   678 				;
   679 				;**************************************************************************************************
   680 				; ClampMemory [address] [bytes] [min value] [max value]
   681 				;**************************************************************************************************
   682 				;
   683 				.macro ClampMemory
   684 				
   685 				; warning, using some page zero memory
   686 				clampMemPtr		= $FE
   687 				clampMemCounter	= $FC
   688 				
   689 					.if :0 <> 4
   690 						.error "ClampMemory error"
   691 					.else
   692 						ldy #0
   693 						lda #<:1
   694 						sta clampMemPtr
   695 						lda #>:1
   696 						sta clampMemPtr+1
   697 				
   698 						.if :2 < $0100
   699 				
   700 				clampMemLoop1
   701 							lda (clampMemPtr),y
   702 					        cmp #:3
   703 					        bcs clampMemB3		; if >= min then continue
   704 					        lda #:3
   705 					        jmp clampMemB4
   706 				
   707 				clampMemB3
   708 					        cmp #:4
   709 					        bcc clampMemB4		; if < max then continue
   710 					        lda #:4
   711 				
   712 				clampMemB4
   713 					        sta (clampMemPtr),y
   714 							iny
   715 					        cpy #:2
   716 					        bne clampMemLoop1
   717 				
   718 						.else
   719 					    
   720 					    	lda #<:2
   721 					        sta clampMemCounter
   722 					        lda #>:2
   723 					        sta clampMemCounter+1
   724 				
   725 				clampMemLoop2
   726 					        lda (clampMemPtr),y
   727 					        cmp #:3
   728 					        bcs clampMemB5		; if >= min then continue
   729 					        lda #:3
   730 					        jmp clampMemB6
   731 				
   732 				clampMemB5
   733 					        cmp #:4
   734 					        bcc clampMemB6		; if < max then continue
   735 					        lda #:4
   736 				
   737 				clampMemB6
   738 					        sta (clampMemPtr),y
   739 					        iny
   740 					        bne clampMemB1
   741 					        inc clampMemPtr+1
   742 				
   743 				clampMemB1
   744 					        lda clampMemCounter
   745 					        bne clampMemB2
   746 					        dec clampMemCounter+1
   747 				
   748 				clampMemB2
   749 					        dec clampMemCounter
   750 				         	lda clampMemCounter
   751 					        ora clampMemCounter+1
   752 					        bne clampMemLoop2
   753 						.endif
   754 					.endif
   755 				.endm
   756 				;
   757 				;**************************************************************************************************
   758 				; AndMemory [address] [bytes] [value]
   759 				;**************************************************************************************************
   760 				.macro AndMemory
   761 				
   762 				; warning, using some page zero memory
   763 				andMemPtr		= $FE
   764 				andMemCounter	= $FC
   765 				
   766 					.if :0 <> 3
   767 						.error "AndMemory error"
   768 				   .else
   769 				      	ldy #0
   770 					    lda #<:1
   771 					    sta andMemPtr
   772 					    lda #>:1
   773 					    sta andMemPtr+1
   774 				
   775 					    .if :2 < 256
   776 				andMemLoop1
   777 					    
   778 					    	lda (andMemPtr),y
   779 					        and #:3
   780 					        sta (andMemPtr),y
   781 					        iny
   782 					        cpy #:2
   783 					        bne andMemLoop1
   784 				
   785 					     .else
   786 					     
   787 					        lda #<:2
   788 					        sta andMemCounter
   789 					        lda #>:2
   790 					        sta andMemCounter+1
   791 				
   792 				andMemLoop2
   793 					        lda (andMemPtr),y
   794 					        and #:3
   795 					        sta (andMemPtr),y
   796 					        iny
   797 					        bne andMemB1
   798 					        inc andMemPtr+1
   799 				andMemB1
   800 					        lda andMemCounter
   801 					        bne andMemB2
   802 					        dec andMemCounter+1
   803 				
   804 				andMemB2
   805 							dec andMemCounter
   806 					        lda andMemCounter
   807 					        ora andMemCounter+1
   808 					        bne andMemLoop2
   809 					  	.endif
   810 					.endif
   811 				.endm
   812 				;
   813 				;**************************************************************************************************
   814 				; CopyMemory [source address] [dest address] [bytes]
   815 				;**************************************************************************************************
   816 				;
   817 				.macro CopyMemory
   818 				
   819 				; warning, using some page zero memory
   820 				copyMemPtr1		= $FE
   821 				copyMemPtr2		= $FC
   822 				copyMemCounter	= $FA
   823 				
   824 				   .if :0 <> 3
   825 						.error "CopyMemory error"
   826 				   .else
   827 					    ldy #0
   828 					    lda #<:1
   829 					    sta copyMemPtr1
   830 					    lda #>:1
   831 					    sta copyMemPtr1+1
   832 				
   833 					    lda #<:2
   834 					    sta copyMemPtr2
   835 					    lda #>:2
   836 					    sta copyMemPtr2+1
   837 					
   838 						.if :3 < $0100
   839 				
   840 				copyMemLoop1
   841 					      	lda (copyMemPtr1),y
   842 					       	sta (copyMemPtr2),y
   843 					       	iny
   844 					       	cpy #:3
   845 					       	bne copyMemLoop1
   846 				
   847 					   	.else
   848 					      	
   849 					       	lda #<:3
   850 					       	sta copyMemCounter
   851 					       	lda #>:3
   852 					       	sta copyMemCounter+1
   853 				
   854 				copyMemLoop2
   855 				        	lda (copyMemPtr1),y
   856 				        	sta (copyMemPtr2),y
   857 				        	iny
   858 				        	bne copyMemB1
   859 				        	inc copyMemPtr1+1
   860 				        	inc copyMemPtr2+1
   861 				copyMemB1
   862 				         	lda copyMemCounter
   863 				         	bne copyMemB2
   864 				         	dec copyMemCounter+1
   865 				
   866 				copyMemB2
   867 				         	dec copyMemCounter
   868 				         	lda copyMemCounter
   869 				         	ora copyMemCounter+1
   870 				         	bne copyMemLoop2
   871 				
   872 				     	.endif
   873 					.endif
   874 				.endm
    42 					
    43 				;***** Memory Map Constants
    44 = 0080			ZeroPageAddress				= $0080				; zero page area
    45 = 2000			CodeAddress					= $2000				; start of user code base
    46
    47 = 0600			GameDLAddress				= $0600				; 176 bytes for display list
    48 = 06B0			HudAddress					= $06B0				; 80 bytes for Heads up display
    49
    50 = A000			PmAddress					= $A000				; 2K player missile base address
    51 = A800			GameFontAddress				= $A800				; 1K game tile fonts
    52 = AC00			TextFontAddress				= $AC00				; 1K text fonts
    53
    54 = B000			GameScrnAddress				= $B000				; 4k game scren memory address
    55
    56 = 0000			DebugOn						= $00
    57
    58 				;*****	Zero Page / Constants include
    59 				;
    60 						icl "ZeroPageConsts.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\ZeroPageConsts.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		ZeroPageConsts.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 27, 2018 11:30 AM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;***** Zero Page Variables
    14 				;
    15 						org ZeroPageAddress						; Addreaa of zero page
    16
    17 				_saveRegA					org *+$01			; save reg A
    18 				_saveRegX					org *+$01			; save reg X
    19 				_saveRegY					org *+$01			; save reg Y
    20
    21 				_dliSaveA					org *+$01			; DLI save reg A
    22 				_dliSaveX					org *+$01			; DLI save reg X
    23 				_dliSaveY					org *+$01			; DLI save reg Y	
    24
    25 				_param00					org *+$01			; Parameter 0 for subroutines
    26 				_param01					org *+$01			; Parameter 1 for subroutines
    27 				_param02					org *+$01			; Parameter 2 for subroutines
    28 				_param03					org *+$01			; Parameter 3 for subroutines
    29 				_param04					org *+$01			; Parameter 4 for subroutines
    30 				_param05					org *+$01			; Parameter 5 for subroutines
    31 				_param06					org *+$01			; Parameter 6 for subroutines
    32 				_param07					org *+$01			; Parameter 7 for subroutines
    33
    34
    35 				_hitRegister				org *+$08			; state of P0PF,P1PF,P2PF,P3PF,M0PL,M1PL,M2PL,M3PL 
    36 				_currLevelNum				org *+$01
    37
    38 				_levelCharSizeX				org *+$01			; char size X goes from 1 to 255 characters, 0 = 256 characters
    39 				_levelCharSizeY				org *+$01			; char size Y goes from 1 to 255 characters, 0 = 256 characters
    40
    41 				_levelSizeX_H2				org *+$01
    42 				_levelSizeX_H1				org *+$01
    43
    44 				_levelSizeY_H2				org *+$01
    45 				_levelSizeY_H1				org *+$01
    46
    47 				_levelWindowX_H2			org *+$01
    48 				_levelWindowX_H1			org *+$01
    49
    50 				_levelWindowY_H2			org *+$01
    51 				_levelWindowY_H1			org *+$01
    52
    53 				_missleBaseColor			org *+$04
    54 				_playerBaseColor			org *+$04
    55
    56 				_redrawPlayerCounter		org *+$01
    57
    58 				_playerLevelLeftX_H2		org *+$01			; left side coordinate
    59 				_playerLevelLeftX_H1		org *+$01
    60 				_playerLevelLeftX_L1		org *+$01
    61
    62 				_playerLevelRightX_H2		org *+$01			; right side coordinate
    63 				_playerLevelRightX_H1		org *+$01
    64 				_playerLevelRightX_L1		org *+$01
    65
    66 				_playerLevelTopY_H2			org *+$01			; top line coordinate
    67 				_playerLevelTopY_H1			org *+$01
    68 				_playerLevelTopY_L1			org *+$01
    69
    70 				_playerLevelBottomY_H2		org *+$01			; bottom line coordinate
    71 				_playerLevelBottomY_H1		org *+$01
    72 				_playerLevelBottomY_L1		org *+$01
    73
    74
    75 				_playerScreenLeftX			org *+$01
    76 				_playerScreenTopY			org *+$01
    77
    78 				_oldPlayerScreenLeftX		org *+$01
    79 				_oldPlayerScreenTopY		org *+$01
    80
    81 				_playerSizeX				org *+$01
    82 				_playerSizeY				org *+$01
    83
    84 				_playerSizeXMinusOne		org *+$01
    85 				_playerSizeYMinusOne		org *+$01
    86
    87 				_playerSideSpeed_H1			org *+$01
    88 				_playerSideSpeed_L1			org *+$01
    89
    90 				_playerMaxSideSpeed_H1		org *+$01
    91 				_playerMaxSideSpeed_L1		org *+$01
    92
    93 				_playerSideAccel_H1			org *+$01
    94 				_playerSideAccel_L1			org *+$01
    95
    96 				_playerSideDeaccel_H1		org *+$01
    97 				_playerSideDeaccel_L1		org *+$01
    98
    99 				_playerSpeedY_H1			org *+$01
   100 				_playerSpeedY_L1			org *+$01
   101
   102 				_playerJumpSpeed_H1			org *+$01
   103 				_playerJumpSpeed_L1			org *+$01
   104
   105 				_playerMaxFallSpeed_H1		org *+$01
   106 				_playerMaxFallSpeed_L1		org *+$01
   107
   108 				_playerGravityAccel_H1		org *+$01
   109 				_playerGravityAccel_L1		org *+$01
   110
   111 				_playerWaterAccelY_H1		org *+$01
   112 				_playerWaterAccelY_L1		org *+$01
   113
   114 				_playerMaxWaterSpeedY_H1	org *+$01
   115 				_playerMaxWaterSpeedY_L1	org *+$01
   116
   117 				_playerMoveWaterSpeedY_H1	org *+$01
   118 				_playerMoveWaterSpeedY_L1	org *+$01
   119
   120 				_playerNoJumpTimer			org *+$01			; for now this is used to disable the jump for some frames, after entering the water
   121 				_playerHoldJumpCounter		org *+$01
   122
   123 				_lastPlayerSideDirection	org *+$01			; 0 - none, 1 - right, 2 - left
   124 				_lastPlayerShootDirection	org *+$01
   125
   126 				_playerOverPlatformFlag		org *+$01			; is player over platform
   127 				_playerTopCollisionFlag		org *+$01			; did player hit top
   128 				_playerSideCollisionFlag	org *+$01			; did player hit side
   129
   130 				_playerState				org *+$01			; 0-static, 1-over platform, 2-jumping up, 3-falling, 4-climbing, 5-in water, 6-gravity test
   131 				_oldPlayerState				org *+$01
   132
   133 				_stick0						org *+$01
   134 				_oldStick0					org *+$01
   135 				_oldTrigger0				org *+$01
   136 				_triggerState				org *+$01			; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
   137 				_currentTrigger0			org *+$01
   138 				_pageZeroTempValue			org *+$01
   139
   140 				_ptrLevelAddr				org *+$02
   141 				_ptrLevelLine				org *+$02
   142 				_preLevelLineAddr			org *+$02
   143 				_currentLineAddress			org *+$02
   144 				_pageZeroTempPointer		org *+$02
   145 				_playerMethodPointer		org *+$02
   146
   147 				.PRINT "Zero Page Start : ", ZeroPageAddress, " Zero Page Length : ", * - ZeroPageAddress
   147 				Zero Page Start : $0080 Zero Page Length : $006F
   148
   149 				;***** Contstants definitions
   150 				;
   151 				;PAL_VERSION					= 1				; uncomment of PAL Version
   152
   153 = A300			Missile0					= PmAddress + $0300	; missiles addreaa
   154 = A400			Player0						= PmAddress + $0400	; player zero
   155 = A500			Player1						= PmAddress + $0500	; player one
   156 = A600			Player2						= PmAddress + $0600	; player two
   157 = A700			Player3						= PmAddress + $0700	; player three
   158 				 
   159 = 0003			GRACTL_OPTIONS				= [ENABLE_MISSILES 	| ENABLE_PLAYERS]
   160 = 0031			PRIOR_OPTIONS				= [PM_PRIORITY_1   	| FIFTH_PLAYER        			| MULTICOLOR_PM]	
   161 = 003E			DMACTL_OPTIONS				= [ENABLE_DL_DMA 	| PLAYFIELD_WIDTH_NORMAL_MASK 	| ENABLE_PM_DMA 	| PM_1LINE_RESOLUTION] 
   162 				   
   163
   164 = 0028			MAX_ROWS					= 40
   165
   166 = 0008			PLR_WIDTH					= 8
   167 = 0015			PLR_HEIGHT					= 21
   168
   169 = 0004			CHAR_PIXELS_X				= 4
   170 = 0008			CHAR_PIXELS_Y				= 8
   171
   172 = 0029			LEVEL_CHAR_SIZE_X			= 41				; max level size now should be 256 x 255 lines	
   173 = 0018			LEVEL_CHAR_SIZE_Y			= 24
   174
   175 = 0028			WINDOW_CHAR_SIZE_X			= 40
   176 = 0018			WINDOW_CHAR_SIZE_Y			= 24
   177
   178 = 0030			PM_BASE_SCREEN_X			= 48
   179 = 0020			PM_BASE_SCREEN_Y			= 32
   180
   181 = 0000			PSD_NONE					= 0					; player side direction
   182 = 0001			PSD_RIGHT					= 1
   183 = 0002			PSD_LEFT					= 2
   184
   185 = 0000			PS_STATIC					= 0					; player states
   186 = 0001			PS_OVER_PLATFORM			= 1
   187 = 0002			PS_JUMPING					= 2
   188 = 0003			PS_FALLING					= 3
   189 = 0004			PS_CLIMBING					= 4
   190 = 0005			PS_IN_WATER					= 5
   191 = 0006			PS_GRAVITY_TEST				= 6
   192 = 0007			PS_LOSE						= 7
   193
   194 = 0000			CT_BLANK					= 0					; character types
   195 = 0001			CT_BLOCK					= 1
   196 = 0002			CT_COLLECTABLE				= 2
   197 = 0003			CT_DANGER					= 3
   198 = 0004			CT_LADDER					= 4
   199 = 0005			CT_WATER					= 5
   200 = 0001			CT_FLOATPLATFORM			= 1
   201
   202 = 0000			TS_NOT_PRESSED				= 0					; trigger states
   203 = 0000			TS_JUST_RELEASED			= 0
   204 = 0000			TS_PRESSED					= 0
   205 = 0000			TS_JUST_PRESSED				= 0
   206
   207 = 0020			ENEMY_SHOOT_DELTA_Y			= 32
   208
   209 				.ifndef PAL_VERSION
   210
   211 = 0006				TENTH_OF_SECOND_FRAMES	= 6
   212 = 0001				MINIMUM_CAMERA_STEP		= 1
   213 = 0008				JUMP_HOLD_FRAMES		= 8
   214 = 0040				JUMP_HSPEED_SLOWDOWN	= 64
   215 = 001E				WATER_NO_JUMP_FRAMES	= 30
   216
   217 = 0001				SIDE_SPEED_LAND_H1		= 1					; 001.160 --> 97.5 pixels per second (at 60 fps only!)
   218 = 0002				SIDE_SPEED_LAND_L1		= 2	;64
   219 					
   220 = 0000				SIDE_ACCEL_LAND_H1		= 0					; 6 frames (at 60 fps only!) or 0.x seconds, to reach max speed
   221 = 0020				SIDE_ACCEL_LAND_L1		= 32
   222 					
   223 = 0000				SIDE_DEACCEL_LAND_H1	= 0					; 3 frames (at 60 fps only!) or 0.x seconds, to reach zero speed
   224 = 0080				SIDE_DEACCEL_LAND_L1	= 128
   225
   226 = 0000				SIDE_SPEED_WATER_H1		= 0
   227 = 0080				SIDE_SPEED_WATER_L1		= 128
   228
   229 = 0000				SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 60 fps only!) or _ seconds, to reach max speed
   230 = 0004				SIDE_ACCEL_WATER_L1		= 4
   231
   232 = 0000				SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 60 fps only!) or _ seconds, to reach zero speed
   233 = 0004				SIDE_DEACCEL_WATER_L1	= 4
   234
   235 = 0001				SIDE_SPEED_AIR_H1		= 1					; 001.120 --> 88.125 pixels per second (at 60 fps only!)
   236 = 0020				SIDE_SPEED_AIR_L1		= 32
   237
   238 = 0000				SIDE_ACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach max speed
   239 = 0010				SIDE_ACCEL_AIR_L1		= 16
   240
   241 = 0000				SIDE_DEACCEL_AIR_H1		= 0					; 17.3 frames (at 60 fps only!) or 0.288 seconds, to reach zero speed
   242 = 0010				SIDE_DEACCEL_AIR_L1		= 16
   243
   244 = 0000				CLIMB_UP_SPEED_Y_H1		= 0
   245 = 00E0				CLIMB_UP_SPEED_Y_L1		= 224
   246
   247 = 0001				CLIMB_DOWN_SPEED_Y_H1	= 1
   248 = 0080				CLIMB_DOWN_SPEED_Y_L1	= 128
   249
   250 = 0280				PLAYER_MISSILE_SPEED_X	= 2*256+128
   251 = 0200				ENEMY_MISSILE_SPEED_X	= 2*256
   252 = 0078				ENEMY_INIT_TIMER		= 120
   253 = 003C				VLASER_DISABLED_INDEX	= 60
   254
   255 				.else
   256
   257 					TENTH_OF_SECOND_FRAMES	= 5
   258 					MINIMUM_CAMERA_STEP		= 1
   259 					JUMP_HOLD_FRAMES		= 6					; 6.67 for pal
   260 					JUMP_HSPEED_SLOWDOWN	= 77
   261 					WATER_NO_JUMP_FRAMES	= 25
   262
   263 					SIDE_SPEED_LAND_H1		= 1					;  pixels per second (at 50 fps only!)
   264 					SIDE_SPEED_LAND_L1		= 128
   265
   266 					SIDE_ACCEL_LAND_H1		= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach max speed
   267 					SIDE_ACCEL_LAND_L1		= 38
   268
   269 					SIDE_DEACCEL_LAND_H1	= 0					;  frames (at 50 fps only!) or 0.x seconds, to reach zero speed
   270 					SIDE_DEACCEL_LAND_L1	= 154
   271
   272 					SIDE_SPEED_WATER_H1		= 0
   273 					SIDE_SPEED_WATER_L1		= 154
   274
   275 					SIDE_ACCEL_WATER_H1		= 0					; _ frames (at 50 fps only!) or _ seconds, to reach max speed
   276 					SIDE_ACCEL_WATER_L1		= 5
   277
   278 					SIDE_DEACCEL_WATER_H1	= 0					; _ frames (at 50 fps only!) or _ seconds, to reach zero speed
   279 					SIDE_DEACCEL_WATER_L1	= 5
   280
   281 					SIDE_SPEED_AIR_H1		= 1					;  pixels per second (at 50 fps only!)
   282 					SIDE_SPEED_AIR_L1		= 90
   283 					
   284 					SIDE_ACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach max speed
   285 					SIDE_ACCEL_AIR_L1		= 19
   286
   287 					SIDE_DEACCEL_AIR_H1		= 0					;  frames (at 50 fps only!) or  seconds, to reach zero speed
   288 					SIDE_DEACCEL_AIR_L1		= 19
   289
   290 					CLIMB_UP_SPEED_Y_H1		= 1
   291 					CLIMB_UP_SPEED_Y_L1		= 13
   292
   293 					CLIMB_DOWN_SPEED_Y_H1	= 1
   294 					CLIMB_DOWN_SPEED_Y_L1	= 205
   295
   296 					PLAYER_MISSILE_SPEED_X	= 3*256
   297 					ENEMY_MISSILE_SPEED_X	= 2*256+104
   298 					ENEMY_INIT_TIMER		= 100
   299 					VLASER_DISABLED_INDEX	= 50
   300
   301 				.endif
   302
    61 						
    62 				;
    63 				;**************************************************************************************************
    64 				;
    65 				;	Main
    66 				;
    67 				;		System Entry Point		
    68 				;
    69 				;**************************************************************************************************
    70 				;
    71 						org CodeAddress							; Address of code base
    72
    73 				Main	
    74
    75 				;***** Check for system TV display
    76 				;
    77 FFFF> 2000-450C> AD 14 + 		lda PAL
    78 2003 29 0E				and #14
    79 						
    80 				.if .def PAL_VERSION							; make sure we are on the rigth display
    81 				NO_PAL_loop
    82 						bne NO_PAL_loop
    83 				.else
    84 2005			NO_NTSC_loop
    85 2005 F0 FE				beq NO_NTSC_loop
    86 				.endif
    87
    88 2007					ClearSystem								; clear Atari Hardware on start up
Macro: CLEARSYSTEM [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     5 2007 18					clc
     6 2008 D8				    cld
     7 2009 78					sei
     9 200A A9 00			    lda #0									; clear interrupts and screen
    10 200C 8D 0E D2			    sta IRQEN	
    11 200F 8D 0E D4			    sta NMIEN
    12 2012 8D 00 D4			    sta DMACTL
    13 2015 8D 1A D0			    sta COLBK
    14 2018 8D 1D D0		      	sta GRACTL								; clear P/M
    15 201B 8D 0D D0				sta GRAFP0
    16 201E 8D 0E D0				sta GRAFP1
    17 2021 8D 0F D0				sta GRAFP2
    18 2024 8D 10 D0				sta GRAFP3
    19 2027 8D 11 D0				sta GRAFM
    21 202A 8D 00 D0				sta HPOSP0
    22 202D 8D 01 D0			    sta HPOSP1
    23 2030 8D 02 D0			    sta HPOSP2
    24 2033 8D 03 D0			    sta HPOSP3
    25 2036 8D 04 D0			    sta HPOSM0
    26 2039 8D 05 D0			    sta HPOSM1
    27 203C 8D 06 D0			    sta HPOSM2
    28 203F 8D 07 D0			    sta HPOSM3
    30 2042 8D 1B D0			    sta PRIOR								; clear GTIA also
    32 2045 8D 08 D2			    sta AUDCTL								; clear sound
    33 2048 8D 01 D2				sta AUDC1
    34 204B 8D 03 D2			    sta AUDC2
    35 204E 8D 05 D2			    sta AUDC3
    36 2051 8D 07 D2			    sta AUDC4
    38 2054 A9 03			    lda #3
    39 2056 8D 0F D2			    sta SKCTL
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
    89 2059					DisableBasic							; No need for basic 
Macro: DISABLEBASIC [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     5 2059 AD 01 D3					lda PORTB							; deactivate Basic
     6 205C 09 02			        ora #%00000010
     7 205E 8D 01 D3			        sta PORTB
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
    90 2061					DisableOperatingSystem					; No need for the operating system
Macro: DISABLEOPERATINGSYSTEM [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     5 2061 AD 01 D3					lda PORTB							; deactivate Operative System
     6 2064 29 FE					and #%11111110
     7 2066 8D 01 D3					sta PORTB
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
    91
    92 2069					SetRamTop #32							; Should get us $2000 - $9FFF (32K)
Macro: SETRAMTOP [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 2069 A5 6A		   		lda RAMTOP
     5 206B 38					sec
     6 206C E9 20				sbc #32
     7 206E 85 6A				sta RAMTOP
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
    93 						
    94 2070 20 97 23				jsr InitAddresses						; set up the DLI, DL, PM addresses 
    95 						
    96 2073 20 B8 23				jsr InitVars							; initialize the vars
    97 2076 20 76 25				jsr InitLevelTable						; initialize the screen address tables
    98
    99 2079 20 6E 23				jsr InitHardware						; set up the Atari Hardware
   100 								
   101 207C A9 00				lda #$00								; set up the current level
   102 207E 85 96				sta _currLevelNum						 		
   103 2080 85 86				sta _param00							
   104
   105 2082 20 F2 24				jsr LoadGameLevel						; call the method to draw the screen
   106 2085 20 6C 24				jsr SetSpawnPos							; set the players initial position
   107
   108 				;*****	GameLoop
   109 				;
   110 2088			GameLoop
   111 						
   112 2088 20 8D 21				jsr CheckInput
   113 208B 20 0A 21				jsr UpdateTimers
   114 208E 6C ED 00				jmp (_playerMethodPointer)
   115 					
   116 				;*****	PlayerMethodReturn
   117 				;
   118 2091			PlayerMethodReturn
   119 2091 4C 9A 20				jmp PlayerNormalStates
   120 						
   121 				;*****	Player Method Lose Return
   122 2094			PlayerMethodLoseReturn
   123
   124 2094 A5 DB				lda _playerState
   125 2096 C9 07				cmp #PS_LOSE
   126 2098 F0 4B				beq PlayerEndStates				
   127 							
   128 				;*****	PlayerNormalStates	
   129 				;
   130 209A			PlayerNormalStates
   131
   132 209A A5 DC				lda _oldPlayerState
   133 209C C9 07				cmp #PS_LOSE
   134 209E D0 18				bne ContinueGame
   135
   136 20A0 A5 DB				lda _playerState
   137 20A2 85 DC				sta _oldPlayerState
   138 						
   139 20A4 A9 00				lda #$00
   140 20A6 85 A9				sta _redrawPlayerCounter		
   141 						
   142 20A8 A9 00				lda #$00
   143 20AA 85 86				sta _param00
   144 20AC 20 46 24				jsr InitPlayerInfo
   145 						
   146 20AF 20 59 2C				jsr SetPlayerScreenPos
   147 20B2 20 34 28				jsr UpdateCameraWindow		
   148 20B5 4C CA 20				jmp GameAnimations
   149 						
   150 				;*****	ContinueGame
   151 				;		
   152 20B8			ContinueGame
   153
   154 20B8 20 34 28				jsr UpdateCameraWindow		
   155 20BB 20 59 2C				jsr SetPlayerScreenPos
   156 20BE 20 B6 2A				jsr DrawPlayer
   157 					
   158 				;*****	EnemyUpdate
   159 				;
   160 20C1			EnemyUpdate
   161 						
   162 20C1 20 43 38				jsr UpdateEnemyManager
   163 					
   164 				;*****	MissilesStep
   165 				;
   166 20C4			MissilesStep
   167 						
   168 20C4 20 A4 3D				jsr UpdateMissileSystem
   169 20C7 20 9C 39				jsr DrawEnemyExplosion
   170 					
   171 				;*****	GameAnimations
   172 				;
   173 20CA			GameAnimations
   174 						
   175 20CA 20 F9 27				jsr DoFontAnimations
   176 20CD 20 A0 27				jsr UpdateCoinAnimations
   177 20D0 20 11 21				jsr UpdateInfoLine
   178
   179 20D3					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 20D3 A9 78				lda #120
     5 20D5 CD 0B D4		VWait1	cmp VCOUNT
     6 20D8 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   180 						
   181 20DA 20 C6 21				jsr CheckPMCollisions
   182 						
   183 20DD A9 00				lda #0
   184 20DF 8D 1E D0				sta HITCLR	
   185 20E2 4C 88 20				jmp GameLoop
   186 					
   187 				;*****	PlayerEndStates
   188 				;
   189 20E5			PlayerEndStates
   190
   191 20E5 A5 DB				lda _playerState
   192 20E7 85 DC				sta _oldPlayerState
   193 						
   194 20E9 20 18 2B				jsr DrawPlayerExplosion
   195 20EC 20 F9 27				jsr DoFontAnimations
   196 20EF 20 A0 27				jsr UpdateCoinAnimations
   197 20F2 20 A4 3D				jsr UpdateMissileSystem
   198 20F5 20 9C 39				jsr DrawEnemyExplosion
   199 20F8 20 11 21				jsr UpdateInfoLine
   200 					
   201 20FB					VcountWait 120
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 20FB A9 78				lda #120
     5 20FD CD 0B D4		VWait1	cmp VCOUNT
     6 2100 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   202
   203 2102 A9 00				lda #0
   204 2104 8D 1E D0				sta HITCLR	
   205 2107 4C 88 20				jmp GameLoop
   206 						
   207 				;
   208 				;**************************************************************************************************
   209 				; UpdateTimers
   210 				;**************************************************************************************************
   211 				;
   212 210A			.proc UpdateTimers
   213 						
   214 210A A5 D4				lda _playerNoJumpTimer
   215 210C F0 02				beq UT_end_no_jump
   216 210E C6 D4				dec _playerNoJumpTimer
   217 					
   218 				;************************************************
   219 				;	
   220 2110			UT_end_no_jump		
   221 						
   222 2110 60					rts
   223
   224 				.endp	
   225
   226 				;
   227 				;**************************************************************************************************
   228 				; UpdateInfoLine
   229 				;**************************************************************************************************
   230 				;
   231 2111			.proc UpdateInfoLine
   232 					
   233 2111 AD C3 40				lda _goldCounter						; assuming 99 or less
   234 2114 A0 04				ldy #4
   235 2116 20 31 23				jsr DisplayDebugInfoBinary99
   236
   237 2119 AD C4 40				lda _activeEnemies
   238 211C A0 0C				ldy #12
   239 211E 20 31 23				jsr DisplayDebugInfoBinary99
   240
   241 2121 AD C5 40				lda _disableGameTimer					; update the time here also
   242 2124 D0 66				bne UIL_exit
   243 					
   244 2126 AD C3 40				lda _goldCounter
   245 2129 D0 0A				bne UIL_update_timer
   246 						
   247 212B AD C4 40				lda _activeEnemies
   248 212E D0 05				bne UIL_update_timer
   249 					
   250 2130 A9 01				lda #1
   251 2132 8D C5 40				sta _disableGameTimer					; my record? 1:16.1 (NTSC, lost one life)
   252
   253 				;*****	allow the final update..
   254 				;
   255 2135			UIL_update_timer
   256 					
   257 2135 EE C9 40				inc _gameTSFrameCounter
   258 2138 AD C9 40				lda _gameTSFrameCounter
   259 213B C9 06				cmp #TENTH_OF_SECOND_FRAMES
   260 213D D0 35				bne UIL_draw_timer
   261 					
   262 213F A9 00				lda #0
   263 2141 8D C9 40				sta _gameTSFrameCounter
   264 2144 EE C8 40				inc _gameTimerTSeconds
   265 						
   266 2147 AD C8 40				lda _gameTimerTSeconds
   267 214A C9 0A				cmp #10
   268 214C D0 26				bne UIL_draw_timer
   269 					
   270 214E A9 00				lda #0
   271 2150 8D C8 40				sta _gameTimerTSeconds
   272 2153 EE C6 40				inc _gameTimerSeconds
   273 					
   274 2156 AD C6 40				lda _gameTimerSeconds
   275 2159 C9 3C				cmp #60
   276 215B D0 17				bne UIL_draw_timer
   277 					
   278 215D A9 00				lda #0
   279 215F 8D C6 40				sta _gameTimerSeconds
   280 2162 EE C7 40				inc _gameTimerMinutes
   281
   282 2165 AD C7 40				lda _gameTimerMinutes
   283 2168 C9 64				cmp #100
   284 216A D0 08				bne UIL_draw_timer
   285 					
   286 216C A9 01				lda #1
   287 216E 8D C5 40				sta _disableGameTimer
   288 2171 4C 8C 21				jmp UIL_exit							; final timer would be 99:99.9 in this case
   289
   290 				;*****	Draw Timer
   291 				;
   292 2174			UIL_draw_timer
   293 					
   294 2174 AD C7 40				lda _gameTimerMinutes
   295 2177 A0 14				ldy #20
   296 2179 20 31 23				jsr DisplayDebugInfoBinary99
   297 					
   298 217C AD C6 40				lda _gameTimerSeconds
   299 217F A0 17				ldy #23
   300 2181 20 31 23				jsr DisplayDebugInfoBinary99
   301 					
   302 2184 AD C8 40				lda _gameTimerTSeconds
   303 2187 A0 1A				ldy #26
   304 2189 20 52 23				jsr DisplayDebugInfoBinary9
   305
   306 				;*****	Exit
   307 				;
   308 218C			UIL_exit
   309 						
   310 218C 60					rts
   311 					
   312 				.endp	
   313
   314 				;
   315 				;**************************************************************************************************
   316 				; CheckInput
   317 				;**************************************************************************************************
   318 				;
   319 218D			.proc CheckInput
   320
   321 				;*****	Check Stick
   322 				;
   323 218D			CI_check_stick
   324 						
   325 218D A5 DD				lda _stick0
   326 218F 85 DE				sta _oldStick0
   327
   328 2191 AD 00 D3				lda PORTA
   329 2194 29 0F				and #15
   330 2196 85 DD				sta _stick0
   331
   332 				;*****	Check Shoot Right
   333 				;
   334 2198			CI_check_shoot_right
   335 						
   336 2198 C9 08				cmp #%1000								; right
   337 219A B0 07				bcs CI_check_shoot_left
   338 						
   339 219C A9 01				lda #PSD_RIGHT
   340 219E 85 D7				sta _lastPlayerShootDirection
   341 21A0 4C AB 21				jmp CI_check_trigger
   342
   343 				;*****	Check Shoot Left
   344 				;
   345 21A3			CI_check_shoot_left
   346 						
   347 21A3 29 04				and #%0100								; left
   348 21A5 D0 04				bne CI_check_trigger
   349 					
   350 21A7 A9 02				lda #PSD_LEFT
   351 21A9 85 D7				sta _lastPlayerShootDirection
   352
   353 				;*****	Check Trigger
   354 				;
   355 21AB			CI_check_trigger
   356 					
   357 21AB A5 E1				lda _currentTrigger0
   358 21AD 85 DF				sta _oldTrigger0
   359
   360 21AF AD 10 D0				lda TRIG0								; 0 - not pressed, 1 - just released, 2 - just pressed, 3 - pressed
   361 21B2 85 E1				sta _currentTrigger0	
   362 21B4 0A					asl
   363 21B5 05 DF				ora _oldTrigger0
   364 21B7 49 03				eor #%11
   365 21B9 85 E0				sta _triggerState
   366
   367 					
   368 21BB A9 03				lda #0+GRACTL_OPTIONS					; reset trigger latches	
   369 21BD 8D 1D D0				sta GRACTL								; reset triggers latch mode
   370 					
   371 21C0 A9 07				lda #4+GRACTL_OPTIONS
   372 21C2 8D 1D D0				sta GRACTL								; set triggers latch mode
   373
   374 21C5 60					rts
   375 						
   376 				.endp	
   377
   378 				;
   379 				;**************************************************************************************************
   380 				; CheckPMCollisions
   381 				;**************************************************************************************************
   382 				;
   383 21C6			.proc CheckPMCollisions
   384 					
   385 				;*****	Load all collision registers
   386 				;
   387 21C6 AD 04 D0				lda P0PF
   388 21C9 85 8E				sta _hitRegister
   389 						
   390 21CB AD 05 D0				lda P1PF
   391 21CE 85 8F				sta _hitRegister+1
   392 						
   393 21D0 AD 06 D0				lda P2PF
   394 21D3 85 90				sta _hitRegister+2
   395 						
   396 21D5 AD 07 D0				lda P3PF
   397 21D8 85 91				sta _hitRegister+3
   398 						
   399 21DA AD 08 D0				lda M0PL
   400 21DD 85 92				sta _hitRegister+4
   401 						
   402 21DF AD 09 D0				lda M1PL
   403 21E2 85 93				sta _hitRegister+5
   404 						
   405 21E4 AD 0A D0				lda M2PL
   406 21E7 85 94				sta _hitRegister+6
   407 						
   408 21E9 AD 0B D0				lda M3PL
   409 21EC 85 95				sta _hitRegister+7
   410 						
   411 				;*****	Check Missile 2 to Player 
   412 				;		
   413 21EE A5 94				lda _hitRegister+6
   414 21F0 29 03				and #%0011
   415 21F2 F0 08				beq check_p0_pf3
   416 								
   417 21F4 A2 07				ldx #PS_LOSE
   418 21F6 20 AB 33				jsr SetPlayerMethod
   419 21F9 4C 18 22				jmp CPMC_check_m0_pf0_3
   420
   421 				;*****	Check Player 0 Playfield 3
   422 				;
   423 21FC			check_p0_pf3
   424 						
   425 21FC A5 8E				lda _hitRegister
   426 21FE 29 08				and #%1000
   427 2200 F0 08				beq CPMC_check_m3_pl0
   428
   429 2202 A2 07				ldx #PS_LOSE
   430 2204 20 AB 33				jsr SetPlayerMethod
   431 2207 4C 18 22				jmp CPMC_check_m0_pf0_3
   432 						
   433 				;*****	Check Missile 3 Player 0
   434 				;
   435 220A			CPMC_check_m3_pl0
   436
   437 220A A5 95				lda _hitRegister+7
   438 220C 29 01				and #%0001
   439 220E F0 08				beq CPMC_check_m0_pf0_3
   440
   441 2210 A2 07				ldx #PS_LOSE
   442 2212 20 AB 33				jsr SetPlayerMethod
   443 2215 4C 31 22				jmp ClearPMCollisions
   444
   445 				;*****	Check Missile 0 Player 0-3
   446 				;
   447 2218			CPMC_check_m0_pf0_3
   448 					
   449 2218 A5 92				lda _hitRegister+4
   450 221A 29 09				and #%1001
   451 221C F0 08				beq CPMC_check_m1_pf0_3
   452
   453 221E A2 07				ldx #PS_LOSE
   454 2220 20 AB 33				jsr SetPlayerMethod
   455 2223 4C 31 22				jmp ClearPMCollisions
   456
   457 				;*****	Check Missile 1 Player 0-3
   458 				;
   459 2226			CPMC_check_m1_pf0_3
   460 					
   461 2226 A5 93				lda _hitRegister+5
   462 2228 29 09				and #%1001
   463 222A F0 05				beq ClearPMCollisions
   464
   465 222C A2 07				ldx #PS_LOSE
   466 222E 20 AB 33				jsr SetPlayerMethod
   467
   468 				;*****	Check PM Collisions
   469 				;
   470 2231			ClearPMCollisions
   471 					
   472 2231 20 3A 22				jsr DisplayHitRegisters
   473 						
   474 2234 A9 00				lda #0
   475 2236 8D 1E D0				sta HITCLR		
   476 						
   477 2239 60					rts
   478
   479 				.endp		
   480 					
   481 223A			.proc DisplayHitRegisters
   482
   483 				.if DebugOn = $01
   484
   485 						lda _hitRegister
   486 						ldy #40
   487 						jsr DisplayDebugInfoHexFF
   488
   489 						lda _hitRegister+1
   490 						ldy #43
   491 						jsr DisplayDebugInfoHexFF
   492
   493 						lda _hitRegister+2
   494 						ldy #46
   495 						jsr DisplayDebugInfoHexFF
   496
   497 						lda _hitRegister+3
   498 						ldy #49
   499 						jsr DisplayDebugInfoHexFF
   500
   501 						lda _hitRegister+4
   502 						ldy #52
   503 						jsr DisplayDebugInfoHexFF
   504
   505 						lda _hitRegister+5
   506 						ldy #55
   507 						jsr DisplayDebugInfoHexFF
   508
   509 						lda _hitRegister+6
   510 						ldy #58
   511 						jsr DisplayDebugInfoHexFF
   512
   513 						lda _hitRegister+7
   514 						ldy #61
   515 						jsr DisplayDebugInfoHexFF
   516 						
   517 						lda _playerScreenLeftX
   518 						ldy #64
   519 						jsr DisplayDebugInfoHexFF
   520
   521 				.endif		
   522 223A 60					rts
   523 						
   524 				.endp
   525
   526 				;***** Include Files
   527 				;
   528 223B					icl "../_8BitLibrary/sys_procs.asm"		; General system procs
Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_procs.asm
     1 				;
     2 				;***************************************************************************************************
     3 				; 	Filename:		sys_procs.asm
     4 				;
     5 				; 	Modified On:	Mon Apr 02, 2018 12:31:00 PM
     6 				;
     7 				;	Comments:		This code contains parts of the OPEN_PLAT project developed by NVR. It also
     8 				;					contains parts of the port from the C64 to Atari project ported by
     9 				;					Ken Jennings. Many thanks to both of them. 
    10 				;
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;****	Storage
    15 				;
    16 223B 00			_productLo		.byte $00 
    17 223C 00			_productHi		.byte $00 
    18 223D 00			_multiplier		.byte $00 
    19 223E 00			_multiplicand	.byte $00 
    20
    21 223F 00			_divisor		.byte $00						; DIVISOR
    22 2240 00			_quitient		.byte $00 						; QUOTIENT
    23 2241 00			_remainder		.byte $00						; REMAINDER 
    24 2242 00			_dividenLo		.byte $00						; LOW PART OF DIVIDEND
    25 2243 00			_dividendHi		.byte $00						; HIGH PART OF DIVIDEND 
    26
    27 2244			TabHexNibbleToScreenDigit
    28 2244 10 11 12 13 14 15 + 	.sb "0123456789ABCDEF"
    29
    30 2254			TabBinaryToBCD
    31 2254 00 01 02 03 04 05 + 	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
    32 225E 10 11 12 13 14 15 + 	.byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
    33 2268 20 21 22 23 24 25 + 	.byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
    34 2272 30 31 32 33 34 35 + 	.byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
    35 227C 40 41 42 43 44 45 + 	.byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49
    36 2286 50 51 52 53 54 55 + 	.byte $50, $51, $52, $53, $54, $55, $56, $57, $58, $59
    37 2290 60 61 62 63 64 65 + 	.byte $60, $61, $62, $63, $64, $65, $66, $67, $68, $69
    38 229A 70 71 72 73 74 75 + 	.byte $70, $71, $72, $73, $74, $75, $76, $77, $78, $79
    39 22A4 80 81 82 83 84 85 + 	.byte $80, $81, $82, $83, $84, $85, $86, $87, $88, $89
    40 22AE 90 91 92 93 94 95 + 	.byte $90, $91, $92, $93, $94, $95, $96, $97, $98, $99
    41
    42 				;
    43 				;***************************************************************************************************
    44 				; WaitFrame
    45 				;***************************************************************************************************
    46 				;
    47 22B8			.proc WaitFrame
    48 						
    49 22B8 A5 14				lda RTCLOK60							; get frame/jiffy counter
    50
    51 22BA			WaitTick60
    52
    53 22BA C5 14				cmp RTCLOK60							; Loop until the clock changes
    54 22BC F0 FC				beq WaitTick60		
    55 22BE 60					rts
    56 				.endp			
    57
    58 				;
    59 				;***************************************************************************************************
    60 				; MultiplyAX
    61 				;***************************************************************************************************
    62 				;
    63 22BF			.proc MultiplyAX  
    64 22BF 8D 3D 22				sta _multiplier
    65 22C2 8E 3E 22				stx _multiplicand 
    66 22C5 A9 00				lda #0 
    67 22C7 8D 3B 22				sta _productLo 
    68 22CA A2 08				ldx #8 
    69
    70 				;*************************************************
    71 				;		
    72 22CC			Loop
    73 22CC 4E 3D 22			 	lsr _multiplier 
    74 22CF 90 04				bcc NoAdd 
    75 22D1 18					clc 
    76 22D2 6D 3E 22				adc _multiplicand 
    77
    78 				;*************************************************
    79 				;
    80 22D5			NoAdd
    81 22D5 6A				 	ror 
    82 22D6 6E 3B 22				ror _productLo 
    83 22D9 CA					dex 
    84 22DA D0 F0				bne Loop 
    85 22DC 8D 3C 22				sta _productHi 
    86
    87 22DF 60					rts 
    88 				.endp
    89
    90 				;
    91 				;***************************************************************************************************
    92 				; DivideAXY
    93 				;***************************************************************************************************
    94 				;
    95 22E0			.proc DivideAXY
    96 						
    97 22E0 8E 3F 22				stx _divisor							; THE DIVISOR
    98 22E3 8C 42 22				sty _dividenLo								
    99 22E6 8D 43 22				sta _dividendHi							; ACCUMULATOR WILL HOLD DVDH
   100 				 
   101 22E9 A2 08				ldx	#$08 								; FOR AN 8-BIT DIVISOR 
   102 22EB 38					sec 
   103 22EC ED 3F 22				sbc _divisor 
   104
   105 				;************************************************
   106 				;
   107 22EF 08			DLOOP 	php										; THE LOOP THAT DIVIDES 
   108 22F0 2E 40 22				rol _quitient 
   109 22F3 0E 42 22				asl _dividenLo 
   110 22F6 2A					rol  
   111 22F7 28					plp 
   112 22F8 90 06				bcc ADDIT 
   113 22FA ED 3F 22				sbc _divisor 
   114 22FD 4C 03 23				jmp NEXT 
   115
   116 				;************************************************
   117 				;
   118 2300 6D 3F 22		ADDIT 	adc _divisor 
   119
   120 				;************************************************
   121 				;
   122 2303 CA			NEXT 	dex 
   123 2304 D0 E9				bne	DLOOP 
   124 2306 B0 04				bcs FINI 
   125 2308 6D 3F 22				ADC _divisor 
   126 230B 18					clc 
   127
   128 				;************************************************
   129 				;		
   130 230C 2E 40 22		FINI 	rol _quitient 
   131 230F 8D 41 22				sta _remainder 
   132 2312 60					rts 									; ENDIT
   133
   134 				.endp		
   135
   136 				;
   137 				;**************************************************************************************************
   138 				; DisplayDebugInfoHexFF
   139 				;
   140 				; 	display 2 digits with values from 00 to FF
   141 				; 	passs the value in A and the line row in Y
   142 				;
   143 				;**************************************************************************************************
   144 				;
   145 2313			.proc DisplayDebugInfoHexFF
   146
   147 2313 86 81				stx _saveRegX
   148 2315 8D 24 23				sta Save_Value+1						; place the value in A 1 location pasted the lda.   
   149 					
   150 2318 4A					lsr										; display 2 digits (from 0 to F)
   151 2319 4A					lsr
   152 231A 4A					lsr
   153 231B 4A					lsr
   154 231C AA					tax
   155 231D BD 44 22				lda TabHexNibbleToScreenDigit,x
   156 2320 99 B0 06				sta HudAddress,y
   157
   158 2323			Save_Value
   159
   160 2323 A9 FF				lda #$FF								; will hold the value in A on entry
   161 2325 29 0F				and #15
   162 2327 AA					tax
   163 2328 BD 44 22				lda TabHexNibbleToScreenDigit,x
   164 232B 99 B1 06				sta HudAddress+1,y
   165 232E A6 81				ldx _saveRegX
   166 2330 60					rts
   167 				.endp	
   168
   169 				;
   170 				;**************************************************************************************************
   171 				; DisplayDebugInfoBinary99
   172 				;
   173 				;	display 2 digits with values from 00 to 99
   174 				; 	passs the value in A and the line row in Y
   175 				;
   176 				;**************************************************************************************************
   177 				;
   178 2331			.proc DisplayDebugInfoBinary99
   179
   180 2331 86 81				stx _saveRegX
   181 2333 AA					tax
   182 2334 E0 64				cpx #100
   183 2336 90 02				bcc NoOverflow
   184 2338 A2 63				ldx #99
   185
   186 233A			NoOverflow
   187 233A BD 54 22				lda TabBinaryToBCD,x
   188 233D AA					tax
   189
   190 233E 4A					lsr										; display 2 digits (from 0 to 9)
   191 233F 4A					lsr
   192 2340 4A					lsr
   193 2341 4A					lsr
   194 2342 09 10				ora #16									; add the "0" character value
   195 2344 99 B0 06				sta HudAddress,y
   196
   197 2347 8A					txa
   198 2348 29 0F				and #15
   199 234A 09 10				ora #16									; add the "0" character value
   200 234C 99 B1 06				sta HudAddress+1,y
   201
   202 234F A6 81				ldx _saveRegX
   203 2351 60					rts
   204 				.endp		
   205
   206 				;
   207 				;**************************************************************************************************
   208 				; DisplayDebugInfoBinary9
   209 				;**************************************************************************************************
   210 				;
   211 2352			.proc DisplayDebugInfoBinary9
   212
   213 2352 C9 0A				cmp #10
   214 2354 90 02				bcc NoOverflow2
   215 2356 A9 09				lda #9
   216
   217 				;*************************************************
   218 				;
   219 2358			NoOverflow2
   220 					
   221 2358 09 10				ora #16									; display 1 digit (from 0 to 9) add the "0" character value
   222 235A 99 B0 06				sta HudAddress,y
   223
   224 235D 60				rts
   225
   226 				.endp	
   227
   228 				;
   229 				;**************************************************************************************************
   230 				; ClearDebugLineInfo
   231 				;**************************************************************************************************
   232 				;
   233 235E			.proc ClearDebugLineInfo
   234
   235 235E 86 81				stx _saveRegX
   236 2360 A9 00				lda #0
   237 2362 AA					tax
   238
   239 2363			CDI_loop
   240
   241 2363 9D B0 06				sta HudAddress,x
   242 2366 E8					inx
   243 2367 E0 28				cpx #40
   244 2369 D0 F8				bne CDI_loop
   245 236B A6 81				ldx _saveRegX
   246 						
   247 236D 60					rts
   248
   249 				.endp
   529
   530 236E					icl "HouseKeeping.Asm"					; Various methods for system setup
Source: E:\_8BitProjects\Series\Lessons\Lesson01\HouseKeeping.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		HouseKeeping.Asm
     5 				;
     6 				;	Modified On:	Tue May 1, 2018 06:43 AM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;**************************************************************************************************
    14 				;
    15 				;	InitHardware
    16 				;
    17 				;		Set the initial values for the Atari Hardware 		
    18 				;
    19 				;**************************************************************************************************
    20 				;
    21 236E			.proc InitHardware
    22
    23 236E A9 00				lda #0									; set the player info
    24 2370 8D 08 D0				sta SIZEP0
    25
    26 2373 A9 55				lda #MISSILES_BITS						; double width for all missiles
    27 2375 8D 0C D0				sta SIZEM
    28 						
    29 2378 A9 03				lda #GRACTL_OPTIONS						; set the graphics control options
    30 237A 8D 1D D0				sta GRACTL
    31
    32 237D A9 31				lda #PRIOR_OPTIONS						; set the priority options
    33 237F 8D 1B D0				sta PRIOR
    34
    35 2382 A9 0C				lda #12									; initial hscrol position
    36 2384 8D 04 D4				sta HSCROL
    37 					
    38 2387 A9 00				lda #0									; initial vscrol position
    39 2389 8D 05 D4				sta VSCROL
    40 							
    41 238C A9 3E				lda #DMACTL_OPTIONS						; set the DMA options
    42 238E 8D 00 D4				sta DMACTL
    43
    44 2391 A9 80				lda #$80								; no vblank only DLI
    45 2393 8D 0E D4				sta NMIEN
    46 						
    47 2396 60					rts
    48 						
    49 				.endp
    50
    51 				;
    52 				;**************************************************************************************************
    53 				;
    54 				;	InitAddresses
    55 				;
    56 				;		Set the initial values for the PM, DL, 		
    57 				;
    58 				;**************************************************************************************************
    59 				;
    60 2397			.proc InitAddresses
    61
    62 2397					SetDisplayListInterrupt GameDli_01		; set the initial DLI		
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 2397 A9 9E		      	lda #<GAMEDLI_01
     5 2399 8D FA FF			    sta NMIH_VECTOR
     6 239C A9 24			    lda #>GAMEDLI_01
     7 239E 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\HouseKeeping.Asm
    63 23A1					VcountWait 120							; good to wait a frame after setting
Macro: VCOUNTWAIT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 23A1 A9 78				lda #120
     5 23A3 CD 0B D4		VWait1	cmp VCOUNT
     6 23A6 D0 FB			    bne VWait1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\HouseKeeping.Asm
    64 						
    65 23A8					SetPMBaseAddress PmAddress				; Set the player missile address
Macro: SETPMBASEADDRESS [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 23A8 A9 A0		      lda #>PMADDRESS
     5 23AA 8D 07 D4		      sta PMBASE
Source: E:\_8BitProjects\Series\Lessons\Lesson01\HouseKeeping.Asm
    66
    67 23AD					SetDisplayListAddress GameDLAddress		; set the game display list
Macro: SETDISPLAYLISTADDRESS [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 23AD A9 00		      	lda #<GAMEDLADDRESS
     5 23AF 8D 02 D4			    sta DLISTL
     6 23B2 A9 06			    lda #>GAMEDLADDRESS
     7 23B4 8D 03 D4			    sta DLISTL+1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\HouseKeeping.Asm
    68
    69 23B7 60					rts
    70 				.endp
    71 				;
    72 				;**************************************************************************************************
    73 				;
    74 				;	InitVars
    75 				;
    76 				;		Set the initial values for the system		
    77 				;
    78 				;**************************************************************************************************
    79 				;
    80 23B8			.proc InitVars
    81 					
    82 23B8 A9 01				lda #1									; input info
    83 23BA 85 DF				sta _oldTrigger0
    84 23BC 85 E1				sta _currentTrigger0
    85
    86 23BE A9 00				lda #0
    87 23C0 85 E0				sta _triggerState
    88
    89 23C2 A9 0F				lda #15
    90 23C4 85 DD				sta _stick0
    91 23C6 85 DE				sta _oldStick0
    92 						
    93 23C8 A9 00				lda #>[CHAR_PIXELS_X]					; level info
    94 23CA 85 9D				sta _levelWindowX_H2
    95 						
    96 23CC A9 04				lda #<[CHAR_PIXELS_X]
    97 23CE 85 9E				sta _levelWindowX_H1
    98 						
    99 23D0 A9 00				lda #0
   100 23D2 85 9F				sta _levelWindowY_H2
   101 						
   102 23D4 A9 00				lda #0
   103 23D6 85 A0				sta _levelWindowY_H1
   104
   105 23D8 A9 29				lda #LEVEL_CHAR_SIZE_X
   106 23DA 85 97				sta _levelCharSizeX
   107 						
   108 23DC A9 18				lda #LEVEL_CHAR_SIZE_Y
   109 23DE 85 98				sta _levelCharSizeY
   110
   111 23E0 A9 A4				lda #<[LEVEL_CHAR_SIZE_X*CHAR_PIXELS_X]
   112 23E2 85 9A				sta _levelSizeX_H1
   113
   114 23E4 A9 00				lda #>[LEVEL_CHAR_SIZE_X*CHAR_PIXELS_X]
   115 23E6 85 99				sta _levelSizeX_H2		
   116
   117 23E8 A9 C0				lda #<[LEVEL_CHAR_SIZE_Y*CHAR_PIXELS_Y]
   118 23EA 85 9C				sta _levelSizeY_H1
   119
   120 23EC A9 00				lda #>[LEVEL_CHAR_SIZE_Y*CHAR_PIXELS_Y]
   121 23EE 85 9B				sta _levelSizeY_H2
   122 						
   123 23F0 A9 00				lda #<GameScrnAddress
   124 23F2 85 E9				sta _currentLineAddress
   125 						
   126 23F4 A9 B0				lda #>GameScrnAddress
   127 23F6 85 EA				sta _currentLineAddress+1
   128 						
   129 						;	
   130 						;************************************************
   131 						;
   132 						; player info
   133 						;
   134 						; 	remember that we don't use any speed over 1 char per frame right now,
   135 						; 	because we don't want to lose collisions (in that case we should
   136 						; 	use 2 or more steps per frame, or a "sweep" collision method)
   137 						;
   138 						;************************************************
   139 						;
   140
   141 23F8 A9 8A				lda #$8A
   142 23FA 85 A5				sta _playerBaseColor
   143 							
   144 23FC A9 3A				lda #$3A
   145 23FE 85 A6				sta _playerBaseColor+1
   146 							
   147 2400 A9 0F				lda #$0F
   148 2402 85 A7				sta _playerBaseColor+2
   149
   150 				.ifndef PAL_VERSION
   151 					
   152 2404 A9 80				lda #128								; air vertical movement 240 pixels per second (at 60 fps only!)
   153 2406 85 C9				sta _playerJumpSpeed_L1
   154
   155 2408 A9 03				lda #3									
   156 240A 85 C8				sta _playerJumpSpeed_H1
   157 						
   158 240C A9 AA				lda #170
   159 240E 85 CB				sta _playerMaxFallSpeed_L1				; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)
   160
   161 2410 A9 06				lda #6									
   162 2412 85 CA				sta _playerMaxFallSpeed_H1	
   163
   164 2414 A9 70				lda #112								; 12.8 frames (at 60 fps only!) to reach max speed (from zero)
   165 2416 85 CD				sta _playerGravityAccel_L1
   166
   167 2418 A9 00				lda #0									
   168 241A 85 CC				sta _playerGravityAccel_H1
   169 					
   170 241C A9 20				lda #32									; water vertical movement
   171 241E 85 CF				sta _playerWaterAccelY_L1
   172
   173 2420 A9 00				lda #0									
   174 2422 85 CE				sta _playerWaterAccelY_H1
   175 						
   176 2424 A9 80				lda #128
   177 2426 85 D1				sta _playerMaxWaterSpeedY_L1
   178
   179 2428 A9 00				lda #0
   180 242A 85 D0				sta _playerMaxWaterSpeedY_H1
   181 					
   182 242C A9 00				lda #0
   183 242E 85 D3				sta _playerMoveWaterSpeedY_L1
   184
   185 2430 A9 01				lda #1
   186 2432 85 D2				sta _playerMoveWaterSpeedY_H1
   187 					
   188 				.else
   189
   190 						lda #51									; air vertical movement pixels per second (at 50 fps only!)
   191 						sta _playerJumpSpeed_L1
   192
   193 						lda #4									
   194 						sta _playerJumpSpeed_H1
   195 					
   196 						lda #255								; near 400 pixels per second (1 character per frame at 50 fps, PAL friendly)	
   197 						sta _playerMaxFallSpeed_L1
   198
   199 						lda #7									
   200 						sta _playerMaxFallSpeed_H1
   201 					
   202 						lda #134								;  frames (at 50 fps only!) to reach max speed (from zero)
   203 						sta _playerGravityAccel_L1
   204
   205 						lda #0									
   206 						sta _playerGravityAccel_H1
   207 						
   208 						lda #38									; water vertical movement
   209 						sta _playerWaterAccelY_L1
   210
   211 						lda #0									
   212 						sta _playerWaterAccelY_H1
   213 						
   214 						lda #154
   215 						sta _playerMaxWaterSpeedY_L1
   216
   217 						lda #0
   218 						sta _playerMaxWaterSpeedY_H1
   219 					
   220 						lda #51
   221 						sta _playerMoveWaterSpeedY_L1
   222
   223 						lda #1
   224 						sta _playerMoveWaterSpeedY_H1
   225 					
   226 				.endif
   227 					
   228 2434 A2 08				ldx #PLR_WIDTH							; set width of player
   229 2436 86 BA				stx _playerSizeX
   230 2438 CA					dex
   231 2439 86 BC				stx _playerSizeXMinusOne				; used in detection methods
   232 					
   233 243B A2 15				ldx #PLR_HEIGHT							; set height of player
   234 243D 86 BB				stx _playerSizeY
   235 243F CA					dex
   236 2440 86 BD				stx _playerSizeYMinusOne				; used in detection methods
   237 					
   238 2442 20 46 24				jsr InitPlayerInfo
   239 						
   240 2445 60					rts
   241 					
   242 				.endp	
   243
   244 				;
   245 				;**************************************************************************************************
   246 				;
   247 				;	InitPlayerInfo
   248 				;
   249 				;		Set the initial values for the player		
   250 				;
   251 				;**************************************************************************************************
   252 				;
   253 2446			.proc InitPlayerInfo
   254
   255 2446 A9 00				lda #0
   256 2448 85 D4				sta _playerNoJumpTimer
   257 244A 85 D5				sta _playerHoldJumpCounter
   258 244C 85 D8				sta _playerOverPlatformFlag
   259 244E 85 D9				sta _playerTopCollisionFlag
   260 2450 85 DA				sta _playerSideCollisionFlag
   261
   262 2452 A9 00				lda #PS_STATIC
   263 2454 85 DB				sta _playerState
   264 					
   265 2456 A2 01				ldx #PS_OVER_PLATFORM					; (TBO) turn this back on when player base is implemented
   266 2458 20 AB 33				jsr SetPlayerMethod					; (TBO) turn this back on when player base is implemented
   267
   268 245B A9 00				lda #0
   269 245D 85 A9				sta _redrawPlayerCounter
   270
   271 245F A9 00				lda #0
   272 2461 85 BE				sta _playerSideSpeed_H1
   273 2463 85 BF				sta _playerSideSpeed_L1
   274
   275 2465 A9 01				lda #PSD_RIGHT	
   276 2467 85 D6				sta _lastPlayerSideDirection
   277 2469 85 D7				sta _lastPlayerShootDirection
   278
   279 246B 60					rts
   280
   281 				.endp
   282
   283 				;
   284 				;**************************************************************************************************
   285 				;
   286 				;	SetSpawnPos
   287 				;
   288 				;		Set the initial position of the player.
   289 				;		Uses PARAM00 as the level number.		
   290 				;
   291 				;**************************************************************************************************
   292 				;
   293 246C			.proc SetSpawnPos
   294
   295 						; set spawn position
   296 246C A6 86				ldx _param00
   297 						
   298 246E A9 00				lda #0
   299 2470 85 AA				sta _playerLevelLeftX_H2
   300 2472 BD 90 44				lda LevelsPlayer_X,x
   301 2475 A2 04				ldx #4 
   302 2477 20 BF 22				jsr MultiplyAX
   303 247A AD 3B 22				lda _productLo		
   304 247D 85 AB				sta _playerLevelLeftX_H1
   305 						
   306 247F A9 00				lda #0
   307 2481 85 AC				sta _playerLevelLeftX_L1				; fractional part
   308 2483 85 B3				sta _playerLevelBottomY_H2
   309 						
   310 2485 A6 96				ldx _currLevelNum
   311 2487 BD 91 44				lda LevelsPlayer_Y,x
   312 248A A2 08				ldx #8 
   313 248C 20 BF 22				jsr MultiplyAX
   314 248F AD 3B 22				lda _productLo
   315 2492 69 07				adc #7		
   316 2494 85 B4				sta _playerLevelBottomY_H1
   317 						
   318 2496 A9 00				lda #0
   319 2498 85 B5				sta _playerLevelBottomY_L1				; fractional part
   320
   321 249A 20 3E 2C				jsr SetPlayerInfo						; Set the players info	
   322 					
   323 249D 60					rts
   324
   325 				.endp	
   531 249E					icl "Interrupt.Asm"						; Systems interrupts
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				; 	FileName:		Interrupt,Asm
     5 				;
     6 				; 	Modified On:	Sat Apr 07, 2018 09:36:00 PM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;
    11 				;***************************************************************************************************
    12 				;
    13 				;	Color			Dec			HEX    	Color			Dec				HEX
    14 				;	-------------------------------		-----------------------------------
    15 				;	Black           00,		$00-$0F		Medium blue      08,    	$80-$8F
    16 				;	Rust            01,		$10-$1F		Dark blue        09,    	$90-$9F
    17 				;	Red-orange      02,		$20-$2F		Blue-grey      	 10,    	$A0-$AF
    18 				;	Dark orange     03,		$30-$3F		Olive green    	 11,    	$B0-$BF
    19 				;	Red             04,		$40-$4F		Medium green   	 12,    	$C0-$CF
    20 				;	Dk lavender     05,		$50-$5F		Dark green     	 13,    	$D0-$DF
    21 				;	Cobalt blue     06,		$60-$6F		Orange-green   	 14,    	$E0-$EF
    22 				;	Ultramarine     07,		$70-$7F		Orange         	 15,    	$F0-$FF
    23 				;
    24 				;**************************************************************************************************
    25 				; Display list 1 interruptions code
    26 				;**************************************************************************************************
    27 				;
    28 249E			GameDli_01
    29 						
    30 249E 48					pha
    31 249F 98					tya
    32 24A0 48					pha				
    33
    34 24A1 8D 0A D4		    	sta WSYNC   							; Wait off-screen
    35
    36 				.ifndef PAL_VERSION
    37 24A4					SetColor $00, $00, $04
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24A4 A9 04					lda #[$00 * 16 + $04]
     9 24A6 8D 16 D0					sta COLPF0+$00
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    38 24A9					SetColor $01, $03, $06
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24A9 A9 36					lda #[$03 * 16 + $06]
     9 24AB 8D 17 D0					sta COLPF0+$01
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    39 24AE					SetColor $02, $0D, $06
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24AE A9 D6					lda #[$0D * 16 + $06]
     9 24B0 8D 18 D0					sta COLPF0+$02
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    40 24B3					SetColor $03, $0F, $0C		
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24B3 A9 FC					lda #[$0F * 16 + $0C]
     9 24B5 8D 19 D0					sta COLPF0+$03
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    41 				.else
    42 						SetColor 1, 15, 14						; yellow (collectables)
    43 						SetColor 2, 7, 2						; blue (water)
    44 				.endif
    45 24B8					SetFontAddress GameFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 24B8 A9 A8				lda #>GAMEFONTADDRESS
     5 24BA 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    46 24BD					SetDisplayListInterrupt TextDli 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 24BD A9 CB		      	lda #<TEXTDLI
     5 24BF 8D FA FF			    sta NMIH_VECTOR
     6 24C2 A9 24			    lda #>TEXTDLI
     7 24C4 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    47
    48 24C7 68					pla
    49 24C8 A8					tay
    50 24C9 68					pla
    51 						
    52 24CA 40					rti
    53 				;
    54 				;**************************************************************************************************
    55 				; Display list 2 interruptions code
    56 				;**************************************************************************************************
    57 				;
    58 24CB			TextDli
    59
    60 24CB 48					pha
    61 24CC 98					tya
    62 24CD 48					pha
    63 							
    64 24CE 8D 0A D4				STA WSYNC 								; Wait off-screen
    65
    66 				.ifndef PAL_VERSION
    67
    68 24D1					SetColor 1, $03, $0A
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24D1 A9 3A					lda #[$03 * 16 + $0A]
     9 24D3 8D 17 D0					sta COLPF0+1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    69 24D6					SetColor 2, $00, $02			
Macro: SETCOLOR [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     8 24D6 A9 02					lda #[$00 * 16 + $02]
     9 24D8 8D 18 D0					sta COLPF0+2
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    70 				.else
    71
    72 						SetColor 1, 15, 14						; yellow (collectables)
    73 						SetColor 2, 7, 2						; blue (water)
    74
    75 				.endif
    76
    77 24DB					SetFontAddress TextFontAddress
Macro: SETFONTADDRESS [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 24DB A9 AC				lda #>TEXTFONTADDRESS
     5 24DD 8D 09 D4			    sta CHBASE
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    78 24E0					SetDisplayListInterrupt GameDli_01 
Macro: SETDISPLAYLISTINTERRUPT [Source: E:\_8BitProjects\Series\Lessons\Lesson01\..\_8BitLibrary\sys_macros.asm]
     4 24E0 A9 9E		      	lda #<GAMEDLI_01
     5 24E2 8D FA FF			    sta NMIH_VECTOR
     6 24E5 A9 24			    lda #>GAMEDLI_01
     7 24E7 8D FB FF			    sta NMIH_VECTOR+1
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Interrupt.Asm
    79
    80 24EA 68					pla
    81 24EB A8					tay
    82 24EC 68					pla
    83 						
    84 24ED 40					rti
   532 24EE					icl "LevelLoader.Asm"					; Load level, Clear Screeen
Source: E:\_8BitProjects\Series\Lessons\Lesson01\LevelLoader.Asm
     1 				;	
     2 				;**************************************************************************************************
     3 				;
     4 				; 	Filename:		LevelLoader.Asm
     5 				;
     6 				; 	Modified On:	Sun Apr 15, 2018 02:32 PM
     7 				;
     8 				;**************************************************************************************************
     9 				;
    10
    11 				;*****	Constants
    12 				;
    13 = 00FD			LN_BRK				= $FD
    14 = 00FE			LN_CRG				= $FE
    15 = 00FF			LN_EOD				= $FF
    16
    17 				;*****	Local Data Storage
    18 				;
    19 24EE 00			_currRow			.byte $00
    20 24EF 00			_currCol			.byte $00
    21 24F0 00			_scrYCount			.byte $00
    22 24F1 00			_datYCount			.byte $00
    23
    24 				;
    25 				;**************************************************************************************************
    26 				;
    27 				;	LoadGameLevel
    28 				;
    29 				;		Level index is passed in zero page _param00
    30 				;**************************************************************************************************
    31 				;
    32 24F2			.proc LoadGameLevel
    33
    34 24F2 A6 86				ldx _param00
    35 								
    36 24F4 BD 92 44				lda LevelsAddr_LSB,x					; get the LSB for the requested levels data
    37 24F7 85 E7				sta _preLevelLineAddr					; store it in our zero page pointer
    38 24F9 BD 93 44				lda LevelsAddr_MSB,x					; get the MSB for the requested levels data
    39 24FC 85 E8				sta _preLevelLineAddr + 1				; store it in our zero page pointer
    40 						
    41 24FE A9 00				lda #$00								; initialize the counters
    42 2500 8D F0 24				sta _scrYCount		
    43 2503 8D F1 24				sta _datYCount
    44 						
    45 2506 A8					tay										; begin with the Y register set
    46
    47 				;*****	Get next row col
    48 				;
    49 2507			GetNextRowCol		
    50 						
    51 2507 AC F1 24				ldy _datYCount		
    52 250A B1 E7				lda (_preLevelLineAddr), y				; make sure this level is valid (while not EOD)
    53 250C C9 FF				cmp #LN_EOD								; check for eof of level data
    54 250E F0 65				beq ExitLoadLevel						; true jump to exit
    55
    56 				;*****	Store off this row
    57 2510			StoreRow
    58 						
    59 2510 8D EE 24				sta	_currRow							; save off the first byte the current row
    60
    61 2513 EE F1 24				inc _datYCount							; increment for COLS value
    62 2516 AC F1 24				ldy _datYCount							; use it
    63 2519 B1 E7				lda (_preLevelLineAddr),y				; make sure this level is valid
    64 251B 8D EF 24				sta _currCol							; now we have the current column
    65 						
    66 251E AE EF 24				ldx _currCol
    67 2521 BD CA 40				lda TabLevelLineAddressLSB,x			; get the low part of the screen address by row
    68 2524 18					clc
    69 2525 6D EE 24				adc _currRow		
    70 2528 85 E5				sta _ptrLevelLine						; save it off to the current line address		
    71 252A BD CA 41				lda TabLevelLineAddressMSB,x			; get the low part of the screen address by row
    72 252D 69 00				adc #$00
    73 252F 85 E6				sta _ptrLevelLine + 1					; save it off to the current line address
    74
    75 				;*****	Set the character
    76 				;
    77 2531			SetCharacter
    78 				  		
    79 2531 EE F1 24		  		inc _datYCount							; increment for next COLS value
    80 2534 AC F1 24				ldy _datYCount							; use the value
    81
    82 2537 B1 E7				lda (_preLevelLineAddr),y				; check for line break
    83 2539 C9 FD				cmp #LN_BRK								; did we hit it 
    84 253B F0 0B				beq GetNextDataLine						; go reset the counters and test for carriage return  
    85
    86 253D AC F0 24				ldy _scrYCount
    87 2540 91 E5				sta (_ptrLevelLine),y					; store it at location
    88 2542 EE F0 24				inc _scrYCount
    89 						
    90 2545 4C 31 25				jmp SetCharacter						; do the process all over
    91 						
    92 				;*****	Get next data line
    93 				;
    94 2548			GetNextDataLine
    95 						
    96 2548 A9 00				lda #$00
    97 254A 8D F0 24				sta _scrYCount
    98 						
    99 254D EE F1 24		  		inc _datYCount							; increment for next COLS value
   100 2550 AC F1 24				ldy _datYCount							; use the value
   101 2553 B1 E7				lda (_preLevelLineAddr), y				; load up the next level data item
   102 						
   103 2555 C9 FE				cmp #LN_CRG								; check for carraige return
   104 2557 F0 03				beq SetNextRowCol						; true get the next row of data
   105 						
   106 2559 4C 10 25				jmp StoreRow		
   107
   108 				;*****	Set next row col
   109 255C			SetNextRowCol
   110 255C EE F1 24				inc _datYCount		
   111 						
   112 255F 18					clc
   113 2560 A5 E7				lda _preLevelLineAddr					; get the LSB for the requested levels data
   114 2562 6D F1 24				adc _datYCount
   115 2565 85 E7				sta _preLevelLineAddr
   116 2567 A5 E8				lda _preLevelLineAddr + 1
   117 2569 69 00				adc #$00
   118 256B 85 E8				sta _preLevelLineAddr + 1				; store it in our zero page pointer
   119
   120 256D A9 00				lda #$00
   121 256F 8D F1 24				sta _datYCount
   122
   123 2572 4C 07 25				jmp GetNextRowCol			
   124 				 
   125 				;*****	Exit
   126 				;
   127 2575			ExitLoadLevel
   128
   129 2575 60					rts
   130 					
   131 				.endp			
   132
   133 				;
   134 				;**************************************************************************************************
   135 				;
   136 				; InitLevelTable
   137 				;
   138 				;	Initialize the start of row addresses
   139 				;
   140 				;**************************************************************************************************
   141 				;
   142 2576			.proc InitLevelTable
   143 						
   144 2576 A0 00				ldy #0									; set  the indexer to zero
   145
   146 				;*****	Address Loop
   147 				;
   148 2578			Addr_Loop
   149
   150 2578 A5 E9				lda _currentLineAddress							
   151 257A 99 CA 40				sta TabLevelLineAddressLSB,y
   152 						
   153 257D A5 EA				lda _currentLineAddress+1
   154 257F 99 CA 41				sta TabLevelLineAddressMSB,y
   155
   156 2582 A5 97				lda _levelCharSizeX
   157 2584 D0 05				bne Char_Below_256
   158
   159 2586 E6 EA				inc _currentLineAddress+1				; if _levelCharSizeX = 0, then add 256 chars
   160 2588 4C 96 25				jmp Addr_Check_Loop
   161
   162 				;*****	Character is below 256
   163 				;
   164 258B			Char_Below_256
   165
   166 258B 18					clc
   167 258C 65 E9				adc _currentLineAddress					; from 1 to 255 chars
   168 258E 85 E9				sta _currentLineAddress
   169
   170 2590 A5 EA				lda _currentLineAddress+1
   171 2592 69 00				adc #0
   172 2594 85 EA				sta _currentLineAddress+1
   173
   174 				;*****	Address check loop
   175 				;
   176 2596			Addr_Check_Loop
   177
   178 2596 C8					iny
   179 2597 C4 98				cpy _levelCharSizeY						; from 1 to 255 lines, 0 = 256 lines in this case
   180 2599 D0 DD				bne Addr_Loop
   181 					
   182 259B A5 E9				lda _currentLineAddress					; add one more line definition to fix problem of ladders in the last line
   183 259D 99 CA 40				sta TabLevelLineAddressLSB,y			; but this is not going to work if there are 256 lines!
   184 					
   185 25A0 A5 EA				lda _currentLineAddress+1				
   186 25A2 99 CA 41				sta TabLevelLineAddressMSB,y
   187 					
   188 25A5 60					rts
   189 						
   190 				.endp	
   191
   533 25A6					icl "AnimationsLogic.Asm"				; Character animations
Source: E:\_8BitProjects\Series\Lessons\Lesson01\AnimationsLogic.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		AnimationsLogic.Asm
     5 				;
     6 				;	Modified On:	Thur May 10, 2018 08:07 AM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;
    11 				;***************************************************************************************************
    12 				;
    13
    14 				;*****	Constants
    15 				;
    16 = 000A			ANIM_COIN_CHAR1 			= $0A
    17 = 0006			ANIM_COIN_FRAMES 			= $06
    18 = 0008			ANIM_COIN_MAX_NUMBER 		= $08
    19 = 0004			ANIM_SEA_TOP_FRAME_TIME 	= $04
    20
    21 25A6 04			_animSeaTopTimer			.byte ANIM_SEA_TOP_FRAME_TIME
    22
    23 25A7 00			_firstCoinAnimIndex		.byte $00
    24 25A8 00			_emptyCoinAnimIndex		.byte $00
    25 25A9 00			_currentCoinAnimations		.byte $00
    26
    27 25AA 01			_animHLaserTimer			.byte $01
    28 25AB 00			_animHLaserCurrentFrame	.byte $00
    29
    30 25AC 01			_animLaserTimer			.byte $01
    31 25AD 00			_animLaserCurrentFrame		.byte $00
    32
    33 25AE 00 00 00 00 00 00 + TabCoinAnimFrame			.byte $00, $00, $00, $00, $00, $00, $00, $00
    34
    35 25B6 00 00 00 00 00 00 + TabCoinAnimTimer			.byte $00, $00, $00, $00, $00, $00, $00, $00
    36
    37 25BE 02 02 02 02 02 02	TabCoinAnimCharTime			.byte $02, $02, $02, $02, $02, $02
    38
    39 25C4 00 00 00 00 00 00 + TabCoinAnimAddressLSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    40 25CC 00 00 00 00 00 00 + TabCoinAnimAddressMSB		.byte $00, $00, $00, $00, $00, $00, $00, $00
    41
    42 				; vertical line, dither (red)
    43 25D4 30 0C 30 0C 30 0C + TabAnimLaserFrame_01		.byte %00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100
    44 25DC 0C 30 0C 30 0C 30 + TabAnimLaserFrame_02		.byte %00001100,%00110000,%00001100,%00110000,%00001100,%00110000,%00001100,%00110000
    45 25E4 00 00 00 00 00 00 + TabAnimLaserFrame_03		.byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
    46
    47 				; hoizontal line, dither (red)
    48 25EC 33 CC 33		TabAnimHLaserFrame_01		.byte %00110011, %11001100, %00110011
    49 25EF CC 33 CC		TabAnimHLaserFrame_02		.byte %11001100, %00110011, %11001100
    50 25F2 00 00 00 00 00 00 + TabAnimHLaserFrame_03		.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
    51
    52 				; sea top (blue)
    53 25FA 0F			TabAnimSeaTopLeftFrame_01	.byte %00001111
    54 25FB 3F										.byte %00111111
    55 25FC FF										.byte %11111111
    56 25FD FF										.byte %11111111
    57
    58 25FE 00			TabAnimSeaTopRightFrame_01	.byte %00000000
    59 25FF C0										.byte %11000000
    60 2600 F0										.byte %11110000
    61 2601 FF										.byte %11111111
    62
    63 				.ifndef PAL_VERSION
    64 					
    65 = 003D				ANIM_LASER_FRAMES 		= $3D
    66 = 003D				ANIM_HLASER_FRAMES 		= $3D
    67 					
    68 2602			TabAnimLaserFrameAddressLSB
    69 2602 D4 DC D4 DC D4 DC + 	:30 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
    70 263E E4				.byte <TabAnimLaserFrame_03
    71 										
    72 263F			TabAnimLaserFrameAddressMSB
    73 263F 25 25 25 25 25 25 + 	:30 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
    74 267B 25				.byte >TabAnimLaserFrame_03
    75
    76 267C			TabAnimHLaserFrameAddressLSB
    77 267C EC EF EC EF EC EF + 	:30 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
    78 26B8 F2				.byte <TabAnimHLaserFrame_03
    79
    80 26B9			TabAnimHLaserFrameAddressMSB
    81 26B9 25 25 25 25 25 25 + 	:30 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
    82 26F5 25				.byte >TabAnimHLaserFrame_03
    83
    84 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    85 26F6			TabAnimHLaserFrameTime
    86 26F6 01 01 01 01 01 01 + 	:30 .byte $01, $01
    87 2732 5A					.byte $5A
    88
    89 				; right now, if the index to these tables is 60, then we are in the "disabled" state
    90 2733			TabAnimLaserFrameTime
    91 2733 01 01 01 01 01 01 + 	:30 .byte $01, $01
    92 276F 3C				.byte $3C
    93
    94 				.else
    95
    96 					ANIM_LASER_FRAMES 		= $33
    97 					ANIM_HLASER_FRAMES 		= $33
    98
    99 				TabAnimLaserFrameAddressLSB
   100 					:25 .byte <TabAnimLaserFrame_01, <TabAnimLaserFrame_02
   101 						.byte <TabAnimLaserFrame_03
   102 											
   103 				TabAnimLaserFrameAddressMSB
   104 					:25 .byte >TabAnimLaserFrame_01, >TabAnimLaserFrame_02
   105 						.byte >TabAnimLaserFrame_03
   106
   107 				TabAnimHLaserFrameAddressLSB
   108 					:25 .byte <TabAnimHLaserFrame_01, <TabAnimHLaserFrame_02
   109 						.byte <TabAnimHLaserFrame_03
   110
   111 				TabAnimHLaserFrameAddressMSB
   112 					:25 .byte >TabAnimHLaserFrame_01, >TabAnimHLaserFrame_02
   113 						.byte >TabAnimHLaserFrame_03
   114
   115 				; right now, if the index to these tables is 60, then we are in the "disabled" state
   116 				TabAnimHLaserFrameTime
   117 					:25 .byte $01, $01
   118 						.byte $4B
   119
   120 				; right now, if the index to these tables is 60, then we are in the "disabled" state
   121 				TabAnimLaserFrameTime
   122 					:25 .byte $01, $01
   123 					.byte $32
   124
   125 				.endif
   126
   127 2770			.proc AddCoinAnimation
   128 2770 AD A9 25			lda _currentCoinAnimations
   129 2773 C9 08			cmp #ANIM_COIN_MAX_NUMBER
   130 2775 F0 28			beq ACA_exit
   131
   132 2777 EE A9 25			inc _currentCoinAnimations
   133
   134 277A AE A8 25			ldx _emptyCoinAnimIndex
   135 277D A5 EB			lda _pageZeroTempPointer
   136 277F 9D C4 25			sta TabCoinAnimAddressLSB,x
   137 2782 A5 EC			lda _pageZeroTempPointer+1
   138 2784 9D CC 25			sta TabCoinAnimAddressMSB,x
   139
   140 2787 A9 00			lda #0					; use first frame
   141 2789 9D AE 25			sta TabCoinAnimFrame,x
   142 278C AD BE 25			lda TabCoinAnimCharTime		; use first element of the table
   143 278F 9D B6 25			sta TabCoinAnimTimer,x
   144
   145 2792 A0 00			ldy #0
   146 2794 A9 0A			lda #ANIM_COIN_CHAR1
   147 2796 91 EB			sta (_pageZeroTempPointer),y		; update screen
   148
   149 2798 E8				inx
   150 2799 8A				txa
   151 279A 29 07			and #%111
   152 279C 8D A8 25			sta _emptyCoinAnimIndex
   153
   154 279F			ACA_exit
   155 279F 60				rts
   156
   157 				.endp
   158
   159 				; update coin animations every frame
   160
   161 27A0			.proc UpdateCoinAnimations
   162 27A0 AD A9 25			lda _currentCoinAnimations
   163 27A3 F0 53			beq UCA_exit
   164
   165 27A5 AE A7 25			ldx _firstCoinAnimIndex
   166
   167 27A8			UCA_loop
   168 27A8 DE B6 25			dec TabCoinAnimTimer,x
   169 27AB D0 41			bne UCA_check_loop
   170
   171 27AD FE AE 25			inc TabCoinAnimFrame,x
   172 27B0 BD AE 25			lda TabCoinAnimFrame,x
   173 27B3 C9 06			cmp #ANIM_COIN_FRAMES
   174 27B5 F0 19			beq UCA_clear_anim
   175
   176
   177 27B7			UCA_update_anim
   178 27B7 A8				tay
   179 27B8 B9 BE 25			lda TabCoinAnimCharTime,y	; #ANIM_COIN_TIME
   180 27BB 9D B6 25			sta TabCoinAnimTimer,x
   181
   182 27BE BD C4 25			lda TabCoinAnimAddressLSB,x
   183 27C1 8D CB 27			sta UCA_char_pointer+1
   184 27C4 BD CC 25			lda TabCoinAnimAddressMSB,x
   185 27C7 8D CC 27			sta UCA_char_pointer+2
   186
   187 27CA			UCA_char_pointer
   188 27CA EE FF FF			inc $FFFF		; update the animation frame, increment the char on screen
   189
   190 27CD 4C EE 27			jmp UCA_check_loop
   191
   192
   193 27D0			UCA_clear_anim
   194 27D0 BD C4 25			lda TabCoinAnimAddressLSB,x
   195 27D3 8D DF 27			sta UCA_clear_char_pointer+1
   196 27D6 BD CC 25			lda TabCoinAnimAddressMSB,x
   197 27D9 8D E0 27			sta UCA_clear_char_pointer+2
   198
   199 27DC A9 00			lda #0
   200 27DE			UCA_clear_char_pointer
   201 27DE 8D FF FF			sta $FFFF		; clear the char on screen
   202
   203 27E1 CE A9 25			dec _currentCoinAnimations
   204
   205 27E4 AC A7 25			ldy _firstCoinAnimIndex
   206 27E7 C8				iny
   207 27E8 98				tya
   208 27E9 29 07			and #%111
   209 27EB 8D A7 25			sta _firstCoinAnimIndex
   210
   211
   212 27EE			UCA_check_loop
   213 27EE E8				inx
   214 27EF 8A				txa
   215 27F0 29 07			and #%111
   216 27F2 AA				tax
   217
   218 27F3 EC A8 25			cpx _emptyCoinAnimIndex
   219 27F6 D0 B0			bne UCA_loop
   220
   221 27F8			UCA_exit
   222 27F8 60				rts
   223
   224 				.endp
   225 				;
   226 				;***************************************************************************************************
   227 				;
   228 				;	DoFontAnimations
   229 				;
   230 				;***************************************************************************************************
   231 				;
   232 27F9			.proc DoFontAnimations
   233
   234 27F9 CE A6 25				dec _animSeaTopTimer					; do sea top animation (chars $46, $47)
   235 27FC D0 35				bne EndAnimSeaTop
   236
   237 27FE A9 04				lda #ANIM_SEA_TOP_FRAME_TIME
   238 2800 8D A6 25				sta _animSeaTopTimer
   239
   240 2803 AD 38 AA				lda GameFontAddress+8*$47
   241 2806 4A					lsr										; put left bit in the carry
   242 2807 6E 30 AA				ror GameFontAddress+8*$46
   243 280A 6E 38 AA				ror GameFontAddress+8*$47
   244 280D 6E 30 AA				ror GameFontAddress+8*$46
   245 2810 6E 38 AA				ror GameFontAddress+8*$47
   246
   247 2813 AD 39 AA				lda GameFontAddress+8*$47+1
   248 2816 4A					lsr										; put left bit in the carry
   249 2817 6E 31 AA				ror GameFontAddress+8*$46+1
   250 281A 6E 39 AA				ror GameFontAddress+8*$47+1
   251 281D 6E 31 AA				ror GameFontAddress+8*$46+1
   252 2820 6E 39 AA				ror GameFontAddress+8*$47+1
   253
   254 2823 AD 3A AA				lda GameFontAddress+8*$47+2
   255 2826 4A					lsr										; put left bit in the carry
   256 2827 6E 32 AA				ror GameFontAddress+8*$46+2
   257 282A 6E 3A AA				ror GameFontAddress+8*$47+2
   258 282D 6E 32 AA				ror GameFontAddress+8*$46+2
   259 2830 6E 3A AA				ror GameFontAddress+8*$47+2
   260
   261 				;*****	End animation of sea top
   262 				;
   263 2833			EndAnimSeaTop
   264
   265 2833 60					rts
   266
   267 				.endp
   534 2834					icl "CameraLogic.Asm"					; 
Source: E:\_8BitProjects\Series\Lessons\Lesson01\CameraLogic.Asm
     1
     2 2834			UpdateCameraWindow
     3
     4 				; update target window pos (_windowTargetPos*_*), using the player level position,
     5 				; correct (clamp) target window pos with level limits if necessary
     6
     7 				; check left limit (clamp to the left)
     8 2834			UCW_check_left_limit
     9 2834 A5 AA			lda _playerLevelLeftX_H2
    10 2836 C9 00			cmp #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIXELS_X]/2+CHAR_PIXELS_X]-2]
    11 2838 90 08			bcc UCW_force_left_limit
    12 283A D0 13			bne UCW_check_right_limit
    13 283C A5 AB			lda _playerLevelLeftX_H1
    14 283E C9 52			cmp #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIXELS_X]/2+CHAR_PIXELS_X]-2]
    15 2840 B0 0D			bcs UCW_check_right_limit
    16
    17 2842			UCW_force_left_limit
    18 2842 A9 00			lda #>[CHAR_PIXELS_X]
    19 2844 8D 50 2A			sta _windowTargetPosX_H2
    20 2847 A9 04			lda #<[CHAR_PIXELS_X]
    21 2849 8D 51 2A			sta _windowTargetPosX_H1
    22
    23 284C 4C 79 28			jmp UCW_check_top_limit
    24
    25
    26 				; check right limit (clamp to the right)
    27 284F			UCW_check_right_limit
    28 284F A9 00			lda #>[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIXELS_X-CHAR_PIXELS_X]+1]
    29 2851 C5 AD			cmp _playerLevelRightX_H2
    30 2853 90 08			bcc UCW_force_right_limit
    31 2855 D0 13			bne UCW_set_target_x
    32 2857 A9 51			lda #<[[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X/2]*CHAR_PIXELS_X-CHAR_PIXELS_X]+1]
    33 2859 C5 AE			cmp _playerLevelRightX_H1
    34 285B B0 0D			bcs UCW_set_target_x
    35
    36 285D			UCW_force_right_limit
    37 285D A9 00			lda #>[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIXELS_X-CHAR_PIXELS_X]
    38 285F 8D 50 2A			sta _windowTargetPosX_H2
    39 2862 A9 00			lda #<[[LEVEL_CHAR_SIZE_X-WINDOW_CHAR_SIZE_X]*CHAR_PIXELS_X-CHAR_PIXELS_X]
    40 2864 8D 51 2A			sta _windowTargetPosX_H1
    41
    42 2867 4C 79 28			jmp UCW_check_top_limit
    43
    44
    45 				;------------------------------------------------------------
    46 				; no clamp, use current player X position and substract half the window size
    47 286A			UCW_set_target_x
    48 286A A5 AB			lda _playerLevelLeftX_H1
    49 286C 38				sec
    50 286D E9 4E			sbc #<[[[WINDOW_CHAR_SIZE_X*CHAR_PIXELS_X]/2]-2]
    51 286F 8D 51 2A			sta _windowTargetPosX_H1
    52 2872 A5 AA			lda _playerLevelLeftX_H2
    53 2874 E9 00			sbc #>[[[WINDOW_CHAR_SIZE_X*CHAR_PIXELS_X]/2]-2]
    54 2876 8D 50 2A			sta _windowTargetPosX_H2
    55
    56
    57 				;--------------------------------------------------------------------------------
    58 				; check top limit (clamp to the top)
    59 2879			UCW_check_top_limit
    60 2879 A5 B0			lda _playerLevelTopY_H2
    61 287B C9 00			cmp #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIXELS_Y/2]-4]
    62 287D 90 08			bcc UCW_force_top_limit
    63 287F D0 13			bne UCW_check_botto_limit
    64 2881 A5 B1			lda _playerLevelTopY_H1
    65 2883 C9 5C			cmp #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIXELS_Y/2]-4]
    66 2885 B0 0D			bcs UCW_check_botto_limit
    67
    68 2887			UCW_force_top_limit
    69 2887 A9 00			lda #>[0]
    70 2889 8D 52 2A			sta _windowTargetPosY_H2
    71 288C A9 00			lda #<[0]
    72 288E 8D 53 2A			sta _windowTargetPosY_H1
    73
    74 2891 4C BE 28			jmp UCW_get_deltas
    75
    76
    77 				; check bottom limit (clamp to the bottom)
    78 2894			UCW_check_botto_limit
    79 2894 A9 00			lda #>[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIXELS_Y]+3]
    80 2896 C5 B3			cmp _playerLevelBottomY_H2
    81 2898 90 08			bcc UCW_force_botto_limit
    82 289A D0 13			bne UCW_set_target_y
    83 289C A9 63			lda #<[[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y/2]*CHAR_PIXELS_Y]+3]
    84 289E C5 B4			cmp _playerLevelBottomY_H1
    85 28A0 B0 0D			bcs UCW_set_target_y
    86
    87 28A2			UCW_force_botto_limit
    88 28A2 A9 00			lda #>[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIXELS_Y]
    89 28A4 8D 52 2A			sta _windowTargetPosY_H2
    90 28A7 A9 00			lda #<[[LEVEL_CHAR_SIZE_Y-WINDOW_CHAR_SIZE_Y]*CHAR_PIXELS_Y]
    91 28A9 8D 53 2A			sta _windowTargetPosY_H1
    92
    93 28AC 4C BE 28			jmp UCW_get_deltas
    94
    95
    96 				;------------------------------------------------------------
    97 				; no clamp, use current player Y position and substract half the window size
    98 28AF			UCW_set_target_y
    99 28AF A5 B1			lda _playerLevelTopY_H1
   100 28B1 38				sec
   101 28B2 E9 5C			sbc #<[[WINDOW_CHAR_SIZE_Y*CHAR_PIXELS_Y/2]-4]
   102 28B4 8D 53 2A			sta _windowTargetPosY_H1
   103 28B7 A5 B0			lda _playerLevelTopY_H2
   104 28B9 E9 00			sbc #>[[WINDOW_CHAR_SIZE_Y*CHAR_PIXELS_Y/2]-4]
   105 28BB 8D 52 2A			sta _windowTargetPosY_H2
   106
   107
   108 				;--------------------------------------------------------------------------------
   109 				; calculate deltas in X and Y for the current and the target window pos,
   110 				; update the current window pos according to the distance to the target
   111 				; (compare the level window with the target pos, get the delta and divide it by 8, so
   112 				; the movement speed is proportional to the distance, with a minimum step of 1)
   113
   114 28BE			UCW_get_deltas
   115
   116 28BE			UCW_check_deltaX			; compare target X and current X
   117 28BE A5 9D			lda _levelWindowX_H2
   118 28C0 CD 50 2A			cmp _windowTargetPosX_H2
   119 28C3 90 4D			bcc UCW_deltaX_positive
   120 28C5 D0 0C			bne UCW_deltaX_negative
   121 					
   122 28C7 A5 9E			lda _levelWindowX_H1
   123 28C9 CD 51 2A			cmp _windowTargetPosX_H1
   124 					;beq UCW_deltaX_exit		; target X equal to current X
   125 28CC 90 44			bcc UCW_deltaX_positive
   126 28CE D0 03			bne UCW_deltaX_negative
   127 28D0 4C 4E 29			jmp UCW_deltaX_exit		; target X equal to current X
   128 					
   129 				;------------------------------------------------------------
   130 28D3			UCW_deltaX_negative			; target X lower than current X
   131 28D3 A5 9E			lda _levelWindowX_H1
   132 28D5 38				sec
   133 28D6 ED 51 2A			sbc _windowTargetPosX_H1
   134 28D9 8D 59 2A			sta _windowTargetDeltaX_H1
   135 					
   136 28DC A5 9D			lda _levelWindowX_H2
   137 28DE ED 50 2A			sbc _windowTargetPosX_H2
   138 28E1 8D 58 2A			sta _windowTargetDeltaX_H2
   139
   140 				/* ; first try to do a camera movement "window"
   141 					bne UCW_dxn_divide		; check min delta to really move the window in X
   142 					lda _windowTargetDeltaX_H1
   143 					cmp #16
   144 					bcc UCW_deltaX_exit_jmp
   145 					beq UCW_deltaX_exit_jmp
   146 					sbc #16
   147 					lda _windowTargetDeltaX_H1
   148 					lda _windowTargetDeltaX_H2
   149 					sbc #0
   150 					lda _windowTargetDeltaX_H2
   151 				*/
   151
   152
   153 28E4			UCW_dxn_divide
   154 28E4 AD 58 2A			lda _windowTargetDeltaX_H2
   155 28E7 4A				lsr
   156 28E8 6E 59 2A			ror _windowTargetDeltaX_H1		; /2
   157 28EB 4A				lsr
   158 28EC 6E 59 2A			ror _windowTargetDeltaX_H1		; /4
   159 28EF 4A				lsr
   160 28F0 6E 59 2A			ror _windowTargetDeltaX_H1		; /8
   161 28F3 8D 58 2A			sta _windowTargetDeltaX_H2
   162
   163 28F6 0D 59 2A			ora _windowTargetDeltaX_H1		; check that delta X is greater than zero
   164 28F9 D0 05			bne UCW_apply_negative_deltaX
   165 28FB A9 01			lda #MINIMUM_CAMERA_STEP
   166 28FD 8D 59 2A			sta _windowTargetDeltaX_H1
   167
   168 2900			UCW_apply_negative_deltaX
   169 2900 A5 9E			lda _levelWindowX_H1
   170 2902 38				sec
   171 2903 ED 59 2A			sbc _windowTargetDeltaX_H1
   172 2906 85 9E			sta _levelWindowX_H1
   173 2908 A5 9D			lda _levelWindowX_H2
   174 290A ED 58 2A			sbc _windowTargetDeltaX_H2
   175 290D 85 9D			sta _levelWindowX_H2
   176
   177 290F			UCW_deltaX_exit_jmp
   178 290F 4C 4E 29			jmp UCW_deltaX_exit
   179
   180 				;------------------------------------------------------------
   181 2912			UCW_deltaX_positive			; target X greater than current X
   182 2912 AD 51 2A			lda _windowTargetPosX_H1
   183 2915 38				sec
   184 2916 E5 9E			sbc _levelWindowX_H1
   185 2918 8D 59 2A			sta _windowTargetDeltaX_H1
   186 					
   187 291B AD 50 2A			lda _windowTargetPosX_H2
   188 291E E5 9D			sbc _levelWindowX_H2
   189 2920 8D 58 2A			sta _windowTargetDeltaX_H2
   190
   191 				/* ; first try to do a camera movement "window"	
   192 					bne UCW_dxp_divide		; check min delta to really move the window in X
   193 					lda _windowTargetDeltaX_H1
   194 					cmp #16
   195 					bcc UCW_deltaX_exit
   196 					beq UCW_deltaX_exit
   197 					sbc #16
   198 					lda _windowTargetDeltaX_H1
   199 					lda _windowTargetDeltaX_H2
   200 					sbc #0
   201 					lda _windowTargetDeltaX_H2
   202 				*/
   202
   203
   204 2923			UCW_dxp_divide
   205 2923 AD 58 2A			lda _windowTargetDeltaX_H2
   206 2926 4A				lsr
   207 2927 6E 59 2A			ror _windowTargetDeltaX_H1		; /2
   208 292A 4A				lsr
   209 292B 6E 59 2A			ror _windowTargetDeltaX_H1		; /4
   210 292E 4A				lsr
   211 292F 6E 59 2A			ror _windowTargetDeltaX_H1		; /8
   212 2932 8D 58 2A			sta _windowTargetDeltaX_H2
   213
   214 2935 0D 59 2A			ora _windowTargetDeltaX_H1		; check that delta X is greater than zero
   215 2938 D0 05			bne UCW_apply_positive_deltaX
   216 293A A9 01			lda #MINIMUM_CAMERA_STEP
   217 293C 8D 59 2A			sta _windowTargetDeltaX_H1
   218
   219 293F			UCW_apply_positive_deltaX
   220 293F A5 9E			lda _levelWindowX_H1
   221 2941 18				clc
   222 2942 6D 59 2A			adc _windowTargetDeltaX_H1
   223 2945 85 9E			sta _levelWindowX_H1
   224 2947 A5 9D			lda _levelWindowX_H2
   225 2949 6D 58 2A			adc _windowTargetDeltaX_H2
   226 294C 85 9D			sta _levelWindowX_H2
   227
   228 294E			UCW_deltaX_exit
   229
   230 				;--------------------------------------------------------------------------------
   231 294E			UCW_check_deltaY			; compare target Y and current Y
   232 294E A5 9F			lda _levelWindowY_H2
   233 2950 CD 52 2A			cmp _windowTargetPosY_H2
   234 2953 90 44			bcc UCW_deltaY_positive
   235 2955 D0 09			bne UCW_deltaY_negative
   236 					
   237 2957 A5 A0			lda _levelWindowY_H1
   238 2959 CD 53 2A			cmp _windowTargetPosY_H1
   239 295C F0 71			beq UCW_deltaY_exit		; target Y equal to current Y
   240 295E 90 39			bcc UCW_deltaY_positive
   241
   242 				;------------------------------------------------------------
   243 2960			UCW_deltaY_negative			; target Y lower than current Y
   244 2960 A5 A0			lda _levelWindowY_H1
   245 2962 38				sec
   246 2963 ED 53 2A			sbc _windowTargetPosY_H1
   247 2966 8D 5B 2A			sta _windowTargetDeltaY_H1
   248 2969 A5 9F			lda _levelWindowY_H2
   249 296B ED 52 2A			sbc _windowTargetPosY_H2
   250
   251 296E 4A				lsr
   252 296F 6E 5B 2A			ror _windowTargetDeltaY_H1		; /2
   253 2972 4A				lsr
   254 2973 6E 5B 2A			ror _windowTargetDeltaY_H1		; /4
   255 2976 4A				lsr
   256 2977 6E 5B 2A			ror _windowTargetDeltaY_H1		; /8
   257 297A 8D 5A 2A			sta _windowTargetDeltaY_H2
   258
   259 297D 0D 5B 2A			ora _windowTargetDeltaY_H1		; check that delta Y is greater than zero
   260 2980 D0 05			bne UCW_apply_negative_deltaY
   261 2982 A9 01			lda #MINIMUM_CAMERA_STEP
   262 2984 8D 5B 2A			sta _windowTargetDeltaY_H1
   263
   264 2987			UCW_apply_negative_deltaY
   265 2987 A5 A0			lda _levelWindowY_H1
   266 2989 38				sec
   267 298A ED 5B 2A			sbc _windowTargetDeltaY_H1
   268 298D 85 A0			sta _levelWindowY_H1
   269 298F A5 9F			lda _levelWindowY_H2
   270 2991 ED 5A 2A			sbc _windowTargetDeltaY_H2
   271 2994 85 9F			sta _levelWindowY_H2
   272
   273 2996 4C CF 29			jmp UCW_deltaY_exit
   274
   275 				;------------------------------------------------------------
   276 2999			UCW_deltaY_positive			; target Y greater than current Y
   277 2999 AD 53 2A			lda _windowTargetPosY_H1
   278 299C 38				sec
   279 299D E5 A0			sbc _levelWindowY_H1
   280 299F 8D 5B 2A			sta _windowTargetDeltaY_H1
   281 29A2 AD 52 2A			lda _windowTargetPosY_H2
   282 29A5 E5 9F			sbc _levelWindowY_H2
   283
   284 29A7 4A				lsr
   285 29A8 6E 5B 2A			ror _windowTargetDeltaY_H1		; /2
   286 29AB 4A				lsr
   287 29AC 6E 5B 2A			ror _windowTargetDeltaY_H1		; /4
   288 29AF 4A				lsr
   289 29B0 6E 5B 2A			ror _windowTargetDeltaY_H1		; /8
   290 29B3 8D 5A 2A			sta _windowTargetDeltaY_H2
   291
   292 29B6 0D 5B 2A			ora _windowTargetDeltaY_H1		; check that delta Y is greater than zero
   293 29B9 D0 05			bne UCW_apply_positive_deltaY
   294 29BB A9 01			lda #MINIMUM_CAMERA_STEP
   295 29BD 8D 5B 2A			sta _windowTargetDeltaY_H1
   296
   297 29C0			UCW_apply_positive_deltaY
   298 29C0 A5 A0			lda _levelWindowY_H1
   299 29C2 18				clc
   300 29C3 6D 5B 2A			adc _windowTargetDeltaY_H1
   301 29C6 85 A0			sta _levelWindowY_H1
   302 29C8 A5 9F			lda _levelWindowY_H2
   303 29CA 6D 5A 2A			adc _windowTargetDeltaY_H2
   304 29CD 85 9F			sta _levelWindowY_H2
   305
   306 29CF			UCW_deltaY_exit
   307
   308 				;--------------------------------------------------------------------------------
   309 				; dummy update, just use the target position
   310 				; 	lda _windowTargetPosX_H2
   311 				; 	sta _levelWindowX_H2
   312 				; 	lda _windowTargetPosX_H1
   313 				; 	sta _levelWindowX_H1
   314 				; 	lda _windowTargetPosY_H2
   315 				; 	sta _levelWindowY_H2
   316 				; 	lda _windowTargetPosY_H1
   317 				; 	sta _levelWindowY_H1
   318
   319
   320 				;--------------------------------------------------------------------------------
   321 				; update all LMS in the display list
   322 29CF			UCW_update_LMS
   323 29CF A5 9D			lda _levelWindowX_H2
   324 29D1 8D 55 2A			sta _screenBaseAddress1+1
   325 29D4 A5 9E			lda _levelWindowX_H1
   326
   327 29D6 4E 55 2A			lsr _screenBaseAddress1+1
   328 29D9 6A				ror						; /2
   329 29DA 4E 55 2A			lsr _screenBaseAddress1+1
   330 29DD 6A				ror						; /4 == CHAR_PIXELS_X
   331
   332 29DE 18				clc
   333 29DF 69 FF			adc #<[GameScrnAddress-1]
   334 29E1 8D 56 2A			sta _screenBaseAddress2
   335 29E4 AD 55 2A			lda _screenBaseAddress1+1
   336 29E7 69 AF			adc #>[GameScrnAddress-1]
   337 29E9 8D 57 2A			sta _screenBaseAddress2+1
   338
   339
   340 29EC A5 9F			lda _levelWindowY_H2
   341 29EE 8D 55 2A			sta _screenBaseAddress1+1
   342 29F1 A5 A0			lda _levelWindowY_H1
   343
   344 29F3 4E 55 2A			lsr _screenBaseAddress1+1
   345 29F6 6A				ror						; /2
   346 29F7 4E 55 2A			lsr _screenBaseAddress1+1
   347 29FA 6A				ror						; /4
   348 29FB 4E 55 2A			lsr _screenBaseAddress1+1
   349 29FE 6A				ror						; /8 == CHAR_PIXELS_Y
   350
   351 29FF AA				tax
   352
   353 2A00 BD 68 2A			lda TabMultiply82_LSB,x
   354 2A03 18				clc
   355 2A04 6D 56 2A			adc _screenBaseAddress2
   356 2A07 8D 56 2A			sta _screenBaseAddress2
   357 2A0A BD 82 2A			lda TabMultiply82_MSB,x
   358 2A0D 6D 57 2A			adc _screenBaseAddress2+1
   359 2A10 8D 57 2A			sta _screenBaseAddress2+1
   360
   361
   362 2A13 A2 00			ldx #0
   363
   364 2A15			UCW_update_LMS_loop
   365 2A15 AD 56 2A			lda _screenBaseAddress2
   366 2A18 9D 04 06			sta DL1_LMS1+1,x		; should update this outside the screen zone!
   367 2A1B AD 57 2A			lda _screenBaseAddress2+1
   368 2A1E 9D 05 06			sta DL1_LMS1+2,x		; should update this outside the screen zone!
   369
   370 2A21 AD 56 2A			lda _screenBaseAddress2
   371 2A24 18				clc
   372 2A25 69 29			adc #LEVEL_CHAR_SIZE_X
   373 2A27 8D 56 2A			sta _screenBaseAddress2
   374 2A2A AD 57 2A			lda _screenBaseAddress2+1
   375 2A2D 69 00			adc #0
   376 2A2F 8D 57 2A			sta _screenBaseAddress2+1
   377
   378 2A32 E8				inx
   379 2A33 E8				inx
   380 2A34 E8				inx
   381 2A35 E0 4B			cpx #[[WINDOW_CHAR_SIZE_Y+1]*3]
   382 2A37 D0 DC			bne UCW_update_LMS_loop
   383
   384
   385 				;--------------------------------------------------------------------------------
   386 				; update HSCROL and VSCROL with the offsets of the window pos
   387 2A39 A5 9E			lda _levelWindowX_H1
   388 2A3B 29 03			and #[CHAR_PIXELS_X-1]
   389 2A3D AA				tax
   390 2A3E BD 5C 2A			lda TabOffsetForHSCROL,x
   391 2A41 8D 04 D4			sta HSCROL	; should update this outside the screen zone!
   392
   393 2A44 A5 A0			lda _levelWindowY_H1
   394 2A46 29 07			and #[CHAR_PIXELS_Y-1]
   395 2A48 AA				tax
   396 2A49 BD 60 2A			lda TabOffsetForVSCROL,x
   397 2A4C 8D 05 D4			sta VSCROL	; should update this outside the screen zone!
   398
   399
   400 2A4F 60				rts
   401
   402
   403 2A50 00			_windowTargetPosX_H2		.byte 0
   404 2A51 00			_windowTargetPosX_H1		.byte 0
   405 2A52 00			_windowTargetPosY_H2		.byte 0
   406 2A53 00			_windowTargetPosY_H1		.byte 0
   407
   408 2A54 00 00		_screenBaseAddress1		.word 0
   409 2A56 00 00		_screenBaseAddress2		.word 0
   410
   411 2A58 00			_windowTargetDeltaX_H2		.byte 0
   412 2A59 00			_windowTargetDeltaX_H1		.byte 0
   413 2A5A 00			_windowTargetDeltaY_H2		.byte 0
   414 2A5B 00			_windowTargetDeltaY_H1		.byte 0
   415
   416 2A5C			TabOffsetForHSCROL
   417 2A5C 0C 0B 0A 09			.byte 12,11,10,9
   418 2A60			TabOffsetForVSCROL
   419 2A60 00 01 02 03 04 05 + 	.byte 0,1,2,3,4,5,6,7
   420
   421 2A68			TabMultiply82_LSB
   422 2A68 00 52 A4 F6 48 9A + 	:26 .byte <[#*82]
   423 2A82			TabMultiply82_MSB
   424 2A82 00 00 00 00 01 01 + 	:26 .byte >[#*82]
   535 2A9C					icl "PlayerMovement.Asm"				; All player movement methods
Source: E:\_8BitProjects\Series\Lessons\Lesson01\PlayerMovement.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerMovement.Asm
     5 				;
     6 				;	Modified On:	Thur Apr 27, 2018 11:30 AM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;				
    11 				;***************************************************************************************************
    12 				;
    13 				;*****	Local Storage
    14 				;
    15 2A9C 00			_hldA							.byte $00
    16 2A9D 00			_hldY							.byte $00
    17 2A9E 00			_hldX							.byte $00
    18
    19 2A9F 00			_revX							.byte $00
    20 2AA0 00			_revIndex						.byte $00
    21 2AA1 00			_revHeight						.byte $00
    22 2AA2 00			_revOffset						.byte $00
    23
    24 2AA3 00			_animCount						.byte $00
    25 2AA4 00			_animFrame						.byte $00
    26 2AA5 00			_animIndex        				.byte $00
    27 2AA6 00			_animHeight						.byte $00
    28 2AA7 00			_animOffset						.byte $00	
    29
    30 2AA8 00			_leftTopChar					.byte $00
    31 2AA9 00			_rightTopChar					.byte $00
    32
    33 2AAA 00			_charBuffer_H2					.byte $00
    34 2AAB 00			_leftBottomChar					.byte $00
    35 2AAC 00			_rightBottomChar				.byte $00
    36 2AAD 00			_middleBottomChar				.byte $00
    37
    38 2AAE 00			_bottomPosOffsetX				.byte $00
    39 2AAF 00			_bottomPosOffsetY				.byte $00
    40
    41 2AB0 00			_playerExplosionStep			.byte $00
    42 2AB1 00			_middleBottomCharPosX			.byte $00
    43 2AB2 00			_waterPlayerDirectionFlag		.byte $00
    44 2AB3 00			_playerOnWaterSurfaceFlag		.byte $00
    45 2AB4 00			_playerExplosionScreenTopY_H1	.byte $00
    46 2AB5 00			_playerExplosionScreenTopY_L1	.byte $00
    47
    48 				;
    49 				;***************************************************************************************************
    50 				;
    51 				;	DrawPlayer
    52 				;
    53 				;***************************************************************************************************
    54 				;
    55 2AB6			.proc DrawPlayer
    56
    57 2AB6 A5 A5				lda _playerBaseColor
    58 2AB8 8D 12 D0				sta COLPM0
    59 						
    60 2ABB A5 A6				lda _playerBaseColor+1
    61 2ABD 8D 13 D0				sta COLPM1
    62 						
    63 2AC0 A5 A7				lda _playerBaseColor+2
    64 2AC2 8D 14 D0				sta COLPM2
    65
    66 2AC5 A5 B6				lda _playerScreenLeftX
    67 2AC7 8D 00 D0				sta HPOSP0
    68 2ACA 8D 01 D0				sta HPOSP1
    69 2ACD 8D 02 D0				sta HPOSP2
    70
    71 2AD0 A5 A9				lda _redrawPlayerCounter
    72 2AD2 D0 03				bne ZeroDraw		
    73 2AD4 4C 17 2B				jmp Exit				
    74
    75 				;*****	Zero Player Area
    76 				;
    77 2AD7			ZeroDraw
    78 						
    79 2AD7 A9 00				lda #0
    80 2AD9 85 A9				sta _redrawPlayerCounter
    81 2ADB 20 CB 2B				jsr SetAnimationIndex
    82
    83 2ADE A9 00				lda #0
    84 2AE0 A2 00				ldx #0
    85 2AE2 A4 B9				ldy _oldPlayerScreenTopY	
    86
    87 				;*****	Zero fill
    88 				;
    89 2AE4			ZeroFill	
    90 					
    91 2AE4 99 00 A4				sta Player0,y
    92 2AE7 99 00 A5				sta Player1,y
    93 2AEA 99 00 A6				sta Player2,y
    94 						
    95 2AED C8					iny
    96 2AEE E8					inx
    97 2AEF E0 15				cpx #PLR_HEIGHT
    98 2AF1 D0 F1				bne ZeroFill
    99
   100 2AF3 AE A5 2A				ldx _animIndex
   101 2AF6 20 81 2B				jsr FlipPlayer		
   102
   103 2AF9 AE A7 2A				ldx _animOffset		
   104 2AFC A4 B7				ldy _playerScreenTopY	
   105
   106 				;***** Fill in player
   107 				;
   108 2AFE			Fill	
   109
   110 2AFE BD D3 43				lda TabPlayerShape_01,x
   111 2B01 99 00 A4				sta Player0,y
   112 								
   113 2B04 BD 12 44				lda TabPlayerShape_01A,x
   114 2B07 99 00 A5				sta Player1,y
   115 						
   116 2B0A BD 51 44				lda TabPlayerShape_01B,x
   117 2B0D 99 00 A6				sta Player2,y
   118 						
   119 2B10 C8					iny
   120 2B11 E8					inx
   121 						
   122 2B12 EC A6 2A				cpx _animHeight
   123 2B15 90 E7				bcc Fill
   124
   125 				;*****	Exit
   126 				;
   127 2B17			Exit
   128 2B17 60					rts
   129
   130 				.endp
   131
   132 				;
   133 				;**************************************************************************************************
   134 				; DrawPlayerExplosion
   135 				;**************************************************************************************************
   136 				;
   137 2B18			.proc DrawPlayerExplosion
   138 2B18 A5 A1				lda _missleBaseColor
   139 2B1A 8D 15 D0				sta COLPM3
   140
   141 				;************************************************
   142 				;
   143 2B1D			DPE_erase										; erase previous player explosion frame
   144 2B1D A2 00				ldx #0
   145 2B1F AC B4 2A				ldy _playerExplosionScreenTopY_H1
   146
   147 				;************************************************
   148 				;
   149 2B22			DPE_erase_loop
   150 2B22 A9 00				lda #0
   151 2B24 99 00 A4				sta Player0,y
   152 2B27 99 00 A5				sta Player1,y
   153 2B2A 99 00 A6				sta Player2,y
   154 						
   155 2B2D 98					tya
   156 2B2E 18					clc
   157 2B2F 6D B0 2A				adc _playerExplosionStep
   158 2B32 B0 06				bcs DPE_update_frame
   159 2B34 A8					tay
   160
   161 2B35 E8					inx
   162 2B36 E4 BB				cpx _playerSizeY
   163 2B38 D0 E8				bne DPE_erase_loop
   164
   165 				;************************************************
   166 				; 	update step and explosion starting line
   167 				; 	if step +1 --> line - 3.5
   168 				; 	if step +2 --> line - 7.0
   169 				;
   170 2B3A			DPE_update_frame
   171 2B3A AD B5 2A				lda _playerExplosionScreenTopY_L1
   172 2B3D 38					sec
   173 2B3E E9 80				sbc #$80
   174 2B40 8D B5 2A				sta _playerExplosionScreenTopY_L1
   175
   176 2B43 AD B4 2A				lda _playerExplosionScreenTopY_H1
   177 2B46 E9 03				sbc #$03
   178 2B48 B0 06				bcs DPE_do_update
   179
   180 2B4A 20 46 24				jsr InitPlayerInfo						; reached top of the screen, end explosion, respawn player
   181 2B4D 4C 80 2B				jmp DPE_exit
   182 					
   183 				;************************************************
   184 				;
   185 2B50			DPE_do_update
   186 2B50 8D B4 2A				sta _playerExplosionScreenTopY_H1
   187 2B53 EE B0 2A				inc _playerExplosionStep				; step +1
   188
   189 				;************************************************
   190 				; draw new player explosion frame
   191 2B56			DPE_draw										
   192 2B56 A2 00				ldx #0
   193 2B58 AC B4 2A				ldy _playerExplosionScreenTopY_H1
   194
   195 				;************************************************
   196 				;
   197 2B5B			DPE_draw_loop
   198 2B5B BD D3 43				lda TabPlayerShape_01,x
   199 2B5E F0 03				beq DPE_draw_p1
   200 2B60 99 00 A4				sta Player0,y
   201
   202 				;************************************************
   203 				;
   204 2B63			DPE_draw_p1
   205 2B63 BD 12 44				lda TabPlayerShape_01A,x
   206 2B66 F0 03				beq DPE_draw_p2	
   207 2B68 99 00 A5				sta Player1,y
   208
   209 				;************************************************
   210 				;
   211 2B6B			DPE_draw_p2	
   212 2B6B BD 51 44				lda TabPlayerShape_01B,x
   213 2B6E F0 03				beq DPE_draw_end
   214 2B70 99 00 A6				sta Player2,y
   215
   216 				;************************************************
   217 				;
   218 2B73			DPE_draw_end
   219 2B73 98					tya
   220 2B74 18					clc
   221 2B75 6D B0 2A				adc _playerExplosionStep
   222 2B78 B0 06				bcs DPE_exit
   223 2B7A A8					tay
   224 2B7B E8					inx
   225 2B7C E4 BB				cpx _playerSizeY
   226 2B7E D0 DB				bne DPE_draw_loop
   227
   228 				;************************************************
   229 				;
   230 2B80			DPE_exit
   231 						
   232 2B80 60					rts
   233
   234 				.endp		
   235
   236 				;
   237 				;***************************************************************************************************
   238 				;
   239 				;	FlipPlayer
   240 				;
   241 				;***************************************************************************************************
   242 				;
   243 2B81			.proc FlipPlayer
   244 					
   245 2B81 48					pha
   246 2B82 8A					txa
   247 2B83 48					pha
   248 2B84 98					tya
   249 2B85 48					pha	
   250 							
   251 2B86 BD CC 43				lda TabAnimationMap[0]+2,x	
   252 2B89 C5 D6				cmp _lastplayerSideDirection
   253 2B8B F0 38				beq FlipExit
   254
   255 2B8D BD CA 43				lda TabAnimationMap[0],x
   256 2B90 8D A2 2A				sta _revOffset
   257 								
   258 2B93 BD CB 43				lda TabAnimationMap[0]+1,x
   259 2B96 8D A1 2A				sta _revHeight
   260 						
   261 2B99 A5 D6				lda _lastPlayerSideDirection
   262 2B9B 9D CC 43				sta TabAnimationMap[0]+2,x		
   263 						
   264 2B9E A0 00				ldy #0
   265 2BA0 AE A2 2A				ldx _revOffset
   266
   267 				;*****	Flip shapes
   268 				;						
   269 2BA3 BD D3 43		Flip	lda TabPlayerShape_01,x
   270 2BA6 20 78 2C				jsr ReverseSprite 
   271 2BA9 9D D3 43				sta TabPlayerShape_01,x
   272 						
   273 2BAC BD 12 44				lda TabPlayerShape_01A,x
   274 2BAF 20 78 2C				jsr ReverseSprite 
   275 2BB2 9D 12 44				sta TabPlayerShape_01A,x
   276 						
   277 2BB5 BD 51 44				lda TabPlayerShape_01B,x
   278 2BB8 20 78 2C				jsr ReverseSprite 
   279 2BBB 9D 51 44				sta TabPlayerShape_01B,x
   280 						
   281 2BBE E8					inx
   282 2BBF C8					iny
   283 2BC0 CC A1 2A				cpy _revHeight
   284 2BC3 D0 DE				bne Flip
   285
   286 				;*****	Flip Exit	
   287 				;	
   288 2BC5			FlipExit
   289 2BC5 68					pla
   290 2BC6 A8					tay
   291 2BC7 68					pla
   292 2BC8 AA					tax
   293 2BC9 68					pla
   294 2BCA 60					rts
   295 				.endp
   296
   297 				;
   298 				;***************************************************************************************************
   299 				; 
   300 				;	SetAnimationIndex
   301 				;
   302 				;***************************************************************************************************
   303 				;
   304 2BCB			.proc SetAnimationIndex
   305
   306 2BCB A5 DB				lda _playerState
   307 						
   308 				;*****	Check State
   309 				;
   310 2BCD			CheckState
   311
   312 2BCD C9 01				cmp #PS_OVER_PLATFORM
   313 2BCF F0 19				beq CheckWalking
   314 							
   315 2BD1 C9 00				cmp #PS_STATIC
   316 2BD3 F0 56				beq StandingIndex
   317 						
   318 2BD5 C9 02				cmp #PS_JUMPING
   319 2BD7 F0 52				beq StandingIndex
   320 						
   321 2BD9 C9 03				cmp #PS_FALLING
   322 2BDB F0 4E				beq StandingIndex
   323 								
   324 2BDD C9 04				cmp #PS_CLIMBING
   325 2BDF F0 4A				beq StandingIndex
   326 								
   327 2BE1 C9 05				cmp #PS_IN_WATER
   328 2BE3 F0 46				beq StandingIndex
   329 								
   330 2BE5 C9 07				cmp #PS_LOSE
   331 2BE7 4C 2B 2C				jmp StandingIndex		
   332 						 
   333 				;*****	Check Walking
   334 				;		 
   335 2BEA			CheckWalking
   336 						
   337 2BEA A5 DD				lda _stick0
   338 2BEC 29 0C				and #[STICK_RIGHT | STICK_LEFT]
   339 2BEE C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
   340 2BF0 D0 03				bne ProcessFrame
   341 2BF2 4C 2B 2C				jmp StandingIndex
   342 						
   343 				;*****	Process the fram			
   344 				;
   345 2BF5			ProcessFrame		
   346
   347 2BF5 AD A4 2A				lda _animFrame
   348 2BF8 69 01				adc #$01
   349 2BFA 8D A4 2A				sta _animFrame
   350
   351 				;*****	Is Walking
   352 				;		
   353 2BFD			IsWalking
   354 						
   355 2BFD 29 0C				and #12
   356 2BFF C9 0C				cmp #12
   357 2C01 D0 03				bne CheckOne
   358 2C03 4C 26 2C				jmp WalkingIndex1
   359
   360 				;*****	Check One for walking		
   361 				;
   362 2C06			CheckOne
   363 						
   364 2C06 AD A4 2A				lda _animFrame
   365 2C09 29 08				and #8		
   366 2C0B C9 08				cmp #8
   367 2C0D D0 03				bne CheckTwo
   368 2C0F 4C 2B 2C				jmp StandingIndex
   369 						
   370 				;***** Check Two for walking		
   371 				;
   372 2C12			CheckTwo
   373 						
   374 2C12 AD A4 2A				lda _animFrame
   375 2C15 29 04				and #4
   376 2C17 C9 04				cmp #4
   377 2C19 D0 03				bne CheckThree		
   378 2C1B 4C 21 2C				jmp WalkingIndex
   379
   380 				;*****	Check Three for walking
   381 				;
   382 2C1E			CheckThree
   383 						
   384 2C1E 4C 2B 2C				jmp StandingIndex		
   385
   386 				;*****	Walking index
   387 				;
   388 2C21			WalkingIndex
   389 						
   390 2C21 A9 03				lda #$03
   391 2C23 4C 2D 2C				jmp ReturnExit		
   392
   393 				;*****	Wakjubg one index
   394 				;
   395 2C26			WalkingIndex1
   396 						
   397 2C26 A9 06				lda #$06
   398 2C28 4C 2D 2C				jmp ReturnExit		
   399
   400 				;***** Standing index
   401 				;
   402 2C2B			StandingIndex
   403 						
   404 2C2B A9 00				lda #0	
   405
   406 				;*****	Return exit
   407 				;				
   408 2C2D			ReturnExit
   409 						
   410 2C2D 8D A5 2A				sta _animIndex
   411 2C30 AA					tax	
   412 2C31 BD CA 43				lda TabAnimationMap,x
   413 2C34 8D A7 2A				sta _animOffset
   414 2C37 BD CB 43				lda TabAnimationMap+1,x
   415 2C3A 8D A6 2A				sta _animHeight
   416 								
   417 2C3D 60					rts		
   418 				.endp
   419
   420 				;
   421 				;***************************************************************************************************
   422 				;
   423 				;	SetPlayerInfo
   424 				;
   425 				;***************************************************************************************************
   426 				;
   427 2C3E			.proc SetPlayerInfo
   428
   429 2C3E A5 AB				lda _playerLevelLeftX_H1				; update right coordinate
   430 2C40 18					clc
   431 2C41 65 BC				adc _playerSizeXMinusOne
   432 2C43 85 AE				sta _playerLevelRightX_H1
   433 2C45 A5 AA				lda _playerLevelLeftX_H2
   434 2C47 69 00				adc #0
   435 2C49 85 AD				sta _playerLevelRightX_H2
   436
   437 2C4B A5 B4				lda _playerLevelBottomY_H1				; update top coordinate
   438 2C4D 38					sec
   439 2C4E E5 BD				sbc _playerSizeYMinusOne
   440 2C50 85 B1				sta _playerLevelTopY_H1
   441 2C52 A5 B3				lda _playerLevelBottomY_H2
   442 2C54 E9 00				sbc #0
   443 2C56 85 B0				sta _playerLevelTopY_H2
   444
   445 2C58 60					rts
   446 						
   447 				.endp		
   448
   449 				;
   450 				;***************************************************************************************************
   451 				;
   452 				; 	SetPlayerScreenPos
   453 				;
   454 				;***************************************************************************************************
   455 				;
   456 2C59			.proc SetPlayerScreenPos
   457
   458 2C59 A5 B6				lda _playerScreenLeftX					; save old screen pos
   459 2C5B 85 B8				sta _oldPlayerScreenLeftX
   460 						
   461 2C5D A5 B7				lda _playerScreenTopY
   462 2C5F 85 B9				sta _oldPlayerScreenTopY
   463 						
   464 						;
   465 						; get new screen pos
   466 						;
   467 						; 	(this should use the "_H2" positions if the delta between the player
   468 						; 	and the camera is too big, 64 chars in X, or 32 chars in Y)
   469 						;
   470 2C61 A5 AB				lda _playerLevelLeftX_H1
   471 2C63 38					sec
   472 2C64 E5 9E				sbc _levelWindowX_H1
   473 2C66 18					clc
   474 2C67 69 30				adc #PM_BASE_SCREEN_X
   475 2C69 85 B6				sta _playerScreenLeftX
   476
   477 2C6B A5 B1				lda _playerLevelTopY_H1
   478 2C6D 38					sec
   479 2C6E E5 A0				sbc _levelWindowY_H1
   480 2C70 18					clc
   481 2C71 69 20				adc #PM_BASE_SCREEN_Y
   482 2C73 85 B7				sta _playerScreenTopY
   483
   484 2C75 E6 A9				inc _redrawPlayerCounter				; signal for the DLI to redraw the player
   485
   486 2C77 60					rts
   487
   488 				.endp		
   489
   490 				;
   491 				;***************************************************************************************************
   492 				;
   493 				;	ReverseSprite
   494 				;
   495 				;***************************************************************************************************
   496 				;
   497 2C78			.proc ReverseSprite
   498
   499 2C78 8D 9C 2A				sta _hldA
   500 2C7B 8C 9D 2A				sty _hldY
   501 2C7E A0 07			 	ldy #$07 
   502
   503 				;*****	Loop One
   504 				;
   505 2C80			loop   	
   506 2C80 0E 9C 2A				asl _hldA
   507 2C83 6A			        ror 
   508 2C84 88			        dey 
   509 2C85 10 F9		        bpl loop        
   510 2C87 AC 9D 2A		        ldy _hldY
   511 2C8A 60			        rts
   512
   513 				.endp         	
   514
   515 2C8B			AddWaterAccelToSpeed
   516
   517 				; update frame speed with frame accel
   518 2C8B A5 C7			lda _playerSpeedY_L1
   519 2C8D 18				clc
   520 2C8E 65 CF			adc _playerWaterAccelY_L1
   521 2C90 85 C7			sta _playerSpeedY_L1
   522 2C92 A5 C6			lda _playerSpeedY_H1
   523 2C94 65 CE			adc _playerWaterAccelY_H1
   524 2C96 85 C6			sta _playerSpeedY_H1
   525
   526 				; check max frame speed
   527 2C98 C5 D0			cmp _playerMaxWaterSpeedY_H1
   528 2C9A 90 10			bcc AWATS_exit			; lower than max speed
   529 2C9C D0 06			bne AWATS_max_speed		; greater than max speed
   530
   531 				; need to check the low byte
   532 2C9E A5 D1			lda _playerMaxWaterSpeedY_L1
   533 2CA0 C5 C7			cmp _playerSpeedY_L1
   534 2CA2 B0 08			bcs AWATS_exit			; lower or equal to max speed
   535
   536 2CA4			AWATS_max_speed			; is higher than the max speed
   537 2CA4 A5 D0			lda _playerMaxWaterSpeedY_H1
   538 2CA6 85 C6			sta _playerSpeedY_H1
   539 2CA8 A5 D1			lda _playerMaxWaterSpeedY_L1
   540 2CAA 85 C7			sta _playerSpeedY_L1
   541
   542 2CAC			AWATS_exit
   543 2CAC 60				rts
   544
   545
   546 				;================================================================================
   547
   548 2CAD			SubstractWaterAccelToSpeed
   549
   550 				; update frame speed with frame accel
   551 2CAD A5 C7			lda _playerSpeedY_L1
   552 2CAF 38				sec
   553 2CB0 E5 CF			sbc _playerWaterAccelY_L1
   554 2CB2 85 C7			sta _playerSpeedY_L1
   555 2CB4 A5 C6			lda _playerSpeedY_H1
   556 2CB6 E5 CE			sbc _playerWaterAccelY_H1
   557 2CB8 B0 04			bcs SWATS_dont_reset_speed
   558
   559 2CBA			SWATS_reset_speed
   560 2CBA A9 00			lda #0
   561 2CBC 85 C7			sta _playerSpeedY_L1
   562
   563 2CBE			SWATS_dont_reset_speed
   564 2CBE 85 C6			sta _playerSpeedY_H1
   565
   566 2CC0 60				rts
   567
   568
   569 				;================================================================================
   570
   571 2CC1			AddWaterMoveUpAccelToSpeed
   572
   573 				; update frame speed with frame accel
   574 2CC1 A5 C7			lda _playerSpeedY_L1
   575 2CC3 18				clc
   576 2CC4 65 CF			adc _playerWaterAccelY_L1
   577 2CC6 85 C7			sta _playerSpeedY_L1
   578 2CC8 A5 C6			lda _playerSpeedY_H1
   579 2CCA 65 CE			adc _playerWaterAccelY_H1
   580 2CCC 85 C6			sta _playerSpeedY_H1
   581
   582 				; check max frame speed
   583 2CCE C5 D2			cmp _playerMoveWaterSpeedY_H1
   584 2CD0 90 10			bcc AWMUATS_exit			; lower than max speed
   585 2CD2 D0 06			bne AWMUATS_max_speed		; greater than max speed
   586
   587 				; need to check the low byte
   588 2CD4 A5 D3			lda _playerMoveWaterSpeedY_L1
   589 2CD6 C5 C7			cmp _playerSpeedY_L1
   590 2CD8 B0 08			bcs AWMUATS_exit			; lower or equal to max speed
   591
   592 2CDA			AWMUATS_max_speed			; is higher than the max speed
   593 2CDA A5 D2			lda _playerMoveWaterSpeedY_H1
   594 2CDC 85 C6			sta _playerSpeedY_H1
   595 2CDE A5 D3			lda _playerMoveWaterSpeedY_L1
   596 2CE0 85 C7			sta _playerSpeedY_L1
   597
   598 2CE2			AWMUATS_exit
   599 2CE2 60				rts
   600
   601
   602 				;================================================================================
   603
   604 2CE3			AddWaterMoveDownAccelToSpeed
   605
   606 				; check max frame speed
   607 2CE3 A5 D0			lda _playerMaxWaterSpeedY_H1
   608 2CE5 C5 C6			cmp _playerSpeedY_H1
   609 2CE7 90 29			bcc AWMAATS_exit			; greater than max speed, exit
   610 2CE9 D0 06			bne AWMAATS_add			; lower than the max, continue with the add
   611
   612 				; need to check the low byte
   613 2CEB A5 C7			lda _playerSpeedY_L1
   614 2CED C5 D1			cmp _playerMaxWaterSpeedY_L1
   615 2CEF B0 21			bcs AWMAATS_exit			; greater or equal to max speed, exit
   616
   617 2CF1			AWMAATS_add
   618 				; update frame speed with frame accel
   619 2CF1 A5 C7			lda _playerSpeedY_L1
   620 2CF3 18				clc
   621 2CF4 65 CF			adc _playerWaterAccelY_L1
   622 2CF6 85 C7			sta _playerSpeedY_L1
   623 2CF8 A5 C6			lda _playerSpeedY_H1
   624 2CFA 65 CE			adc _playerWaterAccelY_H1
   625 2CFC 85 C6			sta _playerSpeedY_H1
   626
   627 				; check max frame speed
   628 2CFE C5 D0			cmp _playerMaxWaterSpeedY_H1
   629 2D00 90 10			bcc AWMAATS_exit			; lower than max speed
   630 2D02 D0 06			bne AWMAATS_max_speed		; greater than max speed
   631
   632 				; need to check the low byte
   633 2D04 A5 D1			lda _playerMaxWaterSpeedY_L1
   634 2D06 C5 C7			cmp _playerSpeedY_L1
   635 2D08 B0 08			bcs AWMAATS_exit			; lower or equal to max speed
   636
   637 2D0A			AWMAATS_max_speed			; is higher than the max speed
   638 2D0A A5 D0			lda _playerMaxWaterSpeedY_H1
   639 2D0C 85 C6			sta _playerSpeedY_H1
   640 2D0E A5 D1			lda _playerMaxWaterSpeedY_L1
   641 2D10 85 C7			sta _playerSpeedY_L1
   642
   643 2D12			AWMAATS_exit
   644 2D12 60				rts
   645
   646 2D13			SubstractSpeedYToPosition
   647
   648 				; update player position in Y
   649 2D13 A5 B5			lda _playerLevelBottomY_L1
   650 2D15 38				sec
   651 2D16 E5 C7			sbc _playerSpeedY_L1
   652 2D18 85 B5			sta _playerLevelBottomY_L1
   653 2D1A A5 B4			lda _playerLevelBottomY_H1
   654 2D1C E5 C6			sbc _playerSpeedY_H1
   655 2D1E 85 B4			sta _playerLevelBottomY_H1
   656 2D20 A5 B3			lda _playerLevelBottomY_H2
   657 2D22 E9 00			sbc #0
   658 2D24 85 B3			sta _playerLevelBottomY_H2
   659
   660 				; update top coordinate
   661 2D26 A5 B4			lda _playerLevelBottomY_H1
   662 2D28 38				sec
   663 2D29 E5 BD			sbc _playerSizeYMinusOne
   664 2D2B 85 B1			sta _playerLevelTopY_H1
   665 2D2D A5 B3			lda _playerLevelBottomY_H2
   666 2D2F E9 00			sbc #0
   667 2D31 85 B0			sta _playerLevelTopY_H2
   668
   669 				; check collisions for a player moving up
   670
   671 				; check level top limit collision
   672 2D33 B0 0D			bcs SSYTP_check_platfor_bottom
   673
   674 2D35 A9 00			lda #0
   675 2D37 85 B5			sta _playerLevelBottomY_L1
   676 2D39 85 B3			sta _playerLevelBottomY_H2
   677
   678 2D3B A5 BD			lda _playerSizeYMinusOne
   679 2D3D 85 B4			sta _playerLevelBottomY_H1
   680
   681 2D3F 4C 4D 2D			jmp SSYTP_found_collision
   682
   683 2D42			SSYTP_check_platfor_bottom
   684 				; check collision with the bottom of a platform
   685 2D42 A9 00			lda #0
   686 2D44 85 D9			sta _playerTopCollisionFlag
   687
   688 2D46 20 B4 2D			jsr CheckPlayerTopCollision
   689
   690 2D49 A5 D9			lda _playerTopCollisionFlag
   691 2D4B F0 06			beq SSYTP_exit
   692
   693 2D4D			SSYTP_found_collision
   694 2D4D A9 00			lda #0
   695 2D4F 85 C6			sta _playerSpeedY_H1
   696 2D51 85 C7			sta _playerSpeedY_L1
   697
   698 2D53			SSYTP_exit
   699 2D53 60				rts
   700
   701
   702 				;================================================================================
   703
   704 2D54			CheckPlayerBottomDownPos
   705
   706 				; get bottom char line
   707 2D54 A5 B3			lda _playerLevelBottomY_H2
   708 2D56 8D AA 2A			sta _charBuffer_H2
   709
   710 2D59 A5 B4			lda _playerLevelBottomY_H1
   711 2D5B 18				clc
   712 2D5C 6D AF 2A			adc _bottomPosOffsetY
   713 2D5F 90 03			bcc CPBDP_offset_no_carry
   714 2D61 EE AA 2A			inc _charBuffer_H2
   715
   716 2D64			CPBDP_offset_no_carry
   717 2D64 4E AA 2A			lsr _charBuffer_H2		; /2
   718 2D67 6A				ror
   719 2D68 4E AA 2A			lsr _charBuffer_H2		; /4
   720 2D6B 6A				ror
   721 2D6C 4E AA 2A			lsr _charBuffer_H2		; /8 = CHAR_PIXELS_Y
   722 2D6F 6A				ror
   723
   724 2D70 AA				tax
   725 2D71 BD CA 40			lda TabLevelLineAddressLSB,x
   726 2D74 85 E5			sta _ptrLevelLine
   727 2D76 BD CA 41			lda TabLevelLineAddressMSB,x
   728 2D79 85 E6			sta _ptrLevelLine+1
   729
   730 				; get left to right point char column
   731 2D7B A5 AA			lda _playerLevelLeftX_H2
   732 2D7D 8D AA 2A			sta _charBuffer_H2
   733
   734 2D80 A5 AB			lda _playerLevelLeftX_H1
   735 2D82 18				clc
   736 2D83 6D AE 2A			adc _bottomPosOffsetX
   737 2D86 90 03			bcc CPBDP_no_carry
   738 2D88 EE AA 2A			inc _charBuffer_H2
   739 2D8B			CPBDP_no_carry
   740
   741 2D8B 4E AA 2A			lsr _charBuffer_H2		; /2
   742 2D8E 6A				ror
   743 2D8F 4E AA 2A			lsr _charBuffer_H2		; /4 = CHAR_PIXELS_X
   744 2D92 6A				ror
   745
   746 2D93 A8				tay
   747 2D94 8C B1 2A			sty _middleBottomCharPosX
   748 2D97 B1 E5			lda (_ptrLevelLine),y
   749 2D99 AA				tax
   750 2D9A BD CA 42			lda TabCharDefinition,x
   751 2D9D 8D AD 2A			sta _middleBottomChar
   752
   753 2DA0 60				rts
   754
   755
   756 2DA1			CheckPlayerBottomUpPos
   757
   758 				; get bottom char line
   759 2DA1 A5 B3			lda _playerLevelBottomY_H2
   760 2DA3 8D AA 2A			sta _charBuffer_H2
   761
   762 2DA6 A5 B4			lda _playerLevelBottomY_H1
   763 2DA8 38				sec
   764 2DA9 ED AF 2A			sbc _bottomPosOffsetY
   765 2DAC B0 B6			bcs CPBDP_offset_no_carry
   766 2DAE CE AA 2A			dec _charBuffer_H2
   767
   768 2DB1 4C 64 2D			jmp CPBDP_offset_no_carry
   769
   770 2DB4			CheckPlayerTopCollision
   771
   772 				; update top coordinate
   773 2DB4 A5 B4			lda _playerLevelBottomY_H1
   774 2DB6 38				sec
   775 2DB7 E5 BD			sbc _playerSizeYMinusOne
   776 2DB9 85 B1			sta _playerLevelTopY_H1
   777 2DBB A5 B3			lda _playerLevelBottomY_H2
   778 2DBD E9 00			sbc #0
   779 2DBF 85 B0			sta _playerLevelTopY_H2
   780
   781 				; get top char line
   782 2DC1 A5 B0			lda _playerLevelTopY_H2
   783 2DC3 8D AA 2A			sta _charBuffer_H2
   784 2DC6 A5 B1			lda _playerLevelTopY_H1
   785
   786 2DC8 4E AA 2A			lsr _charBuffer_H2		; /2
   787 2DCB 6A				ror
   788 2DCC 4E AA 2A			lsr _charBuffer_H2		; /4
   789 2DCF 6A				ror
   790 2DD0 4E AA 2A			lsr _charBuffer_H2		; /8 = CHAR_PIXELS_Y
   791 2DD3 6A				ror
   792
   793 2DD4 AA				tax
   794 2DD5 BD CA 40			lda TabLevelLineAddressLSB,x
   795 2DD8 85 E5			sta _ptrLevelLine
   796 2DDA BD CA 41			lda TabLevelLineAddressMSB,x
   797 2DDD 85 E6			sta _ptrLevelLine+1
   798
   799 				; update right coordinate
   800 2DDF A5 AB			lda _playerLevelLeftX_H1
   801 2DE1 18				clc
   802 2DE2 65 BC			adc _playerSizeXMinusOne
   803 2DE4 85 AE			sta _playerLevelRightX_H1
   804 2DE6 A5 AA			lda _playerLevelLeftX_H2
   805 2DE8 69 00			adc #0
   806 2DEA 85 AD			sta _playerLevelRightX_H2
   807
   808 				; get left point char column
   809 2DEC A5 AA			lda _playerLevelLeftX_H2
   810 2DEE 8D AA 2A			sta _charBuffer_H2
   811 2DF1 A5 AB			lda _playerLevelLeftX_H1
   812 2DF3 4E AA 2A			lsr _charBuffer_H2		; /2
   813 2DF6 6A				ror
   814 2DF7 4E AA 2A			lsr _charBuffer_H2		; /4 = CHAR_PIXELS_X
   815 2DFA 6A				ror
   816
   817 2DFB A8				tay
   818 2DFC B1 E5			lda (_ptrLevelLine),y
   819 2DFE AA				tax
   820 2DFF BD CA 42			lda TabCharDefinition,x
   821 2E02 8D A8 2A			sta _leftTopChar
   822
   823 				; get right point char column
   824 2E05 A5 AD			lda _playerLevelRightX_H2
   825 2E07 8D AA 2A			sta _charBuffer_H2
   826 2E0A A5 AE			lda _playerLevelRightX_H1
   827 2E0C 4E AA 2A			lsr _charBuffer_H2		; /2
   828 2E0F 6A				ror
   829 2E10 4E AA 2A			lsr _charBuffer_H2		; /4 = CHAR_PIXELS_X
   830 2E13 6A				ror
   831
   832 2E14 A8				tay
   833 2E15 B1 E5			lda (_ptrLevelLine),y
   834 2E17 AA				tax
   835 2E18 BD CA 42			lda TabCharDefinition,x
   836 2E1B 8D A9 2A			sta _rightTopChar
   837
   838 				; fast collision check
   839 2E1E AD A8 2A			lda _leftTopChar
   840 2E21 29 0F			and #15
   841 2E23 C9 01			cmp #CT_BLOCK
   842 2E25 D0 07			bne CPTC_check_next_char
   843
   844 2E27 AD A8 2A			lda _leftTopChar
   845 2E2A 29 20			and #%00100000
   846 2E2C D0 10			bne CPTC_found_collision
   847
   848 2E2E			CPTC_check_next_char
   849 2E2E AD A9 2A			lda _rightTopChar
   850 2E31 29 0F			and #15
   851 2E33 C9 01			cmp #CT_BLOCK
   852 2E35 D0 2B			bne CPTC_exit
   853
   854 2E37 AD A9 2A			lda _rightTopChar
   855 2E3A 29 20			and #%00100000
   856 2E3C F0 24			beq CPTC_exit
   857
   858 2E3E			CPTC_found_collision
   859 				; need to move the player down
   860 2E3E A9 01			lda #1
   861 2E40 85 D9			sta _playerTopCollisionFlag
   862
   863 2E42 A9 00			lda #0
   864 2E44 85 B5			sta _playerLevelBottomY_L1
   865
   866 2E46 A5 B1			lda _playerLevelTopY_H1
   867 2E48 29 F8			and #%11111000		; mask for CHAR_PIXELS_Y
   868 2E4A 18				clc
   869 2E4B 69 08			adc #CHAR_PIXELS_Y ; +_playerSizeY
   870 2E4D 85 B4			sta _playerLevelBottomY_H1
   871 2E4F A5 B0			lda _playerLevelTopY_H2
   872 2E51 69 00			adc #0
   873 2E53 85 B3			sta _playerLevelBottomY_H2
   874
   875 2E55 A5 B4			lda _playerLevelBottomY_H1
   876 2E57 18				clc
   877 2E58 65 BD			adc _playerSizeYMinusOne
   878 2E5A 85 B4			sta _playerLevelBottomY_H1
   879 2E5C A5 B3			lda _playerLevelBottomY_H2
   880 2E5E 69 00			adc #0
   881 2E60 85 B3			sta _playerLevelBottomY_H2
   882
   883 2E62			CPTC_exit
   884 2E62 60				rts
   885
   886 					;
   887 				;**************************************************************************************************
   888 				; AddSideAccelToSpeed
   889 				;**************************************************************************************************
   890 				;
   891 2E63			.proc AddSideAccelToSpeed
   892
   893 2E63 A5 BF				lda _playerSideSpeed_L1				; update frame speed with frame accel	
   894 2E65 18					clc
   895 2E66 65 C3				adc _playerSideAccel_L1
   896 2E68 85 BF				sta _playerSideSpeed_L1
   897 						
   898 2E6A A5 BE				lda _playerSideSpeed_H1
   899 2E6C 65 C2				adc _playerSideAccel_H1
   900
   901 				;**************************************************
   902 				;
   903 2E6E			ASATS_entry_point
   904 						
   905 2E6E 85 BE				sta _playerSideSpeed_H1
   906 2E70 C5 C0				cmp _playerMaxSideSpeed_H1				; check max frame speed
   907 2E72 90 10				bcc ASATS_exit							; lower than max speed
   908 2E74 D0 06				bne ASATS_max_speed						; greater than max speed
   909
   910 2E76 A5 C1				lda _playerMaxSideSpeed_L1				; need to check the low byte
   911 2E78 C5 BF				cmp _playerSideSpeed_L1
   912 2E7A B0 08				bcs ASATS_exit							; lower or equal to max speed
   913
   914 				;**************************************************
   915 				;
   916 2E7C			ASATS_max_speed									
   917 						
   918 2E7C A5 C0				lda _playerMaxSideSpeed_H1				; is higher than the max speed
   919 2E7E 85 BE				sta _playerSideSpeed_H1
   920 						
   921 2E80 A5 C1				lda _playerMaxSideSpeed_L1
   922 2E82 85 BF				sta _playerSideSpeed_L1
   923
   924 				;**************************************************
   925 				;
   926 2E84			ASATS_exit		
   927 2E84 60					rts
   928
   929 				.endp
   930 					
   931 				;
   932 				;**************************************************************************************************
   933 				; SubstractSideDeaccelToSpeed
   934 				;**************************************************************************************************
   935 				;
   936 2E85			SubstractSideDeaccelToSpeed
   937
   938 2E85 A5 BF				lda _playerSideSpeed_L1					; update frame speed with frame accel
   939 2E87 38					sec
   940 2E88 E5 C5				sbc _playerSideDeaccel_L1
   941 2E8A 85 BF				sta _playerSideSpeed_L1
   942
   943 2E8C A5 BE				lda _playerSideSpeed_H1
   944 2E8E E5 C4				sbc _playerSideDeaccel_H1
   945 2E90 B0 04				bcs SSDTS_dont_reset_speed
   946
   947 				;************************************************
   948 				;
   949 2E92			SSDTS_reset_speed
   950 2E92 A9 00				lda #0
   951 2E94 85 BF				sta _playerSideSpeed_L1
   952
   953 				;************************************************
   954 				;
   955 2E96			SSDTS_dont_reset_speed
   956 2E96 85 BE				sta _playerSideSpeed_H1
   957
   958 2E98 60					rts	
   959 						
   960 				;
   961 				;**************************************************************************************************
   962 				; SubstractSideSpeedToPosition
   963 				;**************************************************************************************************
   964 				;
   965 2E99			.proc SubstractSideSpeedToPosition
   966
   967 2E99 A5 AC				lda _playerLevelLeftX_L1	; update player side position
   968 2E9B 38					sec
   969 2E9C E5 BF				sbc _playerSideSpeed_L1
   970 2E9E 85 AC				sta _playerLevelLeftX_L1
   971 						
   972 2EA0 A5 AB				lda _playerLevelLeftX_H1
   973 2EA2 E5 BE				sbc _playerSideSpeed_H1
   974 2EA4 85 AB				sta _playerLevelLeftX_H1
   975 						
   976 2EA6 A5 AA				lda _playerLevelLeftX_H2
   977 2EA8 E9 00				sbc #0
   978 2EAA 85 AA				sta _playerLevelLeftX_H2
   979
   980 						; check collisions for a player moving to the left
   981 2EAC B0 0B				bcs SSSTP_check_left_collision			; check level left side limit
   982 2EAE A9 00				lda #0
   983 2EB0 85 AA				sta _playerLevelLeftX_H2
   984 2EB2 85 AB				sta _playerLevelLeftX_H1
   985 2EB4 85 AC				sta _playerLevelLeftX_L1
   986 2EB6 4C C4 2E				jmp SSSTP_found_collision
   987
   988 				;************************************************
   989 				;
   990 2EB9			SSSTP_check_left_collision
   991 						
   992 2EB9 A9 00				lda #0
   993 2EBB 85 DA				sta _playerSideCollisionFlag
   994
   995 2EBD 20 8D 2F				jsr CheckPlayerLeftCollision
   996
   997 2EC0 A5 DA				lda _playerSideCollisionFlag
   998 2EC2 F0 06				beq SSSTP_exit
   999
  1000 				;************************************************
  1001 				;
  1002 2EC4			SSSTP_found_collision
  1003 						
  1004 2EC4 A9 00				lda #0
  1005 2EC6 85 BE				sta _playerSideSpeed_H1
  1006 2EC8 85 BF				sta _playerSideSpeed_L1
  1007
  1008 2ECA			SSSTP_exit
  1009 2ECA 60					rts
  1010 						
  1011 				.endp		
  1012
  1013 				;
  1014 				;**************************************************************************************************
  1015 				; CheckHoleBelowPlayer
  1016 				;**************************************************************************************************
  1017 				;
  1018 2ECB			.proc CheckHoleBelowPlayer
  1019
  1020 						; get bottom char line
  1021 2ECB A5 B3				lda _playerLevelBottomY_H2
  1022 2ECD 8D AA 2A				sta _charBuffer_H2
  1023 2ED0 A5 B4				lda _playerLevelBottomY_H1
  1024 2ED2 18					clc
  1025 2ED3 69 01				adc #1									; check one pixel below the bottom line of the player
  1026 2ED5 90 03				bcc CHBP_get_char_line
  1027 2ED7 EE AA 2A				inc _charBuffer_H2
  1028
  1029 				;************************************************
  1030 				;
  1031 2EDA			CHBP_get_char_line
  1032 						
  1033 2EDA 4E AA 2A				lsr _charBuffer_H2						; /2
  1034 2EDD 6A					ror
  1035 2EDE 4E AA 2A				lsr _charBuffer_H2						; /4
  1036 2EE1 6A					ror
  1037 2EE2 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1038 2EE5 6A					ror
  1039
  1040 						; check bottom level limit
  1041 2EE6 C5 98				cmp _levelCharSizeY
  1042 2EE8 B0 6F				bcs CHBP_no_hole
  1043
  1044 2EEA AA					tax
  1045 2EEB BD CA 40				lda TabLevelLineAddressLSB,x
  1046 2EEE 85 E5				sta _ptrLevelLine
  1047 2EF0 BD CA 41				lda TabLevelLineAddressMSB,x
  1048 2EF3 85 E6				sta _ptrLevelLine+1
  1049
  1050 						; update right coordinate
  1051 2EF5 A5 AB				lda _playerLevelLeftX_H1
  1052 2EF7 18					clc
  1053 2EF8 65 BC				adc _playerSizeXMinusOne
  1054 2EFA 85 AE				sta _playerLevelRightX_H1
  1055 2EFC A5 AA				lda _playerLevelLeftX_H2
  1056 2EFE 69 00				adc #0
  1057 2F00 85 AD				sta _playerLevelRightX_H2
  1058
  1059 						; get left point char column
  1060 2F02 A5 AA				lda _playerLevelLeftX_H2
  1061 2F04 8D AA 2A				sta _charBuffer_H2
  1062 2F07 A5 AB				lda _playerLevelLeftX_H1
  1063 2F09 4E AA 2A				lsr _charBuffer_H2						; /2
  1064 2F0C 6A					ror
  1065 2F0D 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1066 2F10 6A					ror
  1067
  1068 2F11 A8					tay
  1069 2F12 B1 E5				lda (_ptrLevelLine),y
  1070 2F14 AA					tax
  1071 2F15 BD CA 42				lda TabCharDefinition,x
  1072 2F18 8D AB 2A				sta _leftBottomChar
  1073
  1074 						; get right point char column
  1075 2F1B A5 AD				lda _playerLevelRightX_H2
  1076 2F1D 8D AA 2A				sta _charBuffer_H2
  1077 2F20 A5 AE				lda _playerLevelRightX_H1
  1078 2F22 4E AA 2A				lsr _charBuffer_H2						; /2
  1079 2F25 6A					ror
  1080 2F26 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1081 2F29 6A					ror
  1082
  1083 2F2A A8					tay
  1084 2F2B B1 E5				lda (_ptrLevelLine),y
  1085 2F2D AA					tax
  1086 2F2E BD CA 42				lda TabCharDefinition,x
  1087 2F31 8D AC 2A				sta _rightBottomChar
  1088 					
  1089 						; fast collision check
  1090 2F34 AD AB 2A				lda _leftBottomChar
  1091 2F37 29 0F				and #15
  1092 2F39 C9 01				cmp #CT_BLOCK
  1093 2F3B D0 07				bne CHBP_check_next_char
  1094
  1095 2F3D AD AB 2A				lda _leftBottomChar
  1096 2F40 29 10				and #%00010000
  1097 2F42 D0 15				bne CHBP_no_hole
  1098
  1099 				;************************************************
  1100 				;
  1101 2F44			CHBP_check_next_char
  1102 						
  1103 2F44 AD AC 2A				lda _rightBottomChar
  1104 2F47 29 0F				and #15
  1105 2F49 C9 01				cmp #CT_BLOCK
  1106 2F4B D0 07				bne CHBP_hole
  1107
  1108 2F4D AD AC 2A				lda _rightBottomChar
  1109 2F50 29 10				and #%00010000
  1110 2F52 D0 05				bne CHBP_no_hole
  1111
  1112 				;************************************************
  1113 				;
  1114 2F54			CHBP_hole
  1115
  1116 						; need to change the player to the falling state
  1117 2F54 A9 00				lda #0
  1118 2F56 85 D8				sta _playerOverPlatformFlag
  1119 2F58 60					rts
  1120
  1121 				;************************************************
  1122 				;
  1123 2F59			CHBP_no_hole
  1124
  1125 2F59 A9 01				lda #1
  1126 2F5B 85 D8				sta _playerOverPlatformFlag
  1127 2F5D 60					rts
  1128
  1129 				.endp			
  1130
  1131 				;
  1132 				;**************************************************************************************************
  1133 				; CheckPlayerInLevelRightLimit
  1134 				;**************************************************************************************************
  1135 				;
  1136 2F5E			.proc CheckPlayerInLevelRightLimit
  1137
  1138 2F5E A5 AB				lda _playerLevelLeftX_H1				; update right coordinate
  1139 2F60 18					clc
  1140 2F61 65 BC				adc _playerSizeXMinusOne
  1141 2F63 85 AE				sta _playerLevelRightX_H1
  1142 2F65 A5 AA				lda _playerLevelLeftX_H2
  1143 2F67 69 00				adc #0
  1144 2F69 85 AD				sta _playerLevelRightX_H2
  1145
  1146 2F6B C5 99				cmp _levelSizeX_H2
  1147 2F6D 90 1D				bcc CPILRL_exit
  1148 2F6F D0 06				bne CPILRL_reset_pos
  1149
  1150 2F71 A5 AE				lda _playerLevelRightX_H1
  1151 2F73 C5 9A				cmp _levelSizeX_H1
  1152 2F75 90 15				bcc CPILRL_exit
  1153
  1154 				;************************************************
  1155 				;
  1156 2F77			CPILRL_reset_pos
  1157 2F77 A9 00				lda #0
  1158 2F79 85 AC				sta _playerLevelLeftX_L1
  1159
  1160 2F7B A5 9A				lda _levelSizeX_H1
  1161 2F7D 38					sec
  1162 2F7E E5 BA				sbc _playerSizeX
  1163 2F80 85 AB				sta _playerLevelLeftX_H1
  1164 2F82 A5 99				lda _levelSizeX_H2
  1165 2F84 E9 00				sbc #0
  1166 2F86 85 AA				sta _playerLevelLeftX_H2
  1167
  1168 2F88 A9 01				lda #1
  1169 2F8A 85 DA				sta _playerSideCollisionFlag
  1170
  1171 				;************************************************
  1172 				;
  1173 2F8C			CPILRL_exit
  1174 					
  1175 2F8C 60				rts
  1176 					
  1177 				.endp
  1178
  1179 				;
  1180 				;**************************************************************************************************
  1181 				; CheckPlayerLeftCollision
  1182 				;**************************************************************************************************
  1183 				;
  1184 2F8D			.proc CheckPlayerLeftCollision
  1185
  1186 2F8D A5 B4				lda _playerLevelBottomY_H1				; update top coordinate
  1187 2F8F 38					sec
  1188 2F90 E5 BD				sbc _playerSizeYMinusOne
  1189 2F92 85 B1				sta _playerLevelTopY_H1
  1190 						
  1191 2F94 A5 B3				lda _playerLevelBottomY_H2
  1192 2F96 E9 00				sbc #0
  1193 2F98 85 B0				sta _playerLevelTopY_H2
  1194
  1195 2F9A A5 AA				lda _playerLevelLeftX_H2				; get left point char column
  1196 2F9C 8D AA 2A				sta _charBuffer_H2
  1197 2F9F A5 AB				lda _playerLevelLeftX_H1
  1198
  1199 2FA1 4E AA 2A				lsr _charBuffer_H2						; /2
  1200 2FA4 6A					ror
  1201 2FA5 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1202 2FA8 6A					ror
  1203
  1204 2FA9 A8					tay
  1205 2FAA A5 B0				lda _playerLevelTopY_H2				; get top char line	
  1206 2FAC 8D AA 2A				sta _charBuffer_H2
  1207 2FAF A5 B1				lda _playerLevelTopY_H1
  1208
  1209 2FB1 4E AA 2A				lsr _charBuffer_H2						; /2
  1210 2FB4 6A					ror
  1211 2FB5 4E AA 2A				lsr _charBuffer_H2						; /4
  1212 2FB8 6A					ror
  1213 2FB9 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1214 2FBC 6A					ror
  1215
  1216 2FBD AA					tax
  1217 2FBE BD CA 40				lda TabLevelLineAddressLSB,x
  1218 2FC1 85 E5				sta _ptrLevelLine
  1219 2FC3 BD CA 41				lda TabLevelLineAddressMSB,x
  1220 2FC6 85 E6				sta _ptrLevelLine+1
  1221
  1222 2FC8 B1 E5				lda (_ptrLevelLine),y
  1223 2FCA AA					tax
  1224 2FCB BD CA 42				lda TabCharDefinition,x
  1225 2FCE 8D A8 2A				sta _leftTopChar
  1226
  1227 2FD1 A5 B3				lda _playerLevelBottomY_H2				; get bottom char line
  1228 2FD3 8D AA 2A				sta _charBuffer_H2
  1229 2FD6 A5 B4				lda _playerLevelBottomY_H1
  1230
  1231 2FD8 4E AA 2A				lsr _charBuffer_H2						; /2
  1232 2FDB 6A					ror
  1233 2FDC 4E AA 2A				lsr _charBuffer_H2						; /4
  1234 2FDF 6A					ror
  1235 2FE0 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1236 2FE3 6A					ror
  1237
  1238 2FE4 AA					tax
  1239 2FE5 BD CA 40				lda TabLevelLineAddressLSB,x
  1240 2FE8 85 E5				sta _ptrLevelLine
  1241 						
  1242 2FEA BD CA 41				lda TabLevelLineAddressMSB,x
  1243 2FED 85 E6				sta _ptrLevelLine+1
  1244
  1245 2FEF B1 E5				lda (_ptrLevelLine),y
  1246 2FF1 AA					tax
  1247 						
  1248 2FF2 BD CA 42				lda TabCharDefinition,x
  1249 2FF5 8D AB 2A				sta _leftBottomChar
  1250
  1251 2FF8 AD A8 2A				lda _leftTopChar						; fast collision check
  1252 2FFB 29 0F				and #15
  1253 2FFD C9 01				cmp #CT_BLOCK
  1254 2FFF D0 07				bne CPLC_check_next_char
  1255
  1256 3001 AD A8 2A				lda _leftTopChar
  1257 3004 29 80				and #%10000000
  1258 3006 D0 10				bne CPLC_found_collision
  1259
  1260 				;**************************************************
  1261 				;
  1262 3008			CPLC_check_next_char
  1263
  1264 3008 AD AB 2A				lda _leftBottomChar
  1265 300B 29 0F				and #15
  1266 300D C9 01				cmp #CT_BLOCK
  1267 300F D0 1E				bne CPLC_exit
  1268
  1269 3011 AD AB 2A				lda _leftBottomChar
  1270 3014 29 80				and #%10000000
  1271 3016 F0 17				beq CPLC_exit
  1272
  1273 				;**************************************************
  1274 				;
  1275 3018			CPLC_found_collision
  1276
  1277 3018 A9 01				lda #1
  1278 301A 85 DA				sta _playerSideCollisionFlag
  1279
  1280 301C A9 00				lda #0									; need to move the player to the right
  1281 301E 85 AC				sta _playerLevelLeftX_L1
  1282
  1283 3020 A5 AB				lda _playerLevelLeftX_H1
  1284 3022 29 FC				and #%11111100							; mask for CHAR_PIXELS_X
  1285 3024 18					clc
  1286 3025 69 04				adc #CHAR_PIXELS_X
  1287 3027 85 AB				sta _playerLevelLeftX_H1
  1288 						
  1289 3029 A5 AA				lda _playerLevelLeftX_H2
  1290 302B 69 00				adc #0
  1291 302D 85 AA				sta _playerLevelLeftX_H2
  1292
  1293 				;**************************************************
  1294 				;
  1295 302F			CPLC_exit	
  1296 302F 60					rts
  1297
  1298 				.endp	
  1299
  1300 				;
  1301 				;**************************************************************************************************
  1302 				; CheckPlayerRightCollision
  1303 				;**************************************************************************************************
  1304 				;
  1305 3030			.proc CheckPlayerRightCollision
  1306
  1307 3030 A5 B4				lda _playerLevelBottomY_H1				; update top coordinate
  1308 3032 38					sec
  1309 3033 E5 BD				sbc _playerSizeYMinusOne
  1310 3035 85 B1				sta _playerLevelTopY_H1
  1311 					
  1312 3037 A5 B3				lda _playerLevelBottomY_H2
  1313 3039 E9 00				sbc #0
  1314 303B 85 B0				sta _playerLevelTopY_H2
  1315
  1316 303D A5 AB				lda _playerLevelLeftX_H1				; update right coordinate
  1317 303F 18					clc
  1318 3040 65 BC				adc _playerSizeXMinusOne
  1319 3042 85 AE				sta _playerLevelRightX_H1
  1320 					
  1321 3044 A5 AA				lda _playerLevelLeftX_H2
  1322 3046 69 00				adc #0
  1323 3048 85 AD				sta _playerLevelRightX_H2
  1324
  1325 304A A5 AD				lda _playerLevelRightX_H2				; get right point char column
  1326 304C 8D AA 2A				sta _charBuffer_H2
  1327 						
  1328 304F A5 AE				lda _playerLevelRightX_H1
  1329 3051 4E AA 2A				lsr _charBuffer_H2						; /2
  1330 3054 6A					ror
  1331 3055 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1332 3058 6A					ror
  1333 3059 A8					tay
  1334
  1335 305A A5 B0				lda _playerLevelTopY_H2				; get top char line
  1336 305C 8D AA 2A				sta _charBuffer_H2
  1337 					
  1338 305F A5 B1				lda _playerLevelTopY_H1
  1339 3061 4E AA 2A				lsr _charBuffer_H2						; /2
  1340 3064 6A					ror
  1341 3065 4E AA 2A				lsr _charBuffer_H2						; /4
  1342 3068 6A					ror
  1343 3069 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1344 306C 6A					ror	
  1345
  1346 306D AA					tax
  1347 306E BD CA 40				lda TabLevelLineAddressLSB,x
  1348 3071 85 E5				sta _ptrLevelLine
  1349 					
  1350 3073 BD CA 41				lda TabLevelLineAddressMSB,x
  1351 3076 85 E6				sta _ptrLevelLine+1
  1352
  1353 3078 B1 E5				lda (_ptrLevelLine),y
  1354 307A AA					tax
  1355 					
  1356 307B BD CA 42				lda TabCharDefinition,x
  1357 307E 8D A9 2A				sta _rightTopChar
  1358
  1359 3081 A5 B3				lda _playerLevelBottomY_H2				; get bottom char line
  1360 3083 8D AA 2A				sta _charBuffer_H2
  1361 3086 A5 B4				lda _playerLevelBottomY_H1
  1362
  1363 3088 4E AA 2A				lsr _charBuffer_H2						; /2
  1364 308B 6A					ror
  1365 308C 4E AA 2A				lsr _charBuffer_H2						; /4
  1366 308F 6A					ror
  1367 3090 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1368 3093 6A					ror
  1369
  1370 3094 AA					tax
  1371 3095 BD CA 40				lda TabLevelLineAddressLSB,x
  1372 3098 85 E5				sta _ptrLevelLine
  1373 					
  1374 309A BD CA 41				lda TabLevelLineAddressMSB,x
  1375 309D 85 E6				sta _ptrLevelLine+1
  1376
  1377 309F B1 E5				lda (_ptrLevelLine),y
  1378 30A1 AA					tax	
  1379 30A2 BD CA 42				lda TabCharDefinition,x
  1380 30A5 8D AC 2A				sta _rightBottomChar
  1381
  1382 30A8 AD A9 2A				lda _rightTopChar						; fast collision check
  1383 30AB 29 0F				and #15
  1384 30AD C9 01				cmp #CT_BLOCK
  1385 30AF D0 07				bne CPRC_check_next_char
  1386
  1387 30B1 AD A9 2A				lda _rightTopChar
  1388 30B4 29 40				and #%01000000
  1389 30B6 D0 10				bne CPRC_found_collision
  1390
  1391 				;**************************************************
  1392 				;
  1393 30B8			CPRC_check_next_char
  1394 						
  1395 30B8 AD AC 2A				lda _rightBottomChar
  1396 30BB 29 0F				and #15
  1397 30BD C9 01				cmp #CT_BLOCK
  1398 30BF D0 1E				bne CPRC_exit
  1399
  1400 30C1 AD AC 2A				lda _rightBottomChar
  1401 30C4 29 40				and #%01000000
  1402 30C6 F0 17				beq CPRC_exit
  1403
  1404 				;**************************************************
  1405 				;
  1406 30C8			CPRC_found_collision
  1407 30C8 A9 01				lda #1
  1408 30CA 85 DA				sta _playerSideCollisionFlag
  1409
  1410 30CC A9 00				lda #0									; need to move the player to the left
  1411 30CE 85 AC				sta _playerLevelLeftX_L1
  1412 					
  1413 30D0 A5 AE				lda _playerLevelRightX_H1
  1414 30D2 29 FC				and #%11111100							; mask for CHAR_PIXELS_X
  1415 30D4 38					sec
  1416 30D5 E5 BA				sbc _playerSizeX
  1417 30D7 85 AB				sta _playerLevelLeftX_H1
  1418 					
  1419 30D9 A5 AD				lda _playerLevelRightX_H2
  1420 30DB E9 00				sbc #0
  1421 30DD 85 AA				sta _playerLevelLeftX_H2
  1422
  1423 				;**************************************************
  1424 				;
  1425 30DF			CPRC_exit
  1426 30DF 60					rts
  1427 						
  1428 				.endp		
  1429
  1430 				;
  1431 				;**************************************************************************************************
  1432 				; AddGravityAccelToSpeed
  1433 				;**************************************************************************************************
  1434 				;
  1435 30E0			.proc AddGravityAccelToSpeed
  1436
  1437 30E0 A5 C7				lda _playerSpeedY_L1					; update frame speed with frame accel
  1438 30E2 18					clc
  1439 30E3 65 CD				adc _playerGravityAccel_L1
  1440 30E5 85 C7				sta _playerSpeedY_L1
  1441 						
  1442 30E7 A5 C6				lda _playerSpeedY_H1
  1443 30E9 65 CC				adc _playerGravityAccel_H1
  1444 30EB 85 C6				sta _playerSpeedY_H1
  1445
  1446 30ED C5 CA				cmp _playerMaxFallSpeed_H1				; check max frame speed
  1447 30EF 90 10				bcc AGATS_exit							; lower than max speed
  1448 30F1 D0 06				bne AGATS_max_speed						; greater than max speed
  1449
  1450 30F3 A5 CB				lda _playerMaxFallSpeed_L1				; need to check the low byte
  1451 30F5 C5 C7				cmp _playerSpeedY_L1
  1452 30F7 B0 08				bcs AGATS_exit							; lower or equal to max speed
  1453
  1454 				;************************************************
  1455 				;
  1456 30F9			AGATS_max_speed			
  1457
  1458 30F9 A5 CA				lda _playerMaxFallSpeed_H1				; is higher than the max speed
  1459 30FB 85 C6				sta _playerSpeedY_H1
  1460 						
  1461 30FD A5 CB				lda _playerMaxFallSpeed_L1
  1462 30FF 85 C7				sta _playerSpeedY_L1
  1463
  1464 				;************************************************
  1465 				;
  1466 3101			AGATS_exit
  1467 3101 60					rts
  1468 						
  1469 				.endp		
  1470
  1471 				;
  1472 				;**************************************************************************************************
  1473 				; AddSpeedYToPosition
  1474 				;**************************************************************************************************
  1475 				;
  1476 3102			.proc AddSpeedYToPosition
  1477
  1478 3102 A5 B5				lda _playerLevelBottomY_L1				; update player position in Y
  1479 3104 18					clc
  1480 3105 65 C7				adc _playerSpeedY_L1
  1481 3107 85 B5				sta _playerLevelBottomY_L1
  1482 						
  1483 3109 A5 B4				lda _playerLevelBottomY_H1
  1484 310B 65 C6				adc _playerSpeedY_H1
  1485 310D 85 B4				sta _playerLevelBottomY_H1
  1486 						
  1487 310F A5 B3				lda _playerLevelBottomY_H2
  1488 3111 69 00				adc #0
  1489 3113 85 B3				sta _playerLevelBottomY_H2
  1490
  1491 3115 A9 00				lda #0									; check collisions for a player moving down
  1492 3117 85 D8				sta _playerOverPlatformFlag
  1493
  1494 3119 20 B9 31				jsr CheckPlayerInLevelBottomLimit		; check level bottom limit collision
  1495
  1496 311C A5 D8				lda _playerOverPlatformFlag
  1497 311E D0 03				bne ASYTP_exit
  1498
  1499 3120 20 24 31				jsr CheckPlayerBottomCollision			; check collision with the top of a platform
  1500
  1501 				;************************************************
  1502 				;
  1503 3123			ASYTP_exit
  1504 3123 60					rts
  1505 						
  1506 				.endp		
  1507
  1508 				;
  1509 				;**************************************************************************************************
  1510 				; CheckPlayerBottomCollision
  1511 				;**************************************************************************************************
  1512 				;
  1513 3124			.proc CheckPlayerBottomCollision
  1514
  1515 						; get bottom char line
  1516 3124 A5 B3				lda _playerLevelBottomY_H2
  1517 3126 8D AA 2A				sta _charBuffer_H2
  1518 3129 A5 B4				lda _playerLevelBottomY_H1
  1519
  1520 312B 4E AA 2A				lsr _charBuffer_H2						; /2
  1521 312E 6A					ror
  1522 312F 4E AA 2A				lsr _charBuffer_H2						; /4
  1523 3132 6A					ror
  1524 3133 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1525 3136 6A					ror
  1526
  1527 3137 AA					tax
  1528 3138 BD CA 40				lda TabLevelLineAddressLSB,x
  1529 313B 85 E5				sta _ptrLevelLine
  1530 313D BD CA 41				lda TabLevelLineAddressMSB,x
  1531 3140 85 E6				sta _ptrLevelLine+1
  1532
  1533 						; update right coordinate
  1534 3142 A5 AB				lda _playerLevelLeftX_H1
  1535 3144 18					clc
  1536 3145 65 BC				adc _playerSizeXMinusOne
  1537 3147 85 AE				sta _playerLevelRightX_H1
  1538 3149 A5 AA				lda _playerLevelLeftX_H2
  1539 314B 69 00				adc #0
  1540 314D 85 AD				sta _playerLevelRightX_H2
  1541
  1542 						; get left point char column
  1543 314F A5 AA				lda _playerLevelLeftX_H2
  1544 3151 8D AA 2A				sta _charBuffer_H2
  1545 3154 A5 AB				lda _playerLevelLeftX_H1
  1546 3156 4E AA 2A				lsr _charBuffer_H2						; /2
  1547 3159 6A					ror
  1548 315A 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1549 315D 6A					ror
  1550
  1551 315E A8					tay
  1552 315F B1 E5				lda (_ptrLevelLine),y
  1553 3161 AA					tax
  1554 3162 BD CA 42				lda TabCharDefinition,x
  1555 3165 8D AB 2A				sta _leftBottomChar
  1556
  1557 						; get right point char column
  1558 3168 A5 AD				lda _playerLevelRightX_H2
  1559 316A 8D AA 2A				sta _charBuffer_H2
  1560 316D A5 AE				lda _playerLevelRightX_H1
  1561 316F 4E AA 2A				lsr _charBuffer_H2						; /2
  1562 3172 6A					ror
  1563 3173 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1564 3176 6A					ror
  1565
  1566 3177 A8					tay
  1567 3178 B1 E5				lda (_ptrLevelLine),y
  1568 317A AA					tax
  1569 317B BD CA 42				lda TabCharDefinition,x
  1570 317E 8D AC 2A				sta _rightBottomChar
  1571
  1572 						; fast collision check
  1573 3181 AD AB 2A				lda _leftBottomChar
  1574 3184 29 0F				and #15
  1575 3186 C9 01				cmp #CT_BLOCK
  1576 3188 D0 07				bne CPBC_check_next_char
  1577
  1578 318A AD AB 2A				lda _leftBottomChar
  1579 318D 29 10				and #%00010000
  1580 318F D0 10				bne CPBC_found_collision
  1581
  1582 				;************************************************
  1583 				;
  1584 3191			CPBC_check_next_char
  1585
  1586 3191 AD AC 2A				lda _rightBottomChar
  1587 3194 29 0F				and #15
  1588 3196 C9 01				cmp #CT_BLOCK
  1589 3198 D0 1E				bne CPBC_exit
  1590
  1591 319A AD AC 2A				lda _rightBottomChar
  1592 319D 29 10				and #%00010000
  1593 319F F0 17				beq CPBC_exit
  1594
  1595 				;************************************************
  1596 				;
  1597 31A1			CPBC_found_collision
  1598
  1599 						; need to move the player up and change to the platform state
  1600 31A1 A9 01				lda #1
  1601 31A3 85 D8				sta _playerOverPlatformFlag
  1602
  1603 31A5 A9 00				lda #0
  1604 31A7 85 B5				sta _playerLevelBottomY_L1
  1605
  1606 31A9 A5 B4				lda _playerLevelBottomY_H1
  1607 31AB 29 F8				and #%11111000		; mask for CHAR_PIXELS_Y
  1608 31AD 38					sec
  1609 31AE E9 01				sbc #1
  1610 31B0 85 B4				sta _playerLevelBottomY_H1
  1611 31B2 A5 B3				lda _playerLevelBottomY_H2
  1612 31B4 E9 00				sbc #0
  1613 31B6 85 B3				sta _playerLevelBottomY_H2
  1614
  1615 				;************************************************
  1616 				;
  1617 31B8			CPBC_exit
  1618 31B8 60					rts
  1619
  1620 				.endp		
  1621
  1622 				;
  1623 				;**************************************************************************************************
  1624 				; CheckPlayerInLevelBottomLimit
  1625 				;**************************************************************************************************
  1626 				;
  1627 31B9			.proc CheckPlayerInLevelBottomLimit
  1628
  1629 31B9 A5 B3				lda _playerLevelBottomY_H2
  1630 31BB C5 9B				cmp _levelSizeY_H2
  1631 31BD 90 1D				bcc Exit
  1632 31BF D0 06				bne Reset_Pos
  1633
  1634 31C1 A5 B4				lda _playerLevelBottomY_H1
  1635 31C3 C5 9C				cmp _levelSizeY_H1
  1636 31C5 90 15				bcc Exit
  1637
  1638 				;************************************************
  1639 				;
  1640 31C7			Reset_Pos
  1641 31C7 A9 00				lda #0
  1642 31C9 85 B5				sta _playerLevelBottomY_L1
  1643
  1644 31CB A5 9C				lda _levelSizeY_H1
  1645 31CD 38					sec
  1646 31CE E9 01				sbc #1
  1647 31D0 85 B4				sta _playerLevelBottomY_H1
  1648 31D2 A5 9B				lda _levelSizeY_H2
  1649 31D4 E9 00				sbc #0
  1650 31D6 85 B3				sta _playerLevelBottomY_H2
  1651
  1652 31D8 A9 01				lda #1
  1653 31DA 85 D8				sta _playerOverPlatformFlag
  1654
  1655 				;************************************************
  1656 				;
  1657 31DC			Exit
  1658 31DC 60					rts
  1659
  1660 				.endp		
   536 31DD					icl "PlayerStates.Asm"					; Player states methods
Source: E:\_8BitProjects\Series\Lessons\Lesson01\PlayerStates.Asm
     1 				;*****	Variables
     2 				;
     3 31DD			TabPlayerMethodLSB
     4 31DD A2 39			.byte <PlayerMethodStatic, <PlayerMethodOverPlatform
     5 31DF 1A C0			.byte <PlayerMethodJumping, <PlayerMethodFalling
     6 31E1 04 20			.byte <PlayerMethodClimbing, <PlayerMethodInWater
     7 31E3 A5 A8			.byte <PlayerMethodGravityTest, <PlayerMethodLose
     8
     9 31E5			TabPlayerMethodMSB
    10 31E5 33 35			.byte >PlayerMethodStatic, >PlayerMethodOverPlatform
    11 31E7 37 34			.byte >PlayerMethodJumping, >PlayerMethodFalling
    12 31E9 34 36			.byte >PlayerMethodClimbing, >PlayerMethodInWater
    13 31EB 33 33			.byte >PlayerMethodGravityTest, >PlayerMethodLose
    14
    15 31ED			TabPlayerMethodInitLSB
    16 31ED 71 52			.byte <PlayerMethodInitStatic, <PlayerMethodInitOverPlatform
    17 31EF 1D 04			.byte <PlayerMethodInitJumping, <PlayerMethodInitFalling
    18 31F1 F9 73			.byte <PlayerMethodInitClimbing, <PlayerMethodInitInWater
    19 31F3 72 42			.byte <PlayerMethodInitGravityTest, <PlayerMethodInitLose
    20
    21 31F5			TabPlayerMethodInitMSB
    22 31F5 33 33			.byte >PlayerMethodInitStatic, >PlayerMethodInitOverPlatform
    23 31F7 33 33			.byte >PlayerMethodInitJumping, >PlayerMethodInitFalling
    24 31F9 32 33			.byte >PlayerMethodInitClimbing, >PlayerMethodInitInWater
    25 31FB 33 33			.byte >PlayerMethodInitGravityTest, >PlayerMethodInitLose
    26
    27 				;
    28 				;***************************************************************************************************
    29 				;
    30 				;	CheckCollectable
    31 				;
    32 				;***************************************************************************************************
    33 				;
    34 31FD			.proc CheckCollectable
    35
    36 						; check middle left center pixel, to see if there is a collectable
    37 31FD A9 00				lda #0
    38 31FF 8D AE 2A				sta _bottomPosOffsetX
    39 					
    40 3202 A9 04				lda #4
    41 3204 8D AF 2A				sta _bottomPosOffsetY
    42 3207 20 A1 2D				jsr CheckPlayerBottomUpPos
    43
    44 320A 29 0F				and #15
    45 320C C9 02				cmp #CT_COLLECTABLE
    46 320E F0 16				beq CC_start_animation
    47
    48 						; check if right side pixel is in other char
    49 3210 A5 AB				lda _playerLevelLeftX_H1
    50 3212 29 03				and #%11		; "_playerSizeXMinusOne"
    51 3214 F0 24				beq CC_exit
    52
    53 						; check the right side char then
    54 3216 C8					iny
    55 3217 B1 E5				lda (_ptrLevelLine),y
    56 3219 AA					tax
    57 321A BD CA 42				lda TabCharDefinition,x
    58 321D 29 0F				and #15
    59 321F C9 02				cmp #CT_COLLECTABLE
    60 3221 D0 17				bne CC_exit
    61
    62 3223 EE B1 2A				inc _middleBottomCharPosX
    63
    64 				;*****	erase the collectable with the correct animation
    65 3226			CC_start_animation
    66 						
    67 3226 A5 E5				lda _ptrLevelLine
    68 3228 18					clc
    69 3229 6D B1 2A				adc _middleBottomCharPosX
    70 322C 85 EB				sta _pageZeroTempPointer
    71 322E A5 E6				lda _ptrLevelLine+1
    72 3230 69 00				adc #0
    73 3232 85 EC				sta _pageZeroTempPointer+1
    74
    75 3234 20 70 27				jsr AddCoinAnimation
    76
    77 3237 CE C3 40				dec _goldCounter
    78
    79 				;*****	Check Collectible Exit	
    80 323A			CC_exit
    81
    82 323A 60					rts
    83
    84 				.endp	
    85
    86 				;
    87 				;***************************************************************************************************
    88 				;
    89 				;	DoSideControl
    90 				;
    91 				;***************************************************************************************************
    92 				;
    93 323B			.proc DoSideControl
    94
    95 323B A5 DD				lda _stick0
    96 323D 29 0C				and #[STICK_RIGHT | STICK_LEFT]
    97 323F C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
    98 3241 F0 41				beq DSC_check_right		; if neither is pressed, just continue
    99
   100 				;*****	Check side control right
   101 				;
   102 3243			DSC_side_control_right
   103 					
   104 3243 29 08				and #STICK_RIGHT
   105 3245 D0 20				bne DSC_side_control_left
   106
   107 3247 A5 D6				lda _lastPlayerSideDirection
   108 3249 C9 01				cmp #PSD_RIGHT
   109 324B D0 06				bne DSC_scr1
   110
   111 324D 20 63 2E				jsr AddSideAccelToSpeed
   112 						
   113 3250 4C 84 32				jmp DSC_check_right
   114
   115 				;*****	Side control left
   116 				;
   117 3253			DSC_scr1
   118 						
   119 3253 C9 02				cmp #PSD_LEFT
   120 3255 D0 06				bne DSC_scr2
   121
   122 3257 20 85 2E				jsr SubstractSideDeaccelToSpeed
   123
   124 325A 4C 84 32				jmp DSC_check_right
   125
   126 				;*****	Side control right
   127 				;
   128 325D			DSC_scr2
   129 					
   130 325D A9 01				lda #PSD_RIGHT
   131 325F 85 D6				sta _lastPlayerSideDirection
   132
   133 3261 20 63 2E				jsr AddSideAccelToSpeed
   134
   135 3264 4C 84 32				jmp DSC_check_right
   136
   137 				;***** Side control speed 
   138 				;
   139 3267			DSC_side_control_left
   140 					
   141 3267 A5 D6				lda _lastPlayerSideDirection
   142 3269 C9 02				cmp #PSD_LEFT
   143 326B D0 06				bne DSC_scl1
   144
   145 326D 20 63 2E				jsr AddSideAccelToSpeed
   146
   147 3270 4C 84 32				jmp DSC_check_right
   148
   149 				;*****	Side control right speed
   150 				;
   151 3273			DSC_scl1
   152 					
   153 3273 C9 01				cmp #PSD_RIGHT
   154 3275 D0 06				bne DSC_scl2
   155
   156 3277 20 85 2E				jsr SubstractSideDeaccelToSpeed
   157
   158 327A 4C 84 32				jmp DSC_check_right
   159
   160 				;***** Add speed to side left 
   161 				;	
   162 327D			DSC_scl2
   163 					
   164 327D A9 02				lda #PSD_LEFT
   165 327F 85 D6				sta _lastPlayerSideDirection
   166
   167 3281 20 63 2E				jsr AddSideAccelToSpeed
   168
   169
   170 				;***** Add speed to side right
   171 				;
   172 3284			DSC_check_right
   173 3284 A5 D6			lda _lastPlayerSideDirection
   174 3286 C9 01			cmp #PSD_RIGHT
   175 3288 D0 06			bne DSC_check_left
   176
   177 328A 20 C4 33			jsr AddSideSpeedToPosition
   178 328D 4C 97 32			jmp DSC_exit
   179
   180 				;***** Subtract speed to side left
   181 				;
   182 3290			DSC_check_left
   183 3290 C9 02			cmp #PSD_LEFT
   184 3292 D0 03			bne DSC_exit
   185
   186 3294 20 99 2E			jsr SubstractSideSpeedToPosition
   187
   188 				;*****	Side control exit
   189 				;
   190 3297			DSC_exit
   191 						
   192 3297 60					rts
   193
   194 				.endp
   195
   196 				;
   197 				;***************************************************************************************************
   198 				;
   199 				;	DoSideMovement
   200 				;
   201 				;***************************************************************************************************
   202 				;
   203 3298			.proc DoSideMovement
   204
   205 3298 A5 DD				lda _stick0
   206 329A 29 0C				and #[STICK_RIGHT | STICK_LEFT]
   207 329C C9 0C				cmp #[STICK_RIGHT | STICK_LEFT]
   208 329E D0 1F				bne DSM_check_right		; if one or both are pressed, just continue
   209
   210 				;*****	check deaccel speed right
   211 				;
   212 32A0			DSM_check_deaccel_right
   213
   214 32A0 A5 D6				lda _lastPlayerSideDirection
   215 32A2 C9 01				cmp #PSD_RIGHT
   216 32A4 D0 09				bne DSM_check_deaccel_left
   217
   218 32A6 20 85 2E				jsr SubstractSideDeaccelToSpeed
   219 32A9 20 C4 33				jsr AddSideSpeedToPosition
   220 						
   221 32AC 4C F8 32				jmp DSM_exit
   222
   223 				;*****	check deaccel speed left
   224 				;
   225 32AF			DSM_check_deaccel_left
   226
   227 32AF C9 02				cmp #PSD_LEFT
   228 32B1 F0 03				beq DSM_cdl1
   229 32B3 4C F8 32				jmp DSM_exit
   230
   231 				;*****	Substract to speed and position
   232 				;
   233 32B6			DSM_cdl1
   234 						
   235 32B6 20 85 2E				jsr SubstractSideDeaccelToSpeed
   236 32B9 20 99 2E				jsr SubstractSideSpeedToPosition
   237 32BC 4C F8 32				jmp DSM_exit
   238
   239
   240 				;*****	Check Right
   241 				;
   242 32BF			DSM_check_right
   243
   244 32BF 29 08				and #STICK_RIGHT	; check right
   245 32C1 D0 19				bne DSM_check_left
   246
   247 32C3 A5 D6				lda _lastPlayerSideDirection
   248 32C5 C9 02				cmp #PSD_LEFT
   249 32C7 D0 06				bne DSM_move_to_right
   250
   251 32C9 A9 00				lda #0
   252 32CB 85 BE				sta _playerSideSpeed_H1
   253 32CD 85 BF				sta _playerSideSpeed_L1
   254
   255 				;*****	Move to Right
   256 				; 
   257 32CF			DSM_move_to_right
   258 					
   259 32CF A9 01				lda #PSD_RIGHT
   260 32D1 85 D6				sta _lastPlayerSideDirection
   261
   262 32D3 20 63 2E				jsr AddSideAccelToSpeed
   263 32D6 20 C4 33				jsr AddSideSpeedToPosition
   264
   265 32D9 4C F8 32				jmp DSM_exit
   266
   267 				;*****	Check Left
   268 				;
   269 32DC			DSM_check_left
   270
   271 32DC A5 DD				lda _stick0
   272 32DE 29 04				and #STICK_LEFT	; check left
   273 32E0 D0 16				bne DSM_exit
   274
   275 32E2 A5 D6				lda _lastPlayerSideDirection
   276 32E4 C9 01				cmp #PSD_RIGHT
   277 32E6 D0 06				bne DSM_move_to_left
   278
   279 32E8 A9 00				lda #0
   280 32EA 85 BE				sta _playerSideSpeed_H1
   281 32EC 85 BF				sta _playerSideSpeed_L1
   282
   283 				;*****	Move to Left
   284 				;
   285 32EE			DSM_move_to_left
   286 						
   287 32EE A9 02				lda #PSD_LEFT
   288 32F0 85 D6				sta _lastPlayerSideDirection
   289
   290 32F2 20 63 2E				jsr AddSideAccelToSpeed
   291 32F5 20 99 2E				jsr SubstractSideSpeedToPosition
   292
   293 				;*****	Exit Proc
   294 32F8			DSM_exit
   295 						
   296 32F8 60					rts
   297
   298 				.endp
   299
   300 				;
   301 				;***************************************************************************************************
   302 				;
   303 				;	PlayerMethodInitClimbing
   304 				;
   305 				;***************************************************************************************************
   306 				;
   307 32F9			.proc PlayerMethodInitClimbing
   308
   309 						; clear player speed in X and Y
   310 32F9 A9 00				lda #0
   311 32FB 85 BE				sta _playerSideSpeed_H1
   312 32FD 85 BF				sta _playerSideSpeed_L1
   313 32FF 85 C6				sta _playerSpeedY_H1
   314 3301 85 C7				sta _playerSpeedY_L1
   315
   316 3303 60					rts
   317
   318 				.endp
   319
   320 				;
   321 				;***************************************************************************************************
   322 				;
   323 				;	PlayerMethodInitFalling
   324 				;
   325 				;***************************************************************************************************
   326 				;
   327 3304			.proc PlayerMethodInitFalling
   328
   329 						; init max side speed
   330 3304 A9 01				lda #SIDE_SPEED_AIR_H1
   331 3306 85 C0				sta _playerMaxSideSpeed_H1
   332 3308 A9 20				lda #SIDE_SPEED_AIR_L1
   333 330A 85 C1				sta _playerMaxSideSpeed_L1
   334
   335 						; init side accelerations
   336 330C A9 00				lda #SIDE_ACCEL_AIR_H1
   337 330E 85 C2				sta _playerSideAccel_H1
   338 3310 A9 10				lda #SIDE_ACCEL_AIR_L1
   339 3312 85 C3				sta _playerSideAccel_L1
   340
   341 3314 A9 00				lda #SIDE_DEACCEL_AIR_H1
   342 3316 85 C4				sta _playerSideDeaccel_H1
   343 3318 A9 10				lda #SIDE_DEACCEL_AIR_L1
   344 331A 85 C5				sta _playerSideDeaccel_L1
   345
   346 331C 60					rts
   347
   348 				.endp
   349
   350 				;
   351 				;***************************************************************************************************
   352 				;
   353 				;	PlayerMethodInitJumping
   354 				;
   355 				;***************************************************************************************************
   356 				;
   357 331D			.proc PlayerMethodInitJumping
   358
   359 						; hold jump for this number of frames, if the button is still pressed
   360 331D A9 08				lda #JUMP_HOLD_FRAMES
   361 331F 85 D5				sta _playerHoldJumpCounter
   362
   363 3321 A5 C8				lda _playerJumpSpeed_H1
   364 3323 85 C6				sta _playerSpeedY_H1
   365 3325 A5 C9				lda _playerJumpSpeed_L1
   366 3327 85 C7				sta _playerSpeedY_L1
   367
   368 						; init max side speed
   369 3329 A9 01				lda #SIDE_SPEED_AIR_H1
   370 332B 85 C0				sta _playerMaxSideSpeed_H1
   371 332D A9 20				lda #SIDE_SPEED_AIR_L1
   372 332F 85 C1				sta _playerMaxSideSpeed_L1
   373
   374 						; init side accelerations
   375 3331 A9 00				lda #SIDE_ACCEL_AIR_H1
   376 3333 85 C2				sta _playerSideAccel_H1
   377 3335 A9 10				lda #SIDE_ACCEL_AIR_L1
   378 3337 85 C3				sta _playerSideAccel_L1
   379
   380 3339 A9 00				lda #SIDE_DEACCEL_AIR_H1
   381 333B 85 C4				sta _playerSideDeaccel_H1
   382 333D A9 10				lda #SIDE_DEACCEL_AIR_L1
   383 333F 85 C5				sta _playerSideDeaccel_L1
   384
   385 3341 60					rts
   386
   387 				.endp
   388
   389 				;
   390 				;***************************************************************************************************
   391 				;
   392 				;	PlayerMethodInitLose
   393 				;
   394 				;***************************************************************************************************
   395 				;
   396 3342			.proc PlayerMethodInitLose
   397
   398 3342 A5 B7				lda _playerScreenTopY
   399 3344 8D B4 2A				sta _playerExplosionScreenTopY_H1
   400 						
   401 3347 A9 00				lda #0
   402 3349 8D B5 2A				sta _playerExplosionScreenTopY_L1
   403
   404 334C A9 01				lda #1
   405 334E 8D B0 2A				sta _playerExplosionStep
   406
   407 3351 60					rts
   408 						
   409 				.endp
   410
   411 				;
   412 				;***************************************************************************************************
   413 				;
   414 				;	PlayerMethodInitOverPlatform
   415 				;
   416 				;***************************************************************************************************
   417 				;
   418 3352			.proc PlayerMethodInitOverPlatform
   419
   420 						; clear player speed in Y
   421 3352 A9 00				lda #0
   422 3354 85 C6				sta _playerSpeedY_H1
   423 3356 85 C7				sta _playerSpeedY_L1
   424
   425 						; init max side speed
   426 3358 A9 01				lda #SIDE_SPEED_LAND_H1
   427 335A 85 C0				sta _playerMaxSideSpeed_H1
   428 335C A9 02				lda #SIDE_SPEED_LAND_L1
   429 335E 85 C1				sta _playerMaxSideSpeed_L1
   430
   431 						; init side accelerations
   432 3360 A9 00				lda #SIDE_ACCEL_LAND_H1
   433 3362 85 C2				sta _playerSideAccel_H1
   434 3364 A9 20				lda #SIDE_ACCEL_LAND_L1
   435 3366 85 C3				sta _playerSideAccel_L1
   436
   437 3368 A9 00				lda #SIDE_DEACCEL_LAND_H1
   438 336A 85 C4				sta _playerSideDeaccel_H1
   439 336C A9 80				lda #SIDE_DEACCEL_LAND_L1
   440 336E 85 C5				sta _playerSideDeaccel_L1
   441
   442 3370 60					rts
   443
   444 				.endp
   445 					
   446 				;
   447 				;***************************************************************************************************
   448 				;
   449 				;	PlayerMethodInitStatic
   450 				;
   451 				;***************************************************************************************************
   452 				;
   453 3371			PlayerMethodInitStatic
   454
   455 3371 60					rts
   456 						
   457 				;
   458 				;***************************************************************************************************
   459 				;
   460 				;	PlayerMethodInitGravityTest
   461 				;
   462 				;***************************************************************************************************
   463 				;
   464 3372			PlayerMethodInitGravityTest
   465 					
   466 3372 60					rts		
   467
   468 				;
   469 				;***************************************************************************************************
   470 				;
   471 				;	PlayerMethodInitInWater
   472 				;
   473 				;***************************************************************************************************
   474 				;
   475 3373			.proc PlayerMethodInitInWater
   476
   477 						; set starting direction going down (0 = going up, 1 = going down)
   478 3373 A9 01				lda #1
   479 3375 8D B2 2A				sta _waterPlayerDirectionFlag
   480
   481 3378 A9 00				lda #0
   482 337A 8D B3 2A				sta _playerOnWaterSurfaceFlag
   483
   484 						; reduce in half current falling speed
   485 337D 46 C6				lsr _playerSpeedY_H1
   486 337F 66 C7				ror _playerSpeedY_L1
   487
   488 						; reduce in half current side speed
   489 3381 46 BE				lsr _playerSideSpeed_H1
   490 3383 66 BF				ror _playerSideSpeed_L1
   491
   492 						; init max side speed
   493 3385 A9 00				lda #SIDE_SPEED_WATER_H1
   494 3387 85 C0				sta _playerMaxSideSpeed_H1
   495 						
   496 3389 A9 80				lda #SIDE_SPEED_WATER_L1
   497 338B 85 C1				sta _playerMaxSideSpeed_L1
   498
   499 						; init side accelerations
   500 338D A9 00				lda #SIDE_ACCEL_WATER_H1
   501 338F 85 C2				sta _playerSideAccel_H1
   502 						
   503 3391 A9 04				lda #SIDE_ACCEL_WATER_L1
   504 3393 85 C3				sta _playerSideAccel_L1
   505
   506 3395 A9 00				lda #SIDE_DEACCEL_WATER_H1
   507 3397 85 C4				sta _playerSideDeaccel_H1
   508 					
   509 3399 A9 04				lda #SIDE_DEACCEL_WATER_L1
   510 339B 85 C5				sta _playerSideDeaccel_L1
   511
   512 						; disable jump for some frames
   513 339D A9 1E				lda #WATER_NO_JUMP_FRAMES
   514 339F 85 D4				sta _playerNoJumpTimer
   515 					
   516 33A1 60					rts
   517
   518 				.endp
   519
   520 				;
   521 				;***************************************************************************************************
   522 				;
   523 				;	PlayerMethodStatic
   524 				;
   525 				;***************************************************************************************************
   526 				;
   527 33A2			PlayerMethodStatic
   528
   529 33A2 4C 91 20			jmp PlayerMethodReturn
   530
   531 				;
   532 				;***************************************************************************************************
   533 				;
   534 				;	PlayerMethodGravityTest
   535 				;
   536 				;***************************************************************************************************
   537 				;
   538 33A5			PlayerMethodGravityTest
   539
   540 33A5 4C 91 20			jmp PlayerMethodReturn
   541
   542 				;
   543 				;***************************************************************************************************
   544 				;
   545 				;	PlayerMethodLose
   546 				;
   547 				;***************************************************************************************************
   548 				;
   549 33A8			PlayerMethodLose
   550
   551 33A8 4C 91 20			jmp PlayerMethodReturn
   552
   553 				;
   554 				;***************************************************************************************************
   555 				;
   556 				;	SetPlayerMethod
   557 				;
   558 				;***************************************************************************************************
   559 				;
   560 33AB			.proc SetPlayerMethod
   561 						
   562 33AB 86 DB				stx _playerState
   563
   564 33AD BD DD 31				lda TabPlayerMethodLSB,x
   565 33B0 85 ED				sta _playerMethodPointer
   566 						
   567 33B2 BD E5 31				lda TabPlayerMethodMSB,x
   568 33B5 85 EE				sta _playerMethodPointer+1
   569
   570 						;lda TabPlayerMethodColor,x
   571 						;sta _playerBaseColor
   572
   573 33B7 BD ED 31				lda TabPlayerMethodInitLSB,x
   574 33BA 85 EB				sta _pageZeroTempPointer
   575 						
   576 33BC BD F5 31				lda TabPlayerMethodInitMSB,x
   577 33BF 85 EC				sta _pageZeroTempPointer+1
   578
   579 						; issue the jump
   580 33C1 6C EB 00				jmp (_pageZeroTempPointer)
   581 					
   582 				.endp
   583
   584 				;
   585 				;**************************************************************************************************
   586 				; AddSideSpeedToPosition
   587 				;**************************************************************************************************
   588 				;
   589 33C4			.proc AddSideSpeedToPosition
   590
   591 33C4 A5 AC				lda _playerLevelLeftX_L1				; update player side position
   592 33C6 18					clc
   593 33C7 65 BF				adc _playerSideSpeed_L1
   594 33C9 85 AC				sta _playerLevelLeftX_L1
   595 						
   596 33CB A5 AB				lda _playerLevelLeftX_H1		
   597 33CD 65 BE				adc _playerSideSpeed_H1
   598 33CF 85 AB				sta _playerLevelLeftX_H1
   599 						
   600 33D1 A5 AA				lda _playerLevelLeftX_H2
   601 33D3 69 00				adc #0
   602 33D5 85 AA				sta _playerLevelLeftX_H2
   603
   604 33D7 A9 00				lda #0									; check collisions for a player moving to the right	
   605 33D9 85 DA				sta _playerSideCollisionFlag
   606
   607 33DB 20 5E 2F				jsr CheckPlayerInLevelRightLimit		; check level right side limit
   608 					
   609 33DE A5 DA				lda _playerSideCollisionFlag
   610 33E0 D0 07				bne ASSTP_found_collision
   611
   612 33E2 20 30 30				jsr CheckPlayerRightCollision
   613
   614 33E5 A5 DA				lda _playerSideCollisionFlag
   615 33E7 F0 06				beq ASSTP_exit
   616
   617 				;************************************************
   618 				;
   619 33E9			ASSTP_found_collision
   620 						
   621 33E9 A9 00				lda #0
   622 33EB 85 BE				sta _playerSideSpeed_H1
   623 33ED 85 BF				sta _playerSideSpeed_L1
   624
   625 				;************************************************
   626 				;
   627 33EF			ASSTP_exit
   628 						
   629 33EF 60					rts
   630
   631 				.endp
   632
   633 				;
   634 				;**************************************************************************************************
   635 				; SubstractGravityAccelToSpeed
   636 				;**************************************************************************************************
   637 				;
   638 33F0			.proc SubstractGravityAccelToSpeed
   639 						
   640 33F0 A5 C7				lda _playerSpeedY_L1					; update frame speed with frame accel
   641 33F2 38					sec
   642 33F3 E5 CD				sbc _playerGravityAccel_L1
   643 33F5 85 C7				sta _playerSpeedY_L1
   644 						
   645 33F7 A5 C6				lda _playerSpeedY_H1
   646 33F9 E5 CC				sbc _playerGravityAccel_H1
   647 33FB B0 04				bcs SGATS_dont_reset_speed
   648
   649 				;************************************************
   650 				;
   651 33FD			SGATS_reset_speed
   652 33FD A9 00				lda #0
   653 33FF 85 C7				sta _playerSpeedY_L1
   654
   655 				;************************************************
   656 				;
   657 3401			SGATS_dont_reset_speed
   658 3401 85 C6				sta _playerSpeedY_H1
   659 3403 60					rts
   660
   661 				.endp
   662
   663 3404					icl "StateClimbing.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\StateClimbing.Asm
     1
     2 3404			PlayerMethodClimbing
     3
     4 3404 20 AB 3C			jsr CheckCreatePlayerMissile
     5
     6
     7 				;----------------------------------------
     8 3407			PMC_check_up
     9 3407 A5 DD			lda _stick0
    10 3409 29 01			and #STICK_UP	; check up
    11 340B D0 41			bne PMC_check_down
    12
    13 340D A9 E0			lda #CLIMB_UP_SPEED_Y_L1
    14 340F 85 C7			sta _playerSpeedY_L1
    15 3411 A9 00			lda #CLIMB_UP_SPEED_Y_H1
    16 3413 85 C6			sta _playerSpeedY_H1
    17
    18 				; update player position in Y
    19 3415 A5 B5			lda _playerLevelBottomY_L1
    20 3417 38				sec
    21 3418 E5 C7			sbc _playerSpeedY_L1
    22 341A 85 B5			sta _playerLevelBottomY_L1
    23 341C A5 B4			lda _playerLevelBottomY_H1
    24 341E E5 C6			sbc _playerSpeedY_H1
    25 3420 85 B4			sta _playerLevelBottomY_H1
    26 3422 A5 B3			lda _playerLevelBottomY_H2
    27 3424 E9 00			sbc #0
    28 3426 85 B3			sta _playerLevelBottomY_H2
    29
    30 				; search for an empty space at the middle bottom point of the player
    31 3428 A9 02			lda #2
    32 342A 8D AE 2A			sta _bottomPosOffsetX
    33 342D A9 00			lda #0
    34 342F 8D AF 2A			sta _bottomPosOffsetY
    35 3432 20 54 2D			jsr CheckPlayerBottomDownPos
    36
    37 3435 AD AD 2A			lda _middleBottomChar
    38 3438 29 0F			and #15
    39 343A D0 0F			bne PMC_end_move_up
    40
    41 				; snap to the bottom and go to the platform state
    42 343C A5 B4			lda _playerLevelBottomY_H1
    43 343E 09 07			ora #[CHAR_PIXELS_Y-1]
    44 3440 85 B4			sta _playerLevelBottomY_H1
    45
    46 3442 A9 00			lda #0
    47 3444 85 B5			sta _playerLevelBottomY_L1
    48
    49 3446 A2 01			ldx #PS_OVER_PLATFORM
    50 3448 20 AB 33			jsr SetPlayerMethod
    51
    52 344B			PMC_end_move_up
    53 344B 4C BA 34			jmp PMC_exit
    54
    55
    56 				;----------------------------------------
    57 344E			PMC_check_down
    58 344E A5 DD			lda _stick0
    59 3450 29 02			and #STICK_DOWN	; check down
    60 3452 D0 66			bne PMC_exit
    61
    62 3454 A9 80			lda #CLIMB_DOWN_SPEED_Y_L1
    63 3456 85 C7			sta _playerSpeedY_L1
    64 3458 A9 01			lda #CLIMB_DOWN_SPEED_Y_H1
    65 345A 85 C6			sta _playerSpeedY_H1
    66
    67 				; update player position in Y
    68 345C A5 B5			lda _playerLevelBottomY_L1
    69 345E 18				clc
    70 345F 65 C7			adc _playerSpeedY_L1
    71 3461 85 B5			sta _playerLevelBottomY_L1
    72 3463 A5 B4			lda _playerLevelBottomY_H1
    73 3465 65 C6			adc _playerSpeedY_H1
    74 3467 85 B4			sta _playerLevelBottomY_H1
    75 3469 A5 B3			lda _playerLevelBottomY_H2
    76 346B 69 00			adc #0
    77 346D 85 B3			sta _playerLevelBottomY_H2
    78
    79 				; special check for the top char of a ladder (that is a platform)
    80 346F A9 02			lda #2
    81 3471 8D AE 2A			sta _bottomPosOffsetX
    82 3474 A9 08			lda #CHAR_PIXELS_Y
    83 3476 8D AF 2A			sta _bottomPosOffsetY
    84 3479 20 54 2D			jsr CheckPlayerBottomDownPos
    85
    86 347C AD AD 2A			lda _middleBottomChar
    87 347F 29 0F			and #15
    88 3481 C9 04			cmp #CT_LADDER
    89 3483 F0 35			beq PMC_exit
    90
    91 				; search for a platform at the middle bottom point of the player
    92 3485 A9 02			lda #2
    93 3487 8D AE 2A			sta _bottomPosOffsetX
    94 348A A9 00			lda #0
    95 348C 8D AF 2A			sta _bottomPosOffsetY
    96 348F 20 54 2D			jsr CheckPlayerBottomDownPos
    97
    98 3492 AD AD 2A			lda _middleBottomChar
    99 3495 29 0F			and #15
   100 3497 C9 01			cmp #CT_BLOCK
   101 3499 D0 1F			bne PMC_exit
   102
   103 349B AD AD 2A			lda _middleBottomChar
   104 349E 29 10			and #%00010000
   105 34A0 F0 18			beq PMC_exit
   106
   107 				; snap to the bottom and go to the platform state
   108 34A2 A5 B4			lda _playerLevelBottomY_H1
   109 34A4 29 F8			and #%11111000
   110 34A6 38				sec
   111 34A7 E9 01			sbc #1
   112 34A9 85 B4			sta _playerLevelBottomY_H1
   113 34AB A5 B3			lda _playerLevelBottomY_H2
   114 34AD E9 00			sbc #0
   115 34AF 85 B3			sta _playerLevelBottomY_H2
   116
   117 34B1 A9 00			lda #0
   118 34B3 85 B5			sta _playerLevelBottomY_L1
   119
   120 34B5 A2 01			ldx #PS_OVER_PLATFORM
   121 34B7 20 AB 33			jsr SetPlayerMethod
   122
   123
   124 34BA			PMC_exit
   125 34BA 20 3E 2C			jsr SetPlayerInfo
   126
   127 34BD 4C 91 20			jmp PlayerMethodReturn
   664 34C0					icl "StateFalling.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\StateFalling.Asm
     1
     2 34C0			PlayerMethodFalling
     3
     4 34C0 20 FD 31			jsr CheckCollectable
     5
     6 34C3 20 AB 3C			jsr CheckCreatePlayerMissile
     7
     8
     9 				; check input to grab a ladder while falling
    10 34C6 A5 DD			lda _stick0
    11 34C8 29 01			and #STICK_UP		; check if up is still pressed
    12 34CA D0 37			bne PMF_check_restart_jump
    13
    14 34CC A5 DD			lda _stick0
    15 34CE 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    16 34D0 C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    17 34D2 D0 2F			bne PMF_check_restart_jump
    18
    19
    20 				;----------------------------------------
    21 34D4			PMF_check_ladder
    22 				; search for a ladder (bottom middle pixel)
    23 34D4 A9 02			lda #2
    24 34D6 8D AE 2A			sta _bottomPosOffsetX
    25 34D9 A9 00			lda #0
    26 34DB 8D AF 2A			sta _bottomPosOffsetY
    27 34DE 20 54 2D			jsr CheckPlayerBottomDownPos
    28
    29 34E1 AD AD 2A			lda _middleBottomChar
    30 34E4 29 0F			and #15
    31 34E6 C9 04			cmp #CT_LADDER
    32 34E8 D0 19			bne PMF_check_restart_jump
    33
    34 				; snap player to center of the ladder
    35 34EA			PMF_snap_ladder
    36 34EA A9 00			lda #0
    37 34EC 85 AC			sta _playerLevelLeftX_L1
    38 34EE 85 AA			sta _playerLevelLeftX_H2
    39
    40 34F0 AD B1 2A			lda _middleBottomCharPosX
    41 34F3 0A				asl
    42 34F4 26 AA			rol _playerLevelLeftX_H2	; x2
    43 34F6 0A				asl
    44 34F7 26 AA			rol _playerLevelLeftX_H2	; x4 = CHAR_PIXELS_X
    45 34F9 85 AB			sta _playerLevelLeftX_H1
    46
    47 				; start climbing state
    48 34FB A2 04			ldx #PS_CLIMBING
    49 34FD 20 AB 33			jsr SetPlayerMethod
    50
    51 3500 4C 36 35			jmp PMF_exit
    52
    53
    54 				;----------------------------------------
    55 3503			PMF_check_restart_jump
    56 				/*
    57 				; uncomment this to allow infinite jumping
    58 				 	lda _stick0
    59 				 	and #STICK_UP	; check up
    60 				 	bne PMF_check_in_water
    61 				 
    62 				 	lda _oldStick0
    63 				 	and #STICK_UP	; check old up (looking for "just pressed")
    64 				 	beq PMF_check_in_water
    65 				 
    66 				; start jumping state
    67 				 	ldx #PS_JUMPING
    68 				 	jsr SetPlayerMethod
    69 				 
    70 				 	jmp PMF_exit
    71 				*/
    71
    72
    73 				;----------------------------------------
    74 3503			PMF_check_in_water
    75 				; search for water (center pixel)
    76 3503 A9 02			lda #2
    77 3505 8D AE 2A			sta _bottomPosOffsetX
    78 3508 A9 02			lda #2
    79 350A 8D AF 2A			sta _bottomPosOffsetY
    80 350D 20 A1 2D			jsr CheckPlayerBottomUpPos
    81
    82 3510 AD AD 2A			lda _middleBottomChar
    83 3513 29 0F			and #15
    84 3515 C9 05			cmp #CT_WATER
    85 3517 D0 08			bne PMF_air_control
    86
    87 				; start in water state
    88 3519 A2 05			ldx #PS_IN_WATER
    89 351B 20 AB 33			jsr SetPlayerMethod
    90
    91 351E 4C 36 35			jmp PMF_exit
    92
    93
    94 				;----------------------------------------
    95 3521			PMF_air_control
    96 3521 20 3B 32			jsr DoSideControl
    97
    98
    99 				;----------------------------------------
   100 3524			PMF_update_falling
   101 3524 20 E0 30			jsr AddGravityAccelToSpeed
   102
   103 3527 20 02 31			jsr AddSpeedYToPosition
   104
   105 352A 20 3E 2C			jsr SetPlayerInfo
   106
   107 352D A5 D8			lda _playerOverPlatformFlag
   108 352F F0 05			beq PMF_exit
   109
   110
   111 				; change to the over platform state
   112 3531 A2 01			ldx #PS_OVER_PLATFORM
   113 3533 20 AB 33			jsr SetPlayerMethod
   114
   115
   116 3536			PMF_exit
   117 3536 4C 91 20			jmp PlayerMethodReturn
   665 3539					icl "StateInPlatform.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\StateInPlatform.Asm
     1
     2 3539			PlayerMethodOverPlatform
     3
     4 3539 20 FD 31			jsr CheckCollectable
     5
     6 353C 20 AB 3C			jsr CheckCreatePlayerMissile
     7
     8
     9 353F 20 98 32			jsr DoSideMovement
    10
    11
    12 				;----------------------------------------
    13 3542			PMGT_check_up
    14 3542 A5 DD			lda _stick0
    15 3544 29 01			and #STICK_UP	; check up
    16 3546 D0 66			bne PMGT_check_fall
    17
    18 3548 A5 DE			lda _oldStick0
    19 354A 29 01			and #STICK_UP	; check old up (looking for "just pressed")
    20 354C F0 60			beq PMGT_check_fall
    21
    22
    23 				; check bottom of a stair (left pixel)
    24 354E A9 00			lda #0
    25 3550 8D AE 2A			sta _bottomPosOffsetX
    26 3553 A9 00			lda #0
    27 3555 8D AF 2A			sta _bottomPosOffsetY
    28 3558 20 54 2D			jsr CheckPlayerBottomDownPos
    29
    30 355B AD AD 2A			lda _middleBottomChar
    31 355E 29 0F			and #15
    32 3560 C9 04			cmp #CT_LADDER
    33 3562 F0 16			beq PMGT_snap_ladder_up
    34
    35 				; check bottom of a stair (right pixel)
    36 3564 A9 03			lda #3
    37 3566 8D AE 2A			sta _bottomPosOffsetX
    38 3569 A9 00			lda #0
    39 356B 8D AF 2A			sta _bottomPosOffsetY
    40 356E 20 54 2D			jsr CheckPlayerBottomDownPos
    41
    42 3571 AD AD 2A			lda _middleBottomChar
    43 3574 29 0F			and #15
    44 3576 C9 04			cmp #CT_LADDER
    45 3578 D0 19			bne PMGT_check_jump
    46
    47 				; snap player to center of the ladder
    48 357A			PMGT_snap_ladder_up
    49 357A A9 00			lda #0
    50 357C 85 AC			sta _playerLevelLeftX_L1
    51 357E 85 AA			sta _playerLevelLeftX_H2
    52
    53 3580 AD B1 2A			lda _middleBottomCharPosX
    54 3583 0A				asl
    55 3584 26 AA			rol _playerLevelLeftX_H2	; x2
    56 3586 0A				asl
    57 3587 26 AA			rol _playerLevelLeftX_H2	; x4 = CHAR_PIXELS_X
    58 3589 85 AB			sta _playerLevelLeftX_H1
    59
    60 				; start climbing state
    61 358B A2 04			ldx #PS_CLIMBING
    62 358D 20 AB 33			jsr SetPlayerMethod
    63
    64 3590 4C 1A 36			jmp PMGT_end
    65
    66
    67 				;----------------------------------------
    68 3593			PMGT_check_jump
    69 				; start jumping state
    70 3593 A2 02			ldx #PS_JUMPING
    71 3595 20 AB 33			jsr SetPlayerMethod
    72
    73 				; reduce side speed a little
    74 3598 A5 BF			lda _playerSideSpeed_L1
    75 359A 38				sec
    76 359B E9 40			sbc #JUMP_HSPEED_SLOWDOWN
    77 359D 85 BF			sta _playerSideSpeed_L1
    78 359F A5 BE			lda _playerSideSpeed_H1
    79 35A1 E9 00			sbc #0
    80 35A3 B0 04			bcs PMGT_jump_side_speed
    81 35A5 A9 00			lda #0
    82 35A7 85 BF			sta _playerSideSpeed_L1
    83 35A9			PMGT_jump_side_speed
    84 35A9 85 BE			sta _playerSideSpeed_H1
    85
    86 35AB 4C 1A 36			jmp PMGT_end
    87
    88
    89 				;----------------------------------------
    90 35AE			PMGT_check_fall
    91 35AE 20 CB 2E			jsr CheckHoleBelowPlayer
    92
    93 35B1 A5 D8			lda _playerOverPlatformFlag
    94 35B3 D0 0C			bne PMGT_check_down
    95
    96 				; start falling state
    97 35B5 A2 03			ldx #PS_FALLING
    98 35B7 20 AB 33			jsr SetPlayerMethod
    99
   100 				; divide by 2 the side speed, if there was any movement previous to falling
   101 35BA 46 BE			lsr _playerSideSpeed_H1
   102 35BC 66 BF			ror _playerSideSpeed_L1
   103
   104 35BE 4C 1A 36			jmp PMGT_end
   105
   106
   107 				;----------------------------------------
   108 35C1			PMGT_check_down
   109 35C1 A5 DD			lda _stick0
   110 35C3 29 02			and #STICK_DOWN	; check down
   111 35C5 D0 53			bne PMGT_end
   112
   113 				; 	lda _oldStick0
   114 				; 	and #STICK_DOWN	; check old down (looking for "just pressed")
   115 				; 	beq PMGT_end
   116
   117 				; search for a ladder one char below (left pixel)
   118 35C7 A9 00			lda #0
   119 35C9 8D AE 2A			sta _bottomPosOffsetX
   120 35CC A9 09			lda #[CHAR_PIXELS_Y+1]
   121 35CE 8D AF 2A			sta _bottomPosOffsetY
   122 35D1 20 54 2D			jsr CheckPlayerBottomDownPos
   123
   124 35D4 AD AD 2A			lda _middleBottomChar
   125 35D7 29 0F			and #15
   126 35D9 C9 04			cmp #CT_LADDER
   127 35DB F0 16			beq PMGT_snap_ladder_down
   128
   129 				; search for a ladder one char below (right pixel)
   130 35DD A9 03			lda #3
   131 35DF 8D AE 2A			sta _bottomPosOffsetX
   132 35E2 A9 09			lda #[CHAR_PIXELS_Y+1]
   133 35E4 8D AF 2A			sta _bottomPosOffsetY
   134 35E7 20 54 2D			jsr CheckPlayerBottomDownPos
   135
   136 35EA AD AD 2A			lda _middleBottomChar
   137 35ED 29 0F			and #15
   138 35EF C9 04			cmp #CT_LADDER
   139 35F1 D0 27			bne PMGT_end
   140
   141 				; snap player to center of the ladder
   142 35F3			PMGT_snap_ladder_down
   143 35F3 A9 00			lda #0
   144 35F5 85 AC			sta _playerLevelLeftX_L1
   145 35F7 85 AA			sta _playerLevelLeftX_H2
   146
   147 35F9 AD B1 2A			lda _middleBottomCharPosX
   148 35FC 0A				asl
   149 35FD 26 AA			rol _playerLevelLeftX_H2	; x2
   150 35FF 0A				asl
   151 3600 26 AA			rol _playerLevelLeftX_H2	; x4 = CHAR_PIXELS_X
   152 3602 85 AB			sta _playerLevelLeftX_H1
   153
   154 				; put player one line below
   155 3604 A9 00			lda #0
   156 3606 85 B5			sta _playerLevelBottomY_L1
   157 3608 A5 B4			lda _playerLevelBottomY_H1
   158 360A 18				clc
   159 360B 69 01			adc #1
   160 360D 85 B4			sta _playerLevelBottomY_H1
   161 360F A5 B3			lda _playerLevelBottomY_H2
   162 3611 69 00			adc #0
   163 3613 85 B3			sta _playerLevelBottomY_H2
   164
   165 				; start climbing state
   166 3615 A2 04			ldx #PS_CLIMBING
   167 3617 20 AB 33			jsr SetPlayerMethod
   168
   169
   170 				;----------------------------------------
   171 361A			PMGT_end
   172 361A 20 3E 2C			jsr SetPlayerInfo
   173
   174
   175 361D 4C 91 20			jmp PlayerMethodReturn
   666 3620					icl "StateInWater.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\StateInWater.Asm
     1
     2 3620			PlayerMethodInWater
     3
     4 3620 20 FD 31			jsr CheckCollectable		; add collectables in water for this
     5 					
     6 3623 20 AB 3C			jsr CheckCreatePlayerMissile
     7
     8
     9 				;----------------------------------------
    10 				; search for water (top center pixel)
    11 3626 A9 02			lda #2
    12 3628 8D AE 2A			sta _bottomPosOffsetX
    13 362B A9 07			lda #7
    14 362D 8D AF 2A			sta _bottomPosOffsetY
    15 3630 20 A1 2D			jsr CheckPlayerBottomUpPos
    16
    17 3633 AD AD 2A			lda _middleBottomChar
    18 3636 29 0F			and #15
    19 3638 C9 05			cmp #CT_WATER
    20 363A F0 12			beq PMIW_check_water_moves
    21
    22 				; check jump input to go out of the water
    23 363C A5 DD			lda _stick0
    24 363E 29 01			and #STICK_UP	; check up
    25 3640 D0 0C			bne PMIW_check_water_moves
    26
    27 					; this doesn't work well..
    28 				 	;lda _oldStick0
    29 				 	;and #STICK_UP	; check old up
    30 				 	;beq PMIW_check_water_moves
    31
    32 3642 A5 D4			lda _playerNoJumpTimer
    33 3644 D0 08			bne PMIW_check_water_moves
    34 					
    35 				; start jumping state
    36 3646 A2 02			ldx #PS_JUMPING
    37 3648 20 AB 33			jsr SetPlayerMethod
    38
    39 364B 4C 17 37			jmp PMIW_exit
    40
    41
    42 				;----------------------------------------
    43 364E			PMIW_check_water_moves
    44 364E AD B3 2A			lda _playerOnWaterSurfaceFlag
    45 3651 F0 03			beq PMIW_check_move_up
    46 3653 4C D7 36			jmp PMIW_on_surface
    47
    48
    49 				;----------------------------------------
    50 				; check vertical movement
    51
    52 3656			PMIW_check_move_up
    53 3656 A5 DD			lda _stick0
    54 3658 29 01			and #STICK_UP		; check up
    55 365A D0 0E			bne PMIW_check_move_down
    56
    57 					;jmp PMIW_under_surface
    58
    59 365C AD B2 2A			lda _waterPlayerDirectionFlag
    60 365F D0 06			bne PMIW_move_up_down
    61
    62 3661			PMIW_move_up_up
    63 3661 20 C1 2C			jsr AddWaterMoveUpAccelToSpeed
    64 3664 4C A4 36			jmp PMIW_going_up_speed
    65
    66 3667			PMIW_move_up_down
    67 3667 4C C3 36			jmp PMIW_going_down
    68
    69
    70 366A			PMIW_check_move_down
    71 366A A5 DD			lda _stick0
    72 366C 29 02			and #STICK_DOWN	; check down
    73 366E D0 2C			bne PMIW_under_surface
    74
    75 3670 AD B2 2A			lda _waterPlayerDirectionFlag
    76 3673 D0 14			bne PMIW_move_down_down
    77
    78 3675			PMIW_move_down_up
    79 3675 20 AD 2C			jsr SubstractWaterAccelToSpeed
    80
    81 3678 20 13 2D			jsr SubstractSpeedYToPosition
    82
    83 367B A5 C6			lda _playerSpeedY_H1
    84 367D 05 C7			ora _playerSpeedY_L1
    85 367F D0 18			bne PMIW_check_move_exit
    86
    87 3681 A9 01			lda #1
    88 3683 8D B2 2A			sta _waterPlayerDirectionFlag
    89
    90 3686 4C 11 37			jmp PMIW_check_side_moves
    91
    92 3689			PMIW_move_down_down
    93 3689 20 E3 2C			jsr AddWaterMoveDownAccelToSpeed
    94
    95 368C 20 02 31			jsr AddSpeedYToPosition
    96
    97 368F A5 D8			lda _playerOverPlatformFlag
    98 3691 F0 06			beq PMIW_check_move_exit
    99
   100 				; reset speed in Y after a bottom collision
   101 3693 A9 00			lda #0
   102 3695 85 C6			sta _playerSpeedY_H1
   103 3697 85 C7			sta _playerSpeedY_L1
   104
   105 3699			PMIW_check_move_exit
   106 3699 4C 11 37			jmp PMIW_check_side_moves
   107
   108
   109 				;----------------------------------------
   110 369C			PMIW_under_surface
   111 369C AD B2 2A			lda _waterPlayerDirectionFlag
   112 369F D0 22			bne PMIW_going_down
   113
   114 36A1			PMIW_going_up
   115 36A1 20 8B 2C			jsr AddWaterAccelToSpeed
   116
   117 36A4			PMIW_going_up_speed
   118 36A4 20 13 2D			jsr SubstractSpeedYToPosition
   119
   120 				; check if we are emerging from water (middle height, center pixel)
   121 36A7			PMIW_emerging
   122 36A7 A9 02			lda #2
   123 36A9 8D AE 2A			sta _bottomPosOffsetX
   124 36AC A9 03			lda #3
   125 36AE 8D AF 2A			sta _bottomPosOffsetY
   126 36B1 20 A1 2D			jsr CheckPlayerBottomUpPos
   127
   128 36B4 AD AD 2A			lda _middleBottomChar
   129 36B7 29 0F			and #15
   130 36B9 D0 56			bne PMIW_check_side_moves
   131
   132 36BB A9 01			lda #1
   133 36BD 8D B3 2A			sta _playerOnWaterSurfaceFlag
   134
   135 36C0 4C 11 37			jmp PMIW_check_side_moves
   136
   137
   138 36C3			PMIW_going_down
   139 36C3 20 AD 2C			jsr SubstractWaterAccelToSpeed
   140
   141 36C6			PMIW_going_down_speed
   142 36C6 20 02 31			jsr AddSpeedYToPosition
   143
   144 				; 	lda _playerOverPlatformFlag
   145 				; 	beq PMIW_check_down_speed
   146 				;
   147 				; ; reset speed in Y after a bottom collision
   148 				; 	lda #0
   149 				; 	sta _playerSpeedY_H1
   150 				; 	sta _playerSpeedY_L1
   151 				; 	jmp PMIW_change_dir_to_up
   152
   153 36C9			PMIW_check_down_speed
   154 36C9 A5 C6			lda _playerSpeedY_H1
   155 36CB 05 C7			ora _playerSpeedY_L1
   156 36CD D0 42			bne PMIW_check_side_moves
   157
   158 36CF			PMIW_change_dir_to_up
   159 36CF A9 00			lda #0
   160 36D1 8D B2 2A			sta _waterPlayerDirectionFlag
   161
   162 36D4 4C 11 37			jmp PMIW_check_side_moves
   163
   164
   165 				;----------------------------------------
   166 36D7			PMIW_on_surface
   167
   168 				; check water "buoyancy"
   169 36D7 AD B2 2A			lda _waterPlayerDirectionFlag
   170 36DA D0 14			bne PMIW_going_down_surface
   171
   172 36DC			PMIW_going_up_surface
   173 36DC 20 AD 2C			jsr SubstractWaterAccelToSpeed
   174
   175 36DF 20 13 2D			jsr SubstractSpeedYToPosition
   176
   177 36E2 A5 C6			lda _playerSpeedY_H1
   178 36E4 05 C7			ora _playerSpeedY_L1
   179 36E6 D0 29			bne PMIW_check_side_moves
   180
   181 36E8 A9 01			lda #1
   182 36EA 8D B2 2A			sta _waterPlayerDirectionFlag
   183
   184 36ED 4C 11 37			jmp PMIW_check_side_moves
   185
   186
   187 36F0			PMIW_going_down_surface
   188 36F0 20 8B 2C			jsr AddWaterAccelToSpeed
   189
   190 36F3 20 02 31			jsr AddSpeedYToPosition
   191
   192 				; search for water (top center pixel)
   193 36F6 A9 02			lda #2
   194 36F8 8D AE 2A			sta _bottomPosOffsetX
   195 36FB A9 07			lda #7
   196 36FD 8D AF 2A			sta _bottomPosOffsetY
   197 3700 20 A1 2D			jsr CheckPlayerBottomUpPos
   198
   199 3703 AD AD 2A			lda _middleBottomChar
   200 3706 29 0F			and #15
   201 3708 C9 05			cmp #CT_WATER
   202 370A D0 05			bne PMIW_check_side_moves
   203
   204 370C A9 00			lda #0
   205 370E 8D B3 2A			sta _playerOnWaterSurfaceFlag
   206
   207
   208 				;----------------------------------------
   209 3711			PMIW_check_side_moves
   210 3711 20 98 32			jsr DoSideMovement
   211
   212
   213 				;----------------------------------------
   214 3714			PMIW_update_pos
   215 3714 20 3E 2C			jsr SetPlayerInfo
   216
   217
   218 3717			PMIW_exit
   219 3717 4C 91 20			jmp PlayerMethodReturn
   667 371A					icl "StateJumping.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\StateJumping.Asm
     1
     2 371A			PlayerMethodJumping
     3
     4 371A 20 FD 31			jsr CheckCollectable
     5
     6 371D 20 AB 3C			jsr CheckCreatePlayerMissile
     7
     8
     9 				; check input to grab a ladder while jumping
    10 3720 A5 DD			lda _stick0
    11 3722 29 01			and #STICK_UP		; check if up is still pressed
    12 3724 D0 3B			bne PMJ_air_control
    13
    14 3726 A5 DD			lda _stick0
    15 3728 29 0C			and #[STICK_LEFT|STICK_RIGHT]		; check if left or right are not pressed
    16 372A C9 0C			cmp #[STICK_LEFT|STICK_RIGHT]
    17 372C D0 33			bne PMJ_air_control
    18
    19
    20 				;----------------------------------------
    21 372E			PMJ_check_ladder
    22 				; search for a ladder (middle pixel)
    23 372E A9 02			lda #2
    24 3730 8D AE 2A			sta _bottomPosOffsetX
    25 3733 A9 00			lda #0
    26 3735 8D AF 2A			sta _bottomPosOffsetY
    27 3738 20 54 2D			jsr CheckPlayerBottomDownPos
    28
    29 373B AD AD 2A			lda _middleBottomChar
    30 373E 29 0F			and #15
    31 3740 C9 04			cmp #CT_LADDER
    32 3742 D0 1D			bne PMJ_air_control
    33
    34 				; snap player to center of the ladder
    35 3744			PMJ_snap_ladder
    36 3744 A9 00			lda #0
    37 3746 85 AC			sta _playerLevelLeftX_L1
    38 3748 85 AA			sta _playerLevelLeftX_H2
    39
    40 374A AD B1 2A			lda _middleBottomCharPosX
    41 374D 0A				asl
    42 374E 26 AA			rol _playerLevelLeftX_H2	; x2
    43 3750 0A				asl
    44 3751 26 AA			rol _playerLevelLeftX_H2	; x4 = CHAR_PIXELS_X
    45 3753 85 AB			sta _playerLevelLeftX_H1
    46
    47 				; abort jumping state
    48 3755 A9 00			lda #0
    49 3757 85 D5			sta _playerHoldJumpCounter	; forget hold jump counter
    50
    51 				; start climbing state
    52 3759 A2 04			ldx #PS_CLIMBING
    53 375B 20 AB 33			jsr SetPlayerMethod
    54
    55 375E 4C 8D 37			jmp PMJ_exit
    56
    57
    58 				;----------------------------------------
    59 3761			PMJ_air_control
    60 3761 20 3B 32			jsr DoSideControl
    61
    62
    63 				;----------------------------------------
    64 3764			PMJ_update_jumping
    65 3764 A5 D5			lda _playerHoldJumpCounter
    66 3766 F0 0F			beq PMJ_decay_jump_speed
    67
    68 3768 A5 DD			lda _stick0
    69 376A 29 01			and #STICK_UP		; check if up is still pressed
    70 376C D0 05			bne PMJ_stick_not_up
    71
    72 376E C6 D5			dec _playerHoldJumpCounter	; update hold jump counter
    73 3770 4C 7A 37			jmp PMJ_hold_jump_speed
    74
    75 3773			PMJ_stick_not_up
    76 3773 A9 00			lda #0
    77 3775 85 D5			sta _playerHoldJumpCounter	; forget hold jump counter
    78
    79 3777			PMJ_decay_jump_speed
    80 3777 20 F0 33			jsr SubstractGravityAccelToSpeed
    81
    82 377A			PMJ_hold_jump_speed
    83 377A 20 13 2D			jsr SubstractSpeedYToPosition
    84
    85 377D 20 3E 2C			jsr SetPlayerInfo
    86
    87 				; check if the speed in Y is already 0
    88 3780 A5 C6			lda _playerSpeedY_H1
    89 3782 D0 09			bne PMJ_exit
    90 3784 A5 C7			lda _playerSpeedY_L1
    91 3786 D0 05			bne PMJ_exit
    92
    93 				; change to the falling state
    94 3788 A2 03			ldx #PS_FALLING
    95 378A 20 AB 33			jsr SetPlayerMethod
    96
    97 378D			PMJ_exit
    98 378D 4C 91 20			jmp PlayerMethodReturn
    99
   100 					
   668 						
   537 3790					icl "EnemyManager.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\EnemyManager.Asm
     1
     2 3790			InitEnemyManager
     3 				; parse every type of enemy, init its life, state, char index and position
     4 				; update total and active enemies
     5
     6 				; parse enemy type 1 (only one for now)
     7 3790 A2 01			ldx #1		; enemy type index
     8 3792 BD 36 3C			lda TabEnemyDefBaseChar,x
     9 3795 8D 49 3A			sta _searchEnemyChar
    10 3798 BD 34 3C			lda TabEnemyDefLife,x
    11 379B 8D 4A 3A			sta _defEnemyLife
    12 					
    13 379E A6 97			ldx _levelCharSizeX
    14 37A0 CA				dex			; we search in a shorter line because this enemy has a width of 2 chars
    15 37A1 8E 4B 3A			stx _numberOfValidRows
    16 					
    17 37A4 A2 00			ldx #0		; line index
    18
    19 37A6			IEM_loop1
    20 37A6 A0 00			ldy #0		; column index
    21 					
    22 37A8 BD CA 40			lda TabLevelLineAddressLSB,x
    23 37AB 85 E5			sta _ptrLevelLine
    24 37AD BD CA 41			lda TabLevelLineAddressMSB,x
    25 37B0 85 E6			sta _ptrLevelLine+1
    26
    27 37B2			IEM_loop2
    28 37B2 B1 E5			lda (_ptrLevelLine),y
    29 37B4 CD 49 3A			cmp _searchEnemyChar
    30 37B7 D0 78			bne IEM_no_enemy
    31
    32 37B9 8E 4C 3A			stx _tempByte
    33 37BC AE 48 3A			ldx _totalEnemies
    34
    35 				; init info for this enemy
    36 37BF A9 01			lda #1
    37 37C1 9D 54 3A			sta TabEnemyType,x
    38 37C4 AD 4A 3A			lda _defEnemyLife
    39 37C7 9D 74 3A			sta TabEnemyLife,x
    40 37CA A9 01			lda #1
    41 37CC 9D 94 3A			sta TabEnemyState,x
    42 37CF A9 78			lda #ENEMY_INIT_TIMER					; dont allow enemy actions for the first 4 seconds
    43 37D1 9D B4 3A			sta TabEnemyStateTimer,x
    44 37D4 AD 49 3A			lda _searchEnemyChar
    45 37D7 9D D4 3A			sta TabEnemyBaseCharIndex,x
    46 37DA 98				tya
    47 37DB 9D F4 3A			sta TabEnemyBaseCharX,x
    48 37DE AD 4C 3A			lda _tempByte
    49 37E1 9D 14 3B			sta TabEnemyBaseCharY,x
    50
    51 				; init level position
    52 				; TabEnemyLevelTopY_H2 starts as 0, now multiply by 8 to get the line
    53 37E4 0A				asl
    54 37E5 3E 94 3B			rol TabEnemyLevelTopY_H2,x
    55 37E8 0A				asl
    56 37E9 3E 94 3B			rol TabEnemyLevelTopY_H2,x
    57 37EC 0A				asl
    58 37ED 3E 94 3B			rol TabEnemyLevelTopY_H2,x
    59 37F0 9D 74 3B			sta TabEnemyLevelTopY_H1,x
    60 					
    61 				; TabEnemyLevelLeftX_H2 starts as 0, now multiply by 4 to get the horizontal pixel
    62 37F3 98				tya
    63 37F4 0A				asl
    64 37F5 3E 54 3B			rol TabEnemyLevelLeftX_H2,x
    65 37F8 0A				asl
    66 37F9 3E 54 3B			rol TabEnemyLevelLeftX_H2,x
    67 37FC 9D 34 3B			sta TabEnemyLevelLeftX_H1,x
    68
    69 				; init shot creation position (offset x: 3, offset y: 1)
    70 37FF BD 34 3B			lda TabEnemyLevelLeftX_H1,x
    71 3802 18				clc
    72 3803 69 03			adc #3
    73 3805 9D B4 3B			sta TabEnemyShotLevelLeftX_H1,x
    74 3808 BD 54 3B			lda TabEnemyLevelLeftX_H2,x
    75 380B 69 00			adc #0
    76 380D 9D D4 3B			sta TabEnemyShotLevelLeftX_H2,x
    77 					
    78 3810 BD 74 3B			lda TabEnemyLevelTopY_H1,x
    79 3813 18				clc
    80 3814 69 01			adc #1
    81 3816 9D F4 3B			sta TabEnemyShotLevelTopY_H1,x
    82 3819 BD 94 3B			lda TabEnemyLevelTopY_H2,x
    83 381C 69 00			adc #0
    84 381E 9D 14 3C			sta TabEnemyShotLevelTopY_H2,x
    85
    86 				; update number of enemies	
    87 3821 EE 48 3A			inc _totalEnemies
    88 3824 EE C4 40			inc _activeEnemies
    89
    90 3827 AD 48 3A			lda _totalEnemies
    91 382A C9 20			cmp #MAX_ENEMIES_PER_LEVEL
    92 382C F0 14			beq IEM_exit
    93 					
    94 382E AE 4C 3A			ldx _tempByte
    95
    96 3831			IEM_no_enemy
    97 3831 C8				iny
    98 3832 CC 4B 3A			cpy _numberOfValidRows
    99 3835 F0 03			beq IEM_check_loop_Y
   100 3837 4C B2 37			jmp IEM_loop2
   101
   102 383A			IEM_check_loop_Y
   103 383A E8				inx
   104 383B E4 98			cpx _levelCharSizeY
   105 383D F0 03			beq IEM_exit
   106 383F 4C A6 37			jmp IEM_loop1
   107
   108 3842			IEM_exit
   109 3842 60				rts
   110 					
   111
   112 3843			UpdateEnemyManager
   113
   114 				; update one enemy per frame, rotate through all active enemies
   115 3843 AD C4 40			lda _activeEnemies
   116 3846 D0 03			bne UEM_active_enemies
   117 3848 4C E8 38			jmp UEM_exit
   118
   119 384B			UEM_active_enemies
   120 				; update state timer for all enemies (if we don't want to do this, we should use a general time stamp system)
   121 384B A2 00			ldx #0
   122 384D			UEM_loop1
   123 384D BD B4 3A			lda TabEnemyStateTimer,x
   124 3850 F0 03			beq UEM_next_timer
   125 3852 DE B4 3A			dec TabEnemyStateTimer,x
   126 3855			UEM_next_timer
   127 3855 E8				inx
   128 3856 EC 48 3A			cpx _totalEnemies
   129 3859 D0 F2			bne UEM_loop1
   130
   131 				; iterate until we find the next active enemy
   132 385B AE 4D 3A			ldx _lastEnemyIndexUpdated
   133 					
   134 385E			UEM_loop2
   135 385E E8				inx
   136 385F EC 48 3A			cpx _totalEnemies
   137 3862 D0 02			bne UEM_no_loop_back
   138 3864 A2 00			ldx #0
   139 3866			UEM_no_loop_back
   140 3866 BD 94 3A			lda TabEnemyState,x		; state 0 implies a disabled enemy
   141 3869 F0 F3			beq UEM_loop2
   142 386B 8E 4D 3A			stx _lastEnemyIndexUpdated
   143
   144 				; should use the enemy type to jump to the correct update for that type
   145
   146 				; check state timer, update state if is 0
   147 386E BD B4 3A			lda TabEnemyStateTimer,x
   148 3871 D0 75			bne UEM_exit
   149
   150 				; timer is 0, check if the player is near enough to shoot, in what direction, and if there are missiles available
   151 				; (maybe check against the maximum number of enemy missiles possible)
   152 3873			UEM_check_shoot
   153 3873 AD 4E 3A			lda _enemyMissilesActive
   154 3876 C9 02			cmp #MAX_ENEMY_MISSILES
   155 3878 F0 6E			beq UEM_exit
   156 					
   157 				; check delta Y between the player and the enemy
   158 387A A5 B1			lda _playerLevelTopY_H1
   159 387C 38				sec
   160 387D FD 74 3B			sbc TabEnemyLevelTopY_H1,x
   161 3880 85 EB			sta _pageZeroTempPointer
   162 3882 A5 B0			lda _playerLevelTopY_H2
   163 3884 FD 94 3B			sbc TabEnemyLevelTopY_H2,x
   164 3887 85 EC			sta _pageZeroTempPointer+1
   165
   166 3889 A5 EB			lda _pageZeroTempPointer
   167 388B 18				clc
   168 388C 69 20			adc #ENEMY_SHOOT_DELTA_Y
   169 388E 85 EB			sta _pageZeroTempPointer
   170 3890 A5 EC			lda _pageZeroTempPointer+1
   171 3892 69 00			adc #0
   172 3894 85 EC			sta _pageZeroTempPointer+1
   173 3896 D0 50			bne UEM_exit	; abort if the high byte is already greater than 0
   174
   175 				; this works for a delta Y lower than 128 (lines)
   176 3898 A5 EB			lda _pageZeroTempPointer
   177 389A C9 40			cmp #[ENEMY_SHOOT_DELTA_Y*2]
   178 389C B0 4A			bcs UEM_exit
   179 					
   180 389E			UEM_shot
   181 389E BC 54 3A			ldy TabEnemyType,x
   182 38A1 B9 38 3C			lda TabEnemyDefShootCooldown,y
   183 38A4 9D B4 3A			sta TabEnemyStateTimer,x					; set shoot cooldown
   184
   185 				; update _enemyShootDirection (1 - right, 2 - left)
   186
   187 				; player width = 4 pixels, enemy1 width = 8 pixels
   188 				; compare to see if: px + (pw/2) == ex + (ew/2) (the center of the player and the enemy)
   189 				; if player info is equal or greater, then player is to the right of the enemy
   190 38A7 A5 AB			lda _playerLevelLeftX_H1
   191 38A9 38				sec
   192 38AA E9 04			sbc #4
   193 38AC 85 E2			sta _pageZeroTempValue
   194 38AE A5 AA			lda _playerLevelLeftX_H2
   195 38B0 E9 00			sbc #0
   196
   197 38B2 DD 54 3B			cmp TabEnemyLevelLeftX_H2,x
   198 38B5 90 0E			bcc UEM_shoot_left
   199 38B7 D0 07			bne UEM_shoot_right
   200 					
   201 38B9 A5 E2			lda _pageZeroTempValue
   202 38BB DD 34 3B			cmp TabEnemyLevelLeftX_H1,x
   203 38BE 90 05			bcc UEM_shoot_left
   204 					
   205 38C0			UEM_shoot_right
   206 38C0 A9 01			lda #1
   207 38C2 4C C7 38			jmp UEM_just_shoot
   208 38C5			UEM_shoot_left
   209 38C5 A9 02			lda #2
   210 38C7			UEM_just_shoot
   211 38C7 8D 4F 3A			sta _enemyShootDirection
   212
   213 				; update shot creation pos (assuming left and right pos are the same in this case)
   214 38CA BD B4 3B			lda TabEnemyShotLevelLeftX_H1,x
   215 38CD 8D 50 3A			sta _enemyShotLevelLeftX_H1
   216 38D0 BD D4 3B			lda TabEnemyShotLevelLeftX_H2,x
   217 38D3 8D 51 3A			sta _enemyShotLevelLeftX_H2
   218 					
   219 38D6 BD F4 3B			lda TabEnemyShotLevelTopY_H1,x
   220 38D9 8D 52 3A			sta _enemyShotLevelTopY_H1
   221 38DC BD 14 3C			lda TabEnemyShotLevelTopY_H2,x
   222 38DF 8D 53 3A			sta _enemyShotLevelTopY_H2
   223
   224 38E2 20 FF 3C			jsr CheckCreateEnemyMissile
   225 					
   226 38E5 EE 4E 3A			inc _enemyMissilesActive
   227 					
   228 38E8			UEM_exit
   229 				/*
   230 					lda _lastEnemyIndexUpdated
   231 					ldy #23
   232 					jsr DisplayDebugInfoHexFF	
   233 				*/
   233
   234 38E8 60				rts
   235
   236 					
   237 				;================================================================================
   238
   239 38E9			HitEnemy
   240
   241 				; should not use x register
   242 38E9 8E 47 3A			stx _hitEnemySaveX
   243
   244 				; pass parameters in _enemyCharPosX and _enemyCharPosY
   245 				; get address of that char (clear it and the next one) --> comes in _lineAddressLSB, _lineAddressMSB
   246 				; get pixel xpos for pm hpos, get pixel ypos for explosion start line
   247
   248 				; search for enemy index at the left char position
   249 38EC A2 00			ldx #0
   250
   251 38EE			HE_loop	
   252 38EE BD F4 3A			lda TabEnemyBaseCharX,x
   253 38F1 CD 25 3A			cmp _enemyCharPosX
   254 38F4 D0 1A			bne HE_next_enemy
   255 38F6 BD 14 3B			lda TabEnemyBaseCharY,x
   256 38F9 CD 26 3A			cmp _enemyCharPosY
   257 38FC D0 12			bne HE_next_enemy
   258
   259 38FE			HE_found_pos
   260 38FE BD 94 3A			lda TabEnemyState,x
   261 3901 F0 66			beq HE_exit				; already disabled
   262 					
   263 3903 BD 74 3A			lda TabEnemyLife,x
   264 3906 F0 61			beq HE_exit				; already destroyed
   265
   266 3908 DE 74 3A			dec TabEnemyLife,x
   267 390B F0 0C			beq HE_destroy_enemy	; life reached 0
   268 					
   269 390D 4C 69 39			jmp HE_exit				; still alive (no feedback for now?)
   270
   271 3910			HE_next_enemy
   272 3910 E8				inx
   273 3911 EC 48 3A			cpx _totalEnemies
   274 3914 D0 D8			bne HE_loop
   275 3916 4C 69 39			jmp HE_exit
   276 					
   277 3919			HE_destroy_enemy
   278 3919 A9 00			lda #0
   279 391B 9D 94 3A			sta TabEnemyState,x
   280 					
   281 391E CE C4 40			dec _activeEnemies
   282 					
   283 3921 AD 40 3C			lda _lineAddressLSB
   284 3924 85 E5			sta _ptrLevelLine
   285 3926 AD 41 3C			lda _lineAddressMSB
   286 3929 85 E6			sta _ptrLevelLine+1
   287 					
   288 392B AC 25 3A			ldy _enemyCharPosX
   289 392E A9 00			lda #0
   290 3930 91 E5			sta (_ptrLevelLine),y
   291 3932 C8				iny
   292 3933 91 E5			sta (_ptrLevelLine),y
   293
   294 				; init explosion info (clear previous explosion if there was one active)
   295 3935 AD 27 3A			lda _numEnemyExplosions
   296 3938 F0 03			beq HE_no_explosions
   297 					
   298 393A 20 6D 39			jsr EraseExplosionFrame
   299
   300 393D			HE_no_explosions
   301 393D BD 54 3B			lda TabEnemyLevelLeftX_H2,x
   302 3940 8D 1C 3A			sta _enemyExplosionLevelLeftX_H2
   303 3943 BD 34 3B			lda TabEnemyLevelLeftX_H1,x
   304 3946 8D 1D 3A			sta _enemyExplosionLevelLeftX_H1
   305 					
   306 3949 BD 94 3B			lda TabEnemyLevelTopY_H2,x
   307 394C 8D 1E 3A			sta _enemyExplosionLevelTopY_H2
   308 394F BD 74 3B			lda TabEnemyLevelTopY_H1,x
   309 3952 8D 1F 3A			sta _enemyExplosionLevelTopY_H1
   310 3955 A9 00			lda #0
   311 3957 8D 20 3A			sta _enemyExplosionLevelTopY_L1
   312
   313 395A A9 01			lda #1
   314 395C 8D 23 3A			sta _enemyExplosionStep
   315 395F A9 00			lda #0
   316 3961 8D 24 3A			sta _enemyExplosionStepIndex
   317
   318 3964 A9 01			lda #1
   319 3966 8D 27 3A			sta _numEnemyExplosions		; 1 max for now
   320
   321 3969			HE_exit
   322 3969 AE 47 3A			ldx _hitEnemySaveX
   323 					
   324 396C 60				rts
   325
   326 				;------------------------------------------------------------
   327 				; also clear enemy explosion if the player respawns
   328 				; also clear enemy missiles and _enemyMissilesActive
   329
   330 396D			EraseExplosionFrame
   331 396D A2 00			ldx #0
   332 396F AC 22 3A			ldy _enemyExplosionScreenTopY_H1
   333
   334 3972			EEF_loop
   335 3972 A9 00			lda #0
   336 3974 99 00 A7			sta Player3,y
   337
   338 3977 98				tya
   339 3978 18				clc
   340 3979 6D 23 3A			adc _enemyExplosionStep
   341 					;bcs EEF_exit				; comment this to allow "wrap around"
   342 397C A8				tay
   343
   344 397D E8				inx
   345 397E EC 28 3A			cpx TabEnemyShapeSizeY		; should use and index here, if there is more than one enemy explosion
   346 3981 D0 EF			bne EEF_loop
   347
   348 3983			EEF_exit
   349 3983 60				rts
   350
   351 				;------------------------------------------------------------
   352 3984			DrawExplosionFrame
   353 3984 A2 00			ldx #0
   354 3986 AC 22 3A			ldy _enemyExplosionScreenTopY_H1
   355
   356 3989			DEF_loop
   357 3989 BD 29 3A			lda TabEnemyShape_01,x
   358 398C 99 00 A7			sta Player3,y
   359
   360 398F 98				tya
   361 3990 18				clc
   362 3991 6D 23 3A			adc _enemyExplosionStep
   363 					;bcs DEF_exit				; comment this to allow "wrap around"
   364 3994 A8				tay
   365
   366 3995 E8				inx
   367 3996 EC 28 3A			cpx TabEnemyShapeSizeY		; should use and index here, if there is more than one enemy explosion
   368 3999 D0 EE			bne DEF_loop
   369
   370 399B			DEF_exit
   371 399B 60				rts
   372
   373 				;------------------------------------------------------------
   374 399C			DrawEnemyExplosion
   375 399C AD 27 3A			lda _numEnemyExplosions
   376 399F D0 03			bne DEE_erase
   377 39A1 4C 1B 3A			jmp DEE_exit
   378 					
   379 				; erase previous enemy explosion frame
   380 39A4			DEE_erase
   381 39A4 20 6D 39			jsr EraseExplosionFrame
   382
   383 39A7			DEE_update_frame
   384 39A7 EE 24 3A			inc _enemyExplosionStepIndex
   385 39AA AE 24 3A			ldx _enemyExplosionStepIndex
   386 39AD E0 16			cpx #MAX_EXPLOSION_STEPS
   387 39AF 90 08			bcc DEE_do_update
   388 					
   389 				; reached end of the explosion
   390 39B1 A9 00			lda #0
   391 39B3 8D 27 3A			sta _numEnemyExplosions
   392
   393 39B6 4C 1B 3A			jmp DEE_exit
   394
   395 39B9			DEE_do_update
   396 39B9 BD 31 3A			lda TabEnemyExplosionColor,x
   397 39BC 8D 13 D0			sta COLPM1
   398
   399 				; update step and explosion starting line
   400 				; if step +1 --> line - 3.5
   401 				; if step +2 --> line - 7.0
   402 39BF AD 20 3A			lda _enemyExplosionLevelTopY_L1
   403 39C2 38				sec
   404 39C3 E9 80			sbc #128
   405 39C5 8D 20 3A			sta _enemyExplosionLevelTopY_L1
   406
   407 39C8 AD 1F 3A			lda _enemyExplosionLevelTopY_H1
   408 39CB E9 03			sbc #3
   409 39CD 8D 1F 3A			sta _enemyExplosionLevelTopY_H1
   410
   411 39D0 AD 1E 3A			lda _enemyExplosionLevelTopY_H2
   412 39D3 E9 00			sbc #0
   413 39D5 8D 1E 3A			sta _enemyExplosionLevelTopY_H2
   414
   415 39D8 EE 23 3A			inc _enemyExplosionStep	; step +1 (delta between every explosion line, in this frame)
   416 				;	inc _enemyExplosionStep	; step +2
   417
   418 				; get new screen pos for the explosion
   419 				; this must use the "_H2" positions for when the delta between the explosion and the camera is too big (64 chars in X, or 32 chars in Y)
   420
   421 39DB AD 1D 3A			lda _enemyExplosionLevelLeftX_H1
   422 39DE 38				sec
   423 39DF E5 9E			sbc _levelWindowX_H1
   424 39E1 8D 45 3C			sta _screenDelta_H1
   425
   426 39E4 AD 1C 3A			lda _enemyExplosionLevelLeftX_H2
   427 39E7 E5 9D			sbc _levelWindowX_H2
   428 39E9 90 1F			bcc DEE_set_outside			; this is not totally correct, because it doesn't use the width of the missile
   429 39EB 8D 44 3C			sta _screenDelta_H2		; (but if we do it correctly we should clip the missile graphics)
   430
   431 39EE D0 1A			bne DEE_set_outside			; could remove the bcc and only use this..
   432 39F0 AD 45 3C			lda _screenDelta_H1
   433 39F3 C9 A0			cmp #[160]					; 40 chars x 4 pixels
   434 39F5 B0 13			bcs DEE_set_outside
   435 					
   436 39F7 69 30			adc #PM_BASE_SCREEN_X
   437 39F9 8D 21 3A			sta _enemyExplosionScreenLeftX_H1
   438 					
   439
   440 39FC AD 1F 3A			lda _enemyExplosionLevelTopY_H1
   441 39FF 38				sec
   442 3A00 E5 A0			sbc _levelWindowY_H1
   443 				/*	sta _screenDelta_H1
   444 					
   445 					lda _enemyExplosionLevelTopY_H2
   446 					sbc _levelWindowY_H2
   447 					bcc DEE_set_outside			; this is not totally correct, because it doesn't use the height of the missile
   448 					sta _screenDelta_H2		; (but if we do it correctly we should clip the missile graphics)
   449
   450 					bne DEE_set_outside			; could remove the bcc and only use this..
   451 					lda _screenDelta_H1
   452 					cmp #[193]					; 24 chars x 8 scan lines, plus one extra scan line
   453 					bcs DEE_set_outside
   454 				*/
   454
   455 3A02 69 20			adc #PM_BASE_SCREEN_Y
   456 3A04 8D 22 3A			sta _enemyExplosionScreenTopY_H1
   457
   458 3A07 4C 12 3A			jmp DEE_update_hpos
   459
   460
   461 				; if outside the visible range in X or Y, just set it out of the screen (for a p/m the screen coordinate 0 is outside the visible range)
   462 3A0A			DEE_set_outside
   463 3A0A A9 00			lda #0
   464 3A0C 8D 21 3A			sta _enemyExplosionScreenLeftX_H1
   465 3A0F 8D 22 3A			sta _enemyExplosionScreenTopY_H1
   466
   467
   468 3A12			DEE_update_hpos
   469 3A12 AD 21 3A			lda _enemyExplosionScreenLeftX_H1
   470 3A15 8D 01 D0			sta HPOSP1
   471
   472 				; draw new enemy explosion frame
   473 3A18			DEE_draw
   474 3A18 20 84 39			jsr DrawExplosionFrame
   475
   476
   477 3A1B			DEE_exit
   478 3A1B 60				rts
   479
   480 				;------------------------------------------------------------
   481 3A1C 00			_enemyExplosionLevelLeftX_H2	.byte 0
   482 3A1D 00			_enemyExplosionLevelLeftX_H1	.byte 0
   483
   484 3A1E 00			_enemyExplosionLevelTopY_H2	.byte 0
   485 3A1F 00			_enemyExplosionLevelTopY_H1	.byte 0
   486 3A20 00			_enemyExplosionLevelTopY_L1	.byte 0
   487
   488 3A21 00			_enemyExplosionScreenLeftX_H1	.byte 0
   489 3A22 00			_enemyExplosionScreenTopY_H1	.byte 0
   490
   491 3A23 00			_enemyExplosionStep			.byte 0
   492
   493 3A24 00			_enemyExplosionStepIndex		.byte 0
   494 = 0016			MAX_EXPLOSION_STEPS = 22
   495
   496 3A25 00			_enemyCharPosX					.byte 0
   497 3A26 00			_enemyCharPosY					.byte 0
   498
   499 3A27 00			_numEnemyExplosions			.byte 0
   500
   501
   502 3A28			TabEnemyShapeSizeY
   503 3A28 08				.byte 8
   504
   505 3A29			TabEnemyShape_01
   506 3A29 3C				.byte %00111100
   507 3A2A E7				.byte %11100111
   508 3A2B 18				.byte %00011000
   509 3A2C E7				.byte %11100111
   510 3A2D 3C				.byte %00111100
   511 3A2E 00				.byte %00000000
   512 3A2F 3C				.byte %00111100
   513 3A30 7E				.byte %01111110
   514
   515 3A31			TabEnemyExplosionColor
   516 				.ifndef PAL_VERSION
   517 3A31 2E 2E 2E 2C 2C 2C + 	.by +32, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
   518 				.else
   519 					.by +16, 14, 14, 14, 12, 12, 12, 10, 10, 10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2, 0
   520 				.endif
   521
   522 				;================================================================================
   523
   524 = 0020			MAX_ENEMIES_PER_LEVEL = 32
   525 = 0002			MAX_ENEMY_MISSILES = 2
   526
   527 				.ifndef PAL_VERSION
   528 = 002A			ENEMY_EXPLOSION_COLOR = 32+10
   529 				.else
   530 				ENEMY_EXPLOSION_COLOR = 16+10
   531 				.endif
   532
   533 3A47 00			_hitEnemySaveX .byte 0
   534
   535 3A48 00			_totalEnemies .byte 0
   536
   537 3A49 00			_searchEnemyChar .byte 0
   538 3A4A 00			_defEnemyLife .byte 0
   539 3A4B 00			_numberOfValidRows .byte 0
   540
   541 3A4C 00			_tempByte .byte 0
   542
   543 3A4D 00			_lastEnemyIndexUpdated .byte 0
   544
   545 3A4E 00			_enemyMissilesActive .byte 0
   546
   547 3A4F 00			_enemyShootDirection .byte 0
   548
   549 3A50 00			_enemyShotLevelLeftX_H1 .byte 0
   550 3A51 00			_enemyShotLevelLeftX_H2 .byte 0
   551 3A52 00			_enemyShotLevelTopY_H1 .byte 0
   552 3A53 00			_enemyShotLevelTopY_H2 .byte 0
   553
   554
   555 3A54			TabEnemyType
   556 3A54 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   557
   558 3A74			TabEnemyLife		; this table could be per level, if we can go back to the same screen
   559 3A74 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   560
   561 3A94			TabEnemyState
   562 3A94 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   563 3AB4			TabEnemyStateTimer
   564 3AB4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   565
   566 3AD4			TabEnemyBaseCharIndex
   567 3AD4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   568 3AF4			TabEnemyBaseCharX
   569 3AF4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   570 3B14			TabEnemyBaseCharY
   571 3B14 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   572
   573 3B34			TabEnemyLevelLeftX_H1
   574 3B34 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   575 3B54			TabEnemyLevelLeftX_H2
   576 3B54 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   577 3B74			TabEnemyLevelTopY_H1
   578 3B74 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   579 3B94			TabEnemyLevelTopY_H2
   580 3B94 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   581
   582 3BB4			TabEnemyShotLevelLeftX_H1
   583 3BB4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   584 3BD4			TabEnemyShotLevelLeftX_H2
   585 3BD4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   586 3BF4			TabEnemyShotLevelTopY_H1
   587 3BF4 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   588 3C14			TabEnemyShotLevelTopY_H2
   589 3C14 00 00 00 00 00 00 + 	:MAX_ENEMIES_PER_LEVEL .byte 0
   590
   591
   592 				; enemy definition tables (index or type 0 is not used)
   593 3C34			TabEnemyDefLife
   594 3C34 00 01			.byte 0, 1
   595
   596 3C36			TabEnemyDefBaseChar
   597 3C36 00 C0			.byte 0, 192
   598
   599 3C38			TabEnemyDefShootCooldown
   600 				.ifndef PAL_VERSION
   601 3C38 00 78			.byte 0, 120
   602 				.else
   603 					.byte 0, 100
   604 				.endif
   538 3C3A					icl "MissileSystem.Asm"
Source: E:\_8BitProjects\Series\Lessons\Lesson01\MissileSystem.Asm
     1 				;	
     2 				;**************************************************************************************************
     3 				; Filename:		missile_system.asm	[NRV 2010 - 2017]
     4 				; Project:		Plunker
     5 				;
     6 				; Created On:	Mon Aug 28, 2017 02:05 AM	
     7 				; Modified On:	Wed Mar 21, 2018 10:12 PM
     8 				;
     9 				;**************************************************************************************************
    10 				;
    11 				;**************************************************************************************************
    12 				; Missle Storage
    13 				;**************************************************************************************************
    14 				;
    15 = 00FC			CLEAR_MASK_M0 				= %11111100
    16 = 00F3			CLEAR_MASK_M1 				= %11110011
    17 = 00CF			CLEAR_MASK_M2 				= %11001111
    18 = 003F			CLEAR_MASK_M3 				= %00111111
    19
    20 = 0003			SET_MASK_M0 				= %00000011
    21 = 000C			SET_MASK_M1 				= %00001100
    22 = 0030			SET_MASK_M2 				= %00110000
    23 = 00C0			SET_MASK_M3 				= %11000000
    24
    25 = 0002			SET_MASK_M0_R_L1 			= %00000010
    26 = 0001			SET_MASK_M0_R_L2 			= %00000001
    27 = 0002			SET_MASK_M0_R_L3 			= %00000010
    28 = 0001			SET_MASK_M0_L_L1 			= %00000001
    29 = 0002			SET_MASK_M0_L_L2 			= %00000010
    30 = 0001			SET_MASK_M0_L_L3 			= %00000001
    31
    32 = 0008			SET_MASK_M1_R_L1 			= %00001000
    33 = 0004			SET_MASK_M1_R_L2 			= %00000100
    34 = 0008			SET_MASK_M1_R_L3 			= %00001000
    35 = 0004			SET_MASK_M1_L_L1 			= %00000100
    36 = 0008			SET_MASK_M1_L_L2 			= %00001000
    37 = 0004			SET_MASK_M1_L_L3 			= %00000100
    38
    39 = 0020			SET_MASK_M2_R_L1 			= %00100000
    40 = 0010			SET_MASK_M2_R_L2 			= %00010000
    41 = 0020			SET_MASK_M2_R_L3 			= %00100000
    42 = 0010			SET_MASK_M2_L_L1 			= %00010000
    43 = 0020			SET_MASK_M2_L_L2 			= %00100000
    44 = 0010			SET_MASK_M2_L_L3 			= %00010000
    45
    46 = 0080			SET_MASK_M3_R_L1 			= %10000000
    47 = 0040			SET_MASK_M3_R_L2 			= %01000000
    48 = 0080			SET_MASK_M3_R_L3 			= %10000000
    49 = 0040			SET_MASK_M3_L_L1 			= %01000000
    50 = 0080			SET_MASK_M3_L_L2 			= %10000000
    51 = 0040			SET_MASK_M3_L_L3 			= %01000000
    52
    53 3C3A 00			_pixelPositionX_H2			.byte 0
    54 3C3B 00			_pixelPositionX_H1			.byte 0
    55 3C3C 00			_pixelPositionY_H2			.byte 0
    56 3C3D 00			_pixelPositionY_H1			.byte 0
    57
    58 3C3E 00			_charPositionX				.byte 0
    59 3C3F 00			_charPositionY				.byte 0
    60
    61 3C40 00			_lineAddressLSB			.byte 0
    62 3C41 00			_lineAddressMSB			.byte 0
    63
    64 3C42 00			_charRaw					.byte 0
    65 3C43 00			_charDef					.byte 0
    66
    67 3C44 00			_screenDelta_H2			.byte 0
    68 3C45 00			_screenDelta_H1			.byte 0
    69
    70 3C46			TabClearMissileMask
    71 3C46 FC F3 CF 3F			.byte CLEAR_MASK_M0, CLEAR_MASK_M1, CLEAR_MASK_M2, CLEAR_MASK_M3
    72
    73 3C4A			TabSetMissileToRightMaskL1
    74 3C4A 02 08 20 80			.byte SET_MASK_M0_R_L1, SET_MASK_M1_R_L1, SET_MASK_M2_R_L1, SET_MASK_M3_R_L1
    75
    76 3C4E			TabSetMissileToRightMaskL2
    77 3C4E 01 04 10 40			.byte SET_MASK_M0_R_L2, SET_MASK_M1_R_L2, SET_MASK_M2_R_L2, SET_MASK_M3_R_L2
    78
    79 3C52			TabSetMissileToRightMaskL3
    80 3C52 02 08 20 80			.byte SET_MASK_M0_R_L3, SET_MASK_M1_R_L3, SET_MASK_M2_R_L3, SET_MASK_M3_R_L3
    81
    82 3C56			TabSetMissileToLeftMaskL1
    83 3C56 01 04 10 40			.byte SET_MASK_M0_L_L1, SET_MASK_M1_L_L1, SET_MASK_M2_L_L1, SET_MASK_M3_L_L1
    84
    85 3C5A			TabSetMissileToLeftMaskL2
    86 3C5A 02 08 20 80			.byte SET_MASK_M0_L_L2, SET_MASK_M1_L_L2, SET_MASK_M2_L_L2, SET_MASK_M3_L_L2
    87
    88 3C5E			TabSetMissileToLeftMaskL3
    89 3C5E 01 04 10 40			.byte SET_MASK_M0_L_L3, SET_MASK_M1_L_L3, SET_MASK_M2_L_L3, SET_MASK_M3_L_L3
    90
    91 3C62			TabDrawMissileMethodLSB
    92 3C62 15 35 55 92			.byte <DrawMissileM0, <DrawMissileM1, <DrawMissileM2, <DrawMissileM3
    93
    94 3C66			TabDrawMissileMethodMSB
    95 3C66 3F 3F 3F 3F			.byte >DrawMissileM0, >DrawMissileM1, >DrawMissileM2, >DrawMissileM3
    96
    97 				; virtual missiles tables
    98 = 0004			MAX_VIRTUAL_MISSILES = 4
    99
   100 3C6A 00			_currentVirtualMissiles .byte 0
   101
   102 3C6B			TabMissileScreenLeftX
   103 3C6B 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   104
   105 3C6F			TabMissileScreenTopY
   106 3C6F 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   107
   108 3C73			TabOldMissileScreenLeftX
   109 3C73 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   110
   111 3C77			TabOldMissileScreenTopY
   112 3C77 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   113
   114 3C7B			TabMissileLevelLeftX_H2
   115 3C7B 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   116
   117 3C7F			TabMissileLevelLeftX_H1
   118 3C7F 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   119
   120 3C83			TabMissileLevelLeftX_L1
   121 3C83 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   122
   123 3C87			TabMissileLevelTopY_H2
   124 3C87 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   125
   126 3C8B			TabMissileLevelTopY_H1
   127 3C8B 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   128
   129 3C8F			TabMissileLevelTopY_L1
   130 3C8F 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   131
   132 3C93			TabMissileSpeedX_H1
   133 3C93 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   134
   135 3C97			TabMissileSpeedX_L1
   136 3C97 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   137
   138 3C9B			TabMissileDirection
   139 3C9B 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   140
   141 3C9F			TabMissileFrameCounter_H2
   142 3C9F 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   143
   144 3CA3			TabMissileFrameCounter_H1
   145 3CA3 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   146
   147 3CA7			TabMissileOwner
   148 3CA7 00 00 00 00			:MAX_VIRTUAL_MISSILES .byte 0
   149 				;
   150 				;**************************************************************************************************
   151 				; CheckCreatePlayerMissile
   152 				;**************************************************************************************************
   153 				;
   154 3CAB			.proc CheckCreatePlayerMissile
   155
   156 3CAB A5 E0				lda _triggerState
   157 3CAD C9 02				cmp #2									; check just pressed
   158 3CAF D0 4D				bne CCPM_exit
   159 3CB1 20 83 3D				jsr GetFreeMissileIndex
   160 						
   161 3CB4 E0 02				cpx #2									; only use index 0 and 1 for the player missiles
   162 3CB6 B0 46				bcs CCPM_exit
   163 					
   164 3CB8 A9 02				lda #>[PLAYER_MISSILE_SPEED_X]
   165 3CBA 9D 93 3C				sta TabMissileSpeedX_H1,x
   166 						
   167 3CBD A9 80				lda #<[PLAYER_MISSILE_SPEED_X]
   168 3CBF 9D 97 3C				sta TabMissileSpeedX_L1,x
   169
   170 3CC2 A5 D7				lda _lastPlayerShootDirection
   171 3CC4 C9 01				cmp #PSD_RIGHT
   172 3CC6 F0 08				beq CCPM_shoot_right
   173 					
   174 				;************************************************
   175 				;
   176 3CC8			CCPM_shoot_left
   177 					
   178 3CC8 A9 02				lda #2
   179 3CCA 9D 9B 3C				sta TabMissileDirection,x
   180 3CCD 4C D5 3C				jmp CCPM_init_position
   181 					
   182 				;************************************************
   183 				;
   184 3CD0			CCPM_shoot_right
   185 					
   186 3CD0 A9 01				lda #1
   187 3CD2 9D 9B 3C				sta TabMissileDirection,x
   188 					
   189 				;************************************************
   190 				;
   191 3CD5			CCPM_init_position
   192 					
   193 3CD5 A5 AB				lda _playerLevelLeftX_H1
   194 3CD7 9D 7F 3C				sta TabMissileLevelLeftX_H1,x
   195 						
   196 3CDA A5 AA				lda _playerLevelLeftX_H2
   197 3CDC 9D 7B 3C				sta TabMissileLevelLeftX_H2,x
   198 						
   199 3CDF A5 B1				lda _playerLevelTopY_H1
   200 3CE1 18					clc
   201 3CE2 69 0C				adc #[PLR_HEIGHT/2]+2
   202 3CE4 9D 8B 3C				sta TabMissileLevelTopY_H1,x
   203 						
   204 3CE7 A5 B0				lda _playerLevelTopY_H2
   205 3CE9 69 00				adc #0
   206 3CEB 9D 87 3C				sta TabMissileLevelTopY_H2,x
   207
   208 3CEE A9 00				lda #0
   209 3CF0 9D 83 3C				sta TabMissileLevelLeftX_L1,x
   210 3CF3 9D 8F 3C				sta TabMissileLevelTopY_L1,x
   211
   212 3CF6 A9 01				lda #1									; player owner
   213 3CF8 9D A7 3C				sta TabMissileOwner,x
   214
   215 3CFB 20 92 3D				jsr CreateMissile						; before this, call GetFreeMissileIndex and then init..
   216 					
   217 				;************************************************
   218 				;
   219 3CFE			CCPM_exit		
   220 3CFE 60					rts
   221 					
   222 				.endp	
   223 				;	
   224 				;**************************************************************************************************
   225 				; CheckCreateEnemyMissile
   226 				;**************************************************************************************************
   227 				;
   228 3CFF			.proc CheckCreateEnemyMissile
   229 					
   230 3CFF A2 02				ldx #2									; check for a free missile index
   231 3D01 BD A7 3C				lda TabMissileOwner,x
   232 3D04 F0 07				beq CCEM_found_one_free
   233 					
   234 3D06 A2 03				ldx #3
   235 3D08 BD A7 3C				lda TabMissileOwner,x
   236 3D0B D0 38				bne CCEM_exit
   237
   238 				;************************************************
   239 				;	
   240 3D0D			CCEM_found_one_free
   241 					
   242 3D0D A9 02				lda #>[ENEMY_MISSILE_SPEED_X]
   243 3D0F 9D 93 3C				sta TabMissileSpeedX_H1,x
   244 						
   245 3D12 A9 00				lda #<[ENEMY_MISSILE_SPEED_X]
   246 3D14 9D 97 3C				sta TabMissileSpeedX_L1,x
   247 					
   248 3D17 AD 4F 3A				lda _enemyShootDirection
   249 3D1A 9D 9B 3C				sta TabMissileDirection,x
   250
   251 					
   252 3D1D AD 50 3A				lda _enemyShotLevelLeftX_H1			; init position
   253 3D20 9D 7F 3C				sta TabMissileLevelLeftX_H1,x
   254 						
   255 3D23 AD 51 3A				lda _enemyShotLevelLeftX_H2
   256 3D26 9D 7B 3C				sta TabMissileLevelLeftX_H2,x
   257
   258 3D29 AD 52 3A				lda _enemyShotLevelTopY_H1
   259 3D2C 9D 8B 3C				sta TabMissileLevelTopY_H1,x
   260 						
   261 3D2F AD 53 3A				lda _enemyShotLevelTopY_H2
   262 3D32 9D 87 3C				sta TabMissileLevelTopY_H2,x
   263 						
   264 3D35 A9 00				lda #0
   265 3D37 9D 83 3C				sta TabMissileLevelLeftX_L1,x
   266 3D3A 9D 8F 3C				sta TabMissileLevelTopY_L1,x
   267
   268 3D3D A9 02				lda #2									; enemy owner
   269 3D3F 9D A7 3C				sta TabMissileOwner,x
   270
   271 3D42 20 92 3D				jsr CreateMissile
   272
   273 				;************************************************
   274 				;	
   275 3D45			CCEM_exit		
   276 3D45 60					rts
   277 					
   278 				.endp	
   279 				;
   280 				;**************************************************************************************************
   281 				; InitMissileSystem
   282 				;	
   283 				; 	Right now, the missile system is using a 1-on-1 relationship between
   284 				; 	a virtual missile and a hardware missile, so we have a max of 4 virtual
   285 				; 	missiles. If we want more virtual missiles we can only draw 4 every frame,
   286 				; 	so some of them can lose hardware collisions and they are going to flicker
   287 				;
   288 				;**************************************************************************************************
   289 				;
   290 3D46			.proc InitMissileSystem
   291
   292 3D46 A9 00				lda #0
   293 3D48 8D 6A 3C				sta _currentVirtualMissiles
   294 3D4B A2 00				ldx #0
   295
   296 				;************************************************
   297 				;
   298 3D4D			IMS_loop
   299 						
   300 3D4D 9D 6B 3C				sta TabMissileScreenLeftX,x
   301 3D50 9D 6F 3C				sta TabMissileScreenTopY,x
   302 3D53 9D 73 3C				sta TabOldMissileScreenLeftX,x
   303 3D56 9D 77 3C				sta TabOldMissileScreenTopY,x
   304
   305 3D59 9D 7B 3C				sta TabMissileLevelLeftX_H2,x
   306 3D5C 9D 7F 3C				sta TabMissileLevelLeftX_H1,x
   307 3D5F 9D 83 3C				sta TabMissileLevelLeftX_L1,x
   308 3D62 9D 87 3C				sta TabMissileLevelTopY_H2,x
   309 3D65 9D 8B 3C				sta TabMissileLevelTopY_H1,x
   310 3D68 9D 8F 3C				sta TabMissileLevelTopY_L1,x
   311
   312 3D6B 9D 93 3C				sta TabMissileSpeedX_H1,x
   313 3D6E 9D 97 3C				sta TabMissileSpeedX_L1,x
   314
   315 3D71 9D 9B 3C				sta TabMissileDirection,x
   316
   317 3D74 9D 9F 3C				sta TabMissileFrameCounter_H2,x
   318 3D77 9D A3 3C				sta TabMissileFrameCounter_H1,x
   319
   320 3D7A 9D A7 3C				sta TabMissileOwner,x
   321
   322 3D7D E8					inx
   323 3D7E E0 04				cpx #MAX_VIRTUAL_MISSILES
   324 3D80 D0 CB				bne IMS_loop
   325
   326 3D82 60					rts
   327
   328 				.endp		
   329 				;
   330 				;**************************************************************************************************
   331 				; GetFreeMissileIndex
   332 				;**************************************************************************************************
   333 				;
   334 3D83			.proc GetFreeMissileIndex
   335
   336 					
   337 3D83 A2 00				ldx #0									; return in X the index of the free virtual missile
   338 					
   339 				;************************************************
   340 				;
   341 3D85			GFMI_loop
   342 3D85 BD A7 3C				lda TabMissileOwner,x					; if the owner is 0, the slot is free
   343 3D88 F0 07				beq GFMI_exit
   344
   345 3D8A E8					inx
   346 3D8B E0 04				cpx #MAX_VIRTUAL_MISSILES
   347 3D8D D0 F6				bne GFMI_loop
   348
   349 3D8F A2 FF				ldx #255								; value for: "there is no free index"
   350 					
   351 				;************************************************
   352 				;
   353 3D91			GFMI_exit
   354 3D91 60					rts
   355
   356 				.endp		
   357 				;	
   358 				;**************************************************************************************************
   359 				; CreateMissile
   360 				;
   361 				; 	before this, call GetFreeMissileIndex and then init:
   362 				; 	TabMissileLevelLeftX_H2/H1/L1, TabMissileLevelTopY_H2/H1/L1,
   363 				; 	TabMissileSpeedX_H1/L1 (negative if going to the left)
   364 				; 	and TabMissileOwner (different than 0)
   365 				;
   366 				;**************************************************************************************************
   367 				;
   368 3D92			.proc CreateMissile
   369
   370 					
   371 3D92 A9 00				lda #0									; use X as a parameter (the index of the virtual missile)
   372 3D94 9D 9F 3C				sta TabMissileFrameCounter_H2,x
   373 3D97 9D A3 3C				sta TabMissileFrameCounter_H1,x
   374 3D9A 20 A9 3E				jsr SetMissileScreenPos
   375 					
   376 						
   377 3D9D 20 01 3F				jsr DrawMissileMX						; maybe should check screen position before creating the missile
   378 3DA0 EE 6A 3C				inc _currentVirtualMissiles
   379 3DA3 60					rts
   380
   381 				.endp		
   382 				;	
   383 				;**************************************************************************************************
   384 				; UpdateMissileSystem
   385 				;
   386 				; 	should call this every frame, before calling CreateMissile in that frame (?)
   387 				;
   388 				;**************************************************************************************************
   389 				;
   390 3DA4			.proc UpdateMissileSystem
   391
   392 3DA4 A2 00				ldx #0
   393
   394 				;************************************************
   395 				; if the owner is 0, the slot is free
   396 				;
   397 3DA6			UMS_loop
   398 					
   399 3DA6 BD A7 3C				lda TabMissileOwner,x					
   400 3DA9 D0 03				bne UMS_update
   401 3DAB 4C A0 3E				jmp UMS_next
   402
   403 				;************************************************
   404 				; update frame counter (life time)
   405 				;
   406 3DAE			UMS_update	
   407 						
   408 3DAE FE A3 3C				inc TabMissileFrameCounter_H1,x			
   409 3DB1 D0 03				bne UMS_check_collision
   410 3DB3 FE 9F 3C				inc TabMissileFrameCounter_H2,x
   411
   412 				;************************************************
   413 				; check if we need to destroy the missile by a hardware collision
   414 				;
   415 3DB6			UMS_check_collision								
   416 					
   417 3DB6 20 39 40				jsr GetPlayerMissileFrontChar
   418 3DB9 BD A7 3C				lda TabMissileOwner,x
   419 3DBC C9 01				cmp #1
   420 3DBE F0 0C				beq UMS_player_owner
   421
   422 				;************************************************
   423 				; the collision check is a lot simpler for enemies
   424 				;
   425 3DC0			UMS_enemy_owner									
   426 					
   427 3DC0 AD 43 3C				lda _charDef
   428 3DC3 29 0F				and #15
   429 3DC5 C9 01				cmp #CT_BLOCK
   430 3DC7 D0 57				bne UMS_update_position
   431 3DC9 4C 7C 3E				jmp UMS_destroy
   432
   433 				;************************************************
   434 				;
   435 3DCC			UMS_player_owner
   436 						
   437 3DCC AD 43 3C				lda _charDef
   438 3DCF 29 0F				and #$0F
   439
   440 				;************************************************
   441 				;
   442 3DD1			UMS_check_block
   443 						
   444 3DD1 C9 01				cmp #CT_BLOCK
   445 3DD3 D0 05				bne UMS_check_danger
   446 						
   447 3DD5 A9 04				lda #4									; gray color
   448 3DD7 4C 1D 3E				jmp TEST_B1
   449
   450 				;************************************************
   451 				;
   452 3DDA			UMS_check_danger
   453 					
   454 3DDA C9 03				cmp #CT_DANGER
   455 3DDC D0 42				bne UMS_update_position
   456
   457 				;************************************************
   458 				;
   459 3DDE			UMS_check_vlaser
   460 					
   461 3DDE AD 42 3C				lda _charRaw							; check for a disabed vertical laser
   462 3DE1 C9 95				cmp #[$80 + $15]
   463 3DE3 D0 0A				bne UMS_check_enemy1_left
   464 					
   465 3DE5 AD AD 25				lda _animLaserCurrentFrame
   466 3DE8 C9 3C				cmp #VLASER_DISABLED_INDEX				; disabled state index
   467 3DEA F0 34				beq UMS_update_position
   468 3DEC 4C 1B 3E				jmp UMS_danger
   469
   470 				;************************************************
   471 				;
   472 3DEF			UMS_check_enemy1_left
   473 					
   474 3DEF C9 C0				cmp #[$80 + $40]						; danger plus enemy 1 left char index
   475 3DF1 D0 12				bne UMS_check_enemy1_right
   476 					
   477 3DF3 AD 3E 3C				lda _charPositionX
   478 3DF6 8D 25 3A				sta _enemyCharPosX
   479 3DF9 AD 3F 3C				lda _charPositionY
   480 3DFC 8D 26 3A				sta _enemyCharPosY	
   481 3DFF 20 E9 38				jsr HitEnemy	
   482 3E02 4C 1B 3E				jmp UMS_danger
   483
   484 				;************************************************
   485 				;
   486 3E05			UMS_check_enemy1_right
   487
   488 3E05 C9 C1				cmp #[$80 + $41]						; danger plus enemy 1 right char index
   489 3E07 D0 12				bne UMS_danger
   490 3E09 AD 3E 3C				lda _charPositionX
   491 3E0C 8D 25 3A				sta _enemyCharPosX
   492 3E0F CE 25 3A				dec _enemyCharPosX
   493 3E12 AD 3F 3C				lda _charPositionY
   494 3E15 8D 26 3A				sta _enemyCharPosY	
   495 3E18 20 E9 38				jsr HitEnemy
   496
   497 				;************************************************
   498 				;
   499 3E1B			UMS_danger
   500
   501 				.ifndef PAL_PAL_VERSION		
   502 3E1B A9 24				lda #[32+4]								; red color, change for pal
   503 				.else
   504 						lda #[16+4]
   505 				.endif
   506
   507 				;************************************************
   508 				;
   509 3E1D			TEST_B1
   510 					
   511 3E1D 4C 7C 3E				jmp UMS_destroy
   512
   513 				;************************************************
   514 				; update position using the missile speed
   515 				;
   516 3E20			UMS_update_position								
   517 						
   518 3E20 BD 9B 3C				lda TabMissileDirection,x
   519 3E23 C9 01				cmp #1
   520 3E25 D0 21				bne UMS_move_left
   521
   522 				;************************************************
   523 				;
   524 3E27			UMS_move_right
   525 					
   526 3E27 BD 83 3C				lda TabMissileLevelLeftX_L1,x
   527 3E2A 18					clc
   528 3E2B 7D 97 3C				adc TabMissileSpeedX_L1,x
   529 3E2E 9D 83 3C				sta TabMissileLevelLeftX_L1,x
   530
   531 3E31 BD 7F 3C				lda TabMissileLevelLeftX_H1,x
   532 3E34 7D 93 3C				adc TabMissileSpeedX_H1,x
   533 3E37 9D 7F 3C				sta TabMissileLevelLeftX_H1,x
   534
   535 3E3A BD 7B 3C				lda TabMissileLevelLeftX_H2,x
   536 3E3D 69 00				adc #0
   537 3E3F 9D 7B 3C				sta TabMissileLevelLeftX_H2,x
   538
   539 3E42 20 A9 3E				jsr SetMissileScreenPos
   540
   541 3E45 4C 66 3E				jmp UMS_check_screen_limits
   542
   543 				;************************************************
   544 				;
   545 3E48			UMS_move_left
   546 						
   547 3E48 BD 83 3C				lda TabMissileLevelLeftX_L1,x
   548 3E4B 38					sec
   549 3E4C FD 97 3C				sbc TabMissileSpeedX_L1,x
   550 3E4F 9D 83 3C				sta TabMissileLevelLeftX_L1,x
   551
   552 3E52 BD 7F 3C				lda TabMissileLevelLeftX_H1,x
   553 3E55 FD 93 3C				sbc TabMissileSpeedX_H1,x
   554 3E58 9D 7F 3C				sta TabMissileLevelLeftX_H1,x
   555
   556 3E5B BD 7B 3C				lda TabMissileLevelLeftX_H2,x
   557 3E5E E9 00				sbc #0
   558 3E60 9D 7B 3C				sta TabMissileLevelLeftX_H2,x
   559
   560 3E63 20 A9 3E				jsr SetMissileScreenPos
   561
   562 				;************************************************
   563 				; check outside screen position, to destroy the missile
   564 				;
   565 3E66			UMS_check_screen_limits							
   566
   567 3E66 BD 6B 3C				lda TabMissileScreenLeftX,x
   568 3E69 C9 30				cmp #[PM_BASE_SCREEN_X]					; screen left limit
   569 3E6B 90 0F				bcc UMS_destroy
   570 						
   571 3E6D C9 CD				cmp #[PM_BASE_SCREEN_X+160-3]			; screen right limit (minus width of the missile)
   572 3E6F B0 0B				bcs UMS_destroy
   573
   574 3E71 BD 6F 3C				lda TabMissileScreenTopY,x
   575 3E74 C9 20				cmp #[PM_BASE_SCREEN_Y]					; screen top limit
   576 3E76 90 04				bcc UMS_destroy
   577 					
   578 3E78 C9 DE				cmp #[PM_BASE_SCREEN_Y+192-2]			; screen bottom limit (minus height of the missile)
   579 					
   580 3E7A 90 21				bcc UMS_draw
   581
   582 				;************************************************
   583 				;
   584 3E7C			UMS_destroy
   585 						
   586 3E7C BD A7 3C				lda TabMissileOwner,x
   587 3E7F C9 02				cmp #2
   588 3E81 D0 03				bne UMS_not_fro_enemy
   589 3E83 CE 4E 3A				dec _enemyMissilesActive
   590
   591 				;************************************************
   592 				;
   593 3E86			UMS_not_fro_enemy
   594 					
   595 3E86 A9 00				lda #0
   596 3E88 9D A7 3C				sta TabMissileOwner,x
   597
   598 3E8B BC 77 3C				ldy TabOldMissileScreenTopY,x
   599 3E8E 20 07 40				jsr ClearMissileLines
   600
   601 3E91 BC 6F 3C				ldy TabMissileScreenTopY,x
   602 3E94 20 07 40				jsr ClearMissileLines
   603
   604 3E97 CE 6A 3C				dec _currentVirtualMissiles
   605 3E9A 4C A0 3E				jmp UMS_next
   606
   607 				;************************************************
   608 				; draw the missile
   609 				;
   610 3E9D			UMS_draw										
   611
   612 3E9D 20 01 3F				jsr DrawMissileMX
   613
   614 				;************************************************
   615 				;
   616 3EA0			UMS_next
   617 					
   618 3EA0 E8					inx
   619 3EA1 E0 04				cpx #MAX_VIRTUAL_MISSILES
   620 3EA3 F0 03				beq UMS_exit
   621 3EA5 4C A6 3D				jmp UMS_loop
   622
   623 				;************************************************
   624 				;
   625 3EA8			UMS_exit		
   626 3EA8 60					rts
   627 				.endp
   628 				;
   629 				;**************************************************************************************************
   630 				; SetMissileScreenPos
   631 				;
   632 				; 	use X as a parameter (the index of the virtual missile)
   633 				;
   634 				;**************************************************************************************************
   635 				;
   636 3EA9			.proc SetMissileScreenPos
   637 					
   638 3EA9 BD 6B 3C				lda TabMissileScreenLeftX,x						; save old screen pos
   639 3EAC 9D 73 3C				sta TabOldMissileScreenLeftX,x
   640 3EAF BD 6F 3C				lda TabMissileScreenTopY,x
   641 3EB2 9D 77 3C				sta TabOldMissileScreenTopY,x
   642 						
   643 						;
   644 						;************************************************
   645 						; get new screen pos
   646 						; this must use the "_H2" positions for when the
   647 						; delta between the missile and the camera is too
   648 						; big (64 chars in X, or 32 chars in Y)
   649 						;************************************************
   650 						;
   651 3EB5 BD 7F 3C				lda TabMissileLevelLeftX_H1,x
   652 3EB8 38					sec
   653 3EB9 E5 9E				sbc _levelWindowX_H1
   654 3EBB 8D 45 3C				sta _screenDelta_H1
   655 						
   656 3EBE BD 7B 3C				lda TabMissileLevelLeftX_H2,x
   657 3EC1 E5 9D				sbc _levelWindowX_H2
   658 3EC3 90 33				bcc SMSP_set_outside							; this is not totally correct, because it doesn't use the width of the missile
   659 3EC5 8D 44 3C				sta _screenDelta_H2							; (but if we do it correctly we should clip the missile graphics)
   660 3EC8 D0 2E				bne SMSP_set_outside							; could remove the bcc and only use this..
   661
   662 3ECA AD 45 3C				lda _screenDelta_H1
   663 3ECD C9 9F				cmp #[160-1]									; 40 chars x 4 pixels, minus (missile width - 1)
   664 3ECF B0 27				bcs SMSP_set_outside
   665
   666 3ED1 69 30				adc #PM_BASE_SCREEN_X
   667 3ED3 9D 6B 3C				sta TabMissileScreenLeftX,x
   668 3ED6 BD 8B 3C				lda TabMissileLevelTopY_H1,x
   669 3ED9 38					sec
   670 3EDA E5 A0				sbc _levelWindowY_H1
   671 3EDC 8D 45 3C				sta _screenDelta_H1
   672 						
   673 3EDF BD 87 3C				lda TabMissileLevelTopY_H2,x
   674 3EE2 E5 9F				sbc _levelWindowY_H2
   675 3EE4 90 12				bcc SMSP_set_outside							; this is not totally correct, because it doesn't use the height of the missile
   676 3EE6 8D 44 3C				sta _screenDelta_H2							; (but if we do it correctly we should clip the missile graphics)
   677 3EE9 D0 0D				bne SMSP_set_outside							; could remove the bcc and only use this..
   678
   679 3EEB AD 45 3C				lda _screenDelta_H1
   680 3EEE C9 BF				cmp #[193-2]									; 24 chars x 8 scan lines, plus one extra scan line, minus (missile height - 1)
   681 3EF0 B0 06				bcs SMSP_set_outside
   682 					
   683 3EF2 69 20				adc #PM_BASE_SCREEN_Y
   684 3EF4 9D 6F 3C				sta TabMissileScreenTopY,x
   685 						
   686 3EF7 60					rts
   687
   688 				;************************************************
   689 				; if outside the visible range in X or Y, just set 
   690 				; it out of the screen (for a p/m the screen 
   691 				; coordinate 0 is outside the visible range)
   692 				;
   693 3EF8			SMSP_set_outside								
   694 						
   695 3EF8 A9 00				lda #0
   696 3EFA 9D 6B 3C				sta TabMissileScreenLeftX,x
   697 3EFD 9D 6F 3C				sta TabMissileScreenTopY,x
   698 3F00 60					rts	
   699 				.endp	
   700 				;
   701 				;**************************************************************************************************
   702 				; DrawMissileMX
   703 				;
   704 				; 	draw missiles, use X as a parameter (the index of the virtual missile)
   705 				;
   706 				;**************************************************************************************************
   707 				;
   708 3F01			.proc DrawMissileMX
   709
   710 3F01 BD 62 3C			lda TabDrawMissileMethodLSB,x
   711 3F04 85 EB			sta _pageZeroTempPointer
   712 					
   713 3F06 BD 66 3C			lda TabDrawMissileMethodMSB,x
   714 3F09 85 EC			sta _pageZeroTempPointer+1
   715
   716 				 	;set up return address for rts
   717 3F0B A9 3F		    lda #>( DrawExit - 1 )
   718 3F0D 48			    pha 
   719 				    
   720 3F0E A9 13		    lda #<( DrawExit - 1 )
   721 3F10 48			    pha
   722 					
   723 3F11 6C EB 00			jmp (_pageZeroTempPointer)
   724 					
   725 3F14			DrawExit
   726
   727 3F14 60				rts
   728
   729 				.endp
   730 					
   731 				;
   732 				;**************************************************************************************************
   733 				; DrawMissileM0
   734 				;**************************************************************************************************
   735 				;
   736 3F15			.proc DrawMissileM0
   737
   738 3F15 BD 6B 3C				lda TabMissileScreenLeftX,x
   739 3F18 8D 04 D0				sta HPOSM0
   740
   741 						; clear old position first
   742 3F1B BC 77 3C				ldy TabOldMissileScreenTopY,x
   743
   744 3F1E 20 07 40				jsr ClearMissileLines
   745
   746 						; draw shape in new position
   747 3F21 BC 6F 3C				ldy TabMissileScreenTopY,x
   748
   749 3F24 BD 9B 3C				lda TabMissileDirection,x
   750 3F27 C9 01				cmp #1
   751 3F29 D0 06				bne DMM0_left
   752
   753 3F2B 20 CF 3F				jsr SetMissileToRightLines
   754 3F2E 4C 34 3F				jmp DMM0_Exit
   755
   756 				;*****	DMM0_left
   757 				;
   758 3F31			DMM0_left
   759 3F31 20 EB 3F				jsr SetMissileToLeftLines
   760 					
   761 				;*****	DMM0_Exit
   762 				;
   763 3F34			DMM0_Exit	
   764 						
   765 3F34 60					rts
   766 						
   767 				.endp		
   768
   769 				;
   770 				;**************************************************************************************************
   771 				; DrawMissileM1
   772 				;**************************************************************************************************
   773 				;
   774 3F35			.proc DrawMissileM1
   775
   776 3F35 BD 6B 3C				lda TabMissileScreenLeftX,x
   777 3F38 8D 05 D0				sta HPOSM1
   778 					
   779 						; clear old position first
   780 3F3B BC 77 3C				ldy TabOldMissileScreenTopY,x
   781 3F3E 20 07 40				jsr ClearMissileLines
   782
   783 						; draw shape in new position
   784 3F41 BC 6F 3C				ldy TabMissileScreenTopY,x
   785
   786 3F44 BD 9B 3C				lda TabMissileDirection,x
   787 3F47 C9 01				cmp #1
   788 3F49 D0 06				bne DMM1_left
   789
   790 3F4B 20 CF 3F				jsr SetMissileToRightLines
   791 					
   792 3F4E 4C 54 3F				jmp DMM1_Exit
   793 				;
   794 				;**************************************************************************************************
   795 				;
   796 3F51			DMM1_left
   797 3F51 20 EB 3F				jsr SetMissileToLeftLines
   798
   799 3F54			DMM1_Exit
   800 3F54 60					rts
   801
   802 				.endp
   803
   804 				;
   805 				;**************************************************************************************************
   806 				; DrawMissileM2
   807 				;**************************************************************************************************
   808 				;
   809 3F55			.proc DrawMissileM2
   810
   811 3F55 BD 6B 3C				lda TabMissileScreenLeftX,x
   812 3F58 8D 06 D0				sta HPOSM2
   813
   814 						; clear old position first
   815 3F5B BC 77 3C				ldy TabOldMissileScreenTopY,x
   816
   817 3F5E B9 00 A4				lda Player0,y
   818 3F61 29 CF				and #CLEAR_MASK_M2
   819 3F63 99 00 A4				sta Player0,y
   820 					
   821 3F66 B9 01 A4				lda Player0+1,y
   822 3F69 29 CF				and #CLEAR_MASK_M2
   823 3F6B 99 01 A4				sta Player0+1,y
   824 					
   825 3F6E B9 02 A4				lda Player0+2,y
   826 3F71 29 CF				and #CLEAR_MASK_M2
   827 3F73 99 02 A4				sta Player0+2,y
   828
   829 						; draw shape in new position
   830 3F76 BC 6F 3C				ldy TabMissileScreenTopY,x
   831
   832 3F79 B9 00 A4				lda Player0,y
   833 3F7C 09 30				ora #SET_MASK_M2
   834 3F7E 99 00 A4				sta Player0,y
   835 					
   836 3F81 B9 01 A4				lda Player0+1,y
   837 3F84 09 30				ora #SET_MASK_M2
   838 3F86 99 01 A4				sta Player0+1,y
   839 					
   840 3F89 B9 02 A4				lda Player0+2,y
   841 3F8C 09 30				ora #SET_MASK_M2
   842 3F8E 99 02 A4				sta Player0+2,y
   843 					
   844 3F91 60					rts
   845
   846 				.endp
   847
   848 				;
   849 				;**************************************************************************************************
   850 				; DrawMissileM3
   851 				;**************************************************************************************************
   852 				;
   853 3F92			.proc DrawMissileM3
   854
   855 3F92 BD 6B 3C				lda TabMissileScreenLeftX,x
   856 3F95 8D 07 D0				sta HPOSM3
   857
   858 						; clear old position first
   859 3F98 BC 77 3C				ldy TabOldMissileScreenTopY,x
   860
   861 3F9B B9 00 A4				lda Player0,y
   862 3F9E 29 3F				and #CLEAR_MASK_M3
   863 3FA0 99 00 A4				sta Player0,y
   864 						
   865 3FA3 B9 01 A4				lda Player0+1,y
   866 3FA6 29 3F				and #CLEAR_MASK_M3
   867 3FA8 99 01 A4				sta Player0+1,y
   868 						
   869 3FAB B9 02 A4				lda Player0+2,y
   870 3FAE 29 3F				and #CLEAR_MASK_M3
   871 3FB0 99 02 A4				sta Player0+2,y
   872
   873 						; draw shape in new position
   874 3FB3 BC 6F 3C				ldy TabMissileScreenTopY,x
   875
   876 3FB6 B9 00 A4				lda Player0,y
   877 3FB9 09 C0				ora #SET_MASK_M3
   878 3FBB 99 00 A4				sta Player0,y
   879 						
   880 3FBE B9 01 A4				lda Player0+1,y
   881 3FC1 09 C0				ora #SET_MASK_M3
   882 3FC3 99 01 A4				sta Player0+1,y
   883 						
   884 3FC6 B9 02 A4				lda Player0+2,y
   885 3FC9 09 C0				ora #SET_MASK_M3
   886 3FCB 99 02 A4				sta Player0+2,y
   887
   888 3FCE 60					rts
   889
   890 				.endp
   891 						
   892 				;
   893 				;**************************************************************************************************
   894 				; SetMissileToRightLines
   895 				;**************************************************************************************************
   896 				;
   897 3FCF			.proc SetMissileToRightLines
   898
   899 3FCF B9 00 A4				lda Player0,y
   900 3FD2 1D 4A 3C				ora TabSetMissileToRightMaskL1,x		; this "x" should be a hardware missile index
   901 3FD5 99 00 A4				sta Player0,y
   902
   903 3FD8 B9 01 A4				lda Player0+1,y
   904 3FDB 1D 4E 3C				ora TabSetMissileToRightMaskL2,x		; this "x" should be a hardware missile index
   905 3FDE 99 01 A4				sta Player0+1,y
   906
   907 3FE1 B9 02 A4				lda Player0+2,y
   908 3FE4 1D 52 3C				ora TabSetMissileToRightMaskL3,x		; this "x" should be a hardware missile index
   909 3FE7 99 02 A4				sta Player0+2,y
   910
   911 3FEA 60					rts
   912 					
   913 				.endp
   914 					
   915 				;
   916 				;**************************************************************************************************
   917 				; SetMissileToLeftLines
   918 				;**************************************************************************************************
   919 				;
   920 3FEB			.proc SetMissileToLeftLines
   921 						
   922 3FEB B9 00 A4				lda Player0,y
   923 3FEE 1D 56 3C				ora TabSetMissileToLeftMaskL1,x			; this "x" should be a hardware missile index
   924 3FF1 99 00 A4				sta Player0,y
   925 						
   926 3FF4 B9 01 A4				lda Player0+1,y
   927 3FF7 1D 5A 3C				ora TabSetMissileToLeftMaskL2,x			; this "x" should be a hardware missile index
   928 3FFA 99 01 A4				sta Player0+1,y
   929 						
   930 3FFD B9 02 A4				lda Player0+2,y
   931 4000 1D 5E 3C				ora TabSetMissileToLeftMaskL3,x			; this "x" should be a hardware missile index
   932 4003 99 02 A4				sta Player0+2,y
   933 						
   934 4006 60					rts
   935
   936 				.endp
   937 					
   938 				;
   939 				;**************************************************************************************************
   940 				; ClearMissileLines
   941 				;**************************************************************************************************
   942 				;
   943 4007			.proc ClearMissileLines
   944
   945 4007 B9 00 A4				lda Player0,y
   946 400A 3D 46 3C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   947 400D 99 00 A4				sta Player0,y
   948
   949 4010 B9 01 A4				lda Player0+1,y
   950 4013 3D 46 3C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   951 4016 99 01 A4				sta Player0+1,y
   952
   953 4019 B9 02 A4				lda Player0+2,y
   954 401C 3D 46 3C				and TabClearMissileMask,x				; this "x" should be a hardware missile index
   955 401F 99 02 A4				sta Player0+2,y
   956
   957 4022 60					rts
   958 					
   959 				.endp
   960 					
   961 				;
   962 				;**************************************************************************************************
   963 				; ClearAllMissiles
   964 				;**************************************************************************************************
   965 				;
   966 4023			.proc ClearAllMissiles
   967 					
   968 4023 A2 00				ldx #0
   969 4025 A9 00				lda #0
   970
   971 				;************************************************
   972 				;
   973 4027			CAM_loop
   974 4027 BC 6F 3C				ldy TabMissileScreenTopY,x
   975 402A 99 00 A4				sta Player0,y
   976 402D 99 01 A4				sta Player0+1,y
   977 4030 99 02 A4				sta Player0+2,y
   978
   979 4033 E8					inx
   980 4034 E0 04				cpx #MAX_VIRTUAL_MISSILES
   981 4036 D0 EF				bne CAM_loop
   982
   983 4038 60					rts
   984 						
   985 				.endp		
   986
   987 				;
   988 				;**************************************************************************************************
   989 				; GetPlayerMissileFrontChar
   990 				;
   991 				; 	use X as a parameter (the index of the virtual missile)
   992 				; 	return in A the character definition value
   993 				;
   994 				;**************************************************************************************************
   995 				;
   996 4039			.proc GetPlayerMissileFrontChar	
   997
   998 4039 BD 9B 3C				lda TabMissileDirection,x				; get front point char column
   999 403C C9 01				cmp #1
  1000 403E D0 14				bne GMFC_left
  1001
  1002 				;*****	Right
  1003 				;
  1004 4040			GMFC_right										; moving to the right, use right side pixel
  1005 4040 BD 7F 3C				lda TabMissileLevelLeftX_H1,x
  1006 4043 18					clc
  1007 4044 69 03				adc #3									; missile X size minus one
  1008 4046 8D 3B 3C				sta _pixelPositionX_H1
  1009 4049 BD 7B 3C				lda TabMissileLevelLeftX_H2,x
  1010 404C 69 00				adc #0
  1011 404E 8D 3A 3C				sta _pixelPositionX_H2
  1012 4051 4C 60 40				jmp GMFC_middle_line
  1013
  1014 				;*****	Left
  1015 				;
  1016 4054			GMFC_left										
  1017 4054 BD 7F 3C				lda TabMissileLevelLeftX_H1,x			; moving to the left, use left side pixel
  1018 4057 8D 3B 3C				sta _pixelPositionX_H1
  1019 405A BD 7B 3C				lda TabMissileLevelLeftX_H2,x
  1020 405D 8D 3A 3C				sta _pixelPositionX_H2
  1021
  1022 				;***** 	Middle Line
  1023 				;
  1024 4060			GMFC_middle_line
  1025 												
  1026 4060 BD 8B 3C				lda TabMissileLevelTopY_H1,x			; get middle char line
  1027 4063 18					clc
  1028 4064 69 01				adc #1									; because the height is 3 lines
  1029 4066 8D 3D 3C				sta _pixelPositionY_H1
  1030 4069 BD 87 3C				lda TabMissileLevelTopY_H2,x
  1031 406C 69 00				adc #0
  1032 406E 8D 3C 3C				sta _pixelPositionY_H2
  1033 4071 20 75 40				jsr GetCharDefinitionFromPixelPos
  1034 					
  1035 4074 60					rts
  1036 					
  1037 				.endp
  1038 					
  1039 				;
  1040 				;**************************************************************************************************
  1041 				; GetCharDefinitionFromPixelPos
  1042 				;
  1043 				; 	put coord "x" in _pixelPositionX_H2/_H1 and coord "y" in _pixelPositionY_H2/_H1
  1044 				; 	return in A the character definition value (and also use the Y register)
  1045 				; 	(this assume that there no more than 256 chars in x or in y, in a room)
  1046 				;
  1047 				;**************************************************************************************************
  1048 				;
  1049 4075			.proc GetCharDefinitionFromPixelPos
  1050
  1051 4075 AD 3C 3C				lda _pixelPositionY_H2					; get char line, divide by 8 (put in Y)
  1052 4078 8D AA 2A				sta _charBuffer_H2
  1053 						
  1054 407B AD 3D 3C				lda _pixelPositionY_H1
  1055 407E 4E AA 2A				lsr _charBuffer_H2						; /2
  1056 4081 6A					ror
  1057 4082 4E AA 2A				lsr _charBuffer_H2						; /4
  1058 4085 6A					ror
  1059 4086 4E AA 2A				lsr _charBuffer_H2						; /8 = CHAR_PIXELS_Y
  1060 4089 6A					ror
  1061 408A 8D 3F 3C				sta _charPositionY
  1062 						
  1063 408D A8					tay
  1064 408E B9 CA 40				lda TabLevelLineAddressLSB,y			; init pointer to char
  1065 4091 8D B6 40				sta GCDFPP_pointer+1
  1066 4094 8D 40 3C				sta _lineAddressLSB
  1067 					
  1068 4097 B9 CA 41				lda TabLevelLineAddressMSB,y
  1069 409A 8D B7 40				sta GCDFPP_pointer+2
  1070 409D 8D 41 3C				sta _lineAddressMSB
  1071
  1072 40A0 AD 3A 3C				lda _pixelPositionX_H2					; get char column, divide by 4 (put in Y)
  1073 40A3 8D AA 2A				sta _charBuffer_H2
  1074 40A6 AD 3B 3C				lda _pixelPositionX_H1
  1075 40A9 4E AA 2A				lsr _charBuffer_H2						; /2
  1076 40AC 6A					ror
  1077 40AD 4E AA 2A				lsr _charBuffer_H2						; /4 = CHAR_PIXELS_X
  1078 40B0 6A					ror
  1079 40B1 8D 3E 3C				sta _charPositionX
  1080 						
  1081 40B4 A8					tay
  1082
  1083 				;************************************************
  1084 				;
  1085 40B5			GCDFPP_pointer
  1086 						
  1087 40B5 B9 FF FF				lda $FFFF,y
  1088 40B8 8D 42 3C				sta _charRaw
  1089 40BB A8					tay
  1090 40BC B9 CA 42				lda TabCharDefinition,y
  1091 40BF 8D 43 3C				sta _charDef
  1092 40C2 60					rts
  1093
  1094 				.endp		
   539 						
   540 40C3					icl "GeneralData.Asm"					; General data members
Source: E:\_8BitProjects\Series\Lessons\Lesson01\GeneralData.Asm
     1 				;	
     2 				;**************************************************************************************************
     3 				;
     4 				;	Filename:		GeneralData.Asm
     5 				;
     6 				;	Created By:		Victor V Ferenzi
     7 				;
     8 				;	Created On:		Fri Apr 27, 2018 11:56 AM
     9 				;
    10 				;	Comments:		This code contains parts of the OPEN_PLAT project developed by NVR. It also
    11 				;					contains parts of the port from the C64 to Atari project ported by
    12 				;					Ken Jennings. Many thanks to both of them. 
    13 				;	
    14 				;**************************************************************************************************
    15 				;
    16
    17 				;*****	System Data members
    18 				;
    19 40C3 00			_goldCounter 					.byte $00		; current gold counter
    20 40C4 00			_activeEnemies					.byte $00		; active enemies counter
    21 40C5 00			_disableGameTimer				.byte $00		; disable game flag
    22
    23 40C6 00			_gameTimerSeconds				.byte $00		; seconds timer
    24 40C7 00			_gameTimerMinutes				.byte $00		; minutes timer
    25
    26 40C8 00			_gameTimerTSeconds				.byte $00		; seconds timer total
    27 40C9 00			_gameTSFrameCounter				.byte $00		; frame counter total
    28
    29 40CA 00 00 00 00 00 00 + TabLevelLineAddressLSB			:256 .byte $00
    30 41CA 00 00 00 00 00 00 + TabLevelLineAddressMSB			:256 .byte $00
    31
    32 				;
    33 				;**************************************************************************************************
    34 				; Character tile type definition
    35 				;
    36 				; 	Type definition: low 4 bits (0-15 value)
    37 				;		- 0: empty normal space (with gravity info?)			CT_BLANK			= 0					
    38 				;		- 1: block (with collision info, RLDU)					CT_BLOCK			= 1
    39 				;		- 2: collectable (with value info?)						CT_COLLECTABLE		= 2
    40 				;		- 3: danger (with energy info?)							CT_DANGER			= 3
    41 				;		- 4: ladder, climbable (with directions info?)			CT_LADDER			= 4
    42 				;		- 5: water (with density info? currents?)				CT_WATER			= 5
    43 				;		- 6: floating platform									CT_FLOATPLATFORM	= 1	
    44 				;
    45 				; 	External level definitions:
    46 				; 		- blocks ON/OFF
    47 				; 		- moving blocks
    48 				; 		- switches, triggers and traps
    49 				; 		- enemies and generators
    50 				; 		- dangers ON/OFF
    51 				; 		- moving dangers
    52 				; 		- interactions zones
    53 				; 		- text messages
    54 				;
    55 				;**************************************************************************************************
    56 				;
    57 42CA			TabCharDefinition
    58 42CA 00				.byte %00000000+CT_BLANK								; blank								[00]
    59 42CB 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[01]
    60 42CC 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[02]				
    61 42CD 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[03]
    62 42CE 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[04]
    63 42CF 03				.byte %00000000+CT_DANGER								; blue spikes						[05]
    64 42D0 03				.byte %00000000+CT_DANGER								; blue spikes						[06]
    65 42D1 00				.byte %00000000+CT_BLANK								; blank								[07]
    66 42D2 00				.byte %00000000+CT_BLANK								; blank								[08]
    67 42D3 00				.byte %00000000+CT_BLANK								; blank								[09]
    68 42D4 00				.byte %00000000+CT_BLANK								; blank								[0A]
    69 42D5 00				.byte %00000000+CT_BLANK								; blank								[0B]
    70 42D6 00				.byte %00000000+CT_BLANK								; blank								[0C]
    71 42D7 00				.byte %00000000+CT_BLANK								; blank								[0D]
    72 42D8 00				.byte %00000000+CT_BLANK								; blank								[0E]
    73 42D9 00				.byte %00000000+CT_BLANK								; blank								[0F]
    74 42DA 04				.byte %00000000+CT_LADDER								; ladder							[10]
    75 42DB 04				.byte %00000000+CT_LADDER								; ladder							[11]
    76 42DC 04				.byte %00000000+CT_LADDER								; ladder							[12]
    77 42DD 03				.byte %00000000+CT_DANGER								; blue spikes						[13]
    78 42DE F3				.byte %11110000+CT_DANGER								; vertical dither 1					[14]				
    79 42DF F3				.byte %11110000+CT_DANGER								; vertical dither 2					[15]
    80 42E0 F3				.byte %11110000+CT_DANGER								; vertical dither 3					[16]
    81 42E1 F3				.byte %11110000+CT_DANGER								; horizontal dither 1				[17]
    82 42E2 F3				.byte %11110000+CT_DANGER								; horizontal dither 2				[18]
    83 42E3 F3				.byte %11110000+CT_DANGER								; horizontal dither 3				[19]
    84 42E4 03				.byte %00000000+CT_DANGER								; spikes							[1A]
    85 42E5 03				.byte %00000000+CT_DANGER								; spikes							[1B]
    86 42E6 03				.byte %00000000+CT_DANGER								; spikes							[1C]
    87 42E7 03				.byte %00000000+CT_DANGER								; spikes							[1D]
    88 42E8 03				.byte %00000000+CT_DANGER								; spikes							[1E]
    89 42E9 03				.byte %00000000+CT_DANGER								; spikes							[1F]
    90 42EA F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[20]
    91 42EB F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[21]
    92 42EC F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[22]
    93 42ED F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[23]
    94 42EE F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[24]
    95 42EF F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[25]
    96 42F0 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[26]
    97 42F1 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[27]
    98 42F2 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[28]
    99 42F3 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[29]
   100 42F4 00				.byte %00000000+CT_BLANK								; blank								[2A]
   101 42F5 00				.byte %00000000+CT_BLANK								; blank								[2B]
   102 42F6 00				.byte %00000000+CT_BLANK								; blank								[2C]
   103 42F7 00				.byte %00000000+CT_BLANK								; blank								[2D]
   104 42F8 00				.byte %00000000+CT_BLANK								; blank								[2E]
   105 42F9 00				.byte %00000000+CT_BLANK								; blank								[2F]
   106 42FA 00				.byte %00000000+CT_BLANK								; blank								[30]
   107 42FB 00				.byte %00000000+CT_BLANK								; blank								[31]
   108 42FC 00				.byte %00000000+CT_BLANK								; blank								[32]
   109 42FD 00				.byte %00000000+CT_BLANK								; blank								[33]
   110 42FE 00				.byte %00000000+CT_BLANK								; blank								[34]
   111 42FF 00				.byte %00000000+CT_BLANK								; blank								[35]
   112 4300 00				.byte %00000000+CT_BLANK								; blank								[36]
   113 4301 00				.byte %00000000+CT_BLANK								; blank								[37]
   114 4302 00				.byte %00000000+CT_BLANK								; blank								[38]
   115 4303 00				.byte %00000000+CT_BLANK								; blank								[39]
   116 4304 03				.byte %00000000+CT_DANGER								; spikes							[3A]
   117 4305 03				.byte %00000000+CT_DANGER								; spikes							[3B]
   118 4306 00				.byte %00000000+CT_BLANK								; blank								[3C]
   119 4307 00				.byte %00000000+CT_BLANK								; blank								[3D]
   120 4308 00				.byte %00000000+CT_BLANK								; blank								[3E]
   121 4309 00				.byte %00000000+CT_BLANK								; blank								[3F]
   122 430A 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [40]
   123 430B 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [41]
   124 430C 00				.byte %00000000+CT_BLANK								; blank								[42]
   125 430D 00				.byte %00000000+CT_BLANK								; blank								[43]
   126 430E 00				.byte %00000000+CT_BLANK								; blank								[44]
   127 430F 00				.byte %00000000+CT_BLANK								; blank								[45]
   128 4310 05				.byte %00000000+CT_WATER								; blank								[46]
   129 4311 05				.byte %00000000+CT_WATER								; blank								[47]
   130 4312 00				.byte %00000000+CT_BLANK								; blank								[48]
   131 4313 00				.byte %00000000+CT_BLANK								; blank								[49]
   132 4314 00				.byte %00000000+CT_BLANK								; blank								[4A]
   133 4315 00				.byte %00000000+CT_BLANK								; blank								[4B]
   134 4316 F1				.byte %11110000+CT_BLOCK								; solid platform					[4C]
   135 4317 F1				.byte %11110000+CT_BLOCK								; solid platform					[4D]
   136 4318 F1				.byte %11110000+CT_BLOCK								; solid platform					[4E]
   137 4319 F1				.byte %11110000+CT_BLOCK								; solid platform					[4F]
   138 431A F1				.byte %11110000+CT_BLOCK								; solid platform					[50]
   139 431B F1				.byte %11110000+CT_BLOCK								; solid platform					[51]
   140 431C 00				.byte %00000000+CT_BLANK								; blank								[52]   
   141 431D 00				.byte %00000000+CT_BLANK								; blank								[53]   
   142 431E 00				.byte %00000000+CT_BLANK								; blank								[54]   
   143 431F 00				.byte %00000000+CT_BLANK								; blank								[55]   
   144 4320 00				.byte %00000000+CT_BLANK								; blank								[56]   
   145 4321 00				.byte %00000000+CT_BLANK								; blank								[57]   
   146 4322 00				.byte %00000000+CT_BLANK								; blank								[58]   
   147 4323 00				.byte %00000000+CT_BLANK								; blank								[59]   
   148 4324 03				.byte %00000000+CT_DANGER								; spikes							[5A]   
   149 4325 03				.byte %00000000+CT_DANGER								; spikes							[5B]   
   150 4326 F1				.byte %11110000+CT_BLOCK								; solid platform					[5C]   
   151 4327 F1				.byte %11110000+CT_BLOCK								; solid platform					[5D]   
   152 4328 F1				.byte %11110000+CT_BLOCK								; solid platform					[5E]   
   153 4329 00				.byte %00000000+CT_BLANK								; blank								[5F]   
   154 432A F1				.byte %11110000+CT_BLOCK								; solid platform					[60]   
   155 432B F1				.byte %11110000+CT_BLOCK								; solid platform					[61]   
   156 432C F1				.byte %11110000+CT_BLOCK								; solid platform					[62]   
   157 432D F1				.byte %11110000+CT_BLOCK								; solid platform					[63]   
   158 432E F1				.byte %11110000+CT_BLOCK								; solid platform					[64]   
   159 432F F1				.byte %11110000+CT_BLOCK								; solid platform					[65]   
   160 4330 F1				.byte %11110000+CT_BLOCK								; solid platform					[66]   
   161 4331 F1				.byte %11110000+CT_BLOCK								; solid platform					[67]   
   162 4332 F1				.byte %11110000+CT_BLOCK								; solid platform					[68]   
   163 4333 F1				.byte %11110000+CT_BLOCK								; solid platform					[69]   
   164 4334 F1				.byte %11110000+CT_BLOCK								; solid platform					[6A]   
   165 4335 F1				.byte %11110000+CT_BLOCK								; solid platform					[6B]   
   166 4336 F1				.byte %11110000+CT_BLOCK								; solid platform					[6C]   
   167 4337 F1				.byte %11110000+CT_BLOCK								; solid platform					[6D]   
   168 4338 F1				.byte %11110000+CT_BLOCK								; solid platform					[6E]   
   169 4339 F1				.byte %11110000+CT_BLOCK								; solid platform					[6F]   
   170 433A F1				.byte %11110000+CT_BLOCK								; solid platform					[70]   
   171 433B F1				.byte %11110000+CT_BLOCK								; solid platform					[71]   
   172 433C F1				.byte %11110000+CT_BLOCK								; solid platform					[72]   
   173 433D F1				.byte %11110000+CT_BLOCK								; solid platform					[73]   
   174 433E F1				.byte %11110000+CT_BLOCK								; solid platform					[74]   
   175 433F 00				.byte %00000000+CT_BLANK								; blank								[75]   
   176 4340 00				.byte %00000000+CT_BLANK								; blank								[76]   
   177 4341 00				.byte %00000000+CT_BLANK								; blank								[77]   
   178 4342 00				.byte %00000000+CT_BLANK								; blank								[78]   
   179 4343 00				.byte %00000000+CT_BLANK								; blank								[79]   
   180 4344 00				.byte %00000000+CT_BLANK								; blank								[7A]   
   181 4345 00				.byte %00000000+CT_BLANK								; blank								[7B]   
   182 4346 00				.byte %00000000+CT_BLANK								; blank								[7C]   
   183 4347 00				.byte %00000000+CT_BLANK								; blank								[7D]   
   184 4348 00				.byte %00000000+CT_BLANK								; blank								[7E]   
   185 4349 00				.byte %00000000+CT_BLANK								; blank								[7F]   
   186 				;
   187 				;**************************************************************************************************
   188 				; second half, inverse characters, fifth color (red, danger)
   189 				;**************************************************************************************************
   190 				;
   191 434A				org TabCharDefinition+$80
   192
   193 434A 00				.byte %00000000+CT_BLANK								; blank								[80]
   194 434B 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[81]
   195 434C 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[82]				
   196 434D 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[83]
   197 434E 02				.byte %00000000+CT_COLLECTABLE							; collectable 1						[84]
   198 434F 03				.byte %00000000+CT_DANGER								; blue spikes						[85]
   199 4350 03				.byte %00000000+CT_DANGER								; blue spikes						[86]
   200 4351 00				.byte %00000000+CT_BLANK								; blank								[87]
   201 4352 00				.byte %00000000+CT_BLANK								; blank								[88]
   202 4353 00				.byte %00000000+CT_BLANK								; blank								[89]
   203 4354 00				.byte %00000000+CT_BLANK								; blank								[8A]
   204 4355 00				.byte %00000000+CT_BLANK								; blank								[8B]
   205 4356 00				.byte %00000000+CT_BLANK								; blank								[8C]
   206 4357 00				.byte %00000000+CT_BLANK								; blank								[8D]
   207 4358 00				.byte %00000000+CT_BLANK								; blank								[8E]
   208 4359 00				.byte %00000000+CT_BLANK								; blank								[8F]
   209 435A 04				.byte %00000000+CT_LADDER								; ladder							[90]
   210 435B 04				.byte %00000000+CT_LADDER								; ladder							[91]
   211 435C 04				.byte %00000000+CT_LADDER								; ladder							[92]
   212 435D 03				.byte %00000000+CT_DANGER								; blue spikes						[93]
   213 435E F3				.byte %11110000+CT_DANGER								; vertical dither 1					[94]				
   214 435F F3				.byte %11110000+CT_DANGER								; vertical dither 2					[95]
   215 4360 F3				.byte %11110000+CT_DANGER								; vertical dither 3					[96]
   216 4361 F3				.byte %11110000+CT_DANGER								; horizontal dither 1				[97]
   217 4362 F3				.byte %11110000+CT_DANGER								; horizontal dither 2				[98]
   218 4363 F3				.byte %11110000+CT_DANGER								; horizontal dither 3				[99]
   219 4364 03				.byte %00000000+CT_DANGER								; spikes							[9A]
   220 4365 03				.byte %00000000+CT_DANGER								; spikes							[9B]
   221 4366 03				.byte %00000000+CT_DANGER								; spikes							[9C]
   222 4367 03				.byte %00000000+CT_DANGER								; spikes							[9D]
   223 4368 03				.byte %00000000+CT_DANGER								; spikes							[9E]
   224 4369 03				.byte %00000000+CT_DANGER								; spikes							[9F]
   225 436A F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LB  base		[A0]
   226 436B F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MB  base		[A1]
   227 436C F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RB  base		[A2]
   228 436D F1				.byte %11110000+CT_BLOCK								; vertical dither 1 LT  base		[A3]
   229 436E F1				.byte %11110000+CT_BLOCK								; vertical dither 2 MT  base		[A4]
   230 436F F1				.byte %11110000+CT_BLOCK								; vertical dither 3 RT  base		[A5]
   231 4370 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[A6]
   232 4371 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[A7]
   233 4372 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[A8]
   234 4373 11				.byte %00010000+CT_FLOATPLATFORM						; Floating Platform					[A9]
   235 4374 00				.byte %00000000+CT_BLANK								; blank								[AA]
   236 4375 00				.byte %00000000+CT_BLANK								; blank								[AB]
   237 4376 00				.byte %00000000+CT_BLANK								; blank								[AC]
   238 4377 00				.byte %00000000+CT_BLANK								; blank								[AD]
   239 4378 00				.byte %00000000+CT_BLANK								; blank								[AE]
   240 4379 00				.byte %00000000+CT_BLANK								; blank								[AF]
   241 437A 00				.byte %00000000+CT_BLANK								; blank								[B0]
   242 437B 00				.byte %00000000+CT_BLANK								; blank								[B1]
   243 437C 00				.byte %00000000+CT_BLANK								; blank								[B2]
   244 437D 00				.byte %00000000+CT_BLANK								; blank								[B3]
   245 437E 00				.byte %00000000+CT_BLANK								; blank								[B4]
   246 437F 00				.byte %00000000+CT_BLANK								; blank								[B5]
   247 4380 00				.byte %00000000+CT_BLANK								; blank								[B6]
   248 4381 00				.byte %00000000+CT_BLANK								; blank								[B7]
   249 4382 00				.byte %00000000+CT_BLANK								; blank								[B8]
   250 4383 00				.byte %00000000+CT_BLANK								; blank								[B9]
   251 4384 03				.byte %00000000+CT_DANGER								; spikes							[BA]
   252 4385 03				.byte %00000000+CT_DANGER								; spikes							[BB]
   253 4386 00				.byte %00000000+CT_BLANK								; blank								[BC]
   254 4387 00				.byte %00000000+CT_BLANK								; blank								[BD]
   255 4388 00				.byte %00000000+CT_BLANK								; blank								[BE]
   256 4389 00				.byte %00000000+CT_BLANK								; blank								[BF]
   257 438A 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C0]
   258 438B 13				.byte %00010000+CT_DANGER								; enemy 1 left side (red)           [C1]
   259 438C 00				.byte %00000000+CT_BLANK								; blank								[C2]
   260 438D 00				.byte %00000000+CT_BLANK								; blank								[C3]
   261 438E 00				.byte %00000000+CT_BLANK								; blank								[C4]
   262 438F 00				.byte %00000000+CT_BLANK								; blank								[C5]
   263 4390 05				.byte %00000000+CT_WATER								; blank								[C6]
   264 4391 05				.byte %00000000+CT_WATER								; blank								[C7]
   265 4392 00				.byte %00000000+CT_BLANK								; blank								[C8]
   266 4393 00				.byte %00000000+CT_BLANK								; blank								[C9]
   267 4394 00				.byte %00000000+CT_BLANK								; blank								[CA]
   268 4395 00				.byte %00000000+CT_BLANK								; blank								[CB]
   269 4396 F1				.byte %11110000+CT_BLOCK								; solid platform					[CC]
   270 4397 F1				.byte %11110000+CT_BLOCK								; solid platform					[CD]
   271 4398 F1				.byte %11110000+CT_BLOCK								; solid platform					[CE]
   272 4399 F1				.byte %11110000+CT_BLOCK								; solid platform					[CF]
   273 439A F1				.byte %11110000+CT_BLOCK								; solid platform					[D0]
   274 439B F1				.byte %11110000+CT_BLOCK								; solid platform					[D1]
   275 439C 00				.byte %00000000+CT_BLANK								; blank								[D2]   
   276 439D 00				.byte %00000000+CT_BLANK								; blank								[D3]   
   277 439E 00				.byte %00000000+CT_BLANK								; blank								[D4]   
   278 439F 00				.byte %00000000+CT_BLANK								; blank								[D5]   
   279 43A0 00				.byte %00000000+CT_BLANK								; blank								[D6]   
   280 43A1 00				.byte %00000000+CT_BLANK								; blank								[D7]   
   281 43A2 00				.byte %00000000+CT_BLANK								; blank								[D8]   
   282 43A3 00				.byte %00000000+CT_BLANK								; blank								[D9]   
   283 43A4 03				.byte %00000000+CT_DANGER								; spikes							[DA]   
   284 43A5 03				.byte %00000000+CT_DANGER								; spikes							[DB]   
   285 43A6 F1				.byte %11110000+CT_BLOCK								; solid platform					[DC]   
   286 43A7 F1				.byte %11110000+CT_BLOCK								; solid platform					[DD]   
   287 43A8 F1				.byte %11110000+CT_BLOCK								; solid platform					[DE]   
   288 43A9 00				.byte %00000000+CT_BLANK								; blank								[DF]   
   289 43AA F1				.byte %11110000+CT_BLOCK								; solid platform					[E0]   
   290 43AB F1				.byte %11110000+CT_BLOCK								; solid platform					[E1]   
   291 43AC F1				.byte %11110000+CT_BLOCK								; solid platform					[E2]   
   292 43AD F1				.byte %11110000+CT_BLOCK								; solid platform					[E3]   
   293 43AE F1				.byte %11110000+CT_BLOCK								; solid platform					[E4]   
   294 43AF F1				.byte %11110000+CT_BLOCK								; solid platform					[E5]   
   295 43B0 F1				.byte %11110000+CT_BLOCK								; solid platform					[E6]   
   296 43B1 F1				.byte %11110000+CT_BLOCK								; solid platform					[E7]   
   297 43B2 F1				.byte %11110000+CT_BLOCK								; solid platform					[E8]   
   298 43B3 F1				.byte %11110000+CT_BLOCK								; solid platform					[E9]   
   299 43B4 F1				.byte %11110000+CT_BLOCK								; solid platform					[EA]   
   300 43B5 F1				.byte %11110000+CT_BLOCK								; solid platform					[EB]   
   301 43B6 F1				.byte %11110000+CT_BLOCK								; solid platform					[EC]   
   302 43B7 F1				.byte %11110000+CT_BLOCK								; solid platform					[ED]   
   303 43B8 F1				.byte %11110000+CT_BLOCK								; solid platform					[EE]   
   304 43B9 F1				.byte %11110000+CT_BLOCK								; solid platform					[EF]   
   305 43BA F1				.byte %11110000+CT_BLOCK								; solid platform					[F0]   
   306 43BB F1				.byte %11110000+CT_BLOCK								; solid platform					[F1]   
   307 43BC F1				.byte %11110000+CT_BLOCK								; solid platform					[F2]   
   308 43BD F1				.byte %11110000+CT_BLOCK								; solid platform					[F3]   
   309 43BE F1				.byte %11110000+CT_BLOCK								; solid platform					[F4]   
   310 43BF 00				.byte %00000000+CT_BLANK								; blank								[F5]   
   311 43C0 00				.byte %00000000+CT_BLANK								; blank								[F6]   
   312 43C1 00				.byte %00000000+CT_BLANK								; blank								[F7]   
   313 43C2 00				.byte %00000000+CT_BLANK								; blank								[F8]   
   314 43C3 00				.byte %00000000+CT_BLANK								; blank								[F9]   
   315 43C4 00				.byte %00000000+CT_BLANK								; blank								[FA]   
   316 43C5 00				.byte %00000000+CT_BLANK								; blank								[FB]   
   317 43C6 00				.byte %00000000+CT_BLANK								; blank								[FC]   
   318 43C7 00				.byte %00000000+CT_BLANK								; blank								[FD]   
   319 43C8 00				.byte %00000000+CT_BLANK								; blank								[FE]   
   320 43C9 00				.byte %00000000+CT_BLANK								; blank								[FF]	
   321
   541 43CA					icl "PlayerData.Asm"					; The players sprite data
Source: E:\_8BitProjects\Series\Lessons\Lesson01\PlayerData.Asm
     1 				;
     2 				;***************************************************************************************************
     3 				;
     4 				;	Filename:		PlayerData.asm
     5 				;
     6 				; 	Modified On:	Mar 26, 2018 11:57:00 AM
     7 				;
     8 				;	Comments:		Portions of this code are take from NRV's OPEN_PLAT project and
     9 				;					Ken Jennings C64 to Atari MLP and also from WUDSN Tutorials.
    10 				;
    11 				;***************************************************************************************************
    12 				;
    13 43CA			.array TabAnimationMap [9] .byte
    14  [0000] 00 15 01			$00, $15, $01 			
    15  [0003] 15 15 01			$15, $15, $01
    16  [0006] 2A 15 01			$2A, $15, $01			 
    17 				.enda
    18
    19 43D3			TabPlayerShape_01								
    20 					
    21 					; Standing 0
    22 43D3 18				.byte 	%00011000							; ...##...
    23 43D4 3C				.byte 	%00111100                           ; ..####..
    24 43D5 FF				.byte 	%11111111                           ; ########
    25 43D6 00				.byte 	%00000000                           ; ........
    26 43D7 00				.byte 	%00000000                           ; ........
    27 43D8 00				.byte 	%00000000                           ; ........
    28 43D9 00				.byte 	%00000000                           ; ........
    29 43DA 00				.byte 	%00000000                           ; ........
    30 43DB 00				.byte 	%00000000                           ; ........
    31 43DC 18				.byte 	%00011000                           ; ...##...
    32 43DD 18				.byte 	%00011000                           ; ...##...
    33 43DE 3C				.byte 	%00111100                           ; ..####..
    34 43DF 6E				.byte 	%01101110                           ; .##.###.
    35 43E0 00				.byte 	%00000000                           ; ........
    36 43E1 00				.byte 	%00000000                           ; ........
    37 43E2 6E				.byte 	%01101110                           ; .## ###.
    38 43E3 76				.byte 	%01110110                           ; .###.##.
    39 43E4 3C				.byte 	%00111100                           ; ..####..
    40 43E5 00				.byte 	%00000000                           ; ........
    41 43E6 00				.byte 	%00000000                           ; ........
    42 43E7 00				.byte 	%00000000                           ; ........
    43 						
    44 					; Walking 0
    45 43E8 18				.byte 	%00011000							; ...##...
    46 43E9 3C				.byte	%00111100							; ..####..
    47 43EA FF				.byte	%11111111							; ########
    48 43EB 00				.byte	%00000000							; ........
    49 43EC 00				.byte	%00000000							; ........
    50 43ED 00				.byte 	%00000000							; ........							
    51 43EE 00				.byte 	%00000000							; ........
    52 43EF 00				.byte 	%00000000							; ........		
    53 43F0 00				.byte 	%00000000							; ........
    54 43F1 18				.byte 	%00011000							; ...##...
    55 43F2 18				.byte 	%00011000							; ...##...
    56 43F3 3C				.byte 	%00111100							; ..####..
    57 43F4 6E				.byte 	%01101110							; .##.###.
    58 43F5 00				.byte 	%00000000							; ........
    59 43F6 00				.byte 	%00000000							; ........
    60 43F7 7A				.byte 	%01111010							; .####.#.
    61 43F8 7E				.byte 	%01111110							; .######.
    62 43F9 3C				.byte 	%00111100							; ..####..
    63 43FA 00				.byte 	%00000000							; ........
    64 43FB 00				.byte 	%00000000							; ........
    65 43FC 00				.byte 	%00000000							; ........
    66
    67 					; Walking 1	
    68 43FD 18				.byte 	%00011000							; ...##...  
    69 43FE 3C				.byte 	%00111100							; ..####..  
    70 43FF FF				.byte 	%11111111                           ; ########  
    71 4400 00				.byte 	%00000000                           ; ........  
    72 4401 00				.byte 	%00000000			                ; ........  
    73 4402 00				.byte 	%00000000                           ; ........	
    74 4403 00				.byte 	%00000000                           ; ........  
    75 4404 00				.byte 	%00000000                           ; ........	
    76 4405 00				.byte 	%00000000                           ; ........  
    77 4406 18				.byte 	%00011000                           ; ...##...  
    78 4407 18				.byte 	%00011000                           ; ...##...  
    79 4408 3C				.byte 	%00111100                           ; ..####..  
    80 4409 6E				.byte 	%01101110                           ; .##.###.  
    81 440A 00				.byte 	%00000000                           ; ........  
    82 440B 00				.byte 	%00000000                           ; ........  
    83 440C 3E				.byte 	%00111110                           ; ..#####.  
    84 440D 7E				.byte 	%01111110                           ; .######.  
    85 440E 3C				.byte 	%00111100                           ; ..####..  
    86 440F 00				.byte 	%00000000                           ; ........  
    87 4410 00				.byte 	%00000000                           ; ........  
    88 4411 00				.byte 	%00000000                           ; ........  
    89 					
    90 				                                                
    91 4412			TabPlayerShape_01A								
    92 					
    93 					; Standing 0			
    94 4412 18				.byte 	%00011000							; ...##...
    95 4413 3C				.byte 	%00111100                           ; ..####..
    96 4414 FF				.byte 	%11111111                           ; ########
    97 4415 3C				.byte 	%00111100                           ; ..####..
    98 4416 34				.byte 	%00110100                           ; ..##.#..
    99 4417 3E				.byte 	%00111110                           ; ..#####.
   100 4418 34				.byte 	%00110100                           ; ..##.#..
   101 4419 38				.byte 	%00111000                           ; ..###...
   102 441A 1C				.byte 	%00011100                           ; ...###..
   103 441B 00				.byte 	%00000000                           ; ........
   104 441C 00				.byte 	%00000000                           ; ........
   105 441D 00				.byte 	%00000000                           ; ........
   106 441E 00				.byte 	%00000000                           ; ........
   107 441F 6E				.byte 	%01101110                           ; .##.###.
   108 4420 6E				.byte 	%01101110                           ; .##.###.
   109 4421 00				.byte 	%00000000                           ; ........
   110 4422 00				.byte 	%00000000                           ; ........
   111 4423 00				.byte 	%00000000                           ; ........
   112 4424 00				.byte 	%00000000                           ; ........
   113 4425 00				.byte 	%00000000                           ; ........
   114 4426 00				.byte 	%00000000                           ; ........
   115 						
   116 					
   117 					; Walking 0
   118 4427 18				.byte 	%00011000							; ...##...
   119 4428 3C				.byte 	%00111100							; ..####..	
   120 4429 FF				.byte 	%11111111							; ########
   121 442A 3C				.byte 	%00111100							; ..####..
   122 442B 34				.byte 	%00110100							; ..##.#..
   123 442C 3E				.byte 	%00111110							; ..#####.
   124 442D 34				.byte 	%00110100							; ..##.#..
   125 442E 38				.byte 	%00111000							; ..###...
   126 442F 1C				.byte 	%00011100							; ...###..
   127 4430 00				.byte 	%00000000							; ........
   128 4431 00				.byte 	%00000000							; ........
   129 4432 00				.byte 	%00000000							; ........
   130 4433 00				.byte 	%00000000							; ........
   131 4434 6E				.byte 	%01101110							; .##.###.	
   132 4435 76				.byte 	%01110110							; .###.##.
   133 4436 00				.byte 	%00000000							; ........
   134 4437 00				.byte 	%00000000							; ........
   135 4438 00				.byte 	%00000000							; ........
   136 4439 00				.byte 	%00000000							; ........
   137 443A 00				.byte 	%00000000							; ........
   138 443B 00				.byte 	%00000000							; ........
   139
   140 					; Walking 1
   141 443C 18				.byte	%00011000							; ...##... 
   142 443D 3C				.byte	%00111100                           ; ..####.. 
   143 443E FF				.byte	%11111111                           ; ######## 
   144 443F 3C				.byte	%00111100                           ; ..####.. 
   145 4440 34				.byte	%00110100			                ; ..##.#.. 
   146 4441 3E				.byte	%00111110                           ; ..#####. 
   147 4442 34				.byte	%00110100                           ; ..##.#.. 
   148 4443 38				.byte	%00111000                           ; ..###... 
   149 4444 1C				.byte	%00011100                           ; ...###.. 
   150 4445 00				.byte	%00000000                           ; ........ 
   151 4446 00				.byte	%00000000                           ; ........ 
   152 4447 00				.byte	%00000000                           ; ........ 
   153 4448 00				.byte	%00000000                           ; ........ 
   154 4449 6E				.byte	%01101110                           ; .##.###. 
   155 444A 5E				.byte	%01011110                           ; .#.####. 
   156 444B 00				.byte	%00000000                           ; ........ 
   157 444C 00				.byte	%00000000                           ; ........ 
   158 444D 00				.byte	%00000000                           ; ........ 
   159 444E 00				.byte	%00000000                           ; ........ 
   160 444F 00				.byte	%00000000                           ; ........ 
   161 4450 00				.byte	%00000000                           ; ........ 
   162
   163 4451			TabPlayerShape_01B								
   164
   165 					; Standing 0
   166 4451 00				.byte 	%00000000							; ........
   167 4452 00				.byte 	%00000000                           ; ........
   168 4453 00				.byte 	%00000000                           ; ........
   169 4454 00				.byte 	%00000000                           ; ........
   170 4455 00				.byte 	%00000000			                ; ........
   171 4456 00				.byte 	%00000000                           ; ........
   172 4457 00				.byte 	%00000000                           ; ........
   173 4458 00				.byte 	%00000000                           ; ........
   174 4459 00				.byte 	%00000000                           ; ........
   175 445A 00				.byte 	%00000000                           ; ........
   176 445B 00				.byte 	%00000000                           ; ........
   177 445C 00				.byte 	%00000000                           ; ........
   178 445D 10				.byte 	%00010000                           ; ...#....
   179 445E 10				.byte 	%00010000                           ; ...#....
   180 445F 10				.byte 	%00010000                           ; ...#....
   181 4460 10				.byte 	%00010000                           ; ...#....
   182 4461 08				.byte 	%00001000                           ; ....#...
   183 4462 00				.byte 	%00000000                           ; ........
   184 4463 10				.byte 	%00010000                           ; ...#....
   185 4464 10				.byte 	%00010000                           ; ...#....
   186 4465 18				.byte 	%00011000                           ; ...##...
   187
   188 					; Walking 0
   189 4466 00				.byte 	%00000000							; ........
   190 4467 00				.byte   %00000000							; ........
   191 4468 00				.byte   %00000000							; ........
   192 4469 00				.byte   %00000000							; ........
   193 446A 00				.byte   %00000000							; ........
   194 446B 00				.byte 	%00000000							; ........
   195 446C 00				.byte   %00000000							; ........
   196 446D 00				.byte   %00000000							; ........
   197 446E 00				.byte   %00000000							; ........
   198 446F 00				.byte   %00000000							; ........
   199 4470 00				.byte 	%00000000							; ........
   200 4471 00				.byte   %00000000							; ........
   201 4472 10				.byte   %00010000							; ...#....
   202 4473 10				.byte   %00010000							; ...#....
   203 4474 08				.byte   %00001000							; ....#...
   204 4475 04				.byte 	%00000100							; .....#..
   205 4476 00				.byte   %00000000							; ........
   206 4477 00				.byte   %00000000							; ........
   207 4478 24				.byte   %00100100							; ..#. #..
   208 4479 24				.byte   %00100100							; ..#. #..
   209 447A 36				.byte   %00110110							; ..## ##.
   210
   211 					; Walking 1	
   212 447B 00				.byte 	%00000000							; ........
   213 447C 00				.byte 	%00000000                           ; ........
   214 447D 00				.byte 	%00000000                           ; ........
   215 447E 00				.byte 	%00000000                           ; ........
   216 447F 00				.byte 	%00000000			                ; ........
   217 4480 00				.byte 	%00000000                           ; ........
   218 4481 00				.byte 	%00000000                           ; ........
   219 4482 00				.byte 	%00000000                           ; ........
   220 4483 00				.byte 	%00000000                           ; ........
   221 4484 00				.byte 	%00000000                           ; ........
   222 4485 00				.byte 	%00000000                           ; ........
   223 4486 00				.byte 	%00000000                           ; ........
   224 4487 10				.byte 	%00010000                           ; ...#....
   225 4488 10				.byte 	%00010000                           ; ...#....
   226 4489 20				.byte 	%00100000                           ; ..#.....
   227 448A 40				.byte 	%01000000                           ; .#......
   228 448B 00				.byte 	%00000000                           ; ........
   229 448C 00				.byte 	%00000000                           ; ........
   230 448D 24				.byte 	%00100100                           ; .#...#..
   231 448E 24				.byte 	%00100100                           ; .#...#..
   232 448F 36				.byte 	%00110110                           ; .##..##.
   233 					
   542 						
   543 4490					icl "Data/Levels.Asm"					; Games levels
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Data\Levels.Asm
     1 				;
     2 				;****************************************************************************************************
     3 				;
     4 				;	Player Data
     5 				;
     6 				;		Each row of X and Y is associated with a level number (zero based).
     7 				;
     8 				;****************************************************************************************************
     9 				;
    10 4490			LevelsPlayer_X
    11 4490 04						.byte $04
    12
    13 4491			LevelsPlayer_Y
    14 4491 01						.byte $01
    15 				;
    16 				;****************************************************************************************************
    17 				;
    18 				;	Level Data
    19 				;
    20 				;		Low (LSB) and High (MSB) addresses of the level data map
    21 				;
    22 				;****************************************************************************************************
    23 				;
    24 4492			LevelsAddr_LSB
    25 4492 94				.byte <LEVELS_01
    26
    27 4493			LevelsAddr_MSB
    28 4493 44				.byte >LEVELS_01
    29 				;
    30 				;****************************************************************************************************
    31 				;
    32 4494			LEVELS_01
    33 4494 0E 01 C0 C1 FD FE				.byte $0E,$01,$C0,$C1,$FD,$FE
    34 449A 0B 02 60 60 60 60 + 			.byte $0B,$02,$60,$60,$60,$60,$60,$FD,$FE
    35 44A3 10 14 61 61 46 47 + 			.byte $10,$14,$61,$61,$46,$47,$46,$47,$46,$47,$46,$61,$62,$FD,$FE
    36 44B2 0E 15 61 61 5D 5D + 			.byte $0E,$15,$61,$61,$5D,$5D,$07,$07,$07,$07,$07,$07,$07,$5D,$6D,$61,$60,$FD,$FE
    37 44C5 0B 16 60 60 61 5D + 			.byte $0B,$16,$60,$60,$61,$5D,$5D,$5D,$6E,$07,$07,$07,$07,$07,$07,$07,$5C,$5D,$5D,$6D,$60,$60,$60,$FD,$FE
    38 44DE 00 17 60 61 61 61 + 			.byte $00,$17,$60,$61,$61,$61,$61,$63,$61,$61,$61,$61,$61,$6D,$6D,$6E,$5D,$5D,$5D,$5D,$70,$70,$70,$70,$70,$70,$5D,$5D,$5D,$5D,$5D,$6D,$6D,$6D,$61,$61,$61,$61,$61,$61,$62,$61,$60,$60,$FD,$FE
    39 450C FF						.byte $FF
    40
   544 						
   545 				;*****	Game Display List
   546 				;
   547 450D					org GameDLAddress
   548 						
   549 0600-0657> 70				.byte DL_BLANK_8
   550 0601 70					.byte DL_BLANK_8
   551 0602 F0					.byte DL_BLANK_8 + DL_DLI
   552
   553 0603			DL1_LMS1
   554 						
   555 = B000					?dldata = GameScrnAddress
   556 						.rept 24
   557 							.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   558 							.BYTE <?DLDATA, >?DLDATA
   559 							?DLDATA += LEVEL_CHAR_SIZE_X
   560 						.ENDR
   560 						.endr
Source: REPT
   557 0603 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0604 00 B0					.BYTE <?DLDATA, >?DLDATA
   557 = B029						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0606 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0607 29 B0					.BYTE <?DLDATA, >?DLDATA
   557 = B052						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0609 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 060A 52 B0					.BYTE <?DLDATA, >?DLDATA
   557 = B07B						?DLDATA += LEVEL_CHAR_SIZE_X
   557 060C 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 060D 7B B0					.BYTE <?DLDATA, >?DLDATA
   557 = B0A4						?DLDATA += LEVEL_CHAR_SIZE_X
   557 060F 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0610 A4 B0					.BYTE <?DLDATA, >?DLDATA
   557 = B0CD						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0612 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0613 CD B0					.BYTE <?DLDATA, >?DLDATA
   557 = B0F6						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0615 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0616 F6 B0					.BYTE <?DLDATA, >?DLDATA
   557 = B11F						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0618 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0619 1F B1					.BYTE <?DLDATA, >?DLDATA
   557 = B148						?DLDATA += LEVEL_CHAR_SIZE_X
   557 061B 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 061C 48 B1					.BYTE <?DLDATA, >?DLDATA
   557 = B171						?DLDATA += LEVEL_CHAR_SIZE_X
   557 061E 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 061F 71 B1					.BYTE <?DLDATA, >?DLDATA
   557 = B19A						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0621 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0622 9A B1					.BYTE <?DLDATA, >?DLDATA
   557 = B1C3						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0624 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0625 C3 B1					.BYTE <?DLDATA, >?DLDATA
   557 = B1EC						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0627 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0628 EC B1					.BYTE <?DLDATA, >?DLDATA
   557 = B215						?DLDATA += LEVEL_CHAR_SIZE_X
   557 062A 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 062B 15 B2					.BYTE <?DLDATA, >?DLDATA
   557 = B23E						?DLDATA += LEVEL_CHAR_SIZE_X
   557 062D 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 062E 3E B2					.BYTE <?DLDATA, >?DLDATA
   557 = B267						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0630 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0631 67 B2					.BYTE <?DLDATA, >?DLDATA
   557 = B290						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0633 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0634 90 B2					.BYTE <?DLDATA, >?DLDATA
   557 = B2B9						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0636 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0637 B9 B2					.BYTE <?DLDATA, >?DLDATA
   557 = B2E2						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0639 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 063A E2 B2					.BYTE <?DLDATA, >?DLDATA
   557 = B30B						?DLDATA += LEVEL_CHAR_SIZE_X
   557 063C 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 063D 0B B3					.BYTE <?DLDATA, >?DLDATA
   557 = B334						?DLDATA += LEVEL_CHAR_SIZE_X
   557 063F 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0640 34 B3					.BYTE <?DLDATA, >?DLDATA
   557 = B35D						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0642 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0643 5D B3					.BYTE <?DLDATA, >?DLDATA
   557 = B386						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0645 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0646 86 B3					.BYTE <?DLDATA, >?DLDATA
   557 = B3AF						?DLDATA += LEVEL_CHAR_SIZE_X
   557 0648 74						.BYTE DL_TEXT_4 + DL_LMS + DL_HSCROLL + DL_VSCROLL
   557 0649 AF B3					.BYTE <?DLDATA, >?DLDATA
   557 = B3D8						?DLDATA += LEVEL_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   561 					
   562 064B 54					.byte DL_TEXT_4 + DL_LMS + DL_HSCROLL
   563 064C D8 B3				.byte <?dldata, >?dldata
   564 					
   565 064E A0					.byte DL_BLANK_3 + DL_DLI
   566
   567 = 06B0					?dldata = HudAddress
   568 						.rept 2
   569 							.BYTE DL_TEXT_2 + DL_LMS
   570 							.BYTE <?DLDATA, >?DLDATA
   571 							?DLDATA += WINDOW_CHAR_SIZE_X
   572 						.ENDR	
   572 						.endr	
Source: REPT
   569 064F 42						.BYTE DL_TEXT_2 + DL_LMS
   569 0650 B0 06					.BYTE <?DLDATA, >?DLDATA
   569 = 06D8						?DLDATA += WINDOW_CHAR_SIZE_X
   569 0652 42						.BYTE DL_TEXT_2 + DL_LMS
   569 0653 D8 06					.BYTE <?DLDATA, >?DLDATA
   569 = 0700						?DLDATA += WINDOW_CHAR_SIZE_X
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   573 					
   574 0655 41 00 06				.byte DL_JUMP_VB, <GameDLAddress, >GameDLAddress
   575 					
   576 				;***** Heads Up Display area
   577 				;
   578 0658					org HudAddress							; Address of Heads up display
   579
   580 						; two rows of 40 characters each
   581 				.ifndef PAL_VERSION
   582 06B0-06FF> 00 00 27 00 + 		.sb "  G 00    E 00    T 00:00.0       NTSC  "
   583 				.else
   584 						.sb "  G 00    E 00    T 00:00.0        PAL  "
   585 				.endif
   586 06D8 00 00 00 00 00 00 + 		.sb "                                        "
   587
   588 				;***** Player Missile Address
   589 				;
   590 0700					org PmAddress							; Player missile area
   591 						.rept $0800
   592 							.BYTE $00
   593 						.ENDR
   593 						.endr
Source: REPT
   592 A000-C028> 00					.BYTE $00
   592 A001 00						.BYTE $00
   592 A002 00						.BYTE $00
   592 A003 00						.BYTE $00
   592 A004 00						.BYTE $00
   592 A005 00						.BYTE $00
   592 A006 00						.BYTE $00
   592 A007 00						.BYTE $00
   592 A008 00						.BYTE $00
   592 A009 00						.BYTE $00
   592 A00A 00						.BYTE $00
   592 A00B 00						.BYTE $00
   592 A00C 00						.BYTE $00
   592 A00D 00						.BYTE $00
   592 A00E 00						.BYTE $00
   592 A00F 00						.BYTE $00
   592 A010 00						.BYTE $00
   592 A011 00						.BYTE $00
   592 A012 00						.BYTE $00
   592 A013 00						.BYTE $00
   592 A014 00						.BYTE $00
   592 A015 00						.BYTE $00
   592 A016 00						.BYTE $00
   592 A017 00						.BYTE $00
   592 A018 00						.BYTE $00
   592 A019 00						.BYTE $00
   592 A01A 00						.BYTE $00
   592 A01B 00						.BYTE $00
   592 A01C 00						.BYTE $00
   592 A01D 00						.BYTE $00
   592 A01E 00						.BYTE $00
   592 A01F 00						.BYTE $00
   592 A020 00						.BYTE $00
   592 A021 00						.BYTE $00
   592 A022 00						.BYTE $00
   592 A023 00						.BYTE $00
   592 A024 00						.BYTE $00
   592 A025 00						.BYTE $00
   592 A026 00						.BYTE $00
   592 A027 00						.BYTE $00
   592 A028 00						.BYTE $00
   592 A029 00						.BYTE $00
   592 A02A 00						.BYTE $00
   592 A02B 00						.BYTE $00
   592 A02C 00						.BYTE $00
   592 A02D 00						.BYTE $00
   592 A02E 00						.BYTE $00
   592 A02F 00						.BYTE $00
   592 A030 00						.BYTE $00
   592 A031 00						.BYTE $00
   592 A032 00						.BYTE $00
   592 A033 00						.BYTE $00
   592 A034 00						.BYTE $00
   592 A035 00						.BYTE $00
   592 A036 00						.BYTE $00
   592 A037 00						.BYTE $00
   592 A038 00						.BYTE $00
   592 A039 00						.BYTE $00
   592 A03A 00						.BYTE $00
   592 A03B 00						.BYTE $00
   592 A03C 00						.BYTE $00
   592 A03D 00						.BYTE $00
   592 A03E 00						.BYTE $00
   592 A03F 00						.BYTE $00
   592 A040 00						.BYTE $00
   592 A041 00						.BYTE $00
   592 A042 00						.BYTE $00
   592 A043 00						.BYTE $00
   592 A044 00						.BYTE $00
   592 A045 00						.BYTE $00
   592 A046 00						.BYTE $00
   592 A047 00						.BYTE $00
   592 A048 00						.BYTE $00
   592 A049 00						.BYTE $00
   592 A04A 00						.BYTE $00
   592 A04B 00						.BYTE $00
   592 A04C 00						.BYTE $00
   592 A04D 00						.BYTE $00
   592 A04E 00						.BYTE $00
   592 A04F 00						.BYTE $00
   592 A050 00						.BYTE $00
   592 A051 00						.BYTE $00
   592 A052 00						.BYTE $00
   592 A053 00						.BYTE $00
   592 A054 00						.BYTE $00
   592 A055 00						.BYTE $00
   592 A056 00						.BYTE $00
   592 A057 00						.BYTE $00
   592 A058 00						.BYTE $00
   592 A059 00						.BYTE $00
   592 A05A 00						.BYTE $00
   592 A05B 00						.BYTE $00
   592 A05C 00						.BYTE $00
   592 A05D 00						.BYTE $00
   592 A05E 00						.BYTE $00
   592 A05F 00						.BYTE $00
   592 A060 00						.BYTE $00
   592 A061 00						.BYTE $00
   592 A062 00						.BYTE $00
   592 A063 00						.BYTE $00
   592 A064 00						.BYTE $00
   592 A065 00						.BYTE $00
   592 A066 00						.BYTE $00
   592 A067 00						.BYTE $00
   592 A068 00						.BYTE $00
   592 A069 00						.BYTE $00
   592 A06A 00						.BYTE $00
   592 A06B 00						.BYTE $00
   592 A06C 00						.BYTE $00
   592 A06D 00						.BYTE $00
   592 A06E 00						.BYTE $00
   592 A06F 00						.BYTE $00
   592 A070 00						.BYTE $00
   592 A071 00						.BYTE $00
   592 A072 00						.BYTE $00
   592 A073 00						.BYTE $00
   592 A074 00						.BYTE $00
   592 A075 00						.BYTE $00
   592 A076 00						.BYTE $00
   592 A077 00						.BYTE $00
   592 A078 00						.BYTE $00
   592 A079 00						.BYTE $00
   592 A07A 00						.BYTE $00
   592 A07B 00						.BYTE $00
   592 A07C 00						.BYTE $00
   592 A07D 00						.BYTE $00
   592 A07E 00						.BYTE $00
   592 A07F 00						.BYTE $00
   592 A080 00						.BYTE $00
   592 A081 00						.BYTE $00
   592 A082 00						.BYTE $00
   592 A083 00						.BYTE $00
   592 A084 00						.BYTE $00
   592 A085 00						.BYTE $00
   592 A086 00						.BYTE $00
   592 A087 00						.BYTE $00
   592 A088 00						.BYTE $00
   592 A089 00						.BYTE $00
   592 A08A 00						.BYTE $00
   592 A08B 00						.BYTE $00
   592 A08C 00						.BYTE $00
   592 A08D 00						.BYTE $00
   592 A08E 00						.BYTE $00
   592 A08F 00						.BYTE $00
   592 A090 00						.BYTE $00
   592 A091 00						.BYTE $00
   592 A092 00						.BYTE $00
   592 A093 00						.BYTE $00
   592 A094 00						.BYTE $00
   592 A095 00						.BYTE $00
   592 A096 00						.BYTE $00
   592 A097 00						.BYTE $00
   592 A098 00						.BYTE $00
   592 A099 00						.BYTE $00
   592 A09A 00						.BYTE $00
   592 A09B 00						.BYTE $00
   592 A09C 00						.BYTE $00
   592 A09D 00						.BYTE $00
   592 A09E 00						.BYTE $00
   592 A09F 00						.BYTE $00
   592 A0A0 00						.BYTE $00
   592 A0A1 00						.BYTE $00
   592 A0A2 00						.BYTE $00
   592 A0A3 00						.BYTE $00
   592 A0A4 00						.BYTE $00
   592 A0A5 00						.BYTE $00
   592 A0A6 00						.BYTE $00
   592 A0A7 00						.BYTE $00
   592 A0A8 00						.BYTE $00
   592 A0A9 00						.BYTE $00
   592 A0AA 00						.BYTE $00
   592 A0AB 00						.BYTE $00
   592 A0AC 00						.BYTE $00
   592 A0AD 00						.BYTE $00
   592 A0AE 00						.BYTE $00
   592 A0AF 00						.BYTE $00
   592 A0B0 00						.BYTE $00
   592 A0B1 00						.BYTE $00
   592 A0B2 00						.BYTE $00
   592 A0B3 00						.BYTE $00
   592 A0B4 00						.BYTE $00
   592 A0B5 00						.BYTE $00
   592 A0B6 00						.BYTE $00
   592 A0B7 00						.BYTE $00
   592 A0B8 00						.BYTE $00
   592 A0B9 00						.BYTE $00
   592 A0BA 00						.BYTE $00
   592 A0BB 00						.BYTE $00
   592 A0BC 00						.BYTE $00
   592 A0BD 00						.BYTE $00
   592 A0BE 00						.BYTE $00
   592 A0BF 00						.BYTE $00
   592 A0C0 00						.BYTE $00
   592 A0C1 00						.BYTE $00
   592 A0C2 00						.BYTE $00
   592 A0C3 00						.BYTE $00
   592 A0C4 00						.BYTE $00
   592 A0C5 00						.BYTE $00
   592 A0C6 00						.BYTE $00
   592 A0C7 00						.BYTE $00
   592 A0C8 00						.BYTE $00
   592 A0C9 00						.BYTE $00
   592 A0CA 00						.BYTE $00
   592 A0CB 00						.BYTE $00
   592 A0CC 00						.BYTE $00
   592 A0CD 00						.BYTE $00
   592 A0CE 00						.BYTE $00
   592 A0CF 00						.BYTE $00
   592 A0D0 00						.BYTE $00
   592 A0D1 00						.BYTE $00
   592 A0D2 00						.BYTE $00
   592 A0D3 00						.BYTE $00
   592 A0D4 00						.BYTE $00
   592 A0D5 00						.BYTE $00
   592 A0D6 00						.BYTE $00
   592 A0D7 00						.BYTE $00
   592 A0D8 00						.BYTE $00
   592 A0D9 00						.BYTE $00
   592 A0DA 00						.BYTE $00
   592 A0DB 00						.BYTE $00
   592 A0DC 00						.BYTE $00
   592 A0DD 00						.BYTE $00
   592 A0DE 00						.BYTE $00
   592 A0DF 00						.BYTE $00
   592 A0E0 00						.BYTE $00
   592 A0E1 00						.BYTE $00
   592 A0E2 00						.BYTE $00
   592 A0E3 00						.BYTE $00
   592 A0E4 00						.BYTE $00
   592 A0E5 00						.BYTE $00
   592 A0E6 00						.BYTE $00
   592 A0E7 00						.BYTE $00
   592 A0E8 00						.BYTE $00
   592 A0E9 00						.BYTE $00
   592 A0EA 00						.BYTE $00
   592 A0EB 00						.BYTE $00
   592 A0EC 00						.BYTE $00
   592 A0ED 00						.BYTE $00
   592 A0EE 00						.BYTE $00
   592 A0EF 00						.BYTE $00
   592 A0F0 00						.BYTE $00
   592 A0F1 00						.BYTE $00
   592 A0F2 00						.BYTE $00
   592 A0F3 00						.BYTE $00
   592 A0F4 00						.BYTE $00
   592 A0F5 00						.BYTE $00
   592 A0F6 00						.BYTE $00
   592 A0F7 00						.BYTE $00
   592 A0F8 00						.BYTE $00
   592 A0F9 00						.BYTE $00
   592 A0FA 00						.BYTE $00
   592 A0FB 00						.BYTE $00
   592 A0FC 00						.BYTE $00
   592 A0FD 00						.BYTE $00
   592 A0FE 00						.BYTE $00
   592 A0FF 00						.BYTE $00
   592 A100 00						.BYTE $00
   592 A101 00						.BYTE $00
   592 A102 00						.BYTE $00
   592 A103 00						.BYTE $00
   592 A104 00						.BYTE $00
   592 A105 00						.BYTE $00
   592 A106 00						.BYTE $00
   592 A107 00						.BYTE $00
   592 A108 00						.BYTE $00
   592 A109 00						.BYTE $00
   592 A10A 00						.BYTE $00
   592 A10B 00						.BYTE $00
   592 A10C 00						.BYTE $00
   592 A10D 00						.BYTE $00
   592 A10E 00						.BYTE $00
   592 A10F 00						.BYTE $00
   592 A110 00						.BYTE $00
   592 A111 00						.BYTE $00
   592 A112 00						.BYTE $00
   592 A113 00						.BYTE $00
   592 A114 00						.BYTE $00
   592 A115 00						.BYTE $00
   592 A116 00						.BYTE $00
   592 A117 00						.BYTE $00
   592 A118 00						.BYTE $00
   592 A119 00						.BYTE $00
   592 A11A 00						.BYTE $00
   592 A11B 00						.BYTE $00
   592 A11C 00						.BYTE $00
   592 A11D 00						.BYTE $00
   592 A11E 00						.BYTE $00
   592 A11F 00						.BYTE $00
   592 A120 00						.BYTE $00
   592 A121 00						.BYTE $00
   592 A122 00						.BYTE $00
   592 A123 00						.BYTE $00
   592 A124 00						.BYTE $00
   592 A125 00						.BYTE $00
   592 A126 00						.BYTE $00
   592 A127 00						.BYTE $00
   592 A128 00						.BYTE $00
   592 A129 00						.BYTE $00
   592 A12A 00						.BYTE $00
   592 A12B 00						.BYTE $00
   592 A12C 00						.BYTE $00
   592 A12D 00						.BYTE $00
   592 A12E 00						.BYTE $00
   592 A12F 00						.BYTE $00
   592 A130 00						.BYTE $00
   592 A131 00						.BYTE $00
   592 A132 00						.BYTE $00
   592 A133 00						.BYTE $00
   592 A134 00						.BYTE $00
   592 A135 00						.BYTE $00
   592 A136 00						.BYTE $00
   592 A137 00						.BYTE $00
   592 A138 00						.BYTE $00
   592 A139 00						.BYTE $00
   592 A13A 00						.BYTE $00
   592 A13B 00						.BYTE $00
   592 A13C 00						.BYTE $00
   592 A13D 00						.BYTE $00
   592 A13E 00						.BYTE $00
   592 A13F 00						.BYTE $00
   592 A140 00						.BYTE $00
   592 A141 00						.BYTE $00
   592 A142 00						.BYTE $00
   592 A143 00						.BYTE $00
   592 A144 00						.BYTE $00
   592 A145 00						.BYTE $00
   592 A146 00						.BYTE $00
   592 A147 00						.BYTE $00
   592 A148 00						.BYTE $00
   592 A149 00						.BYTE $00
   592 A14A 00						.BYTE $00
   592 A14B 00						.BYTE $00
   592 A14C 00						.BYTE $00
   592 A14D 00						.BYTE $00
   592 A14E 00						.BYTE $00
   592 A14F 00						.BYTE $00
   592 A150 00						.BYTE $00
   592 A151 00						.BYTE $00
   592 A152 00						.BYTE $00
   592 A153 00						.BYTE $00
   592 A154 00						.BYTE $00
   592 A155 00						.BYTE $00
   592 A156 00						.BYTE $00
   592 A157 00						.BYTE $00
   592 A158 00						.BYTE $00
   592 A159 00						.BYTE $00
   592 A15A 00						.BYTE $00
   592 A15B 00						.BYTE $00
   592 A15C 00						.BYTE $00
   592 A15D 00						.BYTE $00
   592 A15E 00						.BYTE $00
   592 A15F 00						.BYTE $00
   592 A160 00						.BYTE $00
   592 A161 00						.BYTE $00
   592 A162 00						.BYTE $00
   592 A163 00						.BYTE $00
   592 A164 00						.BYTE $00
   592 A165 00						.BYTE $00
   592 A166 00						.BYTE $00
   592 A167 00						.BYTE $00
   592 A168 00						.BYTE $00
   592 A169 00						.BYTE $00
   592 A16A 00						.BYTE $00
   592 A16B 00						.BYTE $00
   592 A16C 00						.BYTE $00
   592 A16D 00						.BYTE $00
   592 A16E 00						.BYTE $00
   592 A16F 00						.BYTE $00
   592 A170 00						.BYTE $00
   592 A171 00						.BYTE $00
   592 A172 00						.BYTE $00
   592 A173 00						.BYTE $00
   592 A174 00						.BYTE $00
   592 A175 00						.BYTE $00
   592 A176 00						.BYTE $00
   592 A177 00						.BYTE $00
   592 A178 00						.BYTE $00
   592 A179 00						.BYTE $00
   592 A17A 00						.BYTE $00
   592 A17B 00						.BYTE $00
   592 A17C 00						.BYTE $00
   592 A17D 00						.BYTE $00
   592 A17E 00						.BYTE $00
   592 A17F 00						.BYTE $00
   592 A180 00						.BYTE $00
   592 A181 00						.BYTE $00
   592 A182 00						.BYTE $00
   592 A183 00						.BYTE $00
   592 A184 00						.BYTE $00
   592 A185 00						.BYTE $00
   592 A186 00						.BYTE $00
   592 A187 00						.BYTE $00
   592 A188 00						.BYTE $00
   592 A189 00						.BYTE $00
   592 A18A 00						.BYTE $00
   592 A18B 00						.BYTE $00
   592 A18C 00						.BYTE $00
   592 A18D 00						.BYTE $00
   592 A18E 00						.BYTE $00
   592 A18F 00						.BYTE $00
   592 A190 00						.BYTE $00
   592 A191 00						.BYTE $00
   592 A192 00						.BYTE $00
   592 A193 00						.BYTE $00
   592 A194 00						.BYTE $00
   592 A195 00						.BYTE $00
   592 A196 00						.BYTE $00
   592 A197 00						.BYTE $00
   592 A198 00						.BYTE $00
   592 A199 00						.BYTE $00
   592 A19A 00						.BYTE $00
   592 A19B 00						.BYTE $00
   592 A19C 00						.BYTE $00
   592 A19D 00						.BYTE $00
   592 A19E 00						.BYTE $00
   592 A19F 00						.BYTE $00
   592 A1A0 00						.BYTE $00
   592 A1A1 00						.BYTE $00
   592 A1A2 00						.BYTE $00
   592 A1A3 00						.BYTE $00
   592 A1A4 00						.BYTE $00
   592 A1A5 00						.BYTE $00
   592 A1A6 00						.BYTE $00
   592 A1A7 00						.BYTE $00
   592 A1A8 00						.BYTE $00
   592 A1A9 00						.BYTE $00
   592 A1AA 00						.BYTE $00
   592 A1AB 00						.BYTE $00
   592 A1AC 00						.BYTE $00
   592 A1AD 00						.BYTE $00
   592 A1AE 00						.BYTE $00
   592 A1AF 00						.BYTE $00
   592 A1B0 00						.BYTE $00
   592 A1B1 00						.BYTE $00
   592 A1B2 00						.BYTE $00
   592 A1B3 00						.BYTE $00
   592 A1B4 00						.BYTE $00
   592 A1B5 00						.BYTE $00
   592 A1B6 00						.BYTE $00
   592 A1B7 00						.BYTE $00
   592 A1B8 00						.BYTE $00
   592 A1B9 00						.BYTE $00
   592 A1BA 00						.BYTE $00
   592 A1BB 00						.BYTE $00
   592 A1BC 00						.BYTE $00
   592 A1BD 00						.BYTE $00
   592 A1BE 00						.BYTE $00
   592 A1BF 00						.BYTE $00
   592 A1C0 00						.BYTE $00
   592 A1C1 00						.BYTE $00
   592 A1C2 00						.BYTE $00
   592 A1C3 00						.BYTE $00
   592 A1C4 00						.BYTE $00
   592 A1C5 00						.BYTE $00
   592 A1C6 00						.BYTE $00
   592 A1C7 00						.BYTE $00
   592 A1C8 00						.BYTE $00
   592 A1C9 00						.BYTE $00
   592 A1CA 00						.BYTE $00
   592 A1CB 00						.BYTE $00
   592 A1CC 00						.BYTE $00
   592 A1CD 00						.BYTE $00
   592 A1CE 00						.BYTE $00
   592 A1CF 00						.BYTE $00
   592 A1D0 00						.BYTE $00
   592 A1D1 00						.BYTE $00
   592 A1D2 00						.BYTE $00
   592 A1D3 00						.BYTE $00
   592 A1D4 00						.BYTE $00
   592 A1D5 00						.BYTE $00
   592 A1D6 00						.BYTE $00
   592 A1D7 00						.BYTE $00
   592 A1D8 00						.BYTE $00
   592 A1D9 00						.BYTE $00
   592 A1DA 00						.BYTE $00
   592 A1DB 00						.BYTE $00
   592 A1DC 00						.BYTE $00
   592 A1DD 00						.BYTE $00
   592 A1DE 00						.BYTE $00
   592 A1DF 00						.BYTE $00
   592 A1E0 00						.BYTE $00
   592 A1E1 00						.BYTE $00
   592 A1E2 00						.BYTE $00
   592 A1E3 00						.BYTE $00
   592 A1E4 00						.BYTE $00
   592 A1E5 00						.BYTE $00
   592 A1E6 00						.BYTE $00
   592 A1E7 00						.BYTE $00
   592 A1E8 00						.BYTE $00
   592 A1E9 00						.BYTE $00
   592 A1EA 00						.BYTE $00
   592 A1EB 00						.BYTE $00
   592 A1EC 00						.BYTE $00
   592 A1ED 00						.BYTE $00
   592 A1EE 00						.BYTE $00
   592 A1EF 00						.BYTE $00
   592 A1F0 00						.BYTE $00
   592 A1F1 00						.BYTE $00
   592 A1F2 00						.BYTE $00
   592 A1F3 00						.BYTE $00
   592 A1F4 00						.BYTE $00
   592 A1F5 00						.BYTE $00
   592 A1F6 00						.BYTE $00
   592 A1F7 00						.BYTE $00
   592 A1F8 00						.BYTE $00
   592 A1F9 00						.BYTE $00
   592 A1FA 00						.BYTE $00
   592 A1FB 00						.BYTE $00
   592 A1FC 00						.BYTE $00
   592 A1FD 00						.BYTE $00
   592 A1FE 00						.BYTE $00
   592 A1FF 00						.BYTE $00
   592 A200 00						.BYTE $00
   592 A201 00						.BYTE $00
   592 A202 00						.BYTE $00
   592 A203 00						.BYTE $00
   592 A204 00						.BYTE $00
   592 A205 00						.BYTE $00
   592 A206 00						.BYTE $00
   592 A207 00						.BYTE $00
   592 A208 00						.BYTE $00
   592 A209 00						.BYTE $00
   592 A20A 00						.BYTE $00
   592 A20B 00						.BYTE $00
   592 A20C 00						.BYTE $00
   592 A20D 00						.BYTE $00
   592 A20E 00						.BYTE $00
   592 A20F 00						.BYTE $00
   592 A210 00						.BYTE $00
   592 A211 00						.BYTE $00
   592 A212 00						.BYTE $00
   592 A213 00						.BYTE $00
   592 A214 00						.BYTE $00
   592 A215 00						.BYTE $00
   592 A216 00						.BYTE $00
   592 A217 00						.BYTE $00
   592 A218 00						.BYTE $00
   592 A219 00						.BYTE $00
   592 A21A 00						.BYTE $00
   592 A21B 00						.BYTE $00
   592 A21C 00						.BYTE $00
   592 A21D 00						.BYTE $00
   592 A21E 00						.BYTE $00
   592 A21F 00						.BYTE $00
   592 A220 00						.BYTE $00
   592 A221 00						.BYTE $00
   592 A222 00						.BYTE $00
   592 A223 00						.BYTE $00
   592 A224 00						.BYTE $00
   592 A225 00						.BYTE $00
   592 A226 00						.BYTE $00
   592 A227 00						.BYTE $00
   592 A228 00						.BYTE $00
   592 A229 00						.BYTE $00
   592 A22A 00						.BYTE $00
   592 A22B 00						.BYTE $00
   592 A22C 00						.BYTE $00
   592 A22D 00						.BYTE $00
   592 A22E 00						.BYTE $00
   592 A22F 00						.BYTE $00
   592 A230 00						.BYTE $00
   592 A231 00						.BYTE $00
   592 A232 00						.BYTE $00
   592 A233 00						.BYTE $00
   592 A234 00						.BYTE $00
   592 A235 00						.BYTE $00
   592 A236 00						.BYTE $00
   592 A237 00						.BYTE $00
   592 A238 00						.BYTE $00
   592 A239 00						.BYTE $00
   592 A23A 00						.BYTE $00
   592 A23B 00						.BYTE $00
   592 A23C 00						.BYTE $00
   592 A23D 00						.BYTE $00
   592 A23E 00						.BYTE $00
   592 A23F 00						.BYTE $00
   592 A240 00						.BYTE $00
   592 A241 00						.BYTE $00
   592 A242 00						.BYTE $00
   592 A243 00						.BYTE $00
   592 A244 00						.BYTE $00
   592 A245 00						.BYTE $00
   592 A246 00						.BYTE $00
   592 A247 00						.BYTE $00
   592 A248 00						.BYTE $00
   592 A249 00						.BYTE $00
   592 A24A 00						.BYTE $00
   592 A24B 00						.BYTE $00
   592 A24C 00						.BYTE $00
   592 A24D 00						.BYTE $00
   592 A24E 00						.BYTE $00
   592 A24F 00						.BYTE $00
   592 A250 00						.BYTE $00
   592 A251 00						.BYTE $00
   592 A252 00						.BYTE $00
   592 A253 00						.BYTE $00
   592 A254 00						.BYTE $00
   592 A255 00						.BYTE $00
   592 A256 00						.BYTE $00
   592 A257 00						.BYTE $00
   592 A258 00						.BYTE $00
   592 A259 00						.BYTE $00
   592 A25A 00						.BYTE $00
   592 A25B 00						.BYTE $00
   592 A25C 00						.BYTE $00
   592 A25D 00						.BYTE $00
   592 A25E 00						.BYTE $00
   592 A25F 00						.BYTE $00
   592 A260 00						.BYTE $00
   592 A261 00						.BYTE $00
   592 A262 00						.BYTE $00
   592 A263 00						.BYTE $00
   592 A264 00						.BYTE $00
   592 A265 00						.BYTE $00
   592 A266 00						.BYTE $00
   592 A267 00						.BYTE $00
   592 A268 00						.BYTE $00
   592 A269 00						.BYTE $00
   592 A26A 00						.BYTE $00
   592 A26B 00						.BYTE $00
   592 A26C 00						.BYTE $00
   592 A26D 00						.BYTE $00
   592 A26E 00						.BYTE $00
   592 A26F 00						.BYTE $00
   592 A270 00						.BYTE $00
   592 A271 00						.BYTE $00
   592 A272 00						.BYTE $00
   592 A273 00						.BYTE $00
   592 A274 00						.BYTE $00
   592 A275 00						.BYTE $00
   592 A276 00						.BYTE $00
   592 A277 00						.BYTE $00
   592 A278 00						.BYTE $00
   592 A279 00						.BYTE $00
   592 A27A 00						.BYTE $00
   592 A27B 00						.BYTE $00
   592 A27C 00						.BYTE $00
   592 A27D 00						.BYTE $00
   592 A27E 00						.BYTE $00
   592 A27F 00						.BYTE $00
   592 A280 00						.BYTE $00
   592 A281 00						.BYTE $00
   592 A282 00						.BYTE $00
   592 A283 00						.BYTE $00
   592 A284 00						.BYTE $00
   592 A285 00						.BYTE $00
   592 A286 00						.BYTE $00
   592 A287 00						.BYTE $00
   592 A288 00						.BYTE $00
   592 A289 00						.BYTE $00
   592 A28A 00						.BYTE $00
   592 A28B 00						.BYTE $00
   592 A28C 00						.BYTE $00
   592 A28D 00						.BYTE $00
   592 A28E 00						.BYTE $00
   592 A28F 00						.BYTE $00
   592 A290 00						.BYTE $00
   592 A291 00						.BYTE $00
   592 A292 00						.BYTE $00
   592 A293 00						.BYTE $00
   592 A294 00						.BYTE $00
   592 A295 00						.BYTE $00
   592 A296 00						.BYTE $00
   592 A297 00						.BYTE $00
   592 A298 00						.BYTE $00
   592 A299 00						.BYTE $00
   592 A29A 00						.BYTE $00
   592 A29B 00						.BYTE $00
   592 A29C 00						.BYTE $00
   592 A29D 00						.BYTE $00
   592 A29E 00						.BYTE $00
   592 A29F 00						.BYTE $00
   592 A2A0 00						.BYTE $00
   592 A2A1 00						.BYTE $00
   592 A2A2 00						.BYTE $00
   592 A2A3 00						.BYTE $00
   592 A2A4 00						.BYTE $00
   592 A2A5 00						.BYTE $00
   592 A2A6 00						.BYTE $00
   592 A2A7 00						.BYTE $00
   592 A2A8 00						.BYTE $00
   592 A2A9 00						.BYTE $00
   592 A2AA 00						.BYTE $00
   592 A2AB 00						.BYTE $00
   592 A2AC 00						.BYTE $00
   592 A2AD 00						.BYTE $00
   592 A2AE 00						.BYTE $00
   592 A2AF 00						.BYTE $00
   592 A2B0 00						.BYTE $00
   592 A2B1 00						.BYTE $00
   592 A2B2 00						.BYTE $00
   592 A2B3 00						.BYTE $00
   592 A2B4 00						.BYTE $00
   592 A2B5 00						.BYTE $00
   592 A2B6 00						.BYTE $00
   592 A2B7 00						.BYTE $00
   592 A2B8 00						.BYTE $00
   592 A2B9 00						.BYTE $00
   592 A2BA 00						.BYTE $00
   592 A2BB 00						.BYTE $00
   592 A2BC 00						.BYTE $00
   592 A2BD 00						.BYTE $00
   592 A2BE 00						.BYTE $00
   592 A2BF 00						.BYTE $00
   592 A2C0 00						.BYTE $00
   592 A2C1 00						.BYTE $00
   592 A2C2 00						.BYTE $00
   592 A2C3 00						.BYTE $00
   592 A2C4 00						.BYTE $00
   592 A2C5 00						.BYTE $00
   592 A2C6 00						.BYTE $00
   592 A2C7 00						.BYTE $00
   592 A2C8 00						.BYTE $00
   592 A2C9 00						.BYTE $00
   592 A2CA 00						.BYTE $00
   592 A2CB 00						.BYTE $00
   592 A2CC 00						.BYTE $00
   592 A2CD 00						.BYTE $00
   592 A2CE 00						.BYTE $00
   592 A2CF 00						.BYTE $00
   592 A2D0 00						.BYTE $00
   592 A2D1 00						.BYTE $00
   592 A2D2 00						.BYTE $00
   592 A2D3 00						.BYTE $00
   592 A2D4 00						.BYTE $00
   592 A2D5 00						.BYTE $00
   592 A2D6 00						.BYTE $00
   592 A2D7 00						.BYTE $00
   592 A2D8 00						.BYTE $00
   592 A2D9 00						.BYTE $00
   592 A2DA 00						.BYTE $00
   592 A2DB 00						.BYTE $00
   592 A2DC 00						.BYTE $00
   592 A2DD 00						.BYTE $00
   592 A2DE 00						.BYTE $00
   592 A2DF 00						.BYTE $00
   592 A2E0 00						.BYTE $00
   592 A2E1 00						.BYTE $00
   592 A2E2 00						.BYTE $00
   592 A2E3 00						.BYTE $00
   592 A2E4 00						.BYTE $00
   592 A2E5 00						.BYTE $00
   592 A2E6 00						.BYTE $00
   592 A2E7 00						.BYTE $00
   592 A2E8 00						.BYTE $00
   592 A2E9 00						.BYTE $00
   592 A2EA 00						.BYTE $00
   592 A2EB 00						.BYTE $00
   592 A2EC 00						.BYTE $00
   592 A2ED 00						.BYTE $00
   592 A2EE 00						.BYTE $00
   592 A2EF 00						.BYTE $00
   592 A2F0 00						.BYTE $00
   592 A2F1 00						.BYTE $00
   592 A2F2 00						.BYTE $00
   592 A2F3 00						.BYTE $00
   592 A2F4 00						.BYTE $00
   592 A2F5 00						.BYTE $00
   592 A2F6 00						.BYTE $00
   592 A2F7 00						.BYTE $00
   592 A2F8 00						.BYTE $00
   592 A2F9 00						.BYTE $00
   592 A2FA 00						.BYTE $00
   592 A2FB 00						.BYTE $00
   592 A2FC 00						.BYTE $00
   592 A2FD 00						.BYTE $00
   592 A2FE 00						.BYTE $00
   592 A2FF 00						.BYTE $00
   592 A300 00						.BYTE $00
   592 A301 00						.BYTE $00
   592 A302 00						.BYTE $00
   592 A303 00						.BYTE $00
   592 A304 00						.BYTE $00
   592 A305 00						.BYTE $00
   592 A306 00						.BYTE $00
   592 A307 00						.BYTE $00
   592 A308 00						.BYTE $00
   592 A309 00						.BYTE $00
   592 A30A 00						.BYTE $00
   592 A30B 00						.BYTE $00
   592 A30C 00						.BYTE $00
   592 A30D 00						.BYTE $00
   592 A30E 00						.BYTE $00
   592 A30F 00						.BYTE $00
   592 A310 00						.BYTE $00
   592 A311 00						.BYTE $00
   592 A312 00						.BYTE $00
   592 A313 00						.BYTE $00
   592 A314 00						.BYTE $00
   592 A315 00						.BYTE $00
   592 A316 00						.BYTE $00
   592 A317 00						.BYTE $00
   592 A318 00						.BYTE $00
   592 A319 00						.BYTE $00
   592 A31A 00						.BYTE $00
   592 A31B 00						.BYTE $00
   592 A31C 00						.BYTE $00
   592 A31D 00						.BYTE $00
   592 A31E 00						.BYTE $00
   592 A31F 00						.BYTE $00
   592 A320 00						.BYTE $00
   592 A321 00						.BYTE $00
   592 A322 00						.BYTE $00
   592 A323 00						.BYTE $00
   592 A324 00						.BYTE $00
   592 A325 00						.BYTE $00
   592 A326 00						.BYTE $00
   592 A327 00						.BYTE $00
   592 A328 00						.BYTE $00
   592 A329 00						.BYTE $00
   592 A32A 00						.BYTE $00
   592 A32B 00						.BYTE $00
   592 A32C 00						.BYTE $00
   592 A32D 00						.BYTE $00
   592 A32E 00						.BYTE $00
   592 A32F 00						.BYTE $00
   592 A330 00						.BYTE $00
   592 A331 00						.BYTE $00
   592 A332 00						.BYTE $00
   592 A333 00						.BYTE $00
   592 A334 00						.BYTE $00
   592 A335 00						.BYTE $00
   592 A336 00						.BYTE $00
   592 A337 00						.BYTE $00
   592 A338 00						.BYTE $00
   592 A339 00						.BYTE $00
   592 A33A 00						.BYTE $00
   592 A33B 00						.BYTE $00
   592 A33C 00						.BYTE $00
   592 A33D 00						.BYTE $00
   592 A33E 00						.BYTE $00
   592 A33F 00						.BYTE $00
   592 A340 00						.BYTE $00
   592 A341 00						.BYTE $00
   592 A342 00						.BYTE $00
   592 A343 00						.BYTE $00
   592 A344 00						.BYTE $00
   592 A345 00						.BYTE $00
   592 A346 00						.BYTE $00
   592 A347 00						.BYTE $00
   592 A348 00						.BYTE $00
   592 A349 00						.BYTE $00
   592 A34A 00						.BYTE $00
   592 A34B 00						.BYTE $00
   592 A34C 00						.BYTE $00
   592 A34D 00						.BYTE $00
   592 A34E 00						.BYTE $00
   592 A34F 00						.BYTE $00
   592 A350 00						.BYTE $00
   592 A351 00						.BYTE $00
   592 A352 00						.BYTE $00
   592 A353 00						.BYTE $00
   592 A354 00						.BYTE $00
   592 A355 00						.BYTE $00
   592 A356 00						.BYTE $00
   592 A357 00						.BYTE $00
   592 A358 00						.BYTE $00
   592 A359 00						.BYTE $00
   592 A35A 00						.BYTE $00
   592 A35B 00						.BYTE $00
   592 A35C 00						.BYTE $00
   592 A35D 00						.BYTE $00
   592 A35E 00						.BYTE $00
   592 A35F 00						.BYTE $00
   592 A360 00						.BYTE $00
   592 A361 00						.BYTE $00
   592 A362 00						.BYTE $00
   592 A363 00						.BYTE $00
   592 A364 00						.BYTE $00
   592 A365 00						.BYTE $00
   592 A366 00						.BYTE $00
   592 A367 00						.BYTE $00
   592 A368 00						.BYTE $00
   592 A369 00						.BYTE $00
   592 A36A 00						.BYTE $00
   592 A36B 00						.BYTE $00
   592 A36C 00						.BYTE $00
   592 A36D 00						.BYTE $00
   592 A36E 00						.BYTE $00
   592 A36F 00						.BYTE $00
   592 A370 00						.BYTE $00
   592 A371 00						.BYTE $00
   592 A372 00						.BYTE $00
   592 A373 00						.BYTE $00
   592 A374 00						.BYTE $00
   592 A375 00						.BYTE $00
   592 A376 00						.BYTE $00
   592 A377 00						.BYTE $00
   592 A378 00						.BYTE $00
   592 A379 00						.BYTE $00
   592 A37A 00						.BYTE $00
   592 A37B 00						.BYTE $00
   592 A37C 00						.BYTE $00
   592 A37D 00						.BYTE $00
   592 A37E 00						.BYTE $00
   592 A37F 00						.BYTE $00
   592 A380 00						.BYTE $00
   592 A381 00						.BYTE $00
   592 A382 00						.BYTE $00
   592 A383 00						.BYTE $00
   592 A384 00						.BYTE $00
   592 A385 00						.BYTE $00
   592 A386 00						.BYTE $00
   592 A387 00						.BYTE $00
   592 A388 00						.BYTE $00
   592 A389 00						.BYTE $00
   592 A38A 00						.BYTE $00
   592 A38B 00						.BYTE $00
   592 A38C 00						.BYTE $00
   592 A38D 00						.BYTE $00
   592 A38E 00						.BYTE $00
   592 A38F 00						.BYTE $00
   592 A390 00						.BYTE $00
   592 A391 00						.BYTE $00
   592 A392 00						.BYTE $00
   592 A393 00						.BYTE $00
   592 A394 00						.BYTE $00
   592 A395 00						.BYTE $00
   592 A396 00						.BYTE $00
   592 A397 00						.BYTE $00
   592 A398 00						.BYTE $00
   592 A399 00						.BYTE $00
   592 A39A 00						.BYTE $00
   592 A39B 00						.BYTE $00
   592 A39C 00						.BYTE $00
   592 A39D 00						.BYTE $00
   592 A39E 00						.BYTE $00
   592 A39F 00						.BYTE $00
   592 A3A0 00						.BYTE $00
   592 A3A1 00						.BYTE $00
   592 A3A2 00						.BYTE $00
   592 A3A3 00						.BYTE $00
   592 A3A4 00						.BYTE $00
   592 A3A5 00						.BYTE $00
   592 A3A6 00						.BYTE $00
   592 A3A7 00						.BYTE $00
   592 A3A8 00						.BYTE $00
   592 A3A9 00						.BYTE $00
   592 A3AA 00						.BYTE $00
   592 A3AB 00						.BYTE $00
   592 A3AC 00						.BYTE $00
   592 A3AD 00						.BYTE $00
   592 A3AE 00						.BYTE $00
   592 A3AF 00						.BYTE $00
   592 A3B0 00						.BYTE $00
   592 A3B1 00						.BYTE $00
   592 A3B2 00						.BYTE $00
   592 A3B3 00						.BYTE $00
   592 A3B4 00						.BYTE $00
   592 A3B5 00						.BYTE $00
   592 A3B6 00						.BYTE $00
   592 A3B7 00						.BYTE $00
   592 A3B8 00						.BYTE $00
   592 A3B9 00						.BYTE $00
   592 A3BA 00						.BYTE $00
   592 A3BB 00						.BYTE $00
   592 A3BC 00						.BYTE $00
   592 A3BD 00						.BYTE $00
   592 A3BE 00						.BYTE $00
   592 A3BF 00						.BYTE $00
   592 A3C0 00						.BYTE $00
   592 A3C1 00						.BYTE $00
   592 A3C2 00						.BYTE $00
   592 A3C3 00						.BYTE $00
   592 A3C4 00						.BYTE $00
   592 A3C5 00						.BYTE $00
   592 A3C6 00						.BYTE $00
   592 A3C7 00						.BYTE $00
   592 A3C8 00						.BYTE $00
   592 A3C9 00						.BYTE $00
   592 A3CA 00						.BYTE $00
   592 A3CB 00						.BYTE $00
   592 A3CC 00						.BYTE $00
   592 A3CD 00						.BYTE $00
   592 A3CE 00						.BYTE $00
   592 A3CF 00						.BYTE $00
   592 A3D0 00						.BYTE $00
   592 A3D1 00						.BYTE $00
   592 A3D2 00						.BYTE $00
   592 A3D3 00						.BYTE $00
   592 A3D4 00						.BYTE $00
   592 A3D5 00						.BYTE $00
   592 A3D6 00						.BYTE $00
   592 A3D7 00						.BYTE $00
   592 A3D8 00						.BYTE $00
   592 A3D9 00						.BYTE $00
   592 A3DA 00						.BYTE $00
   592 A3DB 00						.BYTE $00
   592 A3DC 00						.BYTE $00
   592 A3DD 00						.BYTE $00
   592 A3DE 00						.BYTE $00
   592 A3DF 00						.BYTE $00
   592 A3E0 00						.BYTE $00
   592 A3E1 00						.BYTE $00
   592 A3E2 00						.BYTE $00
   592 A3E3 00						.BYTE $00
   592 A3E4 00						.BYTE $00
   592 A3E5 00						.BYTE $00
   592 A3E6 00						.BYTE $00
   592 A3E7 00						.BYTE $00
   592 A3E8 00						.BYTE $00
   592 A3E9 00						.BYTE $00
   592 A3EA 00						.BYTE $00
   592 A3EB 00						.BYTE $00
   592 A3EC 00						.BYTE $00
   592 A3ED 00						.BYTE $00
   592 A3EE 00						.BYTE $00
   592 A3EF 00						.BYTE $00
   592 A3F0 00						.BYTE $00
   592 A3F1 00						.BYTE $00
   592 A3F2 00						.BYTE $00
   592 A3F3 00						.BYTE $00
   592 A3F4 00						.BYTE $00
   592 A3F5 00						.BYTE $00
   592 A3F6 00						.BYTE $00
   592 A3F7 00						.BYTE $00
   592 A3F8 00						.BYTE $00
   592 A3F9 00						.BYTE $00
   592 A3FA 00						.BYTE $00
   592 A3FB 00						.BYTE $00
   592 A3FC 00						.BYTE $00
   592 A3FD 00						.BYTE $00
   592 A3FE 00						.BYTE $00
   592 A3FF 00						.BYTE $00
   592 A400 00						.BYTE $00
   592 A401 00						.BYTE $00
   592 A402 00						.BYTE $00
   592 A403 00						.BYTE $00
   592 A404 00						.BYTE $00
   592 A405 00						.BYTE $00
   592 A406 00						.BYTE $00
   592 A407 00						.BYTE $00
   592 A408 00						.BYTE $00
   592 A409 00						.BYTE $00
   592 A40A 00						.BYTE $00
   592 A40B 00						.BYTE $00
   592 A40C 00						.BYTE $00
   592 A40D 00						.BYTE $00
   592 A40E 00						.BYTE $00
   592 A40F 00						.BYTE $00
   592 A410 00						.BYTE $00
   592 A411 00						.BYTE $00
   592 A412 00						.BYTE $00
   592 A413 00						.BYTE $00
   592 A414 00						.BYTE $00
   592 A415 00						.BYTE $00
   592 A416 00						.BYTE $00
   592 A417 00						.BYTE $00
   592 A418 00						.BYTE $00
   592 A419 00						.BYTE $00
   592 A41A 00						.BYTE $00
   592 A41B 00						.BYTE $00
   592 A41C 00						.BYTE $00
   592 A41D 00						.BYTE $00
   592 A41E 00						.BYTE $00
   592 A41F 00						.BYTE $00
   592 A420 00						.BYTE $00
   592 A421 00						.BYTE $00
   592 A422 00						.BYTE $00
   592 A423 00						.BYTE $00
   592 A424 00						.BYTE $00
   592 A425 00						.BYTE $00
   592 A426 00						.BYTE $00
   592 A427 00						.BYTE $00
   592 A428 00						.BYTE $00
   592 A429 00						.BYTE $00
   592 A42A 00						.BYTE $00
   592 A42B 00						.BYTE $00
   592 A42C 00						.BYTE $00
   592 A42D 00						.BYTE $00
   592 A42E 00						.BYTE $00
   592 A42F 00						.BYTE $00
   592 A430 00						.BYTE $00
   592 A431 00						.BYTE $00
   592 A432 00						.BYTE $00
   592 A433 00						.BYTE $00
   592 A434 00						.BYTE $00
   592 A435 00						.BYTE $00
   592 A436 00						.BYTE $00
   592 A437 00						.BYTE $00
   592 A438 00						.BYTE $00
   592 A439 00						.BYTE $00
   592 A43A 00						.BYTE $00
   592 A43B 00						.BYTE $00
   592 A43C 00						.BYTE $00
   592 A43D 00						.BYTE $00
   592 A43E 00						.BYTE $00
   592 A43F 00						.BYTE $00
   592 A440 00						.BYTE $00
   592 A441 00						.BYTE $00
   592 A442 00						.BYTE $00
   592 A443 00						.BYTE $00
   592 A444 00						.BYTE $00
   592 A445 00						.BYTE $00
   592 A446 00						.BYTE $00
   592 A447 00						.BYTE $00
   592 A448 00						.BYTE $00
   592 A449 00						.BYTE $00
   592 A44A 00						.BYTE $00
   592 A44B 00						.BYTE $00
   592 A44C 00						.BYTE $00
   592 A44D 00						.BYTE $00
   592 A44E 00						.BYTE $00
   592 A44F 00						.BYTE $00
   592 A450 00						.BYTE $00
   592 A451 00						.BYTE $00
   592 A452 00						.BYTE $00
   592 A453 00						.BYTE $00
   592 A454 00						.BYTE $00
   592 A455 00						.BYTE $00
   592 A456 00						.BYTE $00
   592 A457 00						.BYTE $00
   592 A458 00						.BYTE $00
   592 A459 00						.BYTE $00
   592 A45A 00						.BYTE $00
   592 A45B 00						.BYTE $00
   592 A45C 00						.BYTE $00
   592 A45D 00						.BYTE $00
   592 A45E 00						.BYTE $00
   592 A45F 00						.BYTE $00
   592 A460 00						.BYTE $00
   592 A461 00						.BYTE $00
   592 A462 00						.BYTE $00
   592 A463 00						.BYTE $00
   592 A464 00						.BYTE $00
   592 A465 00						.BYTE $00
   592 A466 00						.BYTE $00
   592 A467 00						.BYTE $00
   592 A468 00						.BYTE $00
   592 A469 00						.BYTE $00
   592 A46A 00						.BYTE $00
   592 A46B 00						.BYTE $00
   592 A46C 00						.BYTE $00
   592 A46D 00						.BYTE $00
   592 A46E 00						.BYTE $00
   592 A46F 00						.BYTE $00
   592 A470 00						.BYTE $00
   592 A471 00						.BYTE $00
   592 A472 00						.BYTE $00
   592 A473 00						.BYTE $00
   592 A474 00						.BYTE $00
   592 A475 00						.BYTE $00
   592 A476 00						.BYTE $00
   592 A477 00						.BYTE $00
   592 A478 00						.BYTE $00
   592 A479 00						.BYTE $00
   592 A47A 00						.BYTE $00
   592 A47B 00						.BYTE $00
   592 A47C 00						.BYTE $00
   592 A47D 00						.BYTE $00
   592 A47E 00						.BYTE $00
   592 A47F 00						.BYTE $00
   592 A480 00						.BYTE $00
   592 A481 00						.BYTE $00
   592 A482 00						.BYTE $00
   592 A483 00						.BYTE $00
   592 A484 00						.BYTE $00
   592 A485 00						.BYTE $00
   592 A486 00						.BYTE $00
   592 A487 00						.BYTE $00
   592 A488 00						.BYTE $00
   592 A489 00						.BYTE $00
   592 A48A 00						.BYTE $00
   592 A48B 00						.BYTE $00
   592 A48C 00						.BYTE $00
   592 A48D 00						.BYTE $00
   592 A48E 00						.BYTE $00
   592 A48F 00						.BYTE $00
   592 A490 00						.BYTE $00
   592 A491 00						.BYTE $00
   592 A492 00						.BYTE $00
   592 A493 00						.BYTE $00
   592 A494 00						.BYTE $00
   592 A495 00						.BYTE $00
   592 A496 00						.BYTE $00
   592 A497 00						.BYTE $00
   592 A498 00						.BYTE $00
   592 A499 00						.BYTE $00
   592 A49A 00						.BYTE $00
   592 A49B 00						.BYTE $00
   592 A49C 00						.BYTE $00
   592 A49D 00						.BYTE $00
   592 A49E 00						.BYTE $00
   592 A49F 00						.BYTE $00
   592 A4A0 00						.BYTE $00
   592 A4A1 00						.BYTE $00
   592 A4A2 00						.BYTE $00
   592 A4A3 00						.BYTE $00
   592 A4A4 00						.BYTE $00
   592 A4A5 00						.BYTE $00
   592 A4A6 00						.BYTE $00
   592 A4A7 00						.BYTE $00
   592 A4A8 00						.BYTE $00
   592 A4A9 00						.BYTE $00
   592 A4AA 00						.BYTE $00
   592 A4AB 00						.BYTE $00
   592 A4AC 00						.BYTE $00
   592 A4AD 00						.BYTE $00
   592 A4AE 00						.BYTE $00
   592 A4AF 00						.BYTE $00
   592 A4B0 00						.BYTE $00
   592 A4B1 00						.BYTE $00
   592 A4B2 00						.BYTE $00
   592 A4B3 00						.BYTE $00
   592 A4B4 00						.BYTE $00
   592 A4B5 00						.BYTE $00
   592 A4B6 00						.BYTE $00
   592 A4B7 00						.BYTE $00
   592 A4B8 00						.BYTE $00
   592 A4B9 00						.BYTE $00
   592 A4BA 00						.BYTE $00
   592 A4BB 00						.BYTE $00
   592 A4BC 00						.BYTE $00
   592 A4BD 00						.BYTE $00
   592 A4BE 00						.BYTE $00
   592 A4BF 00						.BYTE $00
   592 A4C0 00						.BYTE $00
   592 A4C1 00						.BYTE $00
   592 A4C2 00						.BYTE $00
   592 A4C3 00						.BYTE $00
   592 A4C4 00						.BYTE $00
   592 A4C5 00						.BYTE $00
   592 A4C6 00						.BYTE $00
   592 A4C7 00						.BYTE $00
   592 A4C8 00						.BYTE $00
   592 A4C9 00						.BYTE $00
   592 A4CA 00						.BYTE $00
   592 A4CB 00						.BYTE $00
   592 A4CC 00						.BYTE $00
   592 A4CD 00						.BYTE $00
   592 A4CE 00						.BYTE $00
   592 A4CF 00						.BYTE $00
   592 A4D0 00						.BYTE $00
   592 A4D1 00						.BYTE $00
   592 A4D2 00						.BYTE $00
   592 A4D3 00						.BYTE $00
   592 A4D4 00						.BYTE $00
   592 A4D5 00						.BYTE $00
   592 A4D6 00						.BYTE $00
   592 A4D7 00						.BYTE $00
   592 A4D8 00						.BYTE $00
   592 A4D9 00						.BYTE $00
   592 A4DA 00						.BYTE $00
   592 A4DB 00						.BYTE $00
   592 A4DC 00						.BYTE $00
   592 A4DD 00						.BYTE $00
   592 A4DE 00						.BYTE $00
   592 A4DF 00						.BYTE $00
   592 A4E0 00						.BYTE $00
   592 A4E1 00						.BYTE $00
   592 A4E2 00						.BYTE $00
   592 A4E3 00						.BYTE $00
   592 A4E4 00						.BYTE $00
   592 A4E5 00						.BYTE $00
   592 A4E6 00						.BYTE $00
   592 A4E7 00						.BYTE $00
   592 A4E8 00						.BYTE $00
   592 A4E9 00						.BYTE $00
   592 A4EA 00						.BYTE $00
   592 A4EB 00						.BYTE $00
   592 A4EC 00						.BYTE $00
   592 A4ED 00						.BYTE $00
   592 A4EE 00						.BYTE $00
   592 A4EF 00						.BYTE $00
   592 A4F0 00						.BYTE $00
   592 A4F1 00						.BYTE $00
   592 A4F2 00						.BYTE $00
   592 A4F3 00						.BYTE $00
   592 A4F4 00						.BYTE $00
   592 A4F5 00						.BYTE $00
   592 A4F6 00						.BYTE $00
   592 A4F7 00						.BYTE $00
   592 A4F8 00						.BYTE $00
   592 A4F9 00						.BYTE $00
   592 A4FA 00						.BYTE $00
   592 A4FB 00						.BYTE $00
   592 A4FC 00						.BYTE $00
   592 A4FD 00						.BYTE $00
   592 A4FE 00						.BYTE $00
   592 A4FF 00						.BYTE $00
   592 A500 00						.BYTE $00
   592 A501 00						.BYTE $00
   592 A502 00						.BYTE $00
   592 A503 00						.BYTE $00
   592 A504 00						.BYTE $00
   592 A505 00						.BYTE $00
   592 A506 00						.BYTE $00
   592 A507 00						.BYTE $00
   592 A508 00						.BYTE $00
   592 A509 00						.BYTE $00
   592 A50A 00						.BYTE $00
   592 A50B 00						.BYTE $00
   592 A50C 00						.BYTE $00
   592 A50D 00						.BYTE $00
   592 A50E 00						.BYTE $00
   592 A50F 00						.BYTE $00
   592 A510 00						.BYTE $00
   592 A511 00						.BYTE $00
   592 A512 00						.BYTE $00
   592 A513 00						.BYTE $00
   592 A514 00						.BYTE $00
   592 A515 00						.BYTE $00
   592 A516 00						.BYTE $00
   592 A517 00						.BYTE $00
   592 A518 00						.BYTE $00
   592 A519 00						.BYTE $00
   592 A51A 00						.BYTE $00
   592 A51B 00						.BYTE $00
   592 A51C 00						.BYTE $00
   592 A51D 00						.BYTE $00
   592 A51E 00						.BYTE $00
   592 A51F 00						.BYTE $00
   592 A520 00						.BYTE $00
   592 A521 00						.BYTE $00
   592 A522 00						.BYTE $00
   592 A523 00						.BYTE $00
   592 A524 00						.BYTE $00
   592 A525 00						.BYTE $00
   592 A526 00						.BYTE $00
   592 A527 00						.BYTE $00
   592 A528 00						.BYTE $00
   592 A529 00						.BYTE $00
   592 A52A 00						.BYTE $00
   592 A52B 00						.BYTE $00
   592 A52C 00						.BYTE $00
   592 A52D 00						.BYTE $00
   592 A52E 00						.BYTE $00
   592 A52F 00						.BYTE $00
   592 A530 00						.BYTE $00
   592 A531 00						.BYTE $00
   592 A532 00						.BYTE $00
   592 A533 00						.BYTE $00
   592 A534 00						.BYTE $00
   592 A535 00						.BYTE $00
   592 A536 00						.BYTE $00
   592 A537 00						.BYTE $00
   592 A538 00						.BYTE $00
   592 A539 00						.BYTE $00
   592 A53A 00						.BYTE $00
   592 A53B 00						.BYTE $00
   592 A53C 00						.BYTE $00
   592 A53D 00						.BYTE $00
   592 A53E 00						.BYTE $00
   592 A53F 00						.BYTE $00
   592 A540 00						.BYTE $00
   592 A541 00						.BYTE $00
   592 A542 00						.BYTE $00
   592 A543 00						.BYTE $00
   592 A544 00						.BYTE $00
   592 A545 00						.BYTE $00
   592 A546 00						.BYTE $00
   592 A547 00						.BYTE $00
   592 A548 00						.BYTE $00
   592 A549 00						.BYTE $00
   592 A54A 00						.BYTE $00
   592 A54B 00						.BYTE $00
   592 A54C 00						.BYTE $00
   592 A54D 00						.BYTE $00
   592 A54E 00						.BYTE $00
   592 A54F 00						.BYTE $00
   592 A550 00						.BYTE $00
   592 A551 00						.BYTE $00
   592 A552 00						.BYTE $00
   592 A553 00						.BYTE $00
   592 A554 00						.BYTE $00
   592 A555 00						.BYTE $00
   592 A556 00						.BYTE $00
   592 A557 00						.BYTE $00
   592 A558 00						.BYTE $00
   592 A559 00						.BYTE $00
   592 A55A 00						.BYTE $00
   592 A55B 00						.BYTE $00
   592 A55C 00						.BYTE $00
   592 A55D 00						.BYTE $00
   592 A55E 00						.BYTE $00
   592 A55F 00						.BYTE $00
   592 A560 00						.BYTE $00
   592 A561 00						.BYTE $00
   592 A562 00						.BYTE $00
   592 A563 00						.BYTE $00
   592 A564 00						.BYTE $00
   592 A565 00						.BYTE $00
   592 A566 00						.BYTE $00
   592 A567 00						.BYTE $00
   592 A568 00						.BYTE $00
   592 A569 00						.BYTE $00
   592 A56A 00						.BYTE $00
   592 A56B 00						.BYTE $00
   592 A56C 00						.BYTE $00
   592 A56D 00						.BYTE $00
   592 A56E 00						.BYTE $00
   592 A56F 00						.BYTE $00
   592 A570 00						.BYTE $00
   592 A571 00						.BYTE $00
   592 A572 00						.BYTE $00
   592 A573 00						.BYTE $00
   592 A574 00						.BYTE $00
   592 A575 00						.BYTE $00
   592 A576 00						.BYTE $00
   592 A577 00						.BYTE $00
   592 A578 00						.BYTE $00
   592 A579 00						.BYTE $00
   592 A57A 00						.BYTE $00
   592 A57B 00						.BYTE $00
   592 A57C 00						.BYTE $00
   592 A57D 00						.BYTE $00
   592 A57E 00						.BYTE $00
   592 A57F 00						.BYTE $00
   592 A580 00						.BYTE $00
   592 A581 00						.BYTE $00
   592 A582 00						.BYTE $00
   592 A583 00						.BYTE $00
   592 A584 00						.BYTE $00
   592 A585 00						.BYTE $00
   592 A586 00						.BYTE $00
   592 A587 00						.BYTE $00
   592 A588 00						.BYTE $00
   592 A589 00						.BYTE $00
   592 A58A 00						.BYTE $00
   592 A58B 00						.BYTE $00
   592 A58C 00						.BYTE $00
   592 A58D 00						.BYTE $00
   592 A58E 00						.BYTE $00
   592 A58F 00						.BYTE $00
   592 A590 00						.BYTE $00
   592 A591 00						.BYTE $00
   592 A592 00						.BYTE $00
   592 A593 00						.BYTE $00
   592 A594 00						.BYTE $00
   592 A595 00						.BYTE $00
   592 A596 00						.BYTE $00
   592 A597 00						.BYTE $00
   592 A598 00						.BYTE $00
   592 A599 00						.BYTE $00
   592 A59A 00						.BYTE $00
   592 A59B 00						.BYTE $00
   592 A59C 00						.BYTE $00
   592 A59D 00						.BYTE $00
   592 A59E 00						.BYTE $00
   592 A59F 00						.BYTE $00
   592 A5A0 00						.BYTE $00
   592 A5A1 00						.BYTE $00
   592 A5A2 00						.BYTE $00
   592 A5A3 00						.BYTE $00
   592 A5A4 00						.BYTE $00
   592 A5A5 00						.BYTE $00
   592 A5A6 00						.BYTE $00
   592 A5A7 00						.BYTE $00
   592 A5A8 00						.BYTE $00
   592 A5A9 00						.BYTE $00
   592 A5AA 00						.BYTE $00
   592 A5AB 00						.BYTE $00
   592 A5AC 00						.BYTE $00
   592 A5AD 00						.BYTE $00
   592 A5AE 00						.BYTE $00
   592 A5AF 00						.BYTE $00
   592 A5B0 00						.BYTE $00
   592 A5B1 00						.BYTE $00
   592 A5B2 00						.BYTE $00
   592 A5B3 00						.BYTE $00
   592 A5B4 00						.BYTE $00
   592 A5B5 00						.BYTE $00
   592 A5B6 00						.BYTE $00
   592 A5B7 00						.BYTE $00
   592 A5B8 00						.BYTE $00
   592 A5B9 00						.BYTE $00
   592 A5BA 00						.BYTE $00
   592 A5BB 00						.BYTE $00
   592 A5BC 00						.BYTE $00
   592 A5BD 00						.BYTE $00
   592 A5BE 00						.BYTE $00
   592 A5BF 00						.BYTE $00
   592 A5C0 00						.BYTE $00
   592 A5C1 00						.BYTE $00
   592 A5C2 00						.BYTE $00
   592 A5C3 00						.BYTE $00
   592 A5C4 00						.BYTE $00
   592 A5C5 00						.BYTE $00
   592 A5C6 00						.BYTE $00
   592 A5C7 00						.BYTE $00
   592 A5C8 00						.BYTE $00
   592 A5C9 00						.BYTE $00
   592 A5CA 00						.BYTE $00
   592 A5CB 00						.BYTE $00
   592 A5CC 00						.BYTE $00
   592 A5CD 00						.BYTE $00
   592 A5CE 00						.BYTE $00
   592 A5CF 00						.BYTE $00
   592 A5D0 00						.BYTE $00
   592 A5D1 00						.BYTE $00
   592 A5D2 00						.BYTE $00
   592 A5D3 00						.BYTE $00
   592 A5D4 00						.BYTE $00
   592 A5D5 00						.BYTE $00
   592 A5D6 00						.BYTE $00
   592 A5D7 00						.BYTE $00
   592 A5D8 00						.BYTE $00
   592 A5D9 00						.BYTE $00
   592 A5DA 00						.BYTE $00
   592 A5DB 00						.BYTE $00
   592 A5DC 00						.BYTE $00
   592 A5DD 00						.BYTE $00
   592 A5DE 00						.BYTE $00
   592 A5DF 00						.BYTE $00
   592 A5E0 00						.BYTE $00
   592 A5E1 00						.BYTE $00
   592 A5E2 00						.BYTE $00
   592 A5E3 00						.BYTE $00
   592 A5E4 00						.BYTE $00
   592 A5E5 00						.BYTE $00
   592 A5E6 00						.BYTE $00
   592 A5E7 00						.BYTE $00
   592 A5E8 00						.BYTE $00
   592 A5E9 00						.BYTE $00
   592 A5EA 00						.BYTE $00
   592 A5EB 00						.BYTE $00
   592 A5EC 00						.BYTE $00
   592 A5ED 00						.BYTE $00
   592 A5EE 00						.BYTE $00
   592 A5EF 00						.BYTE $00
   592 A5F0 00						.BYTE $00
   592 A5F1 00						.BYTE $00
   592 A5F2 00						.BYTE $00
   592 A5F3 00						.BYTE $00
   592 A5F4 00						.BYTE $00
   592 A5F5 00						.BYTE $00
   592 A5F6 00						.BYTE $00
   592 A5F7 00						.BYTE $00
   592 A5F8 00						.BYTE $00
   592 A5F9 00						.BYTE $00
   592 A5FA 00						.BYTE $00
   592 A5FB 00						.BYTE $00
   592 A5FC 00						.BYTE $00
   592 A5FD 00						.BYTE $00
   592 A5FE 00						.BYTE $00
   592 A5FF 00						.BYTE $00
   592 A600 00						.BYTE $00
   592 A601 00						.BYTE $00
   592 A602 00						.BYTE $00
   592 A603 00						.BYTE $00
   592 A604 00						.BYTE $00
   592 A605 00						.BYTE $00
   592 A606 00						.BYTE $00
   592 A607 00						.BYTE $00
   592 A608 00						.BYTE $00
   592 A609 00						.BYTE $00
   592 A60A 00						.BYTE $00
   592 A60B 00						.BYTE $00
   592 A60C 00						.BYTE $00
   592 A60D 00						.BYTE $00
   592 A60E 00						.BYTE $00
   592 A60F 00						.BYTE $00
   592 A610 00						.BYTE $00
   592 A611 00						.BYTE $00
   592 A612 00						.BYTE $00
   592 A613 00						.BYTE $00
   592 A614 00						.BYTE $00
   592 A615 00						.BYTE $00
   592 A616 00						.BYTE $00
   592 A617 00						.BYTE $00
   592 A618 00						.BYTE $00
   592 A619 00						.BYTE $00
   592 A61A 00						.BYTE $00
   592 A61B 00						.BYTE $00
   592 A61C 00						.BYTE $00
   592 A61D 00						.BYTE $00
   592 A61E 00						.BYTE $00
   592 A61F 00						.BYTE $00
   592 A620 00						.BYTE $00
   592 A621 00						.BYTE $00
   592 A622 00						.BYTE $00
   592 A623 00						.BYTE $00
   592 A624 00						.BYTE $00
   592 A625 00						.BYTE $00
   592 A626 00						.BYTE $00
   592 A627 00						.BYTE $00
   592 A628 00						.BYTE $00
   592 A629 00						.BYTE $00
   592 A62A 00						.BYTE $00
   592 A62B 00						.BYTE $00
   592 A62C 00						.BYTE $00
   592 A62D 00						.BYTE $00
   592 A62E 00						.BYTE $00
   592 A62F 00						.BYTE $00
   592 A630 00						.BYTE $00
   592 A631 00						.BYTE $00
   592 A632 00						.BYTE $00
   592 A633 00						.BYTE $00
   592 A634 00						.BYTE $00
   592 A635 00						.BYTE $00
   592 A636 00						.BYTE $00
   592 A637 00						.BYTE $00
   592 A638 00						.BYTE $00
   592 A639 00						.BYTE $00
   592 A63A 00						.BYTE $00
   592 A63B 00						.BYTE $00
   592 A63C 00						.BYTE $00
   592 A63D 00						.BYTE $00
   592 A63E 00						.BYTE $00
   592 A63F 00						.BYTE $00
   592 A640 00						.BYTE $00
   592 A641 00						.BYTE $00
   592 A642 00						.BYTE $00
   592 A643 00						.BYTE $00
   592 A644 00						.BYTE $00
   592 A645 00						.BYTE $00
   592 A646 00						.BYTE $00
   592 A647 00						.BYTE $00
   592 A648 00						.BYTE $00
   592 A649 00						.BYTE $00
   592 A64A 00						.BYTE $00
   592 A64B 00						.BYTE $00
   592 A64C 00						.BYTE $00
   592 A64D 00						.BYTE $00
   592 A64E 00						.BYTE $00
   592 A64F 00						.BYTE $00
   592 A650 00						.BYTE $00
   592 A651 00						.BYTE $00
   592 A652 00						.BYTE $00
   592 A653 00						.BYTE $00
   592 A654 00						.BYTE $00
   592 A655 00						.BYTE $00
   592 A656 00						.BYTE $00
   592 A657 00						.BYTE $00
   592 A658 00						.BYTE $00
   592 A659 00						.BYTE $00
   592 A65A 00						.BYTE $00
   592 A65B 00						.BYTE $00
   592 A65C 00						.BYTE $00
   592 A65D 00						.BYTE $00
   592 A65E 00						.BYTE $00
   592 A65F 00						.BYTE $00
   592 A660 00						.BYTE $00
   592 A661 00						.BYTE $00
   592 A662 00						.BYTE $00
   592 A663 00						.BYTE $00
   592 A664 00						.BYTE $00
   592 A665 00						.BYTE $00
   592 A666 00						.BYTE $00
   592 A667 00						.BYTE $00
   592 A668 00						.BYTE $00
   592 A669 00						.BYTE $00
   592 A66A 00						.BYTE $00
   592 A66B 00						.BYTE $00
   592 A66C 00						.BYTE $00
   592 A66D 00						.BYTE $00
   592 A66E 00						.BYTE $00
   592 A66F 00						.BYTE $00
   592 A670 00						.BYTE $00
   592 A671 00						.BYTE $00
   592 A672 00						.BYTE $00
   592 A673 00						.BYTE $00
   592 A674 00						.BYTE $00
   592 A675 00						.BYTE $00
   592 A676 00						.BYTE $00
   592 A677 00						.BYTE $00
   592 A678 00						.BYTE $00
   592 A679 00						.BYTE $00
   592 A67A 00						.BYTE $00
   592 A67B 00						.BYTE $00
   592 A67C 00						.BYTE $00
   592 A67D 00						.BYTE $00
   592 A67E 00						.BYTE $00
   592 A67F 00						.BYTE $00
   592 A680 00						.BYTE $00
   592 A681 00						.BYTE $00
   592 A682 00						.BYTE $00
   592 A683 00						.BYTE $00
   592 A684 00						.BYTE $00
   592 A685 00						.BYTE $00
   592 A686 00						.BYTE $00
   592 A687 00						.BYTE $00
   592 A688 00						.BYTE $00
   592 A689 00						.BYTE $00
   592 A68A 00						.BYTE $00
   592 A68B 00						.BYTE $00
   592 A68C 00						.BYTE $00
   592 A68D 00						.BYTE $00
   592 A68E 00						.BYTE $00
   592 A68F 00						.BYTE $00
   592 A690 00						.BYTE $00
   592 A691 00						.BYTE $00
   592 A692 00						.BYTE $00
   592 A693 00						.BYTE $00
   592 A694 00						.BYTE $00
   592 A695 00						.BYTE $00
   592 A696 00						.BYTE $00
   592 A697 00						.BYTE $00
   592 A698 00						.BYTE $00
   592 A699 00						.BYTE $00
   592 A69A 00						.BYTE $00
   592 A69B 00						.BYTE $00
   592 A69C 00						.BYTE $00
   592 A69D 00						.BYTE $00
   592 A69E 00						.BYTE $00
   592 A69F 00						.BYTE $00
   592 A6A0 00						.BYTE $00
   592 A6A1 00						.BYTE $00
   592 A6A2 00						.BYTE $00
   592 A6A3 00						.BYTE $00
   592 A6A4 00						.BYTE $00
   592 A6A5 00						.BYTE $00
   592 A6A6 00						.BYTE $00
   592 A6A7 00						.BYTE $00
   592 A6A8 00						.BYTE $00
   592 A6A9 00						.BYTE $00
   592 A6AA 00						.BYTE $00
   592 A6AB 00						.BYTE $00
   592 A6AC 00						.BYTE $00
   592 A6AD 00						.BYTE $00
   592 A6AE 00						.BYTE $00
   592 A6AF 00						.BYTE $00
   592 A6B0 00						.BYTE $00
   592 A6B1 00						.BYTE $00
   592 A6B2 00						.BYTE $00
   592 A6B3 00						.BYTE $00
   592 A6B4 00						.BYTE $00
   592 A6B5 00						.BYTE $00
   592 A6B6 00						.BYTE $00
   592 A6B7 00						.BYTE $00
   592 A6B8 00						.BYTE $00
   592 A6B9 00						.BYTE $00
   592 A6BA 00						.BYTE $00
   592 A6BB 00						.BYTE $00
   592 A6BC 00						.BYTE $00
   592 A6BD 00						.BYTE $00
   592 A6BE 00						.BYTE $00
   592 A6BF 00						.BYTE $00
   592 A6C0 00						.BYTE $00
   592 A6C1 00						.BYTE $00
   592 A6C2 00						.BYTE $00
   592 A6C3 00						.BYTE $00
   592 A6C4 00						.BYTE $00
   592 A6C5 00						.BYTE $00
   592 A6C6 00						.BYTE $00
   592 A6C7 00						.BYTE $00
   592 A6C8 00						.BYTE $00
   592 A6C9 00						.BYTE $00
   592 A6CA 00						.BYTE $00
   592 A6CB 00						.BYTE $00
   592 A6CC 00						.BYTE $00
   592 A6CD 00						.BYTE $00
   592 A6CE 00						.BYTE $00
   592 A6CF 00						.BYTE $00
   592 A6D0 00						.BYTE $00
   592 A6D1 00						.BYTE $00
   592 A6D2 00						.BYTE $00
   592 A6D3 00						.BYTE $00
   592 A6D4 00						.BYTE $00
   592 A6D5 00						.BYTE $00
   592 A6D6 00						.BYTE $00
   592 A6D7 00						.BYTE $00
   592 A6D8 00						.BYTE $00
   592 A6D9 00						.BYTE $00
   592 A6DA 00						.BYTE $00
   592 A6DB 00						.BYTE $00
   592 A6DC 00						.BYTE $00
   592 A6DD 00						.BYTE $00
   592 A6DE 00						.BYTE $00
   592 A6DF 00						.BYTE $00
   592 A6E0 00						.BYTE $00
   592 A6E1 00						.BYTE $00
   592 A6E2 00						.BYTE $00
   592 A6E3 00						.BYTE $00
   592 A6E4 00						.BYTE $00
   592 A6E5 00						.BYTE $00
   592 A6E6 00						.BYTE $00
   592 A6E7 00						.BYTE $00
   592 A6E8 00						.BYTE $00
   592 A6E9 00						.BYTE $00
   592 A6EA 00						.BYTE $00
   592 A6EB 00						.BYTE $00
   592 A6EC 00						.BYTE $00
   592 A6ED 00						.BYTE $00
   592 A6EE 00						.BYTE $00
   592 A6EF 00						.BYTE $00
   592 A6F0 00						.BYTE $00
   592 A6F1 00						.BYTE $00
   592 A6F2 00						.BYTE $00
   592 A6F3 00						.BYTE $00
   592 A6F4 00						.BYTE $00
   592 A6F5 00						.BYTE $00
   592 A6F6 00						.BYTE $00
   592 A6F7 00						.BYTE $00
   592 A6F8 00						.BYTE $00
   592 A6F9 00						.BYTE $00
   592 A6FA 00						.BYTE $00
   592 A6FB 00						.BYTE $00
   592 A6FC 00						.BYTE $00
   592 A6FD 00						.BYTE $00
   592 A6FE 00						.BYTE $00
   592 A6FF 00						.BYTE $00
   592 A700 00						.BYTE $00
   592 A701 00						.BYTE $00
   592 A702 00						.BYTE $00
   592 A703 00						.BYTE $00
   592 A704 00						.BYTE $00
   592 A705 00						.BYTE $00
   592 A706 00						.BYTE $00
   592 A707 00						.BYTE $00
   592 A708 00						.BYTE $00
   592 A709 00						.BYTE $00
   592 A70A 00						.BYTE $00
   592 A70B 00						.BYTE $00
   592 A70C 00						.BYTE $00
   592 A70D 00						.BYTE $00
   592 A70E 00						.BYTE $00
   592 A70F 00						.BYTE $00
   592 A710 00						.BYTE $00
   592 A711 00						.BYTE $00
   592 A712 00						.BYTE $00
   592 A713 00						.BYTE $00
   592 A714 00						.BYTE $00
   592 A715 00						.BYTE $00
   592 A716 00						.BYTE $00
   592 A717 00						.BYTE $00
   592 A718 00						.BYTE $00
   592 A719 00						.BYTE $00
   592 A71A 00						.BYTE $00
   592 A71B 00						.BYTE $00
   592 A71C 00						.BYTE $00
   592 A71D 00						.BYTE $00
   592 A71E 00						.BYTE $00
   592 A71F 00						.BYTE $00
   592 A720 00						.BYTE $00
   592 A721 00						.BYTE $00
   592 A722 00						.BYTE $00
   592 A723 00						.BYTE $00
   592 A724 00						.BYTE $00
   592 A725 00						.BYTE $00
   592 A726 00						.BYTE $00
   592 A727 00						.BYTE $00
   592 A728 00						.BYTE $00
   592 A729 00						.BYTE $00
   592 A72A 00						.BYTE $00
   592 A72B 00						.BYTE $00
   592 A72C 00						.BYTE $00
   592 A72D 00						.BYTE $00
   592 A72E 00						.BYTE $00
   592 A72F 00						.BYTE $00
   592 A730 00						.BYTE $00
   592 A731 00						.BYTE $00
   592 A732 00						.BYTE $00
   592 A733 00						.BYTE $00
   592 A734 00						.BYTE $00
   592 A735 00						.BYTE $00
   592 A736 00						.BYTE $00
   592 A737 00						.BYTE $00
   592 A738 00						.BYTE $00
   592 A739 00						.BYTE $00
   592 A73A 00						.BYTE $00
   592 A73B 00						.BYTE $00
   592 A73C 00						.BYTE $00
   592 A73D 00						.BYTE $00
   592 A73E 00						.BYTE $00
   592 A73F 00						.BYTE $00
   592 A740 00						.BYTE $00
   592 A741 00						.BYTE $00
   592 A742 00						.BYTE $00
   592 A743 00						.BYTE $00
   592 A744 00						.BYTE $00
   592 A745 00						.BYTE $00
   592 A746 00						.BYTE $00
   592 A747 00						.BYTE $00
   592 A748 00						.BYTE $00
   592 A749 00						.BYTE $00
   592 A74A 00						.BYTE $00
   592 A74B 00						.BYTE $00
   592 A74C 00						.BYTE $00
   592 A74D 00						.BYTE $00
   592 A74E 00						.BYTE $00
   592 A74F 00						.BYTE $00
   592 A750 00						.BYTE $00
   592 A751 00						.BYTE $00
   592 A752 00						.BYTE $00
   592 A753 00						.BYTE $00
   592 A754 00						.BYTE $00
   592 A755 00						.BYTE $00
   592 A756 00						.BYTE $00
   592 A757 00						.BYTE $00
   592 A758 00						.BYTE $00
   592 A759 00						.BYTE $00
   592 A75A 00						.BYTE $00
   592 A75B 00						.BYTE $00
   592 A75C 00						.BYTE $00
   592 A75D 00						.BYTE $00
   592 A75E 00						.BYTE $00
   592 A75F 00						.BYTE $00
   592 A760 00						.BYTE $00
   592 A761 00						.BYTE $00
   592 A762 00						.BYTE $00
   592 A763 00						.BYTE $00
   592 A764 00						.BYTE $00
   592 A765 00						.BYTE $00
   592 A766 00						.BYTE $00
   592 A767 00						.BYTE $00
   592 A768 00						.BYTE $00
   592 A769 00						.BYTE $00
   592 A76A 00						.BYTE $00
   592 A76B 00						.BYTE $00
   592 A76C 00						.BYTE $00
   592 A76D 00						.BYTE $00
   592 A76E 00						.BYTE $00
   592 A76F 00						.BYTE $00
   592 A770 00						.BYTE $00
   592 A771 00						.BYTE $00
   592 A772 00						.BYTE $00
   592 A773 00						.BYTE $00
   592 A774 00						.BYTE $00
   592 A775 00						.BYTE $00
   592 A776 00						.BYTE $00
   592 A777 00						.BYTE $00
   592 A778 00						.BYTE $00
   592 A779 00						.BYTE $00
   592 A77A 00						.BYTE $00
   592 A77B 00						.BYTE $00
   592 A77C 00						.BYTE $00
   592 A77D 00						.BYTE $00
   592 A77E 00						.BYTE $00
   592 A77F 00						.BYTE $00
   592 A780 00						.BYTE $00
   592 A781 00						.BYTE $00
   592 A782 00						.BYTE $00
   592 A783 00						.BYTE $00
   592 A784 00						.BYTE $00
   592 A785 00						.BYTE $00
   592 A786 00						.BYTE $00
   592 A787 00						.BYTE $00
   592 A788 00						.BYTE $00
   592 A789 00						.BYTE $00
   592 A78A 00						.BYTE $00
   592 A78B 00						.BYTE $00
   592 A78C 00						.BYTE $00
   592 A78D 00						.BYTE $00
   592 A78E 00						.BYTE $00
   592 A78F 00						.BYTE $00
   592 A790 00						.BYTE $00
   592 A791 00						.BYTE $00
   592 A792 00						.BYTE $00
   592 A793 00						.BYTE $00
   592 A794 00						.BYTE $00
   592 A795 00						.BYTE $00
   592 A796 00						.BYTE $00
   592 A797 00						.BYTE $00
   592 A798 00						.BYTE $00
   592 A799 00						.BYTE $00
   592 A79A 00						.BYTE $00
   592 A79B 00						.BYTE $00
   592 A79C 00						.BYTE $00
   592 A79D 00						.BYTE $00
   592 A79E 00						.BYTE $00
   592 A79F 00						.BYTE $00
   592 A7A0 00						.BYTE $00
   592 A7A1 00						.BYTE $00
   592 A7A2 00						.BYTE $00
   592 A7A3 00						.BYTE $00
   592 A7A4 00						.BYTE $00
   592 A7A5 00						.BYTE $00
   592 A7A6 00						.BYTE $00
   592 A7A7 00						.BYTE $00
   592 A7A8 00						.BYTE $00
   592 A7A9 00						.BYTE $00
   592 A7AA 00						.BYTE $00
   592 A7AB 00						.BYTE $00
   592 A7AC 00						.BYTE $00
   592 A7AD 00						.BYTE $00
   592 A7AE 00						.BYTE $00
   592 A7AF 00						.BYTE $00
   592 A7B0 00						.BYTE $00
   592 A7B1 00						.BYTE $00
   592 A7B2 00						.BYTE $00
   592 A7B3 00						.BYTE $00
   592 A7B4 00						.BYTE $00
   592 A7B5 00						.BYTE $00
   592 A7B6 00						.BYTE $00
   592 A7B7 00						.BYTE $00
   592 A7B8 00						.BYTE $00
   592 A7B9 00						.BYTE $00
   592 A7BA 00						.BYTE $00
   592 A7BB 00						.BYTE $00
   592 A7BC 00						.BYTE $00
   592 A7BD 00						.BYTE $00
   592 A7BE 00						.BYTE $00
   592 A7BF 00						.BYTE $00
   592 A7C0 00						.BYTE $00
   592 A7C1 00						.BYTE $00
   592 A7C2 00						.BYTE $00
   592 A7C3 00						.BYTE $00
   592 A7C4 00						.BYTE $00
   592 A7C5 00						.BYTE $00
   592 A7C6 00						.BYTE $00
   592 A7C7 00						.BYTE $00
   592 A7C8 00						.BYTE $00
   592 A7C9 00						.BYTE $00
   592 A7CA 00						.BYTE $00
   592 A7CB 00						.BYTE $00
   592 A7CC 00						.BYTE $00
   592 A7CD 00						.BYTE $00
   592 A7CE 00						.BYTE $00
   592 A7CF 00						.BYTE $00
   592 A7D0 00						.BYTE $00
   592 A7D1 00						.BYTE $00
   592 A7D2 00						.BYTE $00
   592 A7D3 00						.BYTE $00
   592 A7D4 00						.BYTE $00
   592 A7D5 00						.BYTE $00
   592 A7D6 00						.BYTE $00
   592 A7D7 00						.BYTE $00
   592 A7D8 00						.BYTE $00
   592 A7D9 00						.BYTE $00
   592 A7DA 00						.BYTE $00
   592 A7DB 00						.BYTE $00
   592 A7DC 00						.BYTE $00
   592 A7DD 00						.BYTE $00
   592 A7DE 00						.BYTE $00
   592 A7DF 00						.BYTE $00
   592 A7E0 00						.BYTE $00
   592 A7E1 00						.BYTE $00
   592 A7E2 00						.BYTE $00
   592 A7E3 00						.BYTE $00
   592 A7E4 00						.BYTE $00
   592 A7E5 00						.BYTE $00
   592 A7E6 00						.BYTE $00
   592 A7E7 00						.BYTE $00
   592 A7E8 00						.BYTE $00
   592 A7E9 00						.BYTE $00
   592 A7EA 00						.BYTE $00
   592 A7EB 00						.BYTE $00
   592 A7EC 00						.BYTE $00
   592 A7ED 00						.BYTE $00
   592 A7EE 00						.BYTE $00
   592 A7EF 00						.BYTE $00
   592 A7F0 00						.BYTE $00
   592 A7F1 00						.BYTE $00
   592 A7F2 00						.BYTE $00
   592 A7F3 00						.BYTE $00
   592 A7F4 00						.BYTE $00
   592 A7F5 00						.BYTE $00
   592 A7F6 00						.BYTE $00
   592 A7F7 00						.BYTE $00
   592 A7F8 00						.BYTE $00
   592 A7F9 00						.BYTE $00
   592 A7FA 00						.BYTE $00
   592 A7FB 00						.BYTE $00
   592 A7FC 00						.BYTE $00
   592 A7FD 00						.BYTE $00
   592 A7FE 00						.BYTE $00
   592 A7FF 00						.BYTE $00
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   594 						
   595 				;****	Fonts Include 
   596 				;
   597 A800					org GameFontAddress
   598 A800 00 00 00 00 00 00 + 		ins "Data/scroller.fnt"					; Gemes font/tile file
   599 						
   600 AC00					org TextFontAddress
   601 AC00 00 00 00 00 00 00 + 		ins "Data/atari.fnt"					; Systems font file 
   602 										
   603 				;***** Game Data area
   604 				;
   605 B000					org GameScrnAddress						; address of game data area
   606 						.rept $1000								; 4K of memory
   607 							.BYTE $00
   608 						.ENDR
   608 						.endr
Source: REPT
   607 B000 00						.BYTE $00
   607 B001 00						.BYTE $00
   607 B002 00						.BYTE $00
   607 B003 00						.BYTE $00
   607 B004 00						.BYTE $00
   607 B005 00						.BYTE $00
   607 B006 00						.BYTE $00
   607 B007 00						.BYTE $00
   607 B008 00						.BYTE $00
   607 B009 00						.BYTE $00
   607 B00A 00						.BYTE $00
   607 B00B 00						.BYTE $00
   607 B00C 00						.BYTE $00
   607 B00D 00						.BYTE $00
   607 B00E 00						.BYTE $00
   607 B00F 00						.BYTE $00
   607 B010 00						.BYTE $00
   607 B011 00						.BYTE $00
   607 B012 00						.BYTE $00
   607 B013 00						.BYTE $00
   607 B014 00						.BYTE $00
   607 B015 00						.BYTE $00
   607 B016 00						.BYTE $00
   607 B017 00						.BYTE $00
   607 B018 00						.BYTE $00
   607 B019 00						.BYTE $00
   607 B01A 00						.BYTE $00
   607 B01B 00						.BYTE $00
   607 B01C 00						.BYTE $00
   607 B01D 00						.BYTE $00
   607 B01E 00						.BYTE $00
   607 B01F 00						.BYTE $00
   607 B020 00						.BYTE $00
   607 B021 00						.BYTE $00
   607 B022 00						.BYTE $00
   607 B023 00						.BYTE $00
   607 B024 00						.BYTE $00
   607 B025 00						.BYTE $00
   607 B026 00						.BYTE $00
   607 B027 00						.BYTE $00
   607 B028 00						.BYTE $00
   607 B029 00						.BYTE $00
   607 B02A 00						.BYTE $00
   607 B02B 00						.BYTE $00
   607 B02C 00						.BYTE $00
   607 B02D 00						.BYTE $00
   607 B02E 00						.BYTE $00
   607 B02F 00						.BYTE $00
   607 B030 00						.BYTE $00
   607 B031 00						.BYTE $00
   607 B032 00						.BYTE $00
   607 B033 00						.BYTE $00
   607 B034 00						.BYTE $00
   607 B035 00						.BYTE $00
   607 B036 00						.BYTE $00
   607 B037 00						.BYTE $00
   607 B038 00						.BYTE $00
   607 B039 00						.BYTE $00
   607 B03A 00						.BYTE $00
   607 B03B 00						.BYTE $00
   607 B03C 00						.BYTE $00
   607 B03D 00						.BYTE $00
   607 B03E 00						.BYTE $00
   607 B03F 00						.BYTE $00
   607 B040 00						.BYTE $00
   607 B041 00						.BYTE $00
   607 B042 00						.BYTE $00
   607 B043 00						.BYTE $00
   607 B044 00						.BYTE $00
   607 B045 00						.BYTE $00
   607 B046 00						.BYTE $00
   607 B047 00						.BYTE $00
   607 B048 00						.BYTE $00
   607 B049 00						.BYTE $00
   607 B04A 00						.BYTE $00
   607 B04B 00						.BYTE $00
   607 B04C 00						.BYTE $00
   607 B04D 00						.BYTE $00
   607 B04E 00						.BYTE $00
   607 B04F 00						.BYTE $00
   607 B050 00						.BYTE $00
   607 B051 00						.BYTE $00
   607 B052 00						.BYTE $00
   607 B053 00						.BYTE $00
   607 B054 00						.BYTE $00
   607 B055 00						.BYTE $00
   607 B056 00						.BYTE $00
   607 B057 00						.BYTE $00
   607 B058 00						.BYTE $00
   607 B059 00						.BYTE $00
   607 B05A 00						.BYTE $00
   607 B05B 00						.BYTE $00
   607 B05C 00						.BYTE $00
   607 B05D 00						.BYTE $00
   607 B05E 00						.BYTE $00
   607 B05F 00						.BYTE $00
   607 B060 00						.BYTE $00
   607 B061 00						.BYTE $00
   607 B062 00						.BYTE $00
   607 B063 00						.BYTE $00
   607 B064 00						.BYTE $00
   607 B065 00						.BYTE $00
   607 B066 00						.BYTE $00
   607 B067 00						.BYTE $00
   607 B068 00						.BYTE $00
   607 B069 00						.BYTE $00
   607 B06A 00						.BYTE $00
   607 B06B 00						.BYTE $00
   607 B06C 00						.BYTE $00
   607 B06D 00						.BYTE $00
   607 B06E 00						.BYTE $00
   607 B06F 00						.BYTE $00
   607 B070 00						.BYTE $00
   607 B071 00						.BYTE $00
   607 B072 00						.BYTE $00
   607 B073 00						.BYTE $00
   607 B074 00						.BYTE $00
   607 B075 00						.BYTE $00
   607 B076 00						.BYTE $00
   607 B077 00						.BYTE $00
   607 B078 00						.BYTE $00
   607 B079 00						.BYTE $00
   607 B07A 00						.BYTE $00
   607 B07B 00						.BYTE $00
   607 B07C 00						.BYTE $00
   607 B07D 00						.BYTE $00
   607 B07E 00						.BYTE $00
   607 B07F 00						.BYTE $00
   607 B080 00						.BYTE $00
   607 B081 00						.BYTE $00
   607 B082 00						.BYTE $00
   607 B083 00						.BYTE $00
   607 B084 00						.BYTE $00
   607 B085 00						.BYTE $00
   607 B086 00						.BYTE $00
   607 B087 00						.BYTE $00
   607 B088 00						.BYTE $00
   607 B089 00						.BYTE $00
   607 B08A 00						.BYTE $00
   607 B08B 00						.BYTE $00
   607 B08C 00						.BYTE $00
   607 B08D 00						.BYTE $00
   607 B08E 00						.BYTE $00
   607 B08F 00						.BYTE $00
   607 B090 00						.BYTE $00
   607 B091 00						.BYTE $00
   607 B092 00						.BYTE $00
   607 B093 00						.BYTE $00
   607 B094 00						.BYTE $00
   607 B095 00						.BYTE $00
   607 B096 00						.BYTE $00
   607 B097 00						.BYTE $00
   607 B098 00						.BYTE $00
   607 B099 00						.BYTE $00
   607 B09A 00						.BYTE $00
   607 B09B 00						.BYTE $00
   607 B09C 00						.BYTE $00
   607 B09D 00						.BYTE $00
   607 B09E 00						.BYTE $00
   607 B09F 00						.BYTE $00
   607 B0A0 00						.BYTE $00
   607 B0A1 00						.BYTE $00
   607 B0A2 00						.BYTE $00
   607 B0A3 00						.BYTE $00
   607 B0A4 00						.BYTE $00
   607 B0A5 00						.BYTE $00
   607 B0A6 00						.BYTE $00
   607 B0A7 00						.BYTE $00
   607 B0A8 00						.BYTE $00
   607 B0A9 00						.BYTE $00
   607 B0AA 00						.BYTE $00
   607 B0AB 00						.BYTE $00
   607 B0AC 00						.BYTE $00
   607 B0AD 00						.BYTE $00
   607 B0AE 00						.BYTE $00
   607 B0AF 00						.BYTE $00
   607 B0B0 00						.BYTE $00
   607 B0B1 00						.BYTE $00
   607 B0B2 00						.BYTE $00
   607 B0B3 00						.BYTE $00
   607 B0B4 00						.BYTE $00
   607 B0B5 00						.BYTE $00
   607 B0B6 00						.BYTE $00
   607 B0B7 00						.BYTE $00
   607 B0B8 00						.BYTE $00
   607 B0B9 00						.BYTE $00
   607 B0BA 00						.BYTE $00
   607 B0BB 00						.BYTE $00
   607 B0BC 00						.BYTE $00
   607 B0BD 00						.BYTE $00
   607 B0BE 00						.BYTE $00
   607 B0BF 00						.BYTE $00
   607 B0C0 00						.BYTE $00
   607 B0C1 00						.BYTE $00
   607 B0C2 00						.BYTE $00
   607 B0C3 00						.BYTE $00
   607 B0C4 00						.BYTE $00
   607 B0C5 00						.BYTE $00
   607 B0C6 00						.BYTE $00
   607 B0C7 00						.BYTE $00
   607 B0C8 00						.BYTE $00
   607 B0C9 00						.BYTE $00
   607 B0CA 00						.BYTE $00
   607 B0CB 00						.BYTE $00
   607 B0CC 00						.BYTE $00
   607 B0CD 00						.BYTE $00
   607 B0CE 00						.BYTE $00
   607 B0CF 00						.BYTE $00
   607 B0D0 00						.BYTE $00
   607 B0D1 00						.BYTE $00
   607 B0D2 00						.BYTE $00
   607 B0D3 00						.BYTE $00
   607 B0D4 00						.BYTE $00
   607 B0D5 00						.BYTE $00
   607 B0D6 00						.BYTE $00
   607 B0D7 00						.BYTE $00
   607 B0D8 00						.BYTE $00
   607 B0D9 00						.BYTE $00
   607 B0DA 00						.BYTE $00
   607 B0DB 00						.BYTE $00
   607 B0DC 00						.BYTE $00
   607 B0DD 00						.BYTE $00
   607 B0DE 00						.BYTE $00
   607 B0DF 00						.BYTE $00
   607 B0E0 00						.BYTE $00
   607 B0E1 00						.BYTE $00
   607 B0E2 00						.BYTE $00
   607 B0E3 00						.BYTE $00
   607 B0E4 00						.BYTE $00
   607 B0E5 00						.BYTE $00
   607 B0E6 00						.BYTE $00
   607 B0E7 00						.BYTE $00
   607 B0E8 00						.BYTE $00
   607 B0E9 00						.BYTE $00
   607 B0EA 00						.BYTE $00
   607 B0EB 00						.BYTE $00
   607 B0EC 00						.BYTE $00
   607 B0ED 00						.BYTE $00
   607 B0EE 00						.BYTE $00
   607 B0EF 00						.BYTE $00
   607 B0F0 00						.BYTE $00
   607 B0F1 00						.BYTE $00
   607 B0F2 00						.BYTE $00
   607 B0F3 00						.BYTE $00
   607 B0F4 00						.BYTE $00
   607 B0F5 00						.BYTE $00
   607 B0F6 00						.BYTE $00
   607 B0F7 00						.BYTE $00
   607 B0F8 00						.BYTE $00
   607 B0F9 00						.BYTE $00
   607 B0FA 00						.BYTE $00
   607 B0FB 00						.BYTE $00
   607 B0FC 00						.BYTE $00
   607 B0FD 00						.BYTE $00
   607 B0FE 00						.BYTE $00
   607 B0FF 00						.BYTE $00
   607 B100 00						.BYTE $00
   607 B101 00						.BYTE $00
   607 B102 00						.BYTE $00
   607 B103 00						.BYTE $00
   607 B104 00						.BYTE $00
   607 B105 00						.BYTE $00
   607 B106 00						.BYTE $00
   607 B107 00						.BYTE $00
   607 B108 00						.BYTE $00
   607 B109 00						.BYTE $00
   607 B10A 00						.BYTE $00
   607 B10B 00						.BYTE $00
   607 B10C 00						.BYTE $00
   607 B10D 00						.BYTE $00
   607 B10E 00						.BYTE $00
   607 B10F 00						.BYTE $00
   607 B110 00						.BYTE $00
   607 B111 00						.BYTE $00
   607 B112 00						.BYTE $00
   607 B113 00						.BYTE $00
   607 B114 00						.BYTE $00
   607 B115 00						.BYTE $00
   607 B116 00						.BYTE $00
   607 B117 00						.BYTE $00
   607 B118 00						.BYTE $00
   607 B119 00						.BYTE $00
   607 B11A 00						.BYTE $00
   607 B11B 00						.BYTE $00
   607 B11C 00						.BYTE $00
   607 B11D 00						.BYTE $00
   607 B11E 00						.BYTE $00
   607 B11F 00						.BYTE $00
   607 B120 00						.BYTE $00
   607 B121 00						.BYTE $00
   607 B122 00						.BYTE $00
   607 B123 00						.BYTE $00
   607 B124 00						.BYTE $00
   607 B125 00						.BYTE $00
   607 B126 00						.BYTE $00
   607 B127 00						.BYTE $00
   607 B128 00						.BYTE $00
   607 B129 00						.BYTE $00
   607 B12A 00						.BYTE $00
   607 B12B 00						.BYTE $00
   607 B12C 00						.BYTE $00
   607 B12D 00						.BYTE $00
   607 B12E 00						.BYTE $00
   607 B12F 00						.BYTE $00
   607 B130 00						.BYTE $00
   607 B131 00						.BYTE $00
   607 B132 00						.BYTE $00
   607 B133 00						.BYTE $00
   607 B134 00						.BYTE $00
   607 B135 00						.BYTE $00
   607 B136 00						.BYTE $00
   607 B137 00						.BYTE $00
   607 B138 00						.BYTE $00
   607 B139 00						.BYTE $00
   607 B13A 00						.BYTE $00
   607 B13B 00						.BYTE $00
   607 B13C 00						.BYTE $00
   607 B13D 00						.BYTE $00
   607 B13E 00						.BYTE $00
   607 B13F 00						.BYTE $00
   607 B140 00						.BYTE $00
   607 B141 00						.BYTE $00
   607 B142 00						.BYTE $00
   607 B143 00						.BYTE $00
   607 B144 00						.BYTE $00
   607 B145 00						.BYTE $00
   607 B146 00						.BYTE $00
   607 B147 00						.BYTE $00
   607 B148 00						.BYTE $00
   607 B149 00						.BYTE $00
   607 B14A 00						.BYTE $00
   607 B14B 00						.BYTE $00
   607 B14C 00						.BYTE $00
   607 B14D 00						.BYTE $00
   607 B14E 00						.BYTE $00
   607 B14F 00						.BYTE $00
   607 B150 00						.BYTE $00
   607 B151 00						.BYTE $00
   607 B152 00						.BYTE $00
   607 B153 00						.BYTE $00
   607 B154 00						.BYTE $00
   607 B155 00						.BYTE $00
   607 B156 00						.BYTE $00
   607 B157 00						.BYTE $00
   607 B158 00						.BYTE $00
   607 B159 00						.BYTE $00
   607 B15A 00						.BYTE $00
   607 B15B 00						.BYTE $00
   607 B15C 00						.BYTE $00
   607 B15D 00						.BYTE $00
   607 B15E 00						.BYTE $00
   607 B15F 00						.BYTE $00
   607 B160 00						.BYTE $00
   607 B161 00						.BYTE $00
   607 B162 00						.BYTE $00
   607 B163 00						.BYTE $00
   607 B164 00						.BYTE $00
   607 B165 00						.BYTE $00
   607 B166 00						.BYTE $00
   607 B167 00						.BYTE $00
   607 B168 00						.BYTE $00
   607 B169 00						.BYTE $00
   607 B16A 00						.BYTE $00
   607 B16B 00						.BYTE $00
   607 B16C 00						.BYTE $00
   607 B16D 00						.BYTE $00
   607 B16E 00						.BYTE $00
   607 B16F 00						.BYTE $00
   607 B170 00						.BYTE $00
   607 B171 00						.BYTE $00
   607 B172 00						.BYTE $00
   607 B173 00						.BYTE $00
   607 B174 00						.BYTE $00
   607 B175 00						.BYTE $00
   607 B176 00						.BYTE $00
   607 B177 00						.BYTE $00
   607 B178 00						.BYTE $00
   607 B179 00						.BYTE $00
   607 B17A 00						.BYTE $00
   607 B17B 00						.BYTE $00
   607 B17C 00						.BYTE $00
   607 B17D 00						.BYTE $00
   607 B17E 00						.BYTE $00
   607 B17F 00						.BYTE $00
   607 B180 00						.BYTE $00
   607 B181 00						.BYTE $00
   607 B182 00						.BYTE $00
   607 B183 00						.BYTE $00
   607 B184 00						.BYTE $00
   607 B185 00						.BYTE $00
   607 B186 00						.BYTE $00
   607 B187 00						.BYTE $00
   607 B188 00						.BYTE $00
   607 B189 00						.BYTE $00
   607 B18A 00						.BYTE $00
   607 B18B 00						.BYTE $00
   607 B18C 00						.BYTE $00
   607 B18D 00						.BYTE $00
   607 B18E 00						.BYTE $00
   607 B18F 00						.BYTE $00
   607 B190 00						.BYTE $00
   607 B191 00						.BYTE $00
   607 B192 00						.BYTE $00
   607 B193 00						.BYTE $00
   607 B194 00						.BYTE $00
   607 B195 00						.BYTE $00
   607 B196 00						.BYTE $00
   607 B197 00						.BYTE $00
   607 B198 00						.BYTE $00
   607 B199 00						.BYTE $00
   607 B19A 00						.BYTE $00
   607 B19B 00						.BYTE $00
   607 B19C 00						.BYTE $00
   607 B19D 00						.BYTE $00
   607 B19E 00						.BYTE $00
   607 B19F 00						.BYTE $00
   607 B1A0 00						.BYTE $00
   607 B1A1 00						.BYTE $00
   607 B1A2 00						.BYTE $00
   607 B1A3 00						.BYTE $00
   607 B1A4 00						.BYTE $00
   607 B1A5 00						.BYTE $00
   607 B1A6 00						.BYTE $00
   607 B1A7 00						.BYTE $00
   607 B1A8 00						.BYTE $00
   607 B1A9 00						.BYTE $00
   607 B1AA 00						.BYTE $00
   607 B1AB 00						.BYTE $00
   607 B1AC 00						.BYTE $00
   607 B1AD 00						.BYTE $00
   607 B1AE 00						.BYTE $00
   607 B1AF 00						.BYTE $00
   607 B1B0 00						.BYTE $00
   607 B1B1 00						.BYTE $00
   607 B1B2 00						.BYTE $00
   607 B1B3 00						.BYTE $00
   607 B1B4 00						.BYTE $00
   607 B1B5 00						.BYTE $00
   607 B1B6 00						.BYTE $00
   607 B1B7 00						.BYTE $00
   607 B1B8 00						.BYTE $00
   607 B1B9 00						.BYTE $00
   607 B1BA 00						.BYTE $00
   607 B1BB 00						.BYTE $00
   607 B1BC 00						.BYTE $00
   607 B1BD 00						.BYTE $00
   607 B1BE 00						.BYTE $00
   607 B1BF 00						.BYTE $00
   607 B1C0 00						.BYTE $00
   607 B1C1 00						.BYTE $00
   607 B1C2 00						.BYTE $00
   607 B1C3 00						.BYTE $00
   607 B1C4 00						.BYTE $00
   607 B1C5 00						.BYTE $00
   607 B1C6 00						.BYTE $00
   607 B1C7 00						.BYTE $00
   607 B1C8 00						.BYTE $00
   607 B1C9 00						.BYTE $00
   607 B1CA 00						.BYTE $00
   607 B1CB 00						.BYTE $00
   607 B1CC 00						.BYTE $00
   607 B1CD 00						.BYTE $00
   607 B1CE 00						.BYTE $00
   607 B1CF 00						.BYTE $00
   607 B1D0 00						.BYTE $00
   607 B1D1 00						.BYTE $00
   607 B1D2 00						.BYTE $00
   607 B1D3 00						.BYTE $00
   607 B1D4 00						.BYTE $00
   607 B1D5 00						.BYTE $00
   607 B1D6 00						.BYTE $00
   607 B1D7 00						.BYTE $00
   607 B1D8 00						.BYTE $00
   607 B1D9 00						.BYTE $00
   607 B1DA 00						.BYTE $00
   607 B1DB 00						.BYTE $00
   607 B1DC 00						.BYTE $00
   607 B1DD 00						.BYTE $00
   607 B1DE 00						.BYTE $00
   607 B1DF 00						.BYTE $00
   607 B1E0 00						.BYTE $00
   607 B1E1 00						.BYTE $00
   607 B1E2 00						.BYTE $00
   607 B1E3 00						.BYTE $00
   607 B1E4 00						.BYTE $00
   607 B1E5 00						.BYTE $00
   607 B1E6 00						.BYTE $00
   607 B1E7 00						.BYTE $00
   607 B1E8 00						.BYTE $00
   607 B1E9 00						.BYTE $00
   607 B1EA 00						.BYTE $00
   607 B1EB 00						.BYTE $00
   607 B1EC 00						.BYTE $00
   607 B1ED 00						.BYTE $00
   607 B1EE 00						.BYTE $00
   607 B1EF 00						.BYTE $00
   607 B1F0 00						.BYTE $00
   607 B1F1 00						.BYTE $00
   607 B1F2 00						.BYTE $00
   607 B1F3 00						.BYTE $00
   607 B1F4 00						.BYTE $00
   607 B1F5 00						.BYTE $00
   607 B1F6 00						.BYTE $00
   607 B1F7 00						.BYTE $00
   607 B1F8 00						.BYTE $00
   607 B1F9 00						.BYTE $00
   607 B1FA 00						.BYTE $00
   607 B1FB 00						.BYTE $00
   607 B1FC 00						.BYTE $00
   607 B1FD 00						.BYTE $00
   607 B1FE 00						.BYTE $00
   607 B1FF 00						.BYTE $00
   607 B200 00						.BYTE $00
   607 B201 00						.BYTE $00
   607 B202 00						.BYTE $00
   607 B203 00						.BYTE $00
   607 B204 00						.BYTE $00
   607 B205 00						.BYTE $00
   607 B206 00						.BYTE $00
   607 B207 00						.BYTE $00
   607 B208 00						.BYTE $00
   607 B209 00						.BYTE $00
   607 B20A 00						.BYTE $00
   607 B20B 00						.BYTE $00
   607 B20C 00						.BYTE $00
   607 B20D 00						.BYTE $00
   607 B20E 00						.BYTE $00
   607 B20F 00						.BYTE $00
   607 B210 00						.BYTE $00
   607 B211 00						.BYTE $00
   607 B212 00						.BYTE $00
   607 B213 00						.BYTE $00
   607 B214 00						.BYTE $00
   607 B215 00						.BYTE $00
   607 B216 00						.BYTE $00
   607 B217 00						.BYTE $00
   607 B218 00						.BYTE $00
   607 B219 00						.BYTE $00
   607 B21A 00						.BYTE $00
   607 B21B 00						.BYTE $00
   607 B21C 00						.BYTE $00
   607 B21D 00						.BYTE $00
   607 B21E 00						.BYTE $00
   607 B21F 00						.BYTE $00
   607 B220 00						.BYTE $00
   607 B221 00						.BYTE $00
   607 B222 00						.BYTE $00
   607 B223 00						.BYTE $00
   607 B224 00						.BYTE $00
   607 B225 00						.BYTE $00
   607 B226 00						.BYTE $00
   607 B227 00						.BYTE $00
   607 B228 00						.BYTE $00
   607 B229 00						.BYTE $00
   607 B22A 00						.BYTE $00
   607 B22B 00						.BYTE $00
   607 B22C 00						.BYTE $00
   607 B22D 00						.BYTE $00
   607 B22E 00						.BYTE $00
   607 B22F 00						.BYTE $00
   607 B230 00						.BYTE $00
   607 B231 00						.BYTE $00
   607 B232 00						.BYTE $00
   607 B233 00						.BYTE $00
   607 B234 00						.BYTE $00
   607 B235 00						.BYTE $00
   607 B236 00						.BYTE $00
   607 B237 00						.BYTE $00
   607 B238 00						.BYTE $00
   607 B239 00						.BYTE $00
   607 B23A 00						.BYTE $00
   607 B23B 00						.BYTE $00
   607 B23C 00						.BYTE $00
   607 B23D 00						.BYTE $00
   607 B23E 00						.BYTE $00
   607 B23F 00						.BYTE $00
   607 B240 00						.BYTE $00
   607 B241 00						.BYTE $00
   607 B242 00						.BYTE $00
   607 B243 00						.BYTE $00
   607 B244 00						.BYTE $00
   607 B245 00						.BYTE $00
   607 B246 00						.BYTE $00
   607 B247 00						.BYTE $00
   607 B248 00						.BYTE $00
   607 B249 00						.BYTE $00
   607 B24A 00						.BYTE $00
   607 B24B 00						.BYTE $00
   607 B24C 00						.BYTE $00
   607 B24D 00						.BYTE $00
   607 B24E 00						.BYTE $00
   607 B24F 00						.BYTE $00
   607 B250 00						.BYTE $00
   607 B251 00						.BYTE $00
   607 B252 00						.BYTE $00
   607 B253 00						.BYTE $00
   607 B254 00						.BYTE $00
   607 B255 00						.BYTE $00
   607 B256 00						.BYTE $00
   607 B257 00						.BYTE $00
   607 B258 00						.BYTE $00
   607 B259 00						.BYTE $00
   607 B25A 00						.BYTE $00
   607 B25B 00						.BYTE $00
   607 B25C 00						.BYTE $00
   607 B25D 00						.BYTE $00
   607 B25E 00						.BYTE $00
   607 B25F 00						.BYTE $00
   607 B260 00						.BYTE $00
   607 B261 00						.BYTE $00
   607 B262 00						.BYTE $00
   607 B263 00						.BYTE $00
   607 B264 00						.BYTE $00
   607 B265 00						.BYTE $00
   607 B266 00						.BYTE $00
   607 B267 00						.BYTE $00
   607 B268 00						.BYTE $00
   607 B269 00						.BYTE $00
   607 B26A 00						.BYTE $00
   607 B26B 00						.BYTE $00
   607 B26C 00						.BYTE $00
   607 B26D 00						.BYTE $00
   607 B26E 00						.BYTE $00
   607 B26F 00						.BYTE $00
   607 B270 00						.BYTE $00
   607 B271 00						.BYTE $00
   607 B272 00						.BYTE $00
   607 B273 00						.BYTE $00
   607 B274 00						.BYTE $00
   607 B275 00						.BYTE $00
   607 B276 00						.BYTE $00
   607 B277 00						.BYTE $00
   607 B278 00						.BYTE $00
   607 B279 00						.BYTE $00
   607 B27A 00						.BYTE $00
   607 B27B 00						.BYTE $00
   607 B27C 00						.BYTE $00
   607 B27D 00						.BYTE $00
   607 B27E 00						.BYTE $00
   607 B27F 00						.BYTE $00
   607 B280 00						.BYTE $00
   607 B281 00						.BYTE $00
   607 B282 00						.BYTE $00
   607 B283 00						.BYTE $00
   607 B284 00						.BYTE $00
   607 B285 00						.BYTE $00
   607 B286 00						.BYTE $00
   607 B287 00						.BYTE $00
   607 B288 00						.BYTE $00
   607 B289 00						.BYTE $00
   607 B28A 00						.BYTE $00
   607 B28B 00						.BYTE $00
   607 B28C 00						.BYTE $00
   607 B28D 00						.BYTE $00
   607 B28E 00						.BYTE $00
   607 B28F 00						.BYTE $00
   607 B290 00						.BYTE $00
   607 B291 00						.BYTE $00
   607 B292 00						.BYTE $00
   607 B293 00						.BYTE $00
   607 B294 00						.BYTE $00
   607 B295 00						.BYTE $00
   607 B296 00						.BYTE $00
   607 B297 00						.BYTE $00
   607 B298 00						.BYTE $00
   607 B299 00						.BYTE $00
   607 B29A 00						.BYTE $00
   607 B29B 00						.BYTE $00
   607 B29C 00						.BYTE $00
   607 B29D 00						.BYTE $00
   607 B29E 00						.BYTE $00
   607 B29F 00						.BYTE $00
   607 B2A0 00						.BYTE $00
   607 B2A1 00						.BYTE $00
   607 B2A2 00						.BYTE $00
   607 B2A3 00						.BYTE $00
   607 B2A4 00						.BYTE $00
   607 B2A5 00						.BYTE $00
   607 B2A6 00						.BYTE $00
   607 B2A7 00						.BYTE $00
   607 B2A8 00						.BYTE $00
   607 B2A9 00						.BYTE $00
   607 B2AA 00						.BYTE $00
   607 B2AB 00						.BYTE $00
   607 B2AC 00						.BYTE $00
   607 B2AD 00						.BYTE $00
   607 B2AE 00						.BYTE $00
   607 B2AF 00						.BYTE $00
   607 B2B0 00						.BYTE $00
   607 B2B1 00						.BYTE $00
   607 B2B2 00						.BYTE $00
   607 B2B3 00						.BYTE $00
   607 B2B4 00						.BYTE $00
   607 B2B5 00						.BYTE $00
   607 B2B6 00						.BYTE $00
   607 B2B7 00						.BYTE $00
   607 B2B8 00						.BYTE $00
   607 B2B9 00						.BYTE $00
   607 B2BA 00						.BYTE $00
   607 B2BB 00						.BYTE $00
   607 B2BC 00						.BYTE $00
   607 B2BD 00						.BYTE $00
   607 B2BE 00						.BYTE $00
   607 B2BF 00						.BYTE $00
   607 B2C0 00						.BYTE $00
   607 B2C1 00						.BYTE $00
   607 B2C2 00						.BYTE $00
   607 B2C3 00						.BYTE $00
   607 B2C4 00						.BYTE $00
   607 B2C5 00						.BYTE $00
   607 B2C6 00						.BYTE $00
   607 B2C7 00						.BYTE $00
   607 B2C8 00						.BYTE $00
   607 B2C9 00						.BYTE $00
   607 B2CA 00						.BYTE $00
   607 B2CB 00						.BYTE $00
   607 B2CC 00						.BYTE $00
   607 B2CD 00						.BYTE $00
   607 B2CE 00						.BYTE $00
   607 B2CF 00						.BYTE $00
   607 B2D0 00						.BYTE $00
   607 B2D1 00						.BYTE $00
   607 B2D2 00						.BYTE $00
   607 B2D3 00						.BYTE $00
   607 B2D4 00						.BYTE $00
   607 B2D5 00						.BYTE $00
   607 B2D6 00						.BYTE $00
   607 B2D7 00						.BYTE $00
   607 B2D8 00						.BYTE $00
   607 B2D9 00						.BYTE $00
   607 B2DA 00						.BYTE $00
   607 B2DB 00						.BYTE $00
   607 B2DC 00						.BYTE $00
   607 B2DD 00						.BYTE $00
   607 B2DE 00						.BYTE $00
   607 B2DF 00						.BYTE $00
   607 B2E0 00						.BYTE $00
   607 B2E1 00						.BYTE $00
   607 B2E2 00						.BYTE $00
   607 B2E3 00						.BYTE $00
   607 B2E4 00						.BYTE $00
   607 B2E5 00						.BYTE $00
   607 B2E6 00						.BYTE $00
   607 B2E7 00						.BYTE $00
   607 B2E8 00						.BYTE $00
   607 B2E9 00						.BYTE $00
   607 B2EA 00						.BYTE $00
   607 B2EB 00						.BYTE $00
   607 B2EC 00						.BYTE $00
   607 B2ED 00						.BYTE $00
   607 B2EE 00						.BYTE $00
   607 B2EF 00						.BYTE $00
   607 B2F0 00						.BYTE $00
   607 B2F1 00						.BYTE $00
   607 B2F2 00						.BYTE $00
   607 B2F3 00						.BYTE $00
   607 B2F4 00						.BYTE $00
   607 B2F5 00						.BYTE $00
   607 B2F6 00						.BYTE $00
   607 B2F7 00						.BYTE $00
   607 B2F8 00						.BYTE $00
   607 B2F9 00						.BYTE $00
   607 B2FA 00						.BYTE $00
   607 B2FB 00						.BYTE $00
   607 B2FC 00						.BYTE $00
   607 B2FD 00						.BYTE $00
   607 B2FE 00						.BYTE $00
   607 B2FF 00						.BYTE $00
   607 B300 00						.BYTE $00
   607 B301 00						.BYTE $00
   607 B302 00						.BYTE $00
   607 B303 00						.BYTE $00
   607 B304 00						.BYTE $00
   607 B305 00						.BYTE $00
   607 B306 00						.BYTE $00
   607 B307 00						.BYTE $00
   607 B308 00						.BYTE $00
   607 B309 00						.BYTE $00
   607 B30A 00						.BYTE $00
   607 B30B 00						.BYTE $00
   607 B30C 00						.BYTE $00
   607 B30D 00						.BYTE $00
   607 B30E 00						.BYTE $00
   607 B30F 00						.BYTE $00
   607 B310 00						.BYTE $00
   607 B311 00						.BYTE $00
   607 B312 00						.BYTE $00
   607 B313 00						.BYTE $00
   607 B314 00						.BYTE $00
   607 B315 00						.BYTE $00
   607 B316 00						.BYTE $00
   607 B317 00						.BYTE $00
   607 B318 00						.BYTE $00
   607 B319 00						.BYTE $00
   607 B31A 00						.BYTE $00
   607 B31B 00						.BYTE $00
   607 B31C 00						.BYTE $00
   607 B31D 00						.BYTE $00
   607 B31E 00						.BYTE $00
   607 B31F 00						.BYTE $00
   607 B320 00						.BYTE $00
   607 B321 00						.BYTE $00
   607 B322 00						.BYTE $00
   607 B323 00						.BYTE $00
   607 B324 00						.BYTE $00
   607 B325 00						.BYTE $00
   607 B326 00						.BYTE $00
   607 B327 00						.BYTE $00
   607 B328 00						.BYTE $00
   607 B329 00						.BYTE $00
   607 B32A 00						.BYTE $00
   607 B32B 00						.BYTE $00
   607 B32C 00						.BYTE $00
   607 B32D 00						.BYTE $00
   607 B32E 00						.BYTE $00
   607 B32F 00						.BYTE $00
   607 B330 00						.BYTE $00
   607 B331 00						.BYTE $00
   607 B332 00						.BYTE $00
   607 B333 00						.BYTE $00
   607 B334 00						.BYTE $00
   607 B335 00						.BYTE $00
   607 B336 00						.BYTE $00
   607 B337 00						.BYTE $00
   607 B338 00						.BYTE $00
   607 B339 00						.BYTE $00
   607 B33A 00						.BYTE $00
   607 B33B 00						.BYTE $00
   607 B33C 00						.BYTE $00
   607 B33D 00						.BYTE $00
   607 B33E 00						.BYTE $00
   607 B33F 00						.BYTE $00
   607 B340 00						.BYTE $00
   607 B341 00						.BYTE $00
   607 B342 00						.BYTE $00
   607 B343 00						.BYTE $00
   607 B344 00						.BYTE $00
   607 B345 00						.BYTE $00
   607 B346 00						.BYTE $00
   607 B347 00						.BYTE $00
   607 B348 00						.BYTE $00
   607 B349 00						.BYTE $00
   607 B34A 00						.BYTE $00
   607 B34B 00						.BYTE $00
   607 B34C 00						.BYTE $00
   607 B34D 00						.BYTE $00
   607 B34E 00						.BYTE $00
   607 B34F 00						.BYTE $00
   607 B350 00						.BYTE $00
   607 B351 00						.BYTE $00
   607 B352 00						.BYTE $00
   607 B353 00						.BYTE $00
   607 B354 00						.BYTE $00
   607 B355 00						.BYTE $00
   607 B356 00						.BYTE $00
   607 B357 00						.BYTE $00
   607 B358 00						.BYTE $00
   607 B359 00						.BYTE $00
   607 B35A 00						.BYTE $00
   607 B35B 00						.BYTE $00
   607 B35C 00						.BYTE $00
   607 B35D 00						.BYTE $00
   607 B35E 00						.BYTE $00
   607 B35F 00						.BYTE $00
   607 B360 00						.BYTE $00
   607 B361 00						.BYTE $00
   607 B362 00						.BYTE $00
   607 B363 00						.BYTE $00
   607 B364 00						.BYTE $00
   607 B365 00						.BYTE $00
   607 B366 00						.BYTE $00
   607 B367 00						.BYTE $00
   607 B368 00						.BYTE $00
   607 B369 00						.BYTE $00
   607 B36A 00						.BYTE $00
   607 B36B 00						.BYTE $00
   607 B36C 00						.BYTE $00
   607 B36D 00						.BYTE $00
   607 B36E 00						.BYTE $00
   607 B36F 00						.BYTE $00
   607 B370 00						.BYTE $00
   607 B371 00						.BYTE $00
   607 B372 00						.BYTE $00
   607 B373 00						.BYTE $00
   607 B374 00						.BYTE $00
   607 B375 00						.BYTE $00
   607 B376 00						.BYTE $00
   607 B377 00						.BYTE $00
   607 B378 00						.BYTE $00
   607 B379 00						.BYTE $00
   607 B37A 00						.BYTE $00
   607 B37B 00						.BYTE $00
   607 B37C 00						.BYTE $00
   607 B37D 00						.BYTE $00
   607 B37E 00						.BYTE $00
   607 B37F 00						.BYTE $00
   607 B380 00						.BYTE $00
   607 B381 00						.BYTE $00
   607 B382 00						.BYTE $00
   607 B383 00						.BYTE $00
   607 B384 00						.BYTE $00
   607 B385 00						.BYTE $00
   607 B386 00						.BYTE $00
   607 B387 00						.BYTE $00
   607 B388 00						.BYTE $00
   607 B389 00						.BYTE $00
   607 B38A 00						.BYTE $00
   607 B38B 00						.BYTE $00
   607 B38C 00						.BYTE $00
   607 B38D 00						.BYTE $00
   607 B38E 00						.BYTE $00
   607 B38F 00						.BYTE $00
   607 B390 00						.BYTE $00
   607 B391 00						.BYTE $00
   607 B392 00						.BYTE $00
   607 B393 00						.BYTE $00
   607 B394 00						.BYTE $00
   607 B395 00						.BYTE $00
   607 B396 00						.BYTE $00
   607 B397 00						.BYTE $00
   607 B398 00						.BYTE $00
   607 B399 00						.BYTE $00
   607 B39A 00						.BYTE $00
   607 B39B 00						.BYTE $00
   607 B39C 00						.BYTE $00
   607 B39D 00						.BYTE $00
   607 B39E 00						.BYTE $00
   607 B39F 00						.BYTE $00
   607 B3A0 00						.BYTE $00
   607 B3A1 00						.BYTE $00
   607 B3A2 00						.BYTE $00
   607 B3A3 00						.BYTE $00
   607 B3A4 00						.BYTE $00
   607 B3A5 00						.BYTE $00
   607 B3A6 00						.BYTE $00
   607 B3A7 00						.BYTE $00
   607 B3A8 00						.BYTE $00
   607 B3A9 00						.BYTE $00
   607 B3AA 00						.BYTE $00
   607 B3AB 00						.BYTE $00
   607 B3AC 00						.BYTE $00
   607 B3AD 00						.BYTE $00
   607 B3AE 00						.BYTE $00
   607 B3AF 00						.BYTE $00
   607 B3B0 00						.BYTE $00
   607 B3B1 00						.BYTE $00
   607 B3B2 00						.BYTE $00
   607 B3B3 00						.BYTE $00
   607 B3B4 00						.BYTE $00
   607 B3B5 00						.BYTE $00
   607 B3B6 00						.BYTE $00
   607 B3B7 00						.BYTE $00
   607 B3B8 00						.BYTE $00
   607 B3B9 00						.BYTE $00
   607 B3BA 00						.BYTE $00
   607 B3BB 00						.BYTE $00
   607 B3BC 00						.BYTE $00
   607 B3BD 00						.BYTE $00
   607 B3BE 00						.BYTE $00
   607 B3BF 00						.BYTE $00
   607 B3C0 00						.BYTE $00
   607 B3C1 00						.BYTE $00
   607 B3C2 00						.BYTE $00
   607 B3C3 00						.BYTE $00
   607 B3C4 00						.BYTE $00
   607 B3C5 00						.BYTE $00
   607 B3C6 00						.BYTE $00
   607 B3C7 00						.BYTE $00
   607 B3C8 00						.BYTE $00
   607 B3C9 00						.BYTE $00
   607 B3CA 00						.BYTE $00
   607 B3CB 00						.BYTE $00
   607 B3CC 00						.BYTE $00
   607 B3CD 00						.BYTE $00
   607 B3CE 00						.BYTE $00
   607 B3CF 00						.BYTE $00
   607 B3D0 00						.BYTE $00
   607 B3D1 00						.BYTE $00
   607 B3D2 00						.BYTE $00
   607 B3D3 00						.BYTE $00
   607 B3D4 00						.BYTE $00
   607 B3D5 00						.BYTE $00
   607 B3D6 00						.BYTE $00
   607 B3D7 00						.BYTE $00
   607 B3D8 00						.BYTE $00
   607 B3D9 00						.BYTE $00
   607 B3DA 00						.BYTE $00
   607 B3DB 00						.BYTE $00
   607 B3DC 00						.BYTE $00
   607 B3DD 00						.BYTE $00
   607 B3DE 00						.BYTE $00
   607 B3DF 00						.BYTE $00
   607 B3E0 00						.BYTE $00
   607 B3E1 00						.BYTE $00
   607 B3E2 00						.BYTE $00
   607 B3E3 00						.BYTE $00
   607 B3E4 00						.BYTE $00
   607 B3E5 00						.BYTE $00
   607 B3E6 00						.BYTE $00
   607 B3E7 00						.BYTE $00
   607 B3E8 00						.BYTE $00
   607 B3E9 00						.BYTE $00
   607 B3EA 00						.BYTE $00
   607 B3EB 00						.BYTE $00
   607 B3EC 00						.BYTE $00
   607 B3ED 00						.BYTE $00
   607 B3EE 00						.BYTE $00
   607 B3EF 00						.BYTE $00
   607 B3F0 00						.BYTE $00
   607 B3F1 00						.BYTE $00
   607 B3F2 00						.BYTE $00
   607 B3F3 00						.BYTE $00
   607 B3F4 00						.BYTE $00
   607 B3F5 00						.BYTE $00
   607 B3F6 00						.BYTE $00
   607 B3F7 00						.BYTE $00
   607 B3F8 00						.BYTE $00
   607 B3F9 00						.BYTE $00
   607 B3FA 00						.BYTE $00
   607 B3FB 00						.BYTE $00
   607 B3FC 00						.BYTE $00
   607 B3FD 00						.BYTE $00
   607 B3FE 00						.BYTE $00
   607 B3FF 00						.BYTE $00
   607 B400 00						.BYTE $00
   607 B401 00						.BYTE $00
   607 B402 00						.BYTE $00
   607 B403 00						.BYTE $00
   607 B404 00						.BYTE $00
   607 B405 00						.BYTE $00
   607 B406 00						.BYTE $00
   607 B407 00						.BYTE $00
   607 B408 00						.BYTE $00
   607 B409 00						.BYTE $00
   607 B40A 00						.BYTE $00
   607 B40B 00						.BYTE $00
   607 B40C 00						.BYTE $00
   607 B40D 00						.BYTE $00
   607 B40E 00						.BYTE $00
   607 B40F 00						.BYTE $00
   607 B410 00						.BYTE $00
   607 B411 00						.BYTE $00
   607 B412 00						.BYTE $00
   607 B413 00						.BYTE $00
   607 B414 00						.BYTE $00
   607 B415 00						.BYTE $00
   607 B416 00						.BYTE $00
   607 B417 00						.BYTE $00
   607 B418 00						.BYTE $00
   607 B419 00						.BYTE $00
   607 B41A 00						.BYTE $00
   607 B41B 00						.BYTE $00
   607 B41C 00						.BYTE $00
   607 B41D 00						.BYTE $00
   607 B41E 00						.BYTE $00
   607 B41F 00						.BYTE $00
   607 B420 00						.BYTE $00
   607 B421 00						.BYTE $00
   607 B422 00						.BYTE $00
   607 B423 00						.BYTE $00
   607 B424 00						.BYTE $00
   607 B425 00						.BYTE $00
   607 B426 00						.BYTE $00
   607 B427 00						.BYTE $00
   607 B428 00						.BYTE $00
   607 B429 00						.BYTE $00
   607 B42A 00						.BYTE $00
   607 B42B 00						.BYTE $00
   607 B42C 00						.BYTE $00
   607 B42D 00						.BYTE $00
   607 B42E 00						.BYTE $00
   607 B42F 00						.BYTE $00
   607 B430 00						.BYTE $00
   607 B431 00						.BYTE $00
   607 B432 00						.BYTE $00
   607 B433 00						.BYTE $00
   607 B434 00						.BYTE $00
   607 B435 00						.BYTE $00
   607 B436 00						.BYTE $00
   607 B437 00						.BYTE $00
   607 B438 00						.BYTE $00
   607 B439 00						.BYTE $00
   607 B43A 00						.BYTE $00
   607 B43B 00						.BYTE $00
   607 B43C 00						.BYTE $00
   607 B43D 00						.BYTE $00
   607 B43E 00						.BYTE $00
   607 B43F 00						.BYTE $00
   607 B440 00						.BYTE $00
   607 B441 00						.BYTE $00
   607 B442 00						.BYTE $00
   607 B443 00						.BYTE $00
   607 B444 00						.BYTE $00
   607 B445 00						.BYTE $00
   607 B446 00						.BYTE $00
   607 B447 00						.BYTE $00
   607 B448 00						.BYTE $00
   607 B449 00						.BYTE $00
   607 B44A 00						.BYTE $00
   607 B44B 00						.BYTE $00
   607 B44C 00						.BYTE $00
   607 B44D 00						.BYTE $00
   607 B44E 00						.BYTE $00
   607 B44F 00						.BYTE $00
   607 B450 00						.BYTE $00
   607 B451 00						.BYTE $00
   607 B452 00						.BYTE $00
   607 B453 00						.BYTE $00
   607 B454 00						.BYTE $00
   607 B455 00						.BYTE $00
   607 B456 00						.BYTE $00
   607 B457 00						.BYTE $00
   607 B458 00						.BYTE $00
   607 B459 00						.BYTE $00
   607 B45A 00						.BYTE $00
   607 B45B 00						.BYTE $00
   607 B45C 00						.BYTE $00
   607 B45D 00						.BYTE $00
   607 B45E 00						.BYTE $00
   607 B45F 00						.BYTE $00
   607 B460 00						.BYTE $00
   607 B461 00						.BYTE $00
   607 B462 00						.BYTE $00
   607 B463 00						.BYTE $00
   607 B464 00						.BYTE $00
   607 B465 00						.BYTE $00
   607 B466 00						.BYTE $00
   607 B467 00						.BYTE $00
   607 B468 00						.BYTE $00
   607 B469 00						.BYTE $00
   607 B46A 00						.BYTE $00
   607 B46B 00						.BYTE $00
   607 B46C 00						.BYTE $00
   607 B46D 00						.BYTE $00
   607 B46E 00						.BYTE $00
   607 B46F 00						.BYTE $00
   607 B470 00						.BYTE $00
   607 B471 00						.BYTE $00
   607 B472 00						.BYTE $00
   607 B473 00						.BYTE $00
   607 B474 00						.BYTE $00
   607 B475 00						.BYTE $00
   607 B476 00						.BYTE $00
   607 B477 00						.BYTE $00
   607 B478 00						.BYTE $00
   607 B479 00						.BYTE $00
   607 B47A 00						.BYTE $00
   607 B47B 00						.BYTE $00
   607 B47C 00						.BYTE $00
   607 B47D 00						.BYTE $00
   607 B47E 00						.BYTE $00
   607 B47F 00						.BYTE $00
   607 B480 00						.BYTE $00
   607 B481 00						.BYTE $00
   607 B482 00						.BYTE $00
   607 B483 00						.BYTE $00
   607 B484 00						.BYTE $00
   607 B485 00						.BYTE $00
   607 B486 00						.BYTE $00
   607 B487 00						.BYTE $00
   607 B488 00						.BYTE $00
   607 B489 00						.BYTE $00
   607 B48A 00						.BYTE $00
   607 B48B 00						.BYTE $00
   607 B48C 00						.BYTE $00
   607 B48D 00						.BYTE $00
   607 B48E 00						.BYTE $00
   607 B48F 00						.BYTE $00
   607 B490 00						.BYTE $00
   607 B491 00						.BYTE $00
   607 B492 00						.BYTE $00
   607 B493 00						.BYTE $00
   607 B494 00						.BYTE $00
   607 B495 00						.BYTE $00
   607 B496 00						.BYTE $00
   607 B497 00						.BYTE $00
   607 B498 00						.BYTE $00
   607 B499 00						.BYTE $00
   607 B49A 00						.BYTE $00
   607 B49B 00						.BYTE $00
   607 B49C 00						.BYTE $00
   607 B49D 00						.BYTE $00
   607 B49E 00						.BYTE $00
   607 B49F 00						.BYTE $00
   607 B4A0 00						.BYTE $00
   607 B4A1 00						.BYTE $00
   607 B4A2 00						.BYTE $00
   607 B4A3 00						.BYTE $00
   607 B4A4 00						.BYTE $00
   607 B4A5 00						.BYTE $00
   607 B4A6 00						.BYTE $00
   607 B4A7 00						.BYTE $00
   607 B4A8 00						.BYTE $00
   607 B4A9 00						.BYTE $00
   607 B4AA 00						.BYTE $00
   607 B4AB 00						.BYTE $00
   607 B4AC 00						.BYTE $00
   607 B4AD 00						.BYTE $00
   607 B4AE 00						.BYTE $00
   607 B4AF 00						.BYTE $00
   607 B4B0 00						.BYTE $00
   607 B4B1 00						.BYTE $00
   607 B4B2 00						.BYTE $00
   607 B4B3 00						.BYTE $00
   607 B4B4 00						.BYTE $00
   607 B4B5 00						.BYTE $00
   607 B4B6 00						.BYTE $00
   607 B4B7 00						.BYTE $00
   607 B4B8 00						.BYTE $00
   607 B4B9 00						.BYTE $00
   607 B4BA 00						.BYTE $00
   607 B4BB 00						.BYTE $00
   607 B4BC 00						.BYTE $00
   607 B4BD 00						.BYTE $00
   607 B4BE 00						.BYTE $00
   607 B4BF 00						.BYTE $00
   607 B4C0 00						.BYTE $00
   607 B4C1 00						.BYTE $00
   607 B4C2 00						.BYTE $00
   607 B4C3 00						.BYTE $00
   607 B4C4 00						.BYTE $00
   607 B4C5 00						.BYTE $00
   607 B4C6 00						.BYTE $00
   607 B4C7 00						.BYTE $00
   607 B4C8 00						.BYTE $00
   607 B4C9 00						.BYTE $00
   607 B4CA 00						.BYTE $00
   607 B4CB 00						.BYTE $00
   607 B4CC 00						.BYTE $00
   607 B4CD 00						.BYTE $00
   607 B4CE 00						.BYTE $00
   607 B4CF 00						.BYTE $00
   607 B4D0 00						.BYTE $00
   607 B4D1 00						.BYTE $00
   607 B4D2 00						.BYTE $00
   607 B4D3 00						.BYTE $00
   607 B4D4 00						.BYTE $00
   607 B4D5 00						.BYTE $00
   607 B4D6 00						.BYTE $00
   607 B4D7 00						.BYTE $00
   607 B4D8 00						.BYTE $00
   607 B4D9 00						.BYTE $00
   607 B4DA 00						.BYTE $00
   607 B4DB 00						.BYTE $00
   607 B4DC 00						.BYTE $00
   607 B4DD 00						.BYTE $00
   607 B4DE 00						.BYTE $00
   607 B4DF 00						.BYTE $00
   607 B4E0 00						.BYTE $00
   607 B4E1 00						.BYTE $00
   607 B4E2 00						.BYTE $00
   607 B4E3 00						.BYTE $00
   607 B4E4 00						.BYTE $00
   607 B4E5 00						.BYTE $00
   607 B4E6 00						.BYTE $00
   607 B4E7 00						.BYTE $00
   607 B4E8 00						.BYTE $00
   607 B4E9 00						.BYTE $00
   607 B4EA 00						.BYTE $00
   607 B4EB 00						.BYTE $00
   607 B4EC 00						.BYTE $00
   607 B4ED 00						.BYTE $00
   607 B4EE 00						.BYTE $00
   607 B4EF 00						.BYTE $00
   607 B4F0 00						.BYTE $00
   607 B4F1 00						.BYTE $00
   607 B4F2 00						.BYTE $00
   607 B4F3 00						.BYTE $00
   607 B4F4 00						.BYTE $00
   607 B4F5 00						.BYTE $00
   607 B4F6 00						.BYTE $00
   607 B4F7 00						.BYTE $00
   607 B4F8 00						.BYTE $00
   607 B4F9 00						.BYTE $00
   607 B4FA 00						.BYTE $00
   607 B4FB 00						.BYTE $00
   607 B4FC 00						.BYTE $00
   607 B4FD 00						.BYTE $00
   607 B4FE 00						.BYTE $00
   607 B4FF 00						.BYTE $00
   607 B500 00						.BYTE $00
   607 B501 00						.BYTE $00
   607 B502 00						.BYTE $00
   607 B503 00						.BYTE $00
   607 B504 00						.BYTE $00
   607 B505 00						.BYTE $00
   607 B506 00						.BYTE $00
   607 B507 00						.BYTE $00
   607 B508 00						.BYTE $00
   607 B509 00						.BYTE $00
   607 B50A 00						.BYTE $00
   607 B50B 00						.BYTE $00
   607 B50C 00						.BYTE $00
   607 B50D 00						.BYTE $00
   607 B50E 00						.BYTE $00
   607 B50F 00						.BYTE $00
   607 B510 00						.BYTE $00
   607 B511 00						.BYTE $00
   607 B512 00						.BYTE $00
   607 B513 00						.BYTE $00
   607 B514 00						.BYTE $00
   607 B515 00						.BYTE $00
   607 B516 00						.BYTE $00
   607 B517 00						.BYTE $00
   607 B518 00						.BYTE $00
   607 B519 00						.BYTE $00
   607 B51A 00						.BYTE $00
   607 B51B 00						.BYTE $00
   607 B51C 00						.BYTE $00
   607 B51D 00						.BYTE $00
   607 B51E 00						.BYTE $00
   607 B51F 00						.BYTE $00
   607 B520 00						.BYTE $00
   607 B521 00						.BYTE $00
   607 B522 00						.BYTE $00
   607 B523 00						.BYTE $00
   607 B524 00						.BYTE $00
   607 B525 00						.BYTE $00
   607 B526 00						.BYTE $00
   607 B527 00						.BYTE $00
   607 B528 00						.BYTE $00
   607 B529 00						.BYTE $00
   607 B52A 00						.BYTE $00
   607 B52B 00						.BYTE $00
   607 B52C 00						.BYTE $00
   607 B52D 00						.BYTE $00
   607 B52E 00						.BYTE $00
   607 B52F 00						.BYTE $00
   607 B530 00						.BYTE $00
   607 B531 00						.BYTE $00
   607 B532 00						.BYTE $00
   607 B533 00						.BYTE $00
   607 B534 00						.BYTE $00
   607 B535 00						.BYTE $00
   607 B536 00						.BYTE $00
   607 B537 00						.BYTE $00
   607 B538 00						.BYTE $00
   607 B539 00						.BYTE $00
   607 B53A 00						.BYTE $00
   607 B53B 00						.BYTE $00
   607 B53C 00						.BYTE $00
   607 B53D 00						.BYTE $00
   607 B53E 00						.BYTE $00
   607 B53F 00						.BYTE $00
   607 B540 00						.BYTE $00
   607 B541 00						.BYTE $00
   607 B542 00						.BYTE $00
   607 B543 00						.BYTE $00
   607 B544 00						.BYTE $00
   607 B545 00						.BYTE $00
   607 B546 00						.BYTE $00
   607 B547 00						.BYTE $00
   607 B548 00						.BYTE $00
   607 B549 00						.BYTE $00
   607 B54A 00						.BYTE $00
   607 B54B 00						.BYTE $00
   607 B54C 00						.BYTE $00
   607 B54D 00						.BYTE $00
   607 B54E 00						.BYTE $00
   607 B54F 00						.BYTE $00
   607 B550 00						.BYTE $00
   607 B551 00						.BYTE $00
   607 B552 00						.BYTE $00
   607 B553 00						.BYTE $00
   607 B554 00						.BYTE $00
   607 B555 00						.BYTE $00
   607 B556 00						.BYTE $00
   607 B557 00						.BYTE $00
   607 B558 00						.BYTE $00
   607 B559 00						.BYTE $00
   607 B55A 00						.BYTE $00
   607 B55B 00						.BYTE $00
   607 B55C 00						.BYTE $00
   607 B55D 00						.BYTE $00
   607 B55E 00						.BYTE $00
   607 B55F 00						.BYTE $00
   607 B560 00						.BYTE $00
   607 B561 00						.BYTE $00
   607 B562 00						.BYTE $00
   607 B563 00						.BYTE $00
   607 B564 00						.BYTE $00
   607 B565 00						.BYTE $00
   607 B566 00						.BYTE $00
   607 B567 00						.BYTE $00
   607 B568 00						.BYTE $00
   607 B569 00						.BYTE $00
   607 B56A 00						.BYTE $00
   607 B56B 00						.BYTE $00
   607 B56C 00						.BYTE $00
   607 B56D 00						.BYTE $00
   607 B56E 00						.BYTE $00
   607 B56F 00						.BYTE $00
   607 B570 00						.BYTE $00
   607 B571 00						.BYTE $00
   607 B572 00						.BYTE $00
   607 B573 00						.BYTE $00
   607 B574 00						.BYTE $00
   607 B575 00						.BYTE $00
   607 B576 00						.BYTE $00
   607 B577 00						.BYTE $00
   607 B578 00						.BYTE $00
   607 B579 00						.BYTE $00
   607 B57A 00						.BYTE $00
   607 B57B 00						.BYTE $00
   607 B57C 00						.BYTE $00
   607 B57D 00						.BYTE $00
   607 B57E 00						.BYTE $00
   607 B57F 00						.BYTE $00
   607 B580 00						.BYTE $00
   607 B581 00						.BYTE $00
   607 B582 00						.BYTE $00
   607 B583 00						.BYTE $00
   607 B584 00						.BYTE $00
   607 B585 00						.BYTE $00
   607 B586 00						.BYTE $00
   607 B587 00						.BYTE $00
   607 B588 00						.BYTE $00
   607 B589 00						.BYTE $00
   607 B58A 00						.BYTE $00
   607 B58B 00						.BYTE $00
   607 B58C 00						.BYTE $00
   607 B58D 00						.BYTE $00
   607 B58E 00						.BYTE $00
   607 B58F 00						.BYTE $00
   607 B590 00						.BYTE $00
   607 B591 00						.BYTE $00
   607 B592 00						.BYTE $00
   607 B593 00						.BYTE $00
   607 B594 00						.BYTE $00
   607 B595 00						.BYTE $00
   607 B596 00						.BYTE $00
   607 B597 00						.BYTE $00
   607 B598 00						.BYTE $00
   607 B599 00						.BYTE $00
   607 B59A 00						.BYTE $00
   607 B59B 00						.BYTE $00
   607 B59C 00						.BYTE $00
   607 B59D 00						.BYTE $00
   607 B59E 00						.BYTE $00
   607 B59F 00						.BYTE $00
   607 B5A0 00						.BYTE $00
   607 B5A1 00						.BYTE $00
   607 B5A2 00						.BYTE $00
   607 B5A3 00						.BYTE $00
   607 B5A4 00						.BYTE $00
   607 B5A5 00						.BYTE $00
   607 B5A6 00						.BYTE $00
   607 B5A7 00						.BYTE $00
   607 B5A8 00						.BYTE $00
   607 B5A9 00						.BYTE $00
   607 B5AA 00						.BYTE $00
   607 B5AB 00						.BYTE $00
   607 B5AC 00						.BYTE $00
   607 B5AD 00						.BYTE $00
   607 B5AE 00						.BYTE $00
   607 B5AF 00						.BYTE $00
   607 B5B0 00						.BYTE $00
   607 B5B1 00						.BYTE $00
   607 B5B2 00						.BYTE $00
   607 B5B3 00						.BYTE $00
   607 B5B4 00						.BYTE $00
   607 B5B5 00						.BYTE $00
   607 B5B6 00						.BYTE $00
   607 B5B7 00						.BYTE $00
   607 B5B8 00						.BYTE $00
   607 B5B9 00						.BYTE $00
   607 B5BA 00						.BYTE $00
   607 B5BB 00						.BYTE $00
   607 B5BC 00						.BYTE $00
   607 B5BD 00						.BYTE $00
   607 B5BE 00						.BYTE $00
   607 B5BF 00						.BYTE $00
   607 B5C0 00						.BYTE $00
   607 B5C1 00						.BYTE $00
   607 B5C2 00						.BYTE $00
   607 B5C3 00						.BYTE $00
   607 B5C4 00						.BYTE $00
   607 B5C5 00						.BYTE $00
   607 B5C6 00						.BYTE $00
   607 B5C7 00						.BYTE $00
   607 B5C8 00						.BYTE $00
   607 B5C9 00						.BYTE $00
   607 B5CA 00						.BYTE $00
   607 B5CB 00						.BYTE $00
   607 B5CC 00						.BYTE $00
   607 B5CD 00						.BYTE $00
   607 B5CE 00						.BYTE $00
   607 B5CF 00						.BYTE $00
   607 B5D0 00						.BYTE $00
   607 B5D1 00						.BYTE $00
   607 B5D2 00						.BYTE $00
   607 B5D3 00						.BYTE $00
   607 B5D4 00						.BYTE $00
   607 B5D5 00						.BYTE $00
   607 B5D6 00						.BYTE $00
   607 B5D7 00						.BYTE $00
   607 B5D8 00						.BYTE $00
   607 B5D9 00						.BYTE $00
   607 B5DA 00						.BYTE $00
   607 B5DB 00						.BYTE $00
   607 B5DC 00						.BYTE $00
   607 B5DD 00						.BYTE $00
   607 B5DE 00						.BYTE $00
   607 B5DF 00						.BYTE $00
   607 B5E0 00						.BYTE $00
   607 B5E1 00						.BYTE $00
   607 B5E2 00						.BYTE $00
   607 B5E3 00						.BYTE $00
   607 B5E4 00						.BYTE $00
   607 B5E5 00						.BYTE $00
   607 B5E6 00						.BYTE $00
   607 B5E7 00						.BYTE $00
   607 B5E8 00						.BYTE $00
   607 B5E9 00						.BYTE $00
   607 B5EA 00						.BYTE $00
   607 B5EB 00						.BYTE $00
   607 B5EC 00						.BYTE $00
   607 B5ED 00						.BYTE $00
   607 B5EE 00						.BYTE $00
   607 B5EF 00						.BYTE $00
   607 B5F0 00						.BYTE $00
   607 B5F1 00						.BYTE $00
   607 B5F2 00						.BYTE $00
   607 B5F3 00						.BYTE $00
   607 B5F4 00						.BYTE $00
   607 B5F5 00						.BYTE $00
   607 B5F6 00						.BYTE $00
   607 B5F7 00						.BYTE $00
   607 B5F8 00						.BYTE $00
   607 B5F9 00						.BYTE $00
   607 B5FA 00						.BYTE $00
   607 B5FB 00						.BYTE $00
   607 B5FC 00						.BYTE $00
   607 B5FD 00						.BYTE $00
   607 B5FE 00						.BYTE $00
   607 B5FF 00						.BYTE $00
   607 B600 00						.BYTE $00
   607 B601 00						.BYTE $00
   607 B602 00						.BYTE $00
   607 B603 00						.BYTE $00
   607 B604 00						.BYTE $00
   607 B605 00						.BYTE $00
   607 B606 00						.BYTE $00
   607 B607 00						.BYTE $00
   607 B608 00						.BYTE $00
   607 B609 00						.BYTE $00
   607 B60A 00						.BYTE $00
   607 B60B 00						.BYTE $00
   607 B60C 00						.BYTE $00
   607 B60D 00						.BYTE $00
   607 B60E 00						.BYTE $00
   607 B60F 00						.BYTE $00
   607 B610 00						.BYTE $00
   607 B611 00						.BYTE $00
   607 B612 00						.BYTE $00
   607 B613 00						.BYTE $00
   607 B614 00						.BYTE $00
   607 B615 00						.BYTE $00
   607 B616 00						.BYTE $00
   607 B617 00						.BYTE $00
   607 B618 00						.BYTE $00
   607 B619 00						.BYTE $00
   607 B61A 00						.BYTE $00
   607 B61B 00						.BYTE $00
   607 B61C 00						.BYTE $00
   607 B61D 00						.BYTE $00
   607 B61E 00						.BYTE $00
   607 B61F 00						.BYTE $00
   607 B620 00						.BYTE $00
   607 B621 00						.BYTE $00
   607 B622 00						.BYTE $00
   607 B623 00						.BYTE $00
   607 B624 00						.BYTE $00
   607 B625 00						.BYTE $00
   607 B626 00						.BYTE $00
   607 B627 00						.BYTE $00
   607 B628 00						.BYTE $00
   607 B629 00						.BYTE $00
   607 B62A 00						.BYTE $00
   607 B62B 00						.BYTE $00
   607 B62C 00						.BYTE $00
   607 B62D 00						.BYTE $00
   607 B62E 00						.BYTE $00
   607 B62F 00						.BYTE $00
   607 B630 00						.BYTE $00
   607 B631 00						.BYTE $00
   607 B632 00						.BYTE $00
   607 B633 00						.BYTE $00
   607 B634 00						.BYTE $00
   607 B635 00						.BYTE $00
   607 B636 00						.BYTE $00
   607 B637 00						.BYTE $00
   607 B638 00						.BYTE $00
   607 B639 00						.BYTE $00
   607 B63A 00						.BYTE $00
   607 B63B 00						.BYTE $00
   607 B63C 00						.BYTE $00
   607 B63D 00						.BYTE $00
   607 B63E 00						.BYTE $00
   607 B63F 00						.BYTE $00
   607 B640 00						.BYTE $00
   607 B641 00						.BYTE $00
   607 B642 00						.BYTE $00
   607 B643 00						.BYTE $00
   607 B644 00						.BYTE $00
   607 B645 00						.BYTE $00
   607 B646 00						.BYTE $00
   607 B647 00						.BYTE $00
   607 B648 00						.BYTE $00
   607 B649 00						.BYTE $00
   607 B64A 00						.BYTE $00
   607 B64B 00						.BYTE $00
   607 B64C 00						.BYTE $00
   607 B64D 00						.BYTE $00
   607 B64E 00						.BYTE $00
   607 B64F 00						.BYTE $00
   607 B650 00						.BYTE $00
   607 B651 00						.BYTE $00
   607 B652 00						.BYTE $00
   607 B653 00						.BYTE $00
   607 B654 00						.BYTE $00
   607 B655 00						.BYTE $00
   607 B656 00						.BYTE $00
   607 B657 00						.BYTE $00
   607 B658 00						.BYTE $00
   607 B659 00						.BYTE $00
   607 B65A 00						.BYTE $00
   607 B65B 00						.BYTE $00
   607 B65C 00						.BYTE $00
   607 B65D 00						.BYTE $00
   607 B65E 00						.BYTE $00
   607 B65F 00						.BYTE $00
   607 B660 00						.BYTE $00
   607 B661 00						.BYTE $00
   607 B662 00						.BYTE $00
   607 B663 00						.BYTE $00
   607 B664 00						.BYTE $00
   607 B665 00						.BYTE $00
   607 B666 00						.BYTE $00
   607 B667 00						.BYTE $00
   607 B668 00						.BYTE $00
   607 B669 00						.BYTE $00
   607 B66A 00						.BYTE $00
   607 B66B 00						.BYTE $00
   607 B66C 00						.BYTE $00
   607 B66D 00						.BYTE $00
   607 B66E 00						.BYTE $00
   607 B66F 00						.BYTE $00
   607 B670 00						.BYTE $00
   607 B671 00						.BYTE $00
   607 B672 00						.BYTE $00
   607 B673 00						.BYTE $00
   607 B674 00						.BYTE $00
   607 B675 00						.BYTE $00
   607 B676 00						.BYTE $00
   607 B677 00						.BYTE $00
   607 B678 00						.BYTE $00
   607 B679 00						.BYTE $00
   607 B67A 00						.BYTE $00
   607 B67B 00						.BYTE $00
   607 B67C 00						.BYTE $00
   607 B67D 00						.BYTE $00
   607 B67E 00						.BYTE $00
   607 B67F 00						.BYTE $00
   607 B680 00						.BYTE $00
   607 B681 00						.BYTE $00
   607 B682 00						.BYTE $00
   607 B683 00						.BYTE $00
   607 B684 00						.BYTE $00
   607 B685 00						.BYTE $00
   607 B686 00						.BYTE $00
   607 B687 00						.BYTE $00
   607 B688 00						.BYTE $00
   607 B689 00						.BYTE $00
   607 B68A 00						.BYTE $00
   607 B68B 00						.BYTE $00
   607 B68C 00						.BYTE $00
   607 B68D 00						.BYTE $00
   607 B68E 00						.BYTE $00
   607 B68F 00						.BYTE $00
   607 B690 00						.BYTE $00
   607 B691 00						.BYTE $00
   607 B692 00						.BYTE $00
   607 B693 00						.BYTE $00
   607 B694 00						.BYTE $00
   607 B695 00						.BYTE $00
   607 B696 00						.BYTE $00
   607 B697 00						.BYTE $00
   607 B698 00						.BYTE $00
   607 B699 00						.BYTE $00
   607 B69A 00						.BYTE $00
   607 B69B 00						.BYTE $00
   607 B69C 00						.BYTE $00
   607 B69D 00						.BYTE $00
   607 B69E 00						.BYTE $00
   607 B69F 00						.BYTE $00
   607 B6A0 00						.BYTE $00
   607 B6A1 00						.BYTE $00
   607 B6A2 00						.BYTE $00
   607 B6A3 00						.BYTE $00
   607 B6A4 00						.BYTE $00
   607 B6A5 00						.BYTE $00
   607 B6A6 00						.BYTE $00
   607 B6A7 00						.BYTE $00
   607 B6A8 00						.BYTE $00
   607 B6A9 00						.BYTE $00
   607 B6AA 00						.BYTE $00
   607 B6AB 00						.BYTE $00
   607 B6AC 00						.BYTE $00
   607 B6AD 00						.BYTE $00
   607 B6AE 00						.BYTE $00
   607 B6AF 00						.BYTE $00
   607 B6B0 00						.BYTE $00
   607 B6B1 00						.BYTE $00
   607 B6B2 00						.BYTE $00
   607 B6B3 00						.BYTE $00
   607 B6B4 00						.BYTE $00
   607 B6B5 00						.BYTE $00
   607 B6B6 00						.BYTE $00
   607 B6B7 00						.BYTE $00
   607 B6B8 00						.BYTE $00
   607 B6B9 00						.BYTE $00
   607 B6BA 00						.BYTE $00
   607 B6BB 00						.BYTE $00
   607 B6BC 00						.BYTE $00
   607 B6BD 00						.BYTE $00
   607 B6BE 00						.BYTE $00
   607 B6BF 00						.BYTE $00
   607 B6C0 00						.BYTE $00
   607 B6C1 00						.BYTE $00
   607 B6C2 00						.BYTE $00
   607 B6C3 00						.BYTE $00
   607 B6C4 00						.BYTE $00
   607 B6C5 00						.BYTE $00
   607 B6C6 00						.BYTE $00
   607 B6C7 00						.BYTE $00
   607 B6C8 00						.BYTE $00
   607 B6C9 00						.BYTE $00
   607 B6CA 00						.BYTE $00
   607 B6CB 00						.BYTE $00
   607 B6CC 00						.BYTE $00
   607 B6CD 00						.BYTE $00
   607 B6CE 00						.BYTE $00
   607 B6CF 00						.BYTE $00
   607 B6D0 00						.BYTE $00
   607 B6D1 00						.BYTE $00
   607 B6D2 00						.BYTE $00
   607 B6D3 00						.BYTE $00
   607 B6D4 00						.BYTE $00
   607 B6D5 00						.BYTE $00
   607 B6D6 00						.BYTE $00
   607 B6D7 00						.BYTE $00
   607 B6D8 00						.BYTE $00
   607 B6D9 00						.BYTE $00
   607 B6DA 00						.BYTE $00
   607 B6DB 00						.BYTE $00
   607 B6DC 00						.BYTE $00
   607 B6DD 00						.BYTE $00
   607 B6DE 00						.BYTE $00
   607 B6DF 00						.BYTE $00
   607 B6E0 00						.BYTE $00
   607 B6E1 00						.BYTE $00
   607 B6E2 00						.BYTE $00
   607 B6E3 00						.BYTE $00
   607 B6E4 00						.BYTE $00
   607 B6E5 00						.BYTE $00
   607 B6E6 00						.BYTE $00
   607 B6E7 00						.BYTE $00
   607 B6E8 00						.BYTE $00
   607 B6E9 00						.BYTE $00
   607 B6EA 00						.BYTE $00
   607 B6EB 00						.BYTE $00
   607 B6EC 00						.BYTE $00
   607 B6ED 00						.BYTE $00
   607 B6EE 00						.BYTE $00
   607 B6EF 00						.BYTE $00
   607 B6F0 00						.BYTE $00
   607 B6F1 00						.BYTE $00
   607 B6F2 00						.BYTE $00
   607 B6F3 00						.BYTE $00
   607 B6F4 00						.BYTE $00
   607 B6F5 00						.BYTE $00
   607 B6F6 00						.BYTE $00
   607 B6F7 00						.BYTE $00
   607 B6F8 00						.BYTE $00
   607 B6F9 00						.BYTE $00
   607 B6FA 00						.BYTE $00
   607 B6FB 00						.BYTE $00
   607 B6FC 00						.BYTE $00
   607 B6FD 00						.BYTE $00
   607 B6FE 00						.BYTE $00
   607 B6FF 00						.BYTE $00
   607 B700 00						.BYTE $00
   607 B701 00						.BYTE $00
   607 B702 00						.BYTE $00
   607 B703 00						.BYTE $00
   607 B704 00						.BYTE $00
   607 B705 00						.BYTE $00
   607 B706 00						.BYTE $00
   607 B707 00						.BYTE $00
   607 B708 00						.BYTE $00
   607 B709 00						.BYTE $00
   607 B70A 00						.BYTE $00
   607 B70B 00						.BYTE $00
   607 B70C 00						.BYTE $00
   607 B70D 00						.BYTE $00
   607 B70E 00						.BYTE $00
   607 B70F 00						.BYTE $00
   607 B710 00						.BYTE $00
   607 B711 00						.BYTE $00
   607 B712 00						.BYTE $00
   607 B713 00						.BYTE $00
   607 B714 00						.BYTE $00
   607 B715 00						.BYTE $00
   607 B716 00						.BYTE $00
   607 B717 00						.BYTE $00
   607 B718 00						.BYTE $00
   607 B719 00						.BYTE $00
   607 B71A 00						.BYTE $00
   607 B71B 00						.BYTE $00
   607 B71C 00						.BYTE $00
   607 B71D 00						.BYTE $00
   607 B71E 00						.BYTE $00
   607 B71F 00						.BYTE $00
   607 B720 00						.BYTE $00
   607 B721 00						.BYTE $00
   607 B722 00						.BYTE $00
   607 B723 00						.BYTE $00
   607 B724 00						.BYTE $00
   607 B725 00						.BYTE $00
   607 B726 00						.BYTE $00
   607 B727 00						.BYTE $00
   607 B728 00						.BYTE $00
   607 B729 00						.BYTE $00
   607 B72A 00						.BYTE $00
   607 B72B 00						.BYTE $00
   607 B72C 00						.BYTE $00
   607 B72D 00						.BYTE $00
   607 B72E 00						.BYTE $00
   607 B72F 00						.BYTE $00
   607 B730 00						.BYTE $00
   607 B731 00						.BYTE $00
   607 B732 00						.BYTE $00
   607 B733 00						.BYTE $00
   607 B734 00						.BYTE $00
   607 B735 00						.BYTE $00
   607 B736 00						.BYTE $00
   607 B737 00						.BYTE $00
   607 B738 00						.BYTE $00
   607 B739 00						.BYTE $00
   607 B73A 00						.BYTE $00
   607 B73B 00						.BYTE $00
   607 B73C 00						.BYTE $00
   607 B73D 00						.BYTE $00
   607 B73E 00						.BYTE $00
   607 B73F 00						.BYTE $00
   607 B740 00						.BYTE $00
   607 B741 00						.BYTE $00
   607 B742 00						.BYTE $00
   607 B743 00						.BYTE $00
   607 B744 00						.BYTE $00
   607 B745 00						.BYTE $00
   607 B746 00						.BYTE $00
   607 B747 00						.BYTE $00
   607 B748 00						.BYTE $00
   607 B749 00						.BYTE $00
   607 B74A 00						.BYTE $00
   607 B74B 00						.BYTE $00
   607 B74C 00						.BYTE $00
   607 B74D 00						.BYTE $00
   607 B74E 00						.BYTE $00
   607 B74F 00						.BYTE $00
   607 B750 00						.BYTE $00
   607 B751 00						.BYTE $00
   607 B752 00						.BYTE $00
   607 B753 00						.BYTE $00
   607 B754 00						.BYTE $00
   607 B755 00						.BYTE $00
   607 B756 00						.BYTE $00
   607 B757 00						.BYTE $00
   607 B758 00						.BYTE $00
   607 B759 00						.BYTE $00
   607 B75A 00						.BYTE $00
   607 B75B 00						.BYTE $00
   607 B75C 00						.BYTE $00
   607 B75D 00						.BYTE $00
   607 B75E 00						.BYTE $00
   607 B75F 00						.BYTE $00
   607 B760 00						.BYTE $00
   607 B761 00						.BYTE $00
   607 B762 00						.BYTE $00
   607 B763 00						.BYTE $00
   607 B764 00						.BYTE $00
   607 B765 00						.BYTE $00
   607 B766 00						.BYTE $00
   607 B767 00						.BYTE $00
   607 B768 00						.BYTE $00
   607 B769 00						.BYTE $00
   607 B76A 00						.BYTE $00
   607 B76B 00						.BYTE $00
   607 B76C 00						.BYTE $00
   607 B76D 00						.BYTE $00
   607 B76E 00						.BYTE $00
   607 B76F 00						.BYTE $00
   607 B770 00						.BYTE $00
   607 B771 00						.BYTE $00
   607 B772 00						.BYTE $00
   607 B773 00						.BYTE $00
   607 B774 00						.BYTE $00
   607 B775 00						.BYTE $00
   607 B776 00						.BYTE $00
   607 B777 00						.BYTE $00
   607 B778 00						.BYTE $00
   607 B779 00						.BYTE $00
   607 B77A 00						.BYTE $00
   607 B77B 00						.BYTE $00
   607 B77C 00						.BYTE $00
   607 B77D 00						.BYTE $00
   607 B77E 00						.BYTE $00
   607 B77F 00						.BYTE $00
   607 B780 00						.BYTE $00
   607 B781 00						.BYTE $00
   607 B782 00						.BYTE $00
   607 B783 00						.BYTE $00
   607 B784 00						.BYTE $00
   607 B785 00						.BYTE $00
   607 B786 00						.BYTE $00
   607 B787 00						.BYTE $00
   607 B788 00						.BYTE $00
   607 B789 00						.BYTE $00
   607 B78A 00						.BYTE $00
   607 B78B 00						.BYTE $00
   607 B78C 00						.BYTE $00
   607 B78D 00						.BYTE $00
   607 B78E 00						.BYTE $00
   607 B78F 00						.BYTE $00
   607 B790 00						.BYTE $00
   607 B791 00						.BYTE $00
   607 B792 00						.BYTE $00
   607 B793 00						.BYTE $00
   607 B794 00						.BYTE $00
   607 B795 00						.BYTE $00
   607 B796 00						.BYTE $00
   607 B797 00						.BYTE $00
   607 B798 00						.BYTE $00
   607 B799 00						.BYTE $00
   607 B79A 00						.BYTE $00
   607 B79B 00						.BYTE $00
   607 B79C 00						.BYTE $00
   607 B79D 00						.BYTE $00
   607 B79E 00						.BYTE $00
   607 B79F 00						.BYTE $00
   607 B7A0 00						.BYTE $00
   607 B7A1 00						.BYTE $00
   607 B7A2 00						.BYTE $00
   607 B7A3 00						.BYTE $00
   607 B7A4 00						.BYTE $00
   607 B7A5 00						.BYTE $00
   607 B7A6 00						.BYTE $00
   607 B7A7 00						.BYTE $00
   607 B7A8 00						.BYTE $00
   607 B7A9 00						.BYTE $00
   607 B7AA 00						.BYTE $00
   607 B7AB 00						.BYTE $00
   607 B7AC 00						.BYTE $00
   607 B7AD 00						.BYTE $00
   607 B7AE 00						.BYTE $00
   607 B7AF 00						.BYTE $00
   607 B7B0 00						.BYTE $00
   607 B7B1 00						.BYTE $00
   607 B7B2 00						.BYTE $00
   607 B7B3 00						.BYTE $00
   607 B7B4 00						.BYTE $00
   607 B7B5 00						.BYTE $00
   607 B7B6 00						.BYTE $00
   607 B7B7 00						.BYTE $00
   607 B7B8 00						.BYTE $00
   607 B7B9 00						.BYTE $00
   607 B7BA 00						.BYTE $00
   607 B7BB 00						.BYTE $00
   607 B7BC 00						.BYTE $00
   607 B7BD 00						.BYTE $00
   607 B7BE 00						.BYTE $00
   607 B7BF 00						.BYTE $00
   607 B7C0 00						.BYTE $00
   607 B7C1 00						.BYTE $00
   607 B7C2 00						.BYTE $00
   607 B7C3 00						.BYTE $00
   607 B7C4 00						.BYTE $00
   607 B7C5 00						.BYTE $00
   607 B7C6 00						.BYTE $00
   607 B7C7 00						.BYTE $00
   607 B7C8 00						.BYTE $00
   607 B7C9 00						.BYTE $00
   607 B7CA 00						.BYTE $00
   607 B7CB 00						.BYTE $00
   607 B7CC 00						.BYTE $00
   607 B7CD 00						.BYTE $00
   607 B7CE 00						.BYTE $00
   607 B7CF 00						.BYTE $00
   607 B7D0 00						.BYTE $00
   607 B7D1 00						.BYTE $00
   607 B7D2 00						.BYTE $00
   607 B7D3 00						.BYTE $00
   607 B7D4 00						.BYTE $00
   607 B7D5 00						.BYTE $00
   607 B7D6 00						.BYTE $00
   607 B7D7 00						.BYTE $00
   607 B7D8 00						.BYTE $00
   607 B7D9 00						.BYTE $00
   607 B7DA 00						.BYTE $00
   607 B7DB 00						.BYTE $00
   607 B7DC 00						.BYTE $00
   607 B7DD 00						.BYTE $00
   607 B7DE 00						.BYTE $00
   607 B7DF 00						.BYTE $00
   607 B7E0 00						.BYTE $00
   607 B7E1 00						.BYTE $00
   607 B7E2 00						.BYTE $00
   607 B7E3 00						.BYTE $00
   607 B7E4 00						.BYTE $00
   607 B7E5 00						.BYTE $00
   607 B7E6 00						.BYTE $00
   607 B7E7 00						.BYTE $00
   607 B7E8 00						.BYTE $00
   607 B7E9 00						.BYTE $00
   607 B7EA 00						.BYTE $00
   607 B7EB 00						.BYTE $00
   607 B7EC 00						.BYTE $00
   607 B7ED 00						.BYTE $00
   607 B7EE 00						.BYTE $00
   607 B7EF 00						.BYTE $00
   607 B7F0 00						.BYTE $00
   607 B7F1 00						.BYTE $00
   607 B7F2 00						.BYTE $00
   607 B7F3 00						.BYTE $00
   607 B7F4 00						.BYTE $00
   607 B7F5 00						.BYTE $00
   607 B7F6 00						.BYTE $00
   607 B7F7 00						.BYTE $00
   607 B7F8 00						.BYTE $00
   607 B7F9 00						.BYTE $00
   607 B7FA 00						.BYTE $00
   607 B7FB 00						.BYTE $00
   607 B7FC 00						.BYTE $00
   607 B7FD 00						.BYTE $00
   607 B7FE 00						.BYTE $00
   607 B7FF 00						.BYTE $00
   607 B800 00						.BYTE $00
   607 B801 00						.BYTE $00
   607 B802 00						.BYTE $00
   607 B803 00						.BYTE $00
   607 B804 00						.BYTE $00
   607 B805 00						.BYTE $00
   607 B806 00						.BYTE $00
   607 B807 00						.BYTE $00
   607 B808 00						.BYTE $00
   607 B809 00						.BYTE $00
   607 B80A 00						.BYTE $00
   607 B80B 00						.BYTE $00
   607 B80C 00						.BYTE $00
   607 B80D 00						.BYTE $00
   607 B80E 00						.BYTE $00
   607 B80F 00						.BYTE $00
   607 B810 00						.BYTE $00
   607 B811 00						.BYTE $00
   607 B812 00						.BYTE $00
   607 B813 00						.BYTE $00
   607 B814 00						.BYTE $00
   607 B815 00						.BYTE $00
   607 B816 00						.BYTE $00
   607 B817 00						.BYTE $00
   607 B818 00						.BYTE $00
   607 B819 00						.BYTE $00
   607 B81A 00						.BYTE $00
   607 B81B 00						.BYTE $00
   607 B81C 00						.BYTE $00
   607 B81D 00						.BYTE $00
   607 B81E 00						.BYTE $00
   607 B81F 00						.BYTE $00
   607 B820 00						.BYTE $00
   607 B821 00						.BYTE $00
   607 B822 00						.BYTE $00
   607 B823 00						.BYTE $00
   607 B824 00						.BYTE $00
   607 B825 00						.BYTE $00
   607 B826 00						.BYTE $00
   607 B827 00						.BYTE $00
   607 B828 00						.BYTE $00
   607 B829 00						.BYTE $00
   607 B82A 00						.BYTE $00
   607 B82B 00						.BYTE $00
   607 B82C 00						.BYTE $00
   607 B82D 00						.BYTE $00
   607 B82E 00						.BYTE $00
   607 B82F 00						.BYTE $00
   607 B830 00						.BYTE $00
   607 B831 00						.BYTE $00
   607 B832 00						.BYTE $00
   607 B833 00						.BYTE $00
   607 B834 00						.BYTE $00
   607 B835 00						.BYTE $00
   607 B836 00						.BYTE $00
   607 B837 00						.BYTE $00
   607 B838 00						.BYTE $00
   607 B839 00						.BYTE $00
   607 B83A 00						.BYTE $00
   607 B83B 00						.BYTE $00
   607 B83C 00						.BYTE $00
   607 B83D 00						.BYTE $00
   607 B83E 00						.BYTE $00
   607 B83F 00						.BYTE $00
   607 B840 00						.BYTE $00
   607 B841 00						.BYTE $00
   607 B842 00						.BYTE $00
   607 B843 00						.BYTE $00
   607 B844 00						.BYTE $00
   607 B845 00						.BYTE $00
   607 B846 00						.BYTE $00
   607 B847 00						.BYTE $00
   607 B848 00						.BYTE $00
   607 B849 00						.BYTE $00
   607 B84A 00						.BYTE $00
   607 B84B 00						.BYTE $00
   607 B84C 00						.BYTE $00
   607 B84D 00						.BYTE $00
   607 B84E 00						.BYTE $00
   607 B84F 00						.BYTE $00
   607 B850 00						.BYTE $00
   607 B851 00						.BYTE $00
   607 B852 00						.BYTE $00
   607 B853 00						.BYTE $00
   607 B854 00						.BYTE $00
   607 B855 00						.BYTE $00
   607 B856 00						.BYTE $00
   607 B857 00						.BYTE $00
   607 B858 00						.BYTE $00
   607 B859 00						.BYTE $00
   607 B85A 00						.BYTE $00
   607 B85B 00						.BYTE $00
   607 B85C 00						.BYTE $00
   607 B85D 00						.BYTE $00
   607 B85E 00						.BYTE $00
   607 B85F 00						.BYTE $00
   607 B860 00						.BYTE $00
   607 B861 00						.BYTE $00
   607 B862 00						.BYTE $00
   607 B863 00						.BYTE $00
   607 B864 00						.BYTE $00
   607 B865 00						.BYTE $00
   607 B866 00						.BYTE $00
   607 B867 00						.BYTE $00
   607 B868 00						.BYTE $00
   607 B869 00						.BYTE $00
   607 B86A 00						.BYTE $00
   607 B86B 00						.BYTE $00
   607 B86C 00						.BYTE $00
   607 B86D 00						.BYTE $00
   607 B86E 00						.BYTE $00
   607 B86F 00						.BYTE $00
   607 B870 00						.BYTE $00
   607 B871 00						.BYTE $00
   607 B872 00						.BYTE $00
   607 B873 00						.BYTE $00
   607 B874 00						.BYTE $00
   607 B875 00						.BYTE $00
   607 B876 00						.BYTE $00
   607 B877 00						.BYTE $00
   607 B878 00						.BYTE $00
   607 B879 00						.BYTE $00
   607 B87A 00						.BYTE $00
   607 B87B 00						.BYTE $00
   607 B87C 00						.BYTE $00
   607 B87D 00						.BYTE $00
   607 B87E 00						.BYTE $00
   607 B87F 00						.BYTE $00
   607 B880 00						.BYTE $00
   607 B881 00						.BYTE $00
   607 B882 00						.BYTE $00
   607 B883 00						.BYTE $00
   607 B884 00						.BYTE $00
   607 B885 00						.BYTE $00
   607 B886 00						.BYTE $00
   607 B887 00						.BYTE $00
   607 B888 00						.BYTE $00
   607 B889 00						.BYTE $00
   607 B88A 00						.BYTE $00
   607 B88B 00						.BYTE $00
   607 B88C 00						.BYTE $00
   607 B88D 00						.BYTE $00
   607 B88E 00						.BYTE $00
   607 B88F 00						.BYTE $00
   607 B890 00						.BYTE $00
   607 B891 00						.BYTE $00
   607 B892 00						.BYTE $00
   607 B893 00						.BYTE $00
   607 B894 00						.BYTE $00
   607 B895 00						.BYTE $00
   607 B896 00						.BYTE $00
   607 B897 00						.BYTE $00
   607 B898 00						.BYTE $00
   607 B899 00						.BYTE $00
   607 B89A 00						.BYTE $00
   607 B89B 00						.BYTE $00
   607 B89C 00						.BYTE $00
   607 B89D 00						.BYTE $00
   607 B89E 00						.BYTE $00
   607 B89F 00						.BYTE $00
   607 B8A0 00						.BYTE $00
   607 B8A1 00						.BYTE $00
   607 B8A2 00						.BYTE $00
   607 B8A3 00						.BYTE $00
   607 B8A4 00						.BYTE $00
   607 B8A5 00						.BYTE $00
   607 B8A6 00						.BYTE $00
   607 B8A7 00						.BYTE $00
   607 B8A8 00						.BYTE $00
   607 B8A9 00						.BYTE $00
   607 B8AA 00						.BYTE $00
   607 B8AB 00						.BYTE $00
   607 B8AC 00						.BYTE $00
   607 B8AD 00						.BYTE $00
   607 B8AE 00						.BYTE $00
   607 B8AF 00						.BYTE $00
   607 B8B0 00						.BYTE $00
   607 B8B1 00						.BYTE $00
   607 B8B2 00						.BYTE $00
   607 B8B3 00						.BYTE $00
   607 B8B4 00						.BYTE $00
   607 B8B5 00						.BYTE $00
   607 B8B6 00						.BYTE $00
   607 B8B7 00						.BYTE $00
   607 B8B8 00						.BYTE $00
   607 B8B9 00						.BYTE $00
   607 B8BA 00						.BYTE $00
   607 B8BB 00						.BYTE $00
   607 B8BC 00						.BYTE $00
   607 B8BD 00						.BYTE $00
   607 B8BE 00						.BYTE $00
   607 B8BF 00						.BYTE $00
   607 B8C0 00						.BYTE $00
   607 B8C1 00						.BYTE $00
   607 B8C2 00						.BYTE $00
   607 B8C3 00						.BYTE $00
   607 B8C4 00						.BYTE $00
   607 B8C5 00						.BYTE $00
   607 B8C6 00						.BYTE $00
   607 B8C7 00						.BYTE $00
   607 B8C8 00						.BYTE $00
   607 B8C9 00						.BYTE $00
   607 B8CA 00						.BYTE $00
   607 B8CB 00						.BYTE $00
   607 B8CC 00						.BYTE $00
   607 B8CD 00						.BYTE $00
   607 B8CE 00						.BYTE $00
   607 B8CF 00						.BYTE $00
   607 B8D0 00						.BYTE $00
   607 B8D1 00						.BYTE $00
   607 B8D2 00						.BYTE $00
   607 B8D3 00						.BYTE $00
   607 B8D4 00						.BYTE $00
   607 B8D5 00						.BYTE $00
   607 B8D6 00						.BYTE $00
   607 B8D7 00						.BYTE $00
   607 B8D8 00						.BYTE $00
   607 B8D9 00						.BYTE $00
   607 B8DA 00						.BYTE $00
   607 B8DB 00						.BYTE $00
   607 B8DC 00						.BYTE $00
   607 B8DD 00						.BYTE $00
   607 B8DE 00						.BYTE $00
   607 B8DF 00						.BYTE $00
   607 B8E0 00						.BYTE $00
   607 B8E1 00						.BYTE $00
   607 B8E2 00						.BYTE $00
   607 B8E3 00						.BYTE $00
   607 B8E4 00						.BYTE $00
   607 B8E5 00						.BYTE $00
   607 B8E6 00						.BYTE $00
   607 B8E7 00						.BYTE $00
   607 B8E8 00						.BYTE $00
   607 B8E9 00						.BYTE $00
   607 B8EA 00						.BYTE $00
   607 B8EB 00						.BYTE $00
   607 B8EC 00						.BYTE $00
   607 B8ED 00						.BYTE $00
   607 B8EE 00						.BYTE $00
   607 B8EF 00						.BYTE $00
   607 B8F0 00						.BYTE $00
   607 B8F1 00						.BYTE $00
   607 B8F2 00						.BYTE $00
   607 B8F3 00						.BYTE $00
   607 B8F4 00						.BYTE $00
   607 B8F5 00						.BYTE $00
   607 B8F6 00						.BYTE $00
   607 B8F7 00						.BYTE $00
   607 B8F8 00						.BYTE $00
   607 B8F9 00						.BYTE $00
   607 B8FA 00						.BYTE $00
   607 B8FB 00						.BYTE $00
   607 B8FC 00						.BYTE $00
   607 B8FD 00						.BYTE $00
   607 B8FE 00						.BYTE $00
   607 B8FF 00						.BYTE $00
   607 B900 00						.BYTE $00
   607 B901 00						.BYTE $00
   607 B902 00						.BYTE $00
   607 B903 00						.BYTE $00
   607 B904 00						.BYTE $00
   607 B905 00						.BYTE $00
   607 B906 00						.BYTE $00
   607 B907 00						.BYTE $00
   607 B908 00						.BYTE $00
   607 B909 00						.BYTE $00
   607 B90A 00						.BYTE $00
   607 B90B 00						.BYTE $00
   607 B90C 00						.BYTE $00
   607 B90D 00						.BYTE $00
   607 B90E 00						.BYTE $00
   607 B90F 00						.BYTE $00
   607 B910 00						.BYTE $00
   607 B911 00						.BYTE $00
   607 B912 00						.BYTE $00
   607 B913 00						.BYTE $00
   607 B914 00						.BYTE $00
   607 B915 00						.BYTE $00
   607 B916 00						.BYTE $00
   607 B917 00						.BYTE $00
   607 B918 00						.BYTE $00
   607 B919 00						.BYTE $00
   607 B91A 00						.BYTE $00
   607 B91B 00						.BYTE $00
   607 B91C 00						.BYTE $00
   607 B91D 00						.BYTE $00
   607 B91E 00						.BYTE $00
   607 B91F 00						.BYTE $00
   607 B920 00						.BYTE $00
   607 B921 00						.BYTE $00
   607 B922 00						.BYTE $00
   607 B923 00						.BYTE $00
   607 B924 00						.BYTE $00
   607 B925 00						.BYTE $00
   607 B926 00						.BYTE $00
   607 B927 00						.BYTE $00
   607 B928 00						.BYTE $00
   607 B929 00						.BYTE $00
   607 B92A 00						.BYTE $00
   607 B92B 00						.BYTE $00
   607 B92C 00						.BYTE $00
   607 B92D 00						.BYTE $00
   607 B92E 00						.BYTE $00
   607 B92F 00						.BYTE $00
   607 B930 00						.BYTE $00
   607 B931 00						.BYTE $00
   607 B932 00						.BYTE $00
   607 B933 00						.BYTE $00
   607 B934 00						.BYTE $00
   607 B935 00						.BYTE $00
   607 B936 00						.BYTE $00
   607 B937 00						.BYTE $00
   607 B938 00						.BYTE $00
   607 B939 00						.BYTE $00
   607 B93A 00						.BYTE $00
   607 B93B 00						.BYTE $00
   607 B93C 00						.BYTE $00
   607 B93D 00						.BYTE $00
   607 B93E 00						.BYTE $00
   607 B93F 00						.BYTE $00
   607 B940 00						.BYTE $00
   607 B941 00						.BYTE $00
   607 B942 00						.BYTE $00
   607 B943 00						.BYTE $00
   607 B944 00						.BYTE $00
   607 B945 00						.BYTE $00
   607 B946 00						.BYTE $00
   607 B947 00						.BYTE $00
   607 B948 00						.BYTE $00
   607 B949 00						.BYTE $00
   607 B94A 00						.BYTE $00
   607 B94B 00						.BYTE $00
   607 B94C 00						.BYTE $00
   607 B94D 00						.BYTE $00
   607 B94E 00						.BYTE $00
   607 B94F 00						.BYTE $00
   607 B950 00						.BYTE $00
   607 B951 00						.BYTE $00
   607 B952 00						.BYTE $00
   607 B953 00						.BYTE $00
   607 B954 00						.BYTE $00
   607 B955 00						.BYTE $00
   607 B956 00						.BYTE $00
   607 B957 00						.BYTE $00
   607 B958 00						.BYTE $00
   607 B959 00						.BYTE $00
   607 B95A 00						.BYTE $00
   607 B95B 00						.BYTE $00
   607 B95C 00						.BYTE $00
   607 B95D 00						.BYTE $00
   607 B95E 00						.BYTE $00
   607 B95F 00						.BYTE $00
   607 B960 00						.BYTE $00
   607 B961 00						.BYTE $00
   607 B962 00						.BYTE $00
   607 B963 00						.BYTE $00
   607 B964 00						.BYTE $00
   607 B965 00						.BYTE $00
   607 B966 00						.BYTE $00
   607 B967 00						.BYTE $00
   607 B968 00						.BYTE $00
   607 B969 00						.BYTE $00
   607 B96A 00						.BYTE $00
   607 B96B 00						.BYTE $00
   607 B96C 00						.BYTE $00
   607 B96D 00						.BYTE $00
   607 B96E 00						.BYTE $00
   607 B96F 00						.BYTE $00
   607 B970 00						.BYTE $00
   607 B971 00						.BYTE $00
   607 B972 00						.BYTE $00
   607 B973 00						.BYTE $00
   607 B974 00						.BYTE $00
   607 B975 00						.BYTE $00
   607 B976 00						.BYTE $00
   607 B977 00						.BYTE $00
   607 B978 00						.BYTE $00
   607 B979 00						.BYTE $00
   607 B97A 00						.BYTE $00
   607 B97B 00						.BYTE $00
   607 B97C 00						.BYTE $00
   607 B97D 00						.BYTE $00
   607 B97E 00						.BYTE $00
   607 B97F 00						.BYTE $00
   607 B980 00						.BYTE $00
   607 B981 00						.BYTE $00
   607 B982 00						.BYTE $00
   607 B983 00						.BYTE $00
   607 B984 00						.BYTE $00
   607 B985 00						.BYTE $00
   607 B986 00						.BYTE $00
   607 B987 00						.BYTE $00
   607 B988 00						.BYTE $00
   607 B989 00						.BYTE $00
   607 B98A 00						.BYTE $00
   607 B98B 00						.BYTE $00
   607 B98C 00						.BYTE $00
   607 B98D 00						.BYTE $00
   607 B98E 00						.BYTE $00
   607 B98F 00						.BYTE $00
   607 B990 00						.BYTE $00
   607 B991 00						.BYTE $00
   607 B992 00						.BYTE $00
   607 B993 00						.BYTE $00
   607 B994 00						.BYTE $00
   607 B995 00						.BYTE $00
   607 B996 00						.BYTE $00
   607 B997 00						.BYTE $00
   607 B998 00						.BYTE $00
   607 B999 00						.BYTE $00
   607 B99A 00						.BYTE $00
   607 B99B 00						.BYTE $00
   607 B99C 00						.BYTE $00
   607 B99D 00						.BYTE $00
   607 B99E 00						.BYTE $00
   607 B99F 00						.BYTE $00
   607 B9A0 00						.BYTE $00
   607 B9A1 00						.BYTE $00
   607 B9A2 00						.BYTE $00
   607 B9A3 00						.BYTE $00
   607 B9A4 00						.BYTE $00
   607 B9A5 00						.BYTE $00
   607 B9A6 00						.BYTE $00
   607 B9A7 00						.BYTE $00
   607 B9A8 00						.BYTE $00
   607 B9A9 00						.BYTE $00
   607 B9AA 00						.BYTE $00
   607 B9AB 00						.BYTE $00
   607 B9AC 00						.BYTE $00
   607 B9AD 00						.BYTE $00
   607 B9AE 00						.BYTE $00
   607 B9AF 00						.BYTE $00
   607 B9B0 00						.BYTE $00
   607 B9B1 00						.BYTE $00
   607 B9B2 00						.BYTE $00
   607 B9B3 00						.BYTE $00
   607 B9B4 00						.BYTE $00
   607 B9B5 00						.BYTE $00
   607 B9B6 00						.BYTE $00
   607 B9B7 00						.BYTE $00
   607 B9B8 00						.BYTE $00
   607 B9B9 00						.BYTE $00
   607 B9BA 00						.BYTE $00
   607 B9BB 00						.BYTE $00
   607 B9BC 00						.BYTE $00
   607 B9BD 00						.BYTE $00
   607 B9BE 00						.BYTE $00
   607 B9BF 00						.BYTE $00
   607 B9C0 00						.BYTE $00
   607 B9C1 00						.BYTE $00
   607 B9C2 00						.BYTE $00
   607 B9C3 00						.BYTE $00
   607 B9C4 00						.BYTE $00
   607 B9C5 00						.BYTE $00
   607 B9C6 00						.BYTE $00
   607 B9C7 00						.BYTE $00
   607 B9C8 00						.BYTE $00
   607 B9C9 00						.BYTE $00
   607 B9CA 00						.BYTE $00
   607 B9CB 00						.BYTE $00
   607 B9CC 00						.BYTE $00
   607 B9CD 00						.BYTE $00
   607 B9CE 00						.BYTE $00
   607 B9CF 00						.BYTE $00
   607 B9D0 00						.BYTE $00
   607 B9D1 00						.BYTE $00
   607 B9D2 00						.BYTE $00
   607 B9D3 00						.BYTE $00
   607 B9D4 00						.BYTE $00
   607 B9D5 00						.BYTE $00
   607 B9D6 00						.BYTE $00
   607 B9D7 00						.BYTE $00
   607 B9D8 00						.BYTE $00
   607 B9D9 00						.BYTE $00
   607 B9DA 00						.BYTE $00
   607 B9DB 00						.BYTE $00
   607 B9DC 00						.BYTE $00
   607 B9DD 00						.BYTE $00
   607 B9DE 00						.BYTE $00
   607 B9DF 00						.BYTE $00
   607 B9E0 00						.BYTE $00
   607 B9E1 00						.BYTE $00
   607 B9E2 00						.BYTE $00
   607 B9E3 00						.BYTE $00
   607 B9E4 00						.BYTE $00
   607 B9E5 00						.BYTE $00
   607 B9E6 00						.BYTE $00
   607 B9E7 00						.BYTE $00
   607 B9E8 00						.BYTE $00
   607 B9E9 00						.BYTE $00
   607 B9EA 00						.BYTE $00
   607 B9EB 00						.BYTE $00
   607 B9EC 00						.BYTE $00
   607 B9ED 00						.BYTE $00
   607 B9EE 00						.BYTE $00
   607 B9EF 00						.BYTE $00
   607 B9F0 00						.BYTE $00
   607 B9F1 00						.BYTE $00
   607 B9F2 00						.BYTE $00
   607 B9F3 00						.BYTE $00
   607 B9F4 00						.BYTE $00
   607 B9F5 00						.BYTE $00
   607 B9F6 00						.BYTE $00
   607 B9F7 00						.BYTE $00
   607 B9F8 00						.BYTE $00
   607 B9F9 00						.BYTE $00
   607 B9FA 00						.BYTE $00
   607 B9FB 00						.BYTE $00
   607 B9FC 00						.BYTE $00
   607 B9FD 00						.BYTE $00
   607 B9FE 00						.BYTE $00
   607 B9FF 00						.BYTE $00
   607 BA00 00						.BYTE $00
   607 BA01 00						.BYTE $00
   607 BA02 00						.BYTE $00
   607 BA03 00						.BYTE $00
   607 BA04 00						.BYTE $00
   607 BA05 00						.BYTE $00
   607 BA06 00						.BYTE $00
   607 BA07 00						.BYTE $00
   607 BA08 00						.BYTE $00
   607 BA09 00						.BYTE $00
   607 BA0A 00						.BYTE $00
   607 BA0B 00						.BYTE $00
   607 BA0C 00						.BYTE $00
   607 BA0D 00						.BYTE $00
   607 BA0E 00						.BYTE $00
   607 BA0F 00						.BYTE $00
   607 BA10 00						.BYTE $00
   607 BA11 00						.BYTE $00
   607 BA12 00						.BYTE $00
   607 BA13 00						.BYTE $00
   607 BA14 00						.BYTE $00
   607 BA15 00						.BYTE $00
   607 BA16 00						.BYTE $00
   607 BA17 00						.BYTE $00
   607 BA18 00						.BYTE $00
   607 BA19 00						.BYTE $00
   607 BA1A 00						.BYTE $00
   607 BA1B 00						.BYTE $00
   607 BA1C 00						.BYTE $00
   607 BA1D 00						.BYTE $00
   607 BA1E 00						.BYTE $00
   607 BA1F 00						.BYTE $00
   607 BA20 00						.BYTE $00
   607 BA21 00						.BYTE $00
   607 BA22 00						.BYTE $00
   607 BA23 00						.BYTE $00
   607 BA24 00						.BYTE $00
   607 BA25 00						.BYTE $00
   607 BA26 00						.BYTE $00
   607 BA27 00						.BYTE $00
   607 BA28 00						.BYTE $00
   607 BA29 00						.BYTE $00
   607 BA2A 00						.BYTE $00
   607 BA2B 00						.BYTE $00
   607 BA2C 00						.BYTE $00
   607 BA2D 00						.BYTE $00
   607 BA2E 00						.BYTE $00
   607 BA2F 00						.BYTE $00
   607 BA30 00						.BYTE $00
   607 BA31 00						.BYTE $00
   607 BA32 00						.BYTE $00
   607 BA33 00						.BYTE $00
   607 BA34 00						.BYTE $00
   607 BA35 00						.BYTE $00
   607 BA36 00						.BYTE $00
   607 BA37 00						.BYTE $00
   607 BA38 00						.BYTE $00
   607 BA39 00						.BYTE $00
   607 BA3A 00						.BYTE $00
   607 BA3B 00						.BYTE $00
   607 BA3C 00						.BYTE $00
   607 BA3D 00						.BYTE $00
   607 BA3E 00						.BYTE $00
   607 BA3F 00						.BYTE $00
   607 BA40 00						.BYTE $00
   607 BA41 00						.BYTE $00
   607 BA42 00						.BYTE $00
   607 BA43 00						.BYTE $00
   607 BA44 00						.BYTE $00
   607 BA45 00						.BYTE $00
   607 BA46 00						.BYTE $00
   607 BA47 00						.BYTE $00
   607 BA48 00						.BYTE $00
   607 BA49 00						.BYTE $00
   607 BA4A 00						.BYTE $00
   607 BA4B 00						.BYTE $00
   607 BA4C 00						.BYTE $00
   607 BA4D 00						.BYTE $00
   607 BA4E 00						.BYTE $00
   607 BA4F 00						.BYTE $00
   607 BA50 00						.BYTE $00
   607 BA51 00						.BYTE $00
   607 BA52 00						.BYTE $00
   607 BA53 00						.BYTE $00
   607 BA54 00						.BYTE $00
   607 BA55 00						.BYTE $00
   607 BA56 00						.BYTE $00
   607 BA57 00						.BYTE $00
   607 BA58 00						.BYTE $00
   607 BA59 00						.BYTE $00
   607 BA5A 00						.BYTE $00
   607 BA5B 00						.BYTE $00
   607 BA5C 00						.BYTE $00
   607 BA5D 00						.BYTE $00
   607 BA5E 00						.BYTE $00
   607 BA5F 00						.BYTE $00
   607 BA60 00						.BYTE $00
   607 BA61 00						.BYTE $00
   607 BA62 00						.BYTE $00
   607 BA63 00						.BYTE $00
   607 BA64 00						.BYTE $00
   607 BA65 00						.BYTE $00
   607 BA66 00						.BYTE $00
   607 BA67 00						.BYTE $00
   607 BA68 00						.BYTE $00
   607 BA69 00						.BYTE $00
   607 BA6A 00						.BYTE $00
   607 BA6B 00						.BYTE $00
   607 BA6C 00						.BYTE $00
   607 BA6D 00						.BYTE $00
   607 BA6E 00						.BYTE $00
   607 BA6F 00						.BYTE $00
   607 BA70 00						.BYTE $00
   607 BA71 00						.BYTE $00
   607 BA72 00						.BYTE $00
   607 BA73 00						.BYTE $00
   607 BA74 00						.BYTE $00
   607 BA75 00						.BYTE $00
   607 BA76 00						.BYTE $00
   607 BA77 00						.BYTE $00
   607 BA78 00						.BYTE $00
   607 BA79 00						.BYTE $00
   607 BA7A 00						.BYTE $00
   607 BA7B 00						.BYTE $00
   607 BA7C 00						.BYTE $00
   607 BA7D 00						.BYTE $00
   607 BA7E 00						.BYTE $00
   607 BA7F 00						.BYTE $00
   607 BA80 00						.BYTE $00
   607 BA81 00						.BYTE $00
   607 BA82 00						.BYTE $00
   607 BA83 00						.BYTE $00
   607 BA84 00						.BYTE $00
   607 BA85 00						.BYTE $00
   607 BA86 00						.BYTE $00
   607 BA87 00						.BYTE $00
   607 BA88 00						.BYTE $00
   607 BA89 00						.BYTE $00
   607 BA8A 00						.BYTE $00
   607 BA8B 00						.BYTE $00
   607 BA8C 00						.BYTE $00
   607 BA8D 00						.BYTE $00
   607 BA8E 00						.BYTE $00
   607 BA8F 00						.BYTE $00
   607 BA90 00						.BYTE $00
   607 BA91 00						.BYTE $00
   607 BA92 00						.BYTE $00
   607 BA93 00						.BYTE $00
   607 BA94 00						.BYTE $00
   607 BA95 00						.BYTE $00
   607 BA96 00						.BYTE $00
   607 BA97 00						.BYTE $00
   607 BA98 00						.BYTE $00
   607 BA99 00						.BYTE $00
   607 BA9A 00						.BYTE $00
   607 BA9B 00						.BYTE $00
   607 BA9C 00						.BYTE $00
   607 BA9D 00						.BYTE $00
   607 BA9E 00						.BYTE $00
   607 BA9F 00						.BYTE $00
   607 BAA0 00						.BYTE $00
   607 BAA1 00						.BYTE $00
   607 BAA2 00						.BYTE $00
   607 BAA3 00						.BYTE $00
   607 BAA4 00						.BYTE $00
   607 BAA5 00						.BYTE $00
   607 BAA6 00						.BYTE $00
   607 BAA7 00						.BYTE $00
   607 BAA8 00						.BYTE $00
   607 BAA9 00						.BYTE $00
   607 BAAA 00						.BYTE $00
   607 BAAB 00						.BYTE $00
   607 BAAC 00						.BYTE $00
   607 BAAD 00						.BYTE $00
   607 BAAE 00						.BYTE $00
   607 BAAF 00						.BYTE $00
   607 BAB0 00						.BYTE $00
   607 BAB1 00						.BYTE $00
   607 BAB2 00						.BYTE $00
   607 BAB3 00						.BYTE $00
   607 BAB4 00						.BYTE $00
   607 BAB5 00						.BYTE $00
   607 BAB6 00						.BYTE $00
   607 BAB7 00						.BYTE $00
   607 BAB8 00						.BYTE $00
   607 BAB9 00						.BYTE $00
   607 BABA 00						.BYTE $00
   607 BABB 00						.BYTE $00
   607 BABC 00						.BYTE $00
   607 BABD 00						.BYTE $00
   607 BABE 00						.BYTE $00
   607 BABF 00						.BYTE $00
   607 BAC0 00						.BYTE $00
   607 BAC1 00						.BYTE $00
   607 BAC2 00						.BYTE $00
   607 BAC3 00						.BYTE $00
   607 BAC4 00						.BYTE $00
   607 BAC5 00						.BYTE $00
   607 BAC6 00						.BYTE $00
   607 BAC7 00						.BYTE $00
   607 BAC8 00						.BYTE $00
   607 BAC9 00						.BYTE $00
   607 BACA 00						.BYTE $00
   607 BACB 00						.BYTE $00
   607 BACC 00						.BYTE $00
   607 BACD 00						.BYTE $00
   607 BACE 00						.BYTE $00
   607 BACF 00						.BYTE $00
   607 BAD0 00						.BYTE $00
   607 BAD1 00						.BYTE $00
   607 BAD2 00						.BYTE $00
   607 BAD3 00						.BYTE $00
   607 BAD4 00						.BYTE $00
   607 BAD5 00						.BYTE $00
   607 BAD6 00						.BYTE $00
   607 BAD7 00						.BYTE $00
   607 BAD8 00						.BYTE $00
   607 BAD9 00						.BYTE $00
   607 BADA 00						.BYTE $00
   607 BADB 00						.BYTE $00
   607 BADC 00						.BYTE $00
   607 BADD 00						.BYTE $00
   607 BADE 00						.BYTE $00
   607 BADF 00						.BYTE $00
   607 BAE0 00						.BYTE $00
   607 BAE1 00						.BYTE $00
   607 BAE2 00						.BYTE $00
   607 BAE3 00						.BYTE $00
   607 BAE4 00						.BYTE $00
   607 BAE5 00						.BYTE $00
   607 BAE6 00						.BYTE $00
   607 BAE7 00						.BYTE $00
   607 BAE8 00						.BYTE $00
   607 BAE9 00						.BYTE $00
   607 BAEA 00						.BYTE $00
   607 BAEB 00						.BYTE $00
   607 BAEC 00						.BYTE $00
   607 BAED 00						.BYTE $00
   607 BAEE 00						.BYTE $00
   607 BAEF 00						.BYTE $00
   607 BAF0 00						.BYTE $00
   607 BAF1 00						.BYTE $00
   607 BAF2 00						.BYTE $00
   607 BAF3 00						.BYTE $00
   607 BAF4 00						.BYTE $00
   607 BAF5 00						.BYTE $00
   607 BAF6 00						.BYTE $00
   607 BAF7 00						.BYTE $00
   607 BAF8 00						.BYTE $00
   607 BAF9 00						.BYTE $00
   607 BAFA 00						.BYTE $00
   607 BAFB 00						.BYTE $00
   607 BAFC 00						.BYTE $00
   607 BAFD 00						.BYTE $00
   607 BAFE 00						.BYTE $00
   607 BAFF 00						.BYTE $00
   607 BB00 00						.BYTE $00
   607 BB01 00						.BYTE $00
   607 BB02 00						.BYTE $00
   607 BB03 00						.BYTE $00
   607 BB04 00						.BYTE $00
   607 BB05 00						.BYTE $00
   607 BB06 00						.BYTE $00
   607 BB07 00						.BYTE $00
   607 BB08 00						.BYTE $00
   607 BB09 00						.BYTE $00
   607 BB0A 00						.BYTE $00
   607 BB0B 00						.BYTE $00
   607 BB0C 00						.BYTE $00
   607 BB0D 00						.BYTE $00
   607 BB0E 00						.BYTE $00
   607 BB0F 00						.BYTE $00
   607 BB10 00						.BYTE $00
   607 BB11 00						.BYTE $00
   607 BB12 00						.BYTE $00
   607 BB13 00						.BYTE $00
   607 BB14 00						.BYTE $00
   607 BB15 00						.BYTE $00
   607 BB16 00						.BYTE $00
   607 BB17 00						.BYTE $00
   607 BB18 00						.BYTE $00
   607 BB19 00						.BYTE $00
   607 BB1A 00						.BYTE $00
   607 BB1B 00						.BYTE $00
   607 BB1C 00						.BYTE $00
   607 BB1D 00						.BYTE $00
   607 BB1E 00						.BYTE $00
   607 BB1F 00						.BYTE $00
   607 BB20 00						.BYTE $00
   607 BB21 00						.BYTE $00
   607 BB22 00						.BYTE $00
   607 BB23 00						.BYTE $00
   607 BB24 00						.BYTE $00
   607 BB25 00						.BYTE $00
   607 BB26 00						.BYTE $00
   607 BB27 00						.BYTE $00
   607 BB28 00						.BYTE $00
   607 BB29 00						.BYTE $00
   607 BB2A 00						.BYTE $00
   607 BB2B 00						.BYTE $00
   607 BB2C 00						.BYTE $00
   607 BB2D 00						.BYTE $00
   607 BB2E 00						.BYTE $00
   607 BB2F 00						.BYTE $00
   607 BB30 00						.BYTE $00
   607 BB31 00						.BYTE $00
   607 BB32 00						.BYTE $00
   607 BB33 00						.BYTE $00
   607 BB34 00						.BYTE $00
   607 BB35 00						.BYTE $00
   607 BB36 00						.BYTE $00
   607 BB37 00						.BYTE $00
   607 BB38 00						.BYTE $00
   607 BB39 00						.BYTE $00
   607 BB3A 00						.BYTE $00
   607 BB3B 00						.BYTE $00
   607 BB3C 00						.BYTE $00
   607 BB3D 00						.BYTE $00
   607 BB3E 00						.BYTE $00
   607 BB3F 00						.BYTE $00
   607 BB40 00						.BYTE $00
   607 BB41 00						.BYTE $00
   607 BB42 00						.BYTE $00
   607 BB43 00						.BYTE $00
   607 BB44 00						.BYTE $00
   607 BB45 00						.BYTE $00
   607 BB46 00						.BYTE $00
   607 BB47 00						.BYTE $00
   607 BB48 00						.BYTE $00
   607 BB49 00						.BYTE $00
   607 BB4A 00						.BYTE $00
   607 BB4B 00						.BYTE $00
   607 BB4C 00						.BYTE $00
   607 BB4D 00						.BYTE $00
   607 BB4E 00						.BYTE $00
   607 BB4F 00						.BYTE $00
   607 BB50 00						.BYTE $00
   607 BB51 00						.BYTE $00
   607 BB52 00						.BYTE $00
   607 BB53 00						.BYTE $00
   607 BB54 00						.BYTE $00
   607 BB55 00						.BYTE $00
   607 BB56 00						.BYTE $00
   607 BB57 00						.BYTE $00
   607 BB58 00						.BYTE $00
   607 BB59 00						.BYTE $00
   607 BB5A 00						.BYTE $00
   607 BB5B 00						.BYTE $00
   607 BB5C 00						.BYTE $00
   607 BB5D 00						.BYTE $00
   607 BB5E 00						.BYTE $00
   607 BB5F 00						.BYTE $00
   607 BB60 00						.BYTE $00
   607 BB61 00						.BYTE $00
   607 BB62 00						.BYTE $00
   607 BB63 00						.BYTE $00
   607 BB64 00						.BYTE $00
   607 BB65 00						.BYTE $00
   607 BB66 00						.BYTE $00
   607 BB67 00						.BYTE $00
   607 BB68 00						.BYTE $00
   607 BB69 00						.BYTE $00
   607 BB6A 00						.BYTE $00
   607 BB6B 00						.BYTE $00
   607 BB6C 00						.BYTE $00
   607 BB6D 00						.BYTE $00
   607 BB6E 00						.BYTE $00
   607 BB6F 00						.BYTE $00
   607 BB70 00						.BYTE $00
   607 BB71 00						.BYTE $00
   607 BB72 00						.BYTE $00
   607 BB73 00						.BYTE $00
   607 BB74 00						.BYTE $00
   607 BB75 00						.BYTE $00
   607 BB76 00						.BYTE $00
   607 BB77 00						.BYTE $00
   607 BB78 00						.BYTE $00
   607 BB79 00						.BYTE $00
   607 BB7A 00						.BYTE $00
   607 BB7B 00						.BYTE $00
   607 BB7C 00						.BYTE $00
   607 BB7D 00						.BYTE $00
   607 BB7E 00						.BYTE $00
   607 BB7F 00						.BYTE $00
   607 BB80 00						.BYTE $00
   607 BB81 00						.BYTE $00
   607 BB82 00						.BYTE $00
   607 BB83 00						.BYTE $00
   607 BB84 00						.BYTE $00
   607 BB85 00						.BYTE $00
   607 BB86 00						.BYTE $00
   607 BB87 00						.BYTE $00
   607 BB88 00						.BYTE $00
   607 BB89 00						.BYTE $00
   607 BB8A 00						.BYTE $00
   607 BB8B 00						.BYTE $00
   607 BB8C 00						.BYTE $00
   607 BB8D 00						.BYTE $00
   607 BB8E 00						.BYTE $00
   607 BB8F 00						.BYTE $00
   607 BB90 00						.BYTE $00
   607 BB91 00						.BYTE $00
   607 BB92 00						.BYTE $00
   607 BB93 00						.BYTE $00
   607 BB94 00						.BYTE $00
   607 BB95 00						.BYTE $00
   607 BB96 00						.BYTE $00
   607 BB97 00						.BYTE $00
   607 BB98 00						.BYTE $00
   607 BB99 00						.BYTE $00
   607 BB9A 00						.BYTE $00
   607 BB9B 00						.BYTE $00
   607 BB9C 00						.BYTE $00
   607 BB9D 00						.BYTE $00
   607 BB9E 00						.BYTE $00
   607 BB9F 00						.BYTE $00
   607 BBA0 00						.BYTE $00
   607 BBA1 00						.BYTE $00
   607 BBA2 00						.BYTE $00
   607 BBA3 00						.BYTE $00
   607 BBA4 00						.BYTE $00
   607 BBA5 00						.BYTE $00
   607 BBA6 00						.BYTE $00
   607 BBA7 00						.BYTE $00
   607 BBA8 00						.BYTE $00
   607 BBA9 00						.BYTE $00
   607 BBAA 00						.BYTE $00
   607 BBAB 00						.BYTE $00
   607 BBAC 00						.BYTE $00
   607 BBAD 00						.BYTE $00
   607 BBAE 00						.BYTE $00
   607 BBAF 00						.BYTE $00
   607 BBB0 00						.BYTE $00
   607 BBB1 00						.BYTE $00
   607 BBB2 00						.BYTE $00
   607 BBB3 00						.BYTE $00
   607 BBB4 00						.BYTE $00
   607 BBB5 00						.BYTE $00
   607 BBB6 00						.BYTE $00
   607 BBB7 00						.BYTE $00
   607 BBB8 00						.BYTE $00
   607 BBB9 00						.BYTE $00
   607 BBBA 00						.BYTE $00
   607 BBBB 00						.BYTE $00
   607 BBBC 00						.BYTE $00
   607 BBBD 00						.BYTE $00
   607 BBBE 00						.BYTE $00
   607 BBBF 00						.BYTE $00
   607 BBC0 00						.BYTE $00
   607 BBC1 00						.BYTE $00
   607 BBC2 00						.BYTE $00
   607 BBC3 00						.BYTE $00
   607 BBC4 00						.BYTE $00
   607 BBC5 00						.BYTE $00
   607 BBC6 00						.BYTE $00
   607 BBC7 00						.BYTE $00
   607 BBC8 00						.BYTE $00
   607 BBC9 00						.BYTE $00
   607 BBCA 00						.BYTE $00
   607 BBCB 00						.BYTE $00
   607 BBCC 00						.BYTE $00
   607 BBCD 00						.BYTE $00
   607 BBCE 00						.BYTE $00
   607 BBCF 00						.BYTE $00
   607 BBD0 00						.BYTE $00
   607 BBD1 00						.BYTE $00
   607 BBD2 00						.BYTE $00
   607 BBD3 00						.BYTE $00
   607 BBD4 00						.BYTE $00
   607 BBD5 00						.BYTE $00
   607 BBD6 00						.BYTE $00
   607 BBD7 00						.BYTE $00
   607 BBD8 00						.BYTE $00
   607 BBD9 00						.BYTE $00
   607 BBDA 00						.BYTE $00
   607 BBDB 00						.BYTE $00
   607 BBDC 00						.BYTE $00
   607 BBDD 00						.BYTE $00
   607 BBDE 00						.BYTE $00
   607 BBDF 00						.BYTE $00
   607 BBE0 00						.BYTE $00
   607 BBE1 00						.BYTE $00
   607 BBE2 00						.BYTE $00
   607 BBE3 00						.BYTE $00
   607 BBE4 00						.BYTE $00
   607 BBE5 00						.BYTE $00
   607 BBE6 00						.BYTE $00
   607 BBE7 00						.BYTE $00
   607 BBE8 00						.BYTE $00
   607 BBE9 00						.BYTE $00
   607 BBEA 00						.BYTE $00
   607 BBEB 00						.BYTE $00
   607 BBEC 00						.BYTE $00
   607 BBED 00						.BYTE $00
   607 BBEE 00						.BYTE $00
   607 BBEF 00						.BYTE $00
   607 BBF0 00						.BYTE $00
   607 BBF1 00						.BYTE $00
   607 BBF2 00						.BYTE $00
   607 BBF3 00						.BYTE $00
   607 BBF4 00						.BYTE $00
   607 BBF5 00						.BYTE $00
   607 BBF6 00						.BYTE $00
   607 BBF7 00						.BYTE $00
   607 BBF8 00						.BYTE $00
   607 BBF9 00						.BYTE $00
   607 BBFA 00						.BYTE $00
   607 BBFB 00						.BYTE $00
   607 BBFC 00						.BYTE $00
   607 BBFD 00						.BYTE $00
   607 BBFE 00						.BYTE $00
   607 BBFF 00						.BYTE $00
   607 BC00 00						.BYTE $00
   607 BC01 00						.BYTE $00
   607 BC02 00						.BYTE $00
   607 BC03 00						.BYTE $00
   607 BC04 00						.BYTE $00
   607 BC05 00						.BYTE $00
   607 BC06 00						.BYTE $00
   607 BC07 00						.BYTE $00
   607 BC08 00						.BYTE $00
   607 BC09 00						.BYTE $00
   607 BC0A 00						.BYTE $00
   607 BC0B 00						.BYTE $00
   607 BC0C 00						.BYTE $00
   607 BC0D 00						.BYTE $00
   607 BC0E 00						.BYTE $00
   607 BC0F 00						.BYTE $00
   607 BC10 00						.BYTE $00
   607 BC11 00						.BYTE $00
   607 BC12 00						.BYTE $00
   607 BC13 00						.BYTE $00
   607 BC14 00						.BYTE $00
   607 BC15 00						.BYTE $00
   607 BC16 00						.BYTE $00
   607 BC17 00						.BYTE $00
   607 BC18 00						.BYTE $00
   607 BC19 00						.BYTE $00
   607 BC1A 00						.BYTE $00
   607 BC1B 00						.BYTE $00
   607 BC1C 00						.BYTE $00
   607 BC1D 00						.BYTE $00
   607 BC1E 00						.BYTE $00
   607 BC1F 00						.BYTE $00
   607 BC20 00						.BYTE $00
   607 BC21 00						.BYTE $00
   607 BC22 00						.BYTE $00
   607 BC23 00						.BYTE $00
   607 BC24 00						.BYTE $00
   607 BC25 00						.BYTE $00
   607 BC26 00						.BYTE $00
   607 BC27 00						.BYTE $00
   607 BC28 00						.BYTE $00
   607 BC29 00						.BYTE $00
   607 BC2A 00						.BYTE $00
   607 BC2B 00						.BYTE $00
   607 BC2C 00						.BYTE $00
   607 BC2D 00						.BYTE $00
   607 BC2E 00						.BYTE $00
   607 BC2F 00						.BYTE $00
   607 BC30 00						.BYTE $00
   607 BC31 00						.BYTE $00
   607 BC32 00						.BYTE $00
   607 BC33 00						.BYTE $00
   607 BC34 00						.BYTE $00
   607 BC35 00						.BYTE $00
   607 BC36 00						.BYTE $00
   607 BC37 00						.BYTE $00
   607 BC38 00						.BYTE $00
   607 BC39 00						.BYTE $00
   607 BC3A 00						.BYTE $00
   607 BC3B 00						.BYTE $00
   607 BC3C 00						.BYTE $00
   607 BC3D 00						.BYTE $00
   607 BC3E 00						.BYTE $00
   607 BC3F 00						.BYTE $00
   607 BC40 00						.BYTE $00
   607 BC41 00						.BYTE $00
   607 BC42 00						.BYTE $00
   607 BC43 00						.BYTE $00
   607 BC44 00						.BYTE $00
   607 BC45 00						.BYTE $00
   607 BC46 00						.BYTE $00
   607 BC47 00						.BYTE $00
   607 BC48 00						.BYTE $00
   607 BC49 00						.BYTE $00
   607 BC4A 00						.BYTE $00
   607 BC4B 00						.BYTE $00
   607 BC4C 00						.BYTE $00
   607 BC4D 00						.BYTE $00
   607 BC4E 00						.BYTE $00
   607 BC4F 00						.BYTE $00
   607 BC50 00						.BYTE $00
   607 BC51 00						.BYTE $00
   607 BC52 00						.BYTE $00
   607 BC53 00						.BYTE $00
   607 BC54 00						.BYTE $00
   607 BC55 00						.BYTE $00
   607 BC56 00						.BYTE $00
   607 BC57 00						.BYTE $00
   607 BC58 00						.BYTE $00
   607 BC59 00						.BYTE $00
   607 BC5A 00						.BYTE $00
   607 BC5B 00						.BYTE $00
   607 BC5C 00						.BYTE $00
   607 BC5D 00						.BYTE $00
   607 BC5E 00						.BYTE $00
   607 BC5F 00						.BYTE $00
   607 BC60 00						.BYTE $00
   607 BC61 00						.BYTE $00
   607 BC62 00						.BYTE $00
   607 BC63 00						.BYTE $00
   607 BC64 00						.BYTE $00
   607 BC65 00						.BYTE $00
   607 BC66 00						.BYTE $00
   607 BC67 00						.BYTE $00
   607 BC68 00						.BYTE $00
   607 BC69 00						.BYTE $00
   607 BC6A 00						.BYTE $00
   607 BC6B 00						.BYTE $00
   607 BC6C 00						.BYTE $00
   607 BC6D 00						.BYTE $00
   607 BC6E 00						.BYTE $00
   607 BC6F 00						.BYTE $00
   607 BC70 00						.BYTE $00
   607 BC71 00						.BYTE $00
   607 BC72 00						.BYTE $00
   607 BC73 00						.BYTE $00
   607 BC74 00						.BYTE $00
   607 BC75 00						.BYTE $00
   607 BC76 00						.BYTE $00
   607 BC77 00						.BYTE $00
   607 BC78 00						.BYTE $00
   607 BC79 00						.BYTE $00
   607 BC7A 00						.BYTE $00
   607 BC7B 00						.BYTE $00
   607 BC7C 00						.BYTE $00
   607 BC7D 00						.BYTE $00
   607 BC7E 00						.BYTE $00
   607 BC7F 00						.BYTE $00
   607 BC80 00						.BYTE $00
   607 BC81 00						.BYTE $00
   607 BC82 00						.BYTE $00
   607 BC83 00						.BYTE $00
   607 BC84 00						.BYTE $00
   607 BC85 00						.BYTE $00
   607 BC86 00						.BYTE $00
   607 BC87 00						.BYTE $00
   607 BC88 00						.BYTE $00
   607 BC89 00						.BYTE $00
   607 BC8A 00						.BYTE $00
   607 BC8B 00						.BYTE $00
   607 BC8C 00						.BYTE $00
   607 BC8D 00						.BYTE $00
   607 BC8E 00						.BYTE $00
   607 BC8F 00						.BYTE $00
   607 BC90 00						.BYTE $00
   607 BC91 00						.BYTE $00
   607 BC92 00						.BYTE $00
   607 BC93 00						.BYTE $00
   607 BC94 00						.BYTE $00
   607 BC95 00						.BYTE $00
   607 BC96 00						.BYTE $00
   607 BC97 00						.BYTE $00
   607 BC98 00						.BYTE $00
   607 BC99 00						.BYTE $00
   607 BC9A 00						.BYTE $00
   607 BC9B 00						.BYTE $00
   607 BC9C 00						.BYTE $00
   607 BC9D 00						.BYTE $00
   607 BC9E 00						.BYTE $00
   607 BC9F 00						.BYTE $00
   607 BCA0 00						.BYTE $00
   607 BCA1 00						.BYTE $00
   607 BCA2 00						.BYTE $00
   607 BCA3 00						.BYTE $00
   607 BCA4 00						.BYTE $00
   607 BCA5 00						.BYTE $00
   607 BCA6 00						.BYTE $00
   607 BCA7 00						.BYTE $00
   607 BCA8 00						.BYTE $00
   607 BCA9 00						.BYTE $00
   607 BCAA 00						.BYTE $00
   607 BCAB 00						.BYTE $00
   607 BCAC 00						.BYTE $00
   607 BCAD 00						.BYTE $00
   607 BCAE 00						.BYTE $00
   607 BCAF 00						.BYTE $00
   607 BCB0 00						.BYTE $00
   607 BCB1 00						.BYTE $00
   607 BCB2 00						.BYTE $00
   607 BCB3 00						.BYTE $00
   607 BCB4 00						.BYTE $00
   607 BCB5 00						.BYTE $00
   607 BCB6 00						.BYTE $00
   607 BCB7 00						.BYTE $00
   607 BCB8 00						.BYTE $00
   607 BCB9 00						.BYTE $00
   607 BCBA 00						.BYTE $00
   607 BCBB 00						.BYTE $00
   607 BCBC 00						.BYTE $00
   607 BCBD 00						.BYTE $00
   607 BCBE 00						.BYTE $00
   607 BCBF 00						.BYTE $00
   607 BCC0 00						.BYTE $00
   607 BCC1 00						.BYTE $00
   607 BCC2 00						.BYTE $00
   607 BCC3 00						.BYTE $00
   607 BCC4 00						.BYTE $00
   607 BCC5 00						.BYTE $00
   607 BCC6 00						.BYTE $00
   607 BCC7 00						.BYTE $00
   607 BCC8 00						.BYTE $00
   607 BCC9 00						.BYTE $00
   607 BCCA 00						.BYTE $00
   607 BCCB 00						.BYTE $00
   607 BCCC 00						.BYTE $00
   607 BCCD 00						.BYTE $00
   607 BCCE 00						.BYTE $00
   607 BCCF 00						.BYTE $00
   607 BCD0 00						.BYTE $00
   607 BCD1 00						.BYTE $00
   607 BCD2 00						.BYTE $00
   607 BCD3 00						.BYTE $00
   607 BCD4 00						.BYTE $00
   607 BCD5 00						.BYTE $00
   607 BCD6 00						.BYTE $00
   607 BCD7 00						.BYTE $00
   607 BCD8 00						.BYTE $00
   607 BCD9 00						.BYTE $00
   607 BCDA 00						.BYTE $00
   607 BCDB 00						.BYTE $00
   607 BCDC 00						.BYTE $00
   607 BCDD 00						.BYTE $00
   607 BCDE 00						.BYTE $00
   607 BCDF 00						.BYTE $00
   607 BCE0 00						.BYTE $00
   607 BCE1 00						.BYTE $00
   607 BCE2 00						.BYTE $00
   607 BCE3 00						.BYTE $00
   607 BCE4 00						.BYTE $00
   607 BCE5 00						.BYTE $00
   607 BCE6 00						.BYTE $00
   607 BCE7 00						.BYTE $00
   607 BCE8 00						.BYTE $00
   607 BCE9 00						.BYTE $00
   607 BCEA 00						.BYTE $00
   607 BCEB 00						.BYTE $00
   607 BCEC 00						.BYTE $00
   607 BCED 00						.BYTE $00
   607 BCEE 00						.BYTE $00
   607 BCEF 00						.BYTE $00
   607 BCF0 00						.BYTE $00
   607 BCF1 00						.BYTE $00
   607 BCF2 00						.BYTE $00
   607 BCF3 00						.BYTE $00
   607 BCF4 00						.BYTE $00
   607 BCF5 00						.BYTE $00
   607 BCF6 00						.BYTE $00
   607 BCF7 00						.BYTE $00
   607 BCF8 00						.BYTE $00
   607 BCF9 00						.BYTE $00
   607 BCFA 00						.BYTE $00
   607 BCFB 00						.BYTE $00
   607 BCFC 00						.BYTE $00
   607 BCFD 00						.BYTE $00
   607 BCFE 00						.BYTE $00
   607 BCFF 00						.BYTE $00
   607 BD00 00						.BYTE $00
   607 BD01 00						.BYTE $00
   607 BD02 00						.BYTE $00
   607 BD03 00						.BYTE $00
   607 BD04 00						.BYTE $00
   607 BD05 00						.BYTE $00
   607 BD06 00						.BYTE $00
   607 BD07 00						.BYTE $00
   607 BD08 00						.BYTE $00
   607 BD09 00						.BYTE $00
   607 BD0A 00						.BYTE $00
   607 BD0B 00						.BYTE $00
   607 BD0C 00						.BYTE $00
   607 BD0D 00						.BYTE $00
   607 BD0E 00						.BYTE $00
   607 BD0F 00						.BYTE $00
   607 BD10 00						.BYTE $00
   607 BD11 00						.BYTE $00
   607 BD12 00						.BYTE $00
   607 BD13 00						.BYTE $00
   607 BD14 00						.BYTE $00
   607 BD15 00						.BYTE $00
   607 BD16 00						.BYTE $00
   607 BD17 00						.BYTE $00
   607 BD18 00						.BYTE $00
   607 BD19 00						.BYTE $00
   607 BD1A 00						.BYTE $00
   607 BD1B 00						.BYTE $00
   607 BD1C 00						.BYTE $00
   607 BD1D 00						.BYTE $00
   607 BD1E 00						.BYTE $00
   607 BD1F 00						.BYTE $00
   607 BD20 00						.BYTE $00
   607 BD21 00						.BYTE $00
   607 BD22 00						.BYTE $00
   607 BD23 00						.BYTE $00
   607 BD24 00						.BYTE $00
   607 BD25 00						.BYTE $00
   607 BD26 00						.BYTE $00
   607 BD27 00						.BYTE $00
   607 BD28 00						.BYTE $00
   607 BD29 00						.BYTE $00
   607 BD2A 00						.BYTE $00
   607 BD2B 00						.BYTE $00
   607 BD2C 00						.BYTE $00
   607 BD2D 00						.BYTE $00
   607 BD2E 00						.BYTE $00
   607 BD2F 00						.BYTE $00
   607 BD30 00						.BYTE $00
   607 BD31 00						.BYTE $00
   607 BD32 00						.BYTE $00
   607 BD33 00						.BYTE $00
   607 BD34 00						.BYTE $00
   607 BD35 00						.BYTE $00
   607 BD36 00						.BYTE $00
   607 BD37 00						.BYTE $00
   607 BD38 00						.BYTE $00
   607 BD39 00						.BYTE $00
   607 BD3A 00						.BYTE $00
   607 BD3B 00						.BYTE $00
   607 BD3C 00						.BYTE $00
   607 BD3D 00						.BYTE $00
   607 BD3E 00						.BYTE $00
   607 BD3F 00						.BYTE $00
   607 BD40 00						.BYTE $00
   607 BD41 00						.BYTE $00
   607 BD42 00						.BYTE $00
   607 BD43 00						.BYTE $00
   607 BD44 00						.BYTE $00
   607 BD45 00						.BYTE $00
   607 BD46 00						.BYTE $00
   607 BD47 00						.BYTE $00
   607 BD48 00						.BYTE $00
   607 BD49 00						.BYTE $00
   607 BD4A 00						.BYTE $00
   607 BD4B 00						.BYTE $00
   607 BD4C 00						.BYTE $00
   607 BD4D 00						.BYTE $00
   607 BD4E 00						.BYTE $00
   607 BD4F 00						.BYTE $00
   607 BD50 00						.BYTE $00
   607 BD51 00						.BYTE $00
   607 BD52 00						.BYTE $00
   607 BD53 00						.BYTE $00
   607 BD54 00						.BYTE $00
   607 BD55 00						.BYTE $00
   607 BD56 00						.BYTE $00
   607 BD57 00						.BYTE $00
   607 BD58 00						.BYTE $00
   607 BD59 00						.BYTE $00
   607 BD5A 00						.BYTE $00
   607 BD5B 00						.BYTE $00
   607 BD5C 00						.BYTE $00
   607 BD5D 00						.BYTE $00
   607 BD5E 00						.BYTE $00
   607 BD5F 00						.BYTE $00
   607 BD60 00						.BYTE $00
   607 BD61 00						.BYTE $00
   607 BD62 00						.BYTE $00
   607 BD63 00						.BYTE $00
   607 BD64 00						.BYTE $00
   607 BD65 00						.BYTE $00
   607 BD66 00						.BYTE $00
   607 BD67 00						.BYTE $00
   607 BD68 00						.BYTE $00
   607 BD69 00						.BYTE $00
   607 BD6A 00						.BYTE $00
   607 BD6B 00						.BYTE $00
   607 BD6C 00						.BYTE $00
   607 BD6D 00						.BYTE $00
   607 BD6E 00						.BYTE $00
   607 BD6F 00						.BYTE $00
   607 BD70 00						.BYTE $00
   607 BD71 00						.BYTE $00
   607 BD72 00						.BYTE $00
   607 BD73 00						.BYTE $00
   607 BD74 00						.BYTE $00
   607 BD75 00						.BYTE $00
   607 BD76 00						.BYTE $00
   607 BD77 00						.BYTE $00
   607 BD78 00						.BYTE $00
   607 BD79 00						.BYTE $00
   607 BD7A 00						.BYTE $00
   607 BD7B 00						.BYTE $00
   607 BD7C 00						.BYTE $00
   607 BD7D 00						.BYTE $00
   607 BD7E 00						.BYTE $00
   607 BD7F 00						.BYTE $00
   607 BD80 00						.BYTE $00
   607 BD81 00						.BYTE $00
   607 BD82 00						.BYTE $00
   607 BD83 00						.BYTE $00
   607 BD84 00						.BYTE $00
   607 BD85 00						.BYTE $00
   607 BD86 00						.BYTE $00
   607 BD87 00						.BYTE $00
   607 BD88 00						.BYTE $00
   607 BD89 00						.BYTE $00
   607 BD8A 00						.BYTE $00
   607 BD8B 00						.BYTE $00
   607 BD8C 00						.BYTE $00
   607 BD8D 00						.BYTE $00
   607 BD8E 00						.BYTE $00
   607 BD8F 00						.BYTE $00
   607 BD90 00						.BYTE $00
   607 BD91 00						.BYTE $00
   607 BD92 00						.BYTE $00
   607 BD93 00						.BYTE $00
   607 BD94 00						.BYTE $00
   607 BD95 00						.BYTE $00
   607 BD96 00						.BYTE $00
   607 BD97 00						.BYTE $00
   607 BD98 00						.BYTE $00
   607 BD99 00						.BYTE $00
   607 BD9A 00						.BYTE $00
   607 BD9B 00						.BYTE $00
   607 BD9C 00						.BYTE $00
   607 BD9D 00						.BYTE $00
   607 BD9E 00						.BYTE $00
   607 BD9F 00						.BYTE $00
   607 BDA0 00						.BYTE $00
   607 BDA1 00						.BYTE $00
   607 BDA2 00						.BYTE $00
   607 BDA3 00						.BYTE $00
   607 BDA4 00						.BYTE $00
   607 BDA5 00						.BYTE $00
   607 BDA6 00						.BYTE $00
   607 BDA7 00						.BYTE $00
   607 BDA8 00						.BYTE $00
   607 BDA9 00						.BYTE $00
   607 BDAA 00						.BYTE $00
   607 BDAB 00						.BYTE $00
   607 BDAC 00						.BYTE $00
   607 BDAD 00						.BYTE $00
   607 BDAE 00						.BYTE $00
   607 BDAF 00						.BYTE $00
   607 BDB0 00						.BYTE $00
   607 BDB1 00						.BYTE $00
   607 BDB2 00						.BYTE $00
   607 BDB3 00						.BYTE $00
   607 BDB4 00						.BYTE $00
   607 BDB5 00						.BYTE $00
   607 BDB6 00						.BYTE $00
   607 BDB7 00						.BYTE $00
   607 BDB8 00						.BYTE $00
   607 BDB9 00						.BYTE $00
   607 BDBA 00						.BYTE $00
   607 BDBB 00						.BYTE $00
   607 BDBC 00						.BYTE $00
   607 BDBD 00						.BYTE $00
   607 BDBE 00						.BYTE $00
   607 BDBF 00						.BYTE $00
   607 BDC0 00						.BYTE $00
   607 BDC1 00						.BYTE $00
   607 BDC2 00						.BYTE $00
   607 BDC3 00						.BYTE $00
   607 BDC4 00						.BYTE $00
   607 BDC5 00						.BYTE $00
   607 BDC6 00						.BYTE $00
   607 BDC7 00						.BYTE $00
   607 BDC8 00						.BYTE $00
   607 BDC9 00						.BYTE $00
   607 BDCA 00						.BYTE $00
   607 BDCB 00						.BYTE $00
   607 BDCC 00						.BYTE $00
   607 BDCD 00						.BYTE $00
   607 BDCE 00						.BYTE $00
   607 BDCF 00						.BYTE $00
   607 BDD0 00						.BYTE $00
   607 BDD1 00						.BYTE $00
   607 BDD2 00						.BYTE $00
   607 BDD3 00						.BYTE $00
   607 BDD4 00						.BYTE $00
   607 BDD5 00						.BYTE $00
   607 BDD6 00						.BYTE $00
   607 BDD7 00						.BYTE $00
   607 BDD8 00						.BYTE $00
   607 BDD9 00						.BYTE $00
   607 BDDA 00						.BYTE $00
   607 BDDB 00						.BYTE $00
   607 BDDC 00						.BYTE $00
   607 BDDD 00						.BYTE $00
   607 BDDE 00						.BYTE $00
   607 BDDF 00						.BYTE $00
   607 BDE0 00						.BYTE $00
   607 BDE1 00						.BYTE $00
   607 BDE2 00						.BYTE $00
   607 BDE3 00						.BYTE $00
   607 BDE4 00						.BYTE $00
   607 BDE5 00						.BYTE $00
   607 BDE6 00						.BYTE $00
   607 BDE7 00						.BYTE $00
   607 BDE8 00						.BYTE $00
   607 BDE9 00						.BYTE $00
   607 BDEA 00						.BYTE $00
   607 BDEB 00						.BYTE $00
   607 BDEC 00						.BYTE $00
   607 BDED 00						.BYTE $00
   607 BDEE 00						.BYTE $00
   607 BDEF 00						.BYTE $00
   607 BDF0 00						.BYTE $00
   607 BDF1 00						.BYTE $00
   607 BDF2 00						.BYTE $00
   607 BDF3 00						.BYTE $00
   607 BDF4 00						.BYTE $00
   607 BDF5 00						.BYTE $00
   607 BDF6 00						.BYTE $00
   607 BDF7 00						.BYTE $00
   607 BDF8 00						.BYTE $00
   607 BDF9 00						.BYTE $00
   607 BDFA 00						.BYTE $00
   607 BDFB 00						.BYTE $00
   607 BDFC 00						.BYTE $00
   607 BDFD 00						.BYTE $00
   607 BDFE 00						.BYTE $00
   607 BDFF 00						.BYTE $00
   607 BE00 00						.BYTE $00
   607 BE01 00						.BYTE $00
   607 BE02 00						.BYTE $00
   607 BE03 00						.BYTE $00
   607 BE04 00						.BYTE $00
   607 BE05 00						.BYTE $00
   607 BE06 00						.BYTE $00
   607 BE07 00						.BYTE $00
   607 BE08 00						.BYTE $00
   607 BE09 00						.BYTE $00
   607 BE0A 00						.BYTE $00
   607 BE0B 00						.BYTE $00
   607 BE0C 00						.BYTE $00
   607 BE0D 00						.BYTE $00
   607 BE0E 00						.BYTE $00
   607 BE0F 00						.BYTE $00
   607 BE10 00						.BYTE $00
   607 BE11 00						.BYTE $00
   607 BE12 00						.BYTE $00
   607 BE13 00						.BYTE $00
   607 BE14 00						.BYTE $00
   607 BE15 00						.BYTE $00
   607 BE16 00						.BYTE $00
   607 BE17 00						.BYTE $00
   607 BE18 00						.BYTE $00
   607 BE19 00						.BYTE $00
   607 BE1A 00						.BYTE $00
   607 BE1B 00						.BYTE $00
   607 BE1C 00						.BYTE $00
   607 BE1D 00						.BYTE $00
   607 BE1E 00						.BYTE $00
   607 BE1F 00						.BYTE $00
   607 BE20 00						.BYTE $00
   607 BE21 00						.BYTE $00
   607 BE22 00						.BYTE $00
   607 BE23 00						.BYTE $00
   607 BE24 00						.BYTE $00
   607 BE25 00						.BYTE $00
   607 BE26 00						.BYTE $00
   607 BE27 00						.BYTE $00
   607 BE28 00						.BYTE $00
   607 BE29 00						.BYTE $00
   607 BE2A 00						.BYTE $00
   607 BE2B 00						.BYTE $00
   607 BE2C 00						.BYTE $00
   607 BE2D 00						.BYTE $00
   607 BE2E 00						.BYTE $00
   607 BE2F 00						.BYTE $00
   607 BE30 00						.BYTE $00
   607 BE31 00						.BYTE $00
   607 BE32 00						.BYTE $00
   607 BE33 00						.BYTE $00
   607 BE34 00						.BYTE $00
   607 BE35 00						.BYTE $00
   607 BE36 00						.BYTE $00
   607 BE37 00						.BYTE $00
   607 BE38 00						.BYTE $00
   607 BE39 00						.BYTE $00
   607 BE3A 00						.BYTE $00
   607 BE3B 00						.BYTE $00
   607 BE3C 00						.BYTE $00
   607 BE3D 00						.BYTE $00
   607 BE3E 00						.BYTE $00
   607 BE3F 00						.BYTE $00
   607 BE40 00						.BYTE $00
   607 BE41 00						.BYTE $00
   607 BE42 00						.BYTE $00
   607 BE43 00						.BYTE $00
   607 BE44 00						.BYTE $00
   607 BE45 00						.BYTE $00
   607 BE46 00						.BYTE $00
   607 BE47 00						.BYTE $00
   607 BE48 00						.BYTE $00
   607 BE49 00						.BYTE $00
   607 BE4A 00						.BYTE $00
   607 BE4B 00						.BYTE $00
   607 BE4C 00						.BYTE $00
   607 BE4D 00						.BYTE $00
   607 BE4E 00						.BYTE $00
   607 BE4F 00						.BYTE $00
   607 BE50 00						.BYTE $00
   607 BE51 00						.BYTE $00
   607 BE52 00						.BYTE $00
   607 BE53 00						.BYTE $00
   607 BE54 00						.BYTE $00
   607 BE55 00						.BYTE $00
   607 BE56 00						.BYTE $00
   607 BE57 00						.BYTE $00
   607 BE58 00						.BYTE $00
   607 BE59 00						.BYTE $00
   607 BE5A 00						.BYTE $00
   607 BE5B 00						.BYTE $00
   607 BE5C 00						.BYTE $00
   607 BE5D 00						.BYTE $00
   607 BE5E 00						.BYTE $00
   607 BE5F 00						.BYTE $00
   607 BE60 00						.BYTE $00
   607 BE61 00						.BYTE $00
   607 BE62 00						.BYTE $00
   607 BE63 00						.BYTE $00
   607 BE64 00						.BYTE $00
   607 BE65 00						.BYTE $00
   607 BE66 00						.BYTE $00
   607 BE67 00						.BYTE $00
   607 BE68 00						.BYTE $00
   607 BE69 00						.BYTE $00
   607 BE6A 00						.BYTE $00
   607 BE6B 00						.BYTE $00
   607 BE6C 00						.BYTE $00
   607 BE6D 00						.BYTE $00
   607 BE6E 00						.BYTE $00
   607 BE6F 00						.BYTE $00
   607 BE70 00						.BYTE $00
   607 BE71 00						.BYTE $00
   607 BE72 00						.BYTE $00
   607 BE73 00						.BYTE $00
   607 BE74 00						.BYTE $00
   607 BE75 00						.BYTE $00
   607 BE76 00						.BYTE $00
   607 BE77 00						.BYTE $00
   607 BE78 00						.BYTE $00
   607 BE79 00						.BYTE $00
   607 BE7A 00						.BYTE $00
   607 BE7B 00						.BYTE $00
   607 BE7C 00						.BYTE $00
   607 BE7D 00						.BYTE $00
   607 BE7E 00						.BYTE $00
   607 BE7F 00						.BYTE $00
   607 BE80 00						.BYTE $00
   607 BE81 00						.BYTE $00
   607 BE82 00						.BYTE $00
   607 BE83 00						.BYTE $00
   607 BE84 00						.BYTE $00
   607 BE85 00						.BYTE $00
   607 BE86 00						.BYTE $00
   607 BE87 00						.BYTE $00
   607 BE88 00						.BYTE $00
   607 BE89 00						.BYTE $00
   607 BE8A 00						.BYTE $00
   607 BE8B 00						.BYTE $00
   607 BE8C 00						.BYTE $00
   607 BE8D 00						.BYTE $00
   607 BE8E 00						.BYTE $00
   607 BE8F 00						.BYTE $00
   607 BE90 00						.BYTE $00
   607 BE91 00						.BYTE $00
   607 BE92 00						.BYTE $00
   607 BE93 00						.BYTE $00
   607 BE94 00						.BYTE $00
   607 BE95 00						.BYTE $00
   607 BE96 00						.BYTE $00
   607 BE97 00						.BYTE $00
   607 BE98 00						.BYTE $00
   607 BE99 00						.BYTE $00
   607 BE9A 00						.BYTE $00
   607 BE9B 00						.BYTE $00
   607 BE9C 00						.BYTE $00
   607 BE9D 00						.BYTE $00
   607 BE9E 00						.BYTE $00
   607 BE9F 00						.BYTE $00
   607 BEA0 00						.BYTE $00
   607 BEA1 00						.BYTE $00
   607 BEA2 00						.BYTE $00
   607 BEA3 00						.BYTE $00
   607 BEA4 00						.BYTE $00
   607 BEA5 00						.BYTE $00
   607 BEA6 00						.BYTE $00
   607 BEA7 00						.BYTE $00
   607 BEA8 00						.BYTE $00
   607 BEA9 00						.BYTE $00
   607 BEAA 00						.BYTE $00
   607 BEAB 00						.BYTE $00
   607 BEAC 00						.BYTE $00
   607 BEAD 00						.BYTE $00
   607 BEAE 00						.BYTE $00
   607 BEAF 00						.BYTE $00
   607 BEB0 00						.BYTE $00
   607 BEB1 00						.BYTE $00
   607 BEB2 00						.BYTE $00
   607 BEB3 00						.BYTE $00
   607 BEB4 00						.BYTE $00
   607 BEB5 00						.BYTE $00
   607 BEB6 00						.BYTE $00
   607 BEB7 00						.BYTE $00
   607 BEB8 00						.BYTE $00
   607 BEB9 00						.BYTE $00
   607 BEBA 00						.BYTE $00
   607 BEBB 00						.BYTE $00
   607 BEBC 00						.BYTE $00
   607 BEBD 00						.BYTE $00
   607 BEBE 00						.BYTE $00
   607 BEBF 00						.BYTE $00
   607 BEC0 00						.BYTE $00
   607 BEC1 00						.BYTE $00
   607 BEC2 00						.BYTE $00
   607 BEC3 00						.BYTE $00
   607 BEC4 00						.BYTE $00
   607 BEC5 00						.BYTE $00
   607 BEC6 00						.BYTE $00
   607 BEC7 00						.BYTE $00
   607 BEC8 00						.BYTE $00
   607 BEC9 00						.BYTE $00
   607 BECA 00						.BYTE $00
   607 BECB 00						.BYTE $00
   607 BECC 00						.BYTE $00
   607 BECD 00						.BYTE $00
   607 BECE 00						.BYTE $00
   607 BECF 00						.BYTE $00
   607 BED0 00						.BYTE $00
   607 BED1 00						.BYTE $00
   607 BED2 00						.BYTE $00
   607 BED3 00						.BYTE $00
   607 BED4 00						.BYTE $00
   607 BED5 00						.BYTE $00
   607 BED6 00						.BYTE $00
   607 BED7 00						.BYTE $00
   607 BED8 00						.BYTE $00
   607 BED9 00						.BYTE $00
   607 BEDA 00						.BYTE $00
   607 BEDB 00						.BYTE $00
   607 BEDC 00						.BYTE $00
   607 BEDD 00						.BYTE $00
   607 BEDE 00						.BYTE $00
   607 BEDF 00						.BYTE $00
   607 BEE0 00						.BYTE $00
   607 BEE1 00						.BYTE $00
   607 BEE2 00						.BYTE $00
   607 BEE3 00						.BYTE $00
   607 BEE4 00						.BYTE $00
   607 BEE5 00						.BYTE $00
   607 BEE6 00						.BYTE $00
   607 BEE7 00						.BYTE $00
   607 BEE8 00						.BYTE $00
   607 BEE9 00						.BYTE $00
   607 BEEA 00						.BYTE $00
   607 BEEB 00						.BYTE $00
   607 BEEC 00						.BYTE $00
   607 BEED 00						.BYTE $00
   607 BEEE 00						.BYTE $00
   607 BEEF 00						.BYTE $00
   607 BEF0 00						.BYTE $00
   607 BEF1 00						.BYTE $00
   607 BEF2 00						.BYTE $00
   607 BEF3 00						.BYTE $00
   607 BEF4 00						.BYTE $00
   607 BEF5 00						.BYTE $00
   607 BEF6 00						.BYTE $00
   607 BEF7 00						.BYTE $00
   607 BEF8 00						.BYTE $00
   607 BEF9 00						.BYTE $00
   607 BEFA 00						.BYTE $00
   607 BEFB 00						.BYTE $00
   607 BEFC 00						.BYTE $00
   607 BEFD 00						.BYTE $00
   607 BEFE 00						.BYTE $00
   607 BEFF 00						.BYTE $00
   607 BF00 00						.BYTE $00
   607 BF01 00						.BYTE $00
   607 BF02 00						.BYTE $00
   607 BF03 00						.BYTE $00
   607 BF04 00						.BYTE $00
   607 BF05 00						.BYTE $00
   607 BF06 00						.BYTE $00
   607 BF07 00						.BYTE $00
   607 BF08 00						.BYTE $00
   607 BF09 00						.BYTE $00
   607 BF0A 00						.BYTE $00
   607 BF0B 00						.BYTE $00
   607 BF0C 00						.BYTE $00
   607 BF0D 00						.BYTE $00
   607 BF0E 00						.BYTE $00
   607 BF0F 00						.BYTE $00
   607 BF10 00						.BYTE $00
   607 BF11 00						.BYTE $00
   607 BF12 00						.BYTE $00
   607 BF13 00						.BYTE $00
   607 BF14 00						.BYTE $00
   607 BF15 00						.BYTE $00
   607 BF16 00						.BYTE $00
   607 BF17 00						.BYTE $00
   607 BF18 00						.BYTE $00
   607 BF19 00						.BYTE $00
   607 BF1A 00						.BYTE $00
   607 BF1B 00						.BYTE $00
   607 BF1C 00						.BYTE $00
   607 BF1D 00						.BYTE $00
   607 BF1E 00						.BYTE $00
   607 BF1F 00						.BYTE $00
   607 BF20 00						.BYTE $00
   607 BF21 00						.BYTE $00
   607 BF22 00						.BYTE $00
   607 BF23 00						.BYTE $00
   607 BF24 00						.BYTE $00
   607 BF25 00						.BYTE $00
   607 BF26 00						.BYTE $00
   607 BF27 00						.BYTE $00
   607 BF28 00						.BYTE $00
   607 BF29 00						.BYTE $00
   607 BF2A 00						.BYTE $00
   607 BF2B 00						.BYTE $00
   607 BF2C 00						.BYTE $00
   607 BF2D 00						.BYTE $00
   607 BF2E 00						.BYTE $00
   607 BF2F 00						.BYTE $00
   607 BF30 00						.BYTE $00
   607 BF31 00						.BYTE $00
   607 BF32 00						.BYTE $00
   607 BF33 00						.BYTE $00
   607 BF34 00						.BYTE $00
   607 BF35 00						.BYTE $00
   607 BF36 00						.BYTE $00
   607 BF37 00						.BYTE $00
   607 BF38 00						.BYTE $00
   607 BF39 00						.BYTE $00
   607 BF3A 00						.BYTE $00
   607 BF3B 00						.BYTE $00
   607 BF3C 00						.BYTE $00
   607 BF3D 00						.BYTE $00
   607 BF3E 00						.BYTE $00
   607 BF3F 00						.BYTE $00
   607 BF40 00						.BYTE $00
   607 BF41 00						.BYTE $00
   607 BF42 00						.BYTE $00
   607 BF43 00						.BYTE $00
   607 BF44 00						.BYTE $00
   607 BF45 00						.BYTE $00
   607 BF46 00						.BYTE $00
   607 BF47 00						.BYTE $00
   607 BF48 00						.BYTE $00
   607 BF49 00						.BYTE $00
   607 BF4A 00						.BYTE $00
   607 BF4B 00						.BYTE $00
   607 BF4C 00						.BYTE $00
   607 BF4D 00						.BYTE $00
   607 BF4E 00						.BYTE $00
   607 BF4F 00						.BYTE $00
   607 BF50 00						.BYTE $00
   607 BF51 00						.BYTE $00
   607 BF52 00						.BYTE $00
   607 BF53 00						.BYTE $00
   607 BF54 00						.BYTE $00
   607 BF55 00						.BYTE $00
   607 BF56 00						.BYTE $00
   607 BF57 00						.BYTE $00
   607 BF58 00						.BYTE $00
   607 BF59 00						.BYTE $00
   607 BF5A 00						.BYTE $00
   607 BF5B 00						.BYTE $00
   607 BF5C 00						.BYTE $00
   607 BF5D 00						.BYTE $00
   607 BF5E 00						.BYTE $00
   607 BF5F 00						.BYTE $00
   607 BF60 00						.BYTE $00
   607 BF61 00						.BYTE $00
   607 BF62 00						.BYTE $00
   607 BF63 00						.BYTE $00
   607 BF64 00						.BYTE $00
   607 BF65 00						.BYTE $00
   607 BF66 00						.BYTE $00
   607 BF67 00						.BYTE $00
   607 BF68 00						.BYTE $00
   607 BF69 00						.BYTE $00
   607 BF6A 00						.BYTE $00
   607 BF6B 00						.BYTE $00
   607 BF6C 00						.BYTE $00
   607 BF6D 00						.BYTE $00
   607 BF6E 00						.BYTE $00
   607 BF6F 00						.BYTE $00
   607 BF70 00						.BYTE $00
   607 BF71 00						.BYTE $00
   607 BF72 00						.BYTE $00
   607 BF73 00						.BYTE $00
   607 BF74 00						.BYTE $00
   607 BF75 00						.BYTE $00
   607 BF76 00						.BYTE $00
   607 BF77 00						.BYTE $00
   607 BF78 00						.BYTE $00
   607 BF79 00						.BYTE $00
   607 BF7A 00						.BYTE $00
   607 BF7B 00						.BYTE $00
   607 BF7C 00						.BYTE $00
   607 BF7D 00						.BYTE $00
   607 BF7E 00						.BYTE $00
   607 BF7F 00						.BYTE $00
   607 BF80 00						.BYTE $00
   607 BF81 00						.BYTE $00
   607 BF82 00						.BYTE $00
   607 BF83 00						.BYTE $00
   607 BF84 00						.BYTE $00
   607 BF85 00						.BYTE $00
   607 BF86 00						.BYTE $00
   607 BF87 00						.BYTE $00
   607 BF88 00						.BYTE $00
   607 BF89 00						.BYTE $00
   607 BF8A 00						.BYTE $00
   607 BF8B 00						.BYTE $00
   607 BF8C 00						.BYTE $00
   607 BF8D 00						.BYTE $00
   607 BF8E 00						.BYTE $00
   607 BF8F 00						.BYTE $00
   607 BF90 00						.BYTE $00
   607 BF91 00						.BYTE $00
   607 BF92 00						.BYTE $00
   607 BF93 00						.BYTE $00
   607 BF94 00						.BYTE $00
   607 BF95 00						.BYTE $00
   607 BF96 00						.BYTE $00
   607 BF97 00						.BYTE $00
   607 BF98 00						.BYTE $00
   607 BF99 00						.BYTE $00
   607 BF9A 00						.BYTE $00
   607 BF9B 00						.BYTE $00
   607 BF9C 00						.BYTE $00
   607 BF9D 00						.BYTE $00
   607 BF9E 00						.BYTE $00
   607 BF9F 00						.BYTE $00
   607 BFA0 00						.BYTE $00
   607 BFA1 00						.BYTE $00
   607 BFA2 00						.BYTE $00
   607 BFA3 00						.BYTE $00
   607 BFA4 00						.BYTE $00
   607 BFA5 00						.BYTE $00
   607 BFA6 00						.BYTE $00
   607 BFA7 00						.BYTE $00
   607 BFA8 00						.BYTE $00
   607 BFA9 00						.BYTE $00
   607 BFAA 00						.BYTE $00
   607 BFAB 00						.BYTE $00
   607 BFAC 00						.BYTE $00
   607 BFAD 00						.BYTE $00
   607 BFAE 00						.BYTE $00
   607 BFAF 00						.BYTE $00
   607 BFB0 00						.BYTE $00
   607 BFB1 00						.BYTE $00
   607 BFB2 00						.BYTE $00
   607 BFB3 00						.BYTE $00
   607 BFB4 00						.BYTE $00
   607 BFB5 00						.BYTE $00
   607 BFB6 00						.BYTE $00
   607 BFB7 00						.BYTE $00
   607 BFB8 00						.BYTE $00
   607 BFB9 00						.BYTE $00
   607 BFBA 00						.BYTE $00
   607 BFBB 00						.BYTE $00
   607 BFBC 00						.BYTE $00
   607 BFBD 00						.BYTE $00
   607 BFBE 00						.BYTE $00
   607 BFBF 00						.BYTE $00
   607 BFC0 00						.BYTE $00
   607 BFC1 00						.BYTE $00
   607 BFC2 00						.BYTE $00
   607 BFC3 00						.BYTE $00
   607 BFC4 00						.BYTE $00
   607 BFC5 00						.BYTE $00
   607 BFC6 00						.BYTE $00
   607 BFC7 00						.BYTE $00
   607 BFC8 00						.BYTE $00
   607 BFC9 00						.BYTE $00
   607 BFCA 00						.BYTE $00
   607 BFCB 00						.BYTE $00
   607 BFCC 00						.BYTE $00
   607 BFCD 00						.BYTE $00
   607 BFCE 00						.BYTE $00
   607 BFCF 00						.BYTE $00
   607 BFD0 00						.BYTE $00
   607 BFD1 00						.BYTE $00
   607 BFD2 00						.BYTE $00
   607 BFD3 00						.BYTE $00
   607 BFD4 00						.BYTE $00
   607 BFD5 00						.BYTE $00
   607 BFD6 00						.BYTE $00
   607 BFD7 00						.BYTE $00
   607 BFD8 00						.BYTE $00
   607 BFD9 00						.BYTE $00
   607 BFDA 00						.BYTE $00
   607 BFDB 00						.BYTE $00
   607 BFDC 00						.BYTE $00
   607 BFDD 00						.BYTE $00
   607 BFDE 00						.BYTE $00
   607 BFDF 00						.BYTE $00
   607 BFE0 00						.BYTE $00
   607 BFE1 00						.BYTE $00
   607 BFE2 00						.BYTE $00
   607 BFE3 00						.BYTE $00
   607 BFE4 00						.BYTE $00
   607 BFE5 00						.BYTE $00
   607 BFE6 00						.BYTE $00
   607 BFE7 00						.BYTE $00
   607 BFE8 00						.BYTE $00
   607 BFE9 00						.BYTE $00
   607 BFEA 00						.BYTE $00
   607 BFEB 00						.BYTE $00
   607 BFEC 00						.BYTE $00
   607 BFED 00						.BYTE $00
   607 BFEE 00						.BYTE $00
   607 BFEF 00						.BYTE $00
   607 BFF0 00						.BYTE $00
   607 BFF1 00						.BYTE $00
   607 BFF2 00						.BYTE $00
   607 BFF3 00						.BYTE $00
   607 BFF4 00						.BYTE $00
   607 BFF5 00						.BYTE $00
   607 BFF6 00						.BYTE $00
   607 BFF7 00						.BYTE $00
   607 BFF8 00						.BYTE $00
   607 BFF9 00						.BYTE $00
   607 BFFA 00						.BYTE $00
   607 BFFB 00						.BYTE $00
   607 BFFC 00						.BYTE $00
   607 BFFD 00						.BYTE $00
   607 BFFE 00						.BYTE $00
   607 BFFF 00						.BYTE $00
Source: E:\_8BitProjects\Series\Lessons\Lesson01\Main.Asm
   609 								
   610 C000 61 61 61 61 61 61 + 		:LEVEL_CHAR_SIZE_X 		.byte $61		; extra line to help with hazards and ladders and etc....
   611
   612 				;*****	Run System
   613 				;
   614 02E0-02E1> 00 20				run Main				
